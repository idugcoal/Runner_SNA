(function(global) {

global.__DEV__ = true;

global.__BUNDLE_START_TIME__ = Date.now();
})(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : this);
(function(global) {

'use strict';

global.require = _require;
global.__d = define;

var modules = Object.create(null);
if (__DEV__) {
  var verboseNamesToModuleIds = Object.create(null);
}

function define(factory, moduleId, dependencyMap) {
  if (moduleId in modules) {
    return;
  }
  modules[moduleId] = {
    dependencyMap: dependencyMap,
    exports: undefined,
    factory: factory,
    hasError: false,
    isInitialized: false
  };
  if (__DEV__) {
    modules[moduleId].hot = createHotReloadingObject();

    var _verboseName = arguments[3];
    if (_verboseName) {
      modules[moduleId].verboseName = _verboseName;
      verboseNamesToModuleIds[_verboseName] = moduleId;
    }
  }
}

function _require(moduleId) {
  if (__DEV__ && typeof moduleId === 'string') {
    var _verboseName2 = moduleId;
    moduleId = verboseNamesToModuleIds[moduleId];
    if (moduleId == null) {
      throw new Error('Unknown named module: \'' + _verboseName2 + '\'');
    } else {
      console.warn('Requiring module \'' + _verboseName2 + '\' by name is only supported for ' + 'debugging purposes and will BREAK IN PRODUCTION!');
    }
  }

  var moduleIdReallyIsNumber = moduleId;
  var module = modules[moduleIdReallyIsNumber];
  return module && module.isInitialized ? module.exports : guardedLoadModule(moduleIdReallyIsNumber, module);
}

var inGuard = false;
function guardedLoadModule(moduleId, module) {
  if (!inGuard && global.ErrorUtils) {
    inGuard = true;
    var returnValue = void 0;
    try {
      returnValue = loadModuleImplementation(moduleId, module);
    } catch (e) {
      global.ErrorUtils.reportFatalError(e);
    }
    inGuard = false;
    return returnValue;
  } else {
    return loadModuleImplementation(moduleId, module);
  }
}

function loadModuleImplementation(moduleId, module) {
  var nativeRequire = global.nativeRequire;
  if (!module && nativeRequire) {
    nativeRequire(moduleId);
    module = modules[moduleId];
  }

  if (!module) {
    throw unknownModuleError(moduleId);
  }

  if (module.hasError) {
    throw moduleThrewError(moduleId);
  }

  if (__DEV__) {
    var Systrace = _require.Systrace;
  }

  module.isInitialized = true;
  var exports = module.exports = {};
  var _module = module,
      factory = _module.factory,
      dependencyMap = _module.dependencyMap;

  try {
    if (__DEV__) {
      Systrace.beginEvent('JS_require_' + (module.verboseName || moduleId));
    }

    var _moduleObject = { exports: exports };
    if (__DEV__ && module.hot) {
      _moduleObject.hot = module.hot;
    }

    factory(global, _require, _moduleObject, exports, dependencyMap);

    if (!__DEV__) {
      module.factory = undefined;
    }

    if (__DEV__) {
      Systrace.endEvent();
    }
    return module.exports = _moduleObject.exports;
  } catch (e) {
    module.hasError = true;
    module.isInitialized = false;
    module.exports = undefined;
    throw e;
  }
}

function unknownModuleError(id) {
  var message = 'Requiring unknown module "' + id + '".';
  if (__DEV__) {
    message += 'If you are sure the module is there, try restarting the packager or running "npm install".';
  }
  return Error(message);
}

function moduleThrewError(id) {
  return Error('Requiring module "' + id + '", which threw an exception.');
}

if (__DEV__) {
  _require.Systrace = { beginEvent: function beginEvent() {}, endEvent: function endEvent() {} };

  var createHotReloadingObject = function createHotReloadingObject() {
    var hot = {
      acceptCallback: null,
      accept: function accept(callback) {
        hot.acceptCallback = callback;
      }
    };
    return hot;
  };

  var acceptAll = function acceptAll(dependentModules, inverseDependencies) {
    if (!dependentModules || dependentModules.length === 0) {
      return true;
    }

    var notAccepted = dependentModules.filter(function (module) {
      return !_accept(module, undefined, inverseDependencies);
    });

    var parents = [];
    for (var i = 0; i < notAccepted.length; i++) {
      if (inverseDependencies[notAccepted[i]].length === 0) {
        return false;
      }

      parents.push.apply(parents, babelHelpers.toConsumableArray(inverseDependencies[notAccepted[i]]));
    }

    return acceptAll(parents, inverseDependencies);
  };

  var _accept = function _accept(id, factory, inverseDependencies) {
    var mod = modules[id];

    if (!mod && factory) {
      define(factory, id);
      return true;
    }

    var hot = mod.hot;

    if (!hot) {
      console.warn('Cannot accept module because Hot Module Replacement ' + 'API was not installed.');
      return false;
    }

    if (factory) {
      mod.factory = factory;
    }
    mod.hasError = false;
    mod.isInitialized = false;
    _require(id);

    if (hot.acceptCallback) {
      hot.acceptCallback();
      return true;
    } else {
      if (!inverseDependencies) {
        throw new Error('Undefined `inverseDependencies`');
      }

      return acceptAll(inverseDependencies[id], inverseDependencies);
    }
  };

  global.__accept = _accept;
}
})(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : this);
(function(global) {

Object.assign = function (target, sources) {
  if (__DEV__) {
    if (target == null) {
      throw new TypeError('Object.assign target cannot be null or undefined');
    }
    if (typeof target !== 'object' && typeof target !== 'function') {
      throw new TypeError('In this environment the target of assign MUST be an object.' + 'This error is a performance optimization and not spec compliant.');
    }
  }

  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
    var nextSource = arguments[nextIndex];
    if (nextSource == null) {
      continue;
    }

    if (__DEV__) {
      if (typeof nextSource !== 'object' && typeof nextSource !== 'function') {
        throw new TypeError('In this environment the sources for assign MUST be an object.' + 'This error is a performance optimization and not spec compliant.');
      }
    }

    for (var key in nextSource) {
      if (__DEV__) {
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        if (!hasOwnProperty.call(nextSource, key)) {
          throw new TypeError('One of the sources for assign has an enumerable key on the ' + 'prototype chain. Are you trying to assign a prototype property? ' + 'We don\'t allow it, as this is an edge case that we do not support. ' + 'This error is a performance optimization and not spec compliant.');
        }
      }
      target[key] = nextSource[key];
    }
  }

  return target;
};
})(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : this);
(function(global) {
var inspect = function () {

  function inspect(obj, opts) {
    var ctx = {
      seen: [],
      stylize: stylizeNoColor
    };
    return formatValue(ctx, obj, opts.depth);
  }

  function stylizeNoColor(str, styleType) {
    return str;
  }

  function arrayToHash(array) {
    var hash = {};

    array.forEach(function (val, idx) {
      hash[val] = true;
    });

    return hash;
  }

  function formatValue(ctx, value, recurseTimes) {
    var primitive = formatPrimitive(ctx, value);
    if (primitive) {
      return primitive;
    }

    var keys = Object.keys(value);
    var visibleKeys = arrayToHash(keys);

    if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
      return formatError(value);
    }

    if (keys.length === 0) {
      if (isFunction(value)) {
        var name = value.name ? ': ' + value.name : '';
        return ctx.stylize('[Function' + name + ']', 'special');
      }
      if (isRegExp(value)) {
        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
      }
      if (isDate(value)) {
        return ctx.stylize(Date.prototype.toString.call(value), 'date');
      }
      if (isError(value)) {
        return formatError(value);
      }
    }

    var base = '',
        array = false,
        braces = ['{', '}'];

    if (isArray(value)) {
      array = true;
      braces = ['[', ']'];
    }

    if (isFunction(value)) {
      var n = value.name ? ': ' + value.name : '';
      base = ' [Function' + n + ']';
    }

    if (isRegExp(value)) {
      base = ' ' + RegExp.prototype.toString.call(value);
    }

    if (isDate(value)) {
      base = ' ' + Date.prototype.toUTCString.call(value);
    }

    if (isError(value)) {
      base = ' ' + formatError(value);
    }

    if (keys.length === 0 && (!array || value.length == 0)) {
      return braces[0] + base + braces[1];
    }

    if (recurseTimes < 0) {
      if (isRegExp(value)) {
        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
      } else {
        return ctx.stylize('[Object]', 'special');
      }
    }

    ctx.seen.push(value);

    var output;
    if (array) {
      output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
    } else {
      output = keys.map(function (key) {
        return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
      });
    }

    ctx.seen.pop();

    return reduceToSingleString(output, base, braces);
  }

  function formatPrimitive(ctx, value) {
    if (isUndefined(value)) return ctx.stylize('undefined', 'undefined');
    if (isString(value)) {
      var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + '\'';
      return ctx.stylize(simple, 'string');
    }
    if (isNumber(value)) return ctx.stylize('' + value, 'number');
    if (isBoolean(value)) return ctx.stylize('' + value, 'boolean');

    if (isNull(value)) return ctx.stylize('null', 'null');
  }

  function formatError(value) {
    return '[' + Error.prototype.toString.call(value) + ']';
  }

  function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
    var output = [];
    for (var i = 0, l = value.length; i < l; ++i) {
      if (hasOwnProperty(value, String(i))) {
        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
      } else {
        output.push('');
      }
    }
    keys.forEach(function (key) {
      if (!key.match(/^\d+$/)) {
        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
      }
    });
    return output;
  }

  function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
    var name, str, desc;
    desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
    if (desc.get) {
      if (desc.set) {
        str = ctx.stylize('[Getter/Setter]', 'special');
      } else {
        str = ctx.stylize('[Getter]', 'special');
      }
    } else {
      if (desc.set) {
        str = ctx.stylize('[Setter]', 'special');
      }
    }
    if (!hasOwnProperty(visibleKeys, key)) {
      name = '[' + key + ']';
    }
    if (!str) {
      if (ctx.seen.indexOf(desc.value) < 0) {
        if (isNull(recurseTimes)) {
          str = formatValue(ctx, desc.value, null);
        } else {
          str = formatValue(ctx, desc.value, recurseTimes - 1);
        }
        if (str.indexOf('\n') > -1) {
          if (array) {
            str = str.split('\n').map(function (line) {
              return '  ' + line;
            }).join('\n').substr(2);
          } else {
            str = '\n' + str.split('\n').map(function (line) {
              return '   ' + line;
            }).join('\n');
          }
        }
      } else {
        str = ctx.stylize('[Circular]', 'special');
      }
    }
    if (isUndefined(name)) {
      if (array && key.match(/^\d+$/)) {
        return str;
      }
      name = JSON.stringify('' + key);
      if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
        name = name.substr(1, name.length - 2);
        name = ctx.stylize(name, 'name');
      } else {
        name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
        name = ctx.stylize(name, 'string');
      }
    }

    return name + ': ' + str;
  }

  function reduceToSingleString(output, base, braces) {
    var numLinesEst = 0;
    var length = output.reduce(function (prev, cur) {
      numLinesEst++;
      if (cur.indexOf('\n') >= 0) numLinesEst++;
      return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
    }, 0);

    if (length > 60) {
      return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
    }

    return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
  }

  function isArray(ar) {
    return Array.isArray(ar);
  }

  function isBoolean(arg) {
    return typeof arg === 'boolean';
  }

  function isNull(arg) {
    return arg === null;
  }

  function isNullOrUndefined(arg) {
    return arg == null;
  }

  function isNumber(arg) {
    return typeof arg === 'number';
  }

  function isString(arg) {
    return typeof arg === 'string';
  }

  function isSymbol(arg) {
    return typeof arg === 'symbol';
  }

  function isUndefined(arg) {
    return arg === void 0;
  }

  function isRegExp(re) {
    return isObject(re) && objectToString(re) === '[object RegExp]';
  }

  function isObject(arg) {
    return typeof arg === 'object' && arg !== null;
  }

  function isDate(d) {
    return isObject(d) && objectToString(d) === '[object Date]';
  }

  function isError(e) {
    return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
  }

  function isFunction(arg) {
    return typeof arg === 'function';
  }

  function isPrimitive(arg) {
    return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || typeof arg === 'symbol' || typeof arg === 'undefined';
  }

  function objectToString(o) {
    return Object.prototype.toString.call(o);
  }

  function hasOwnProperty(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
  }

  return inspect;
}();

var OBJECT_COLUMN_NAME = '(index)';
var LOG_LEVELS = {
  trace: 0,
  info: 1,
  warn: 2,
  error: 3
};
var INSPECTOR_LEVELS = [];
INSPECTOR_LEVELS[LOG_LEVELS.trace] = 'debug';
INSPECTOR_LEVELS[LOG_LEVELS.info] = 'log';
INSPECTOR_LEVELS[LOG_LEVELS.warn] = 'warning';
INSPECTOR_LEVELS[LOG_LEVELS.error] = 'error';

var INSPECTOR_FRAMES_TO_SKIP = __DEV__ ? 2 : 1;

function setupConsole(global) {
  if (!global.nativeLoggingHook) {
    return;
  }

  function getNativeLogFunction(level) {
    return function () {
      var str = void 0;
      if (arguments.length === 1 && typeof arguments[0] === 'string') {
        str = arguments[0];
      } else {
        str = Array.prototype.map.call(arguments, function (arg) {
          return inspect(arg, { depth: 10 });
        }).join(', ');
      }

      var logLevel = level;
      if (str.slice(0, 9) === 'Warning: ' && logLevel >= LOG_LEVELS.error) {
        logLevel = LOG_LEVELS.warn;
      }
      if (global.__inspectorLog) {
        global.__inspectorLog(INSPECTOR_LEVELS[logLevel], str, [].slice.call(arguments), INSPECTOR_FRAMES_TO_SKIP);
      }
      global.nativeLoggingHook(str, logLevel);
    };
  }

  function repeat(element, n) {
    return Array.apply(null, Array(n)).map(function () {
      return element;
    });
  };

  function consoleTablePolyfill(rows) {
    if (!Array.isArray(rows)) {
      var data = rows;
      rows = [];
      for (var key in data) {
        if (data.hasOwnProperty(key)) {
          var row = data[key];
          row[OBJECT_COLUMN_NAME] = key;
          rows.push(row);
        }
      }
    }
    if (rows.length === 0) {
      global.nativeLoggingHook('', LOG_LEVELS.info);
      return;
    }

    var columns = Object.keys(rows[0]).sort();
    var stringRows = [];
    var columnWidths = [];

    columns.forEach(function (k, i) {
      columnWidths[i] = k.length;
      for (var j = 0; j < rows.length; j++) {
        var cellStr = (rows[j][k] || '?').toString();
        stringRows[j] = stringRows[j] || [];
        stringRows[j][i] = cellStr;
        columnWidths[i] = Math.max(columnWidths[i], cellStr.length);
      }
    });

    function joinRow(row, space) {
      var cells = row.map(function (cell, i) {
        var extraSpaces = repeat(' ', columnWidths[i] - cell.length).join('');
        return cell + extraSpaces;
      });
      space = space || ' ';
      return cells.join(space + '|' + space);
    };

    var separators = columnWidths.map(function (columnWidth) {
      return repeat('-', columnWidth).join('');
    });
    var separatorRow = joinRow(separators, '-');
    var header = joinRow(columns);
    var table = [header, separatorRow];

    for (var i = 0; i < rows.length; i++) {
      table.push(joinRow(stringRows[i]));
    }

    global.nativeLoggingHook('\n' + table.join('\n'), LOG_LEVELS.info);
  }

  var originalConsole = global.console;
  var descriptor = Object.getOwnPropertyDescriptor(global, 'console');
  if (descriptor) {
    Object.defineProperty(global, 'originalConsole', descriptor);
  }

  global.console = {
    error: getNativeLogFunction(LOG_LEVELS.error),
    info: getNativeLogFunction(LOG_LEVELS.info),
    log: getNativeLogFunction(LOG_LEVELS.info),
    warn: getNativeLogFunction(LOG_LEVELS.warn),
    trace: getNativeLogFunction(LOG_LEVELS.trace),
    debug: getNativeLogFunction(LOG_LEVELS.trace),
    table: consoleTablePolyfill
  };

  if (__DEV__ && originalConsole) {
    Object.keys(console).forEach(function (methodName) {
      var reactNativeMethod = console[methodName];
      if (originalConsole[methodName]) {
        console[methodName] = function () {
          originalConsole[methodName].apply(originalConsole, arguments);
          reactNativeMethod.apply(console, arguments);
        };
      }
    });
  }
}

if (typeof module !== 'undefined') {
  module.exports = setupConsole;
} else {
  setupConsole(global);
}
})(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : this);
(function(global) {

var _inGuard = 0;

var _globalHandler = function onError(e) {
  throw e;
};

var ErrorUtils = {
  setGlobalHandler: function setGlobalHandler(fun) {
    _globalHandler = fun;
  },
  getGlobalHandler: function getGlobalHandler() {
    return _globalHandler;
  },
  reportError: function reportError(error) {
    _globalHandler && _globalHandler(error);
  },
  reportFatalError: function reportFatalError(error) {
    _globalHandler && _globalHandler(error, true);
  },
  applyWithGuard: function applyWithGuard(fun, context, args) {
    try {
      _inGuard++;
      return fun.apply(context, args);
    } catch (e) {
      ErrorUtils.reportError(e);
    } finally {
      _inGuard--;
    }
  },
  applyWithGuardIfNeeded: function applyWithGuardIfNeeded(fun, context, args) {
    if (ErrorUtils.inGuard()) {
      return fun.apply(context, args);
    } else {
      ErrorUtils.applyWithGuard(fun, context, args);
    }
  },
  inGuard: function inGuard() {
    return _inGuard;
  },
  guard: function guard(fun, name, context) {
    if (typeof fun !== 'function') {
      console.warn('A function must be passed to ErrorUtils.guard, got ', fun);
      return null;
    }
    name = name || fun.name || '<generated guard>';
    function guarded() {
      return ErrorUtils.applyWithGuard(fun, context || this, arguments, null, name);
    }

    return guarded;
  }
};

global.ErrorUtils = ErrorUtils;
})(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : this);
(function(global) {

if (Number.EPSILON === undefined) {
  Object.defineProperty(Number, 'EPSILON', {
    value: Math.pow(2, -52)
  });
}
if (Number.MAX_SAFE_INTEGER === undefined) {
  Object.defineProperty(Number, 'MAX_SAFE_INTEGER', {
    value: Math.pow(2, 53) - 1
  });
}
if (Number.MIN_SAFE_INTEGER === undefined) {
  Object.defineProperty(Number, 'MIN_SAFE_INTEGER', {
    value: -(Math.pow(2, 53) - 1)
  });
}
if (!Number.isNaN) {
  var globalIsNaN = global.isNaN;
  Object.defineProperty(Number, 'isNaN', {
    configurable: true,
    enumerable: false,
    value: function isNaN(value) {
      return typeof value === 'number' && globalIsNaN(value);
    },
    writable: true
  });
}
})(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : this);
(function(global) {

if (!String.prototype.startsWith) {
  String.prototype.startsWith = function (search) {
    'use strict';

    if (this == null) {
      throw TypeError();
    }
    var string = String(this);
    var pos = arguments.length > 1 ? Number(arguments[1]) || 0 : 0;
    var start = Math.min(Math.max(pos, 0), string.length);
    return string.indexOf(String(search), pos) === start;
  };
}

if (!String.prototype.endsWith) {
  String.prototype.endsWith = function (search) {
    'use strict';

    if (this == null) {
      throw TypeError();
    }
    var string = String(this);
    var stringLength = string.length;
    var searchString = String(search);
    var pos = arguments.length > 1 ? Number(arguments[1]) || 0 : stringLength;
    var end = Math.min(Math.max(pos, 0), stringLength);
    var start = end - searchString.length;
    if (start < 0) {
      return false;
    }
    return string.lastIndexOf(searchString, start) === start;
  };
}

if (!String.prototype.repeat) {
  String.prototype.repeat = function (count) {
    'use strict';

    if (this == null) {
      throw TypeError();
    }
    var string = String(this);
    count = Number(count) || 0;
    if (count < 0 || count === Infinity) {
      throw RangeError();
    }
    if (count === 1) {
      return string;
    }
    var result = '';
    while (count) {
      if (count & 1) {
        result += string;
      }
      if (count >>= 1) {
        string += string;
      }
    }
    return result;
  };
}

if (!String.prototype.includes) {
  String.prototype.includes = function (search, start) {
    'use strict';

    if (typeof start !== 'number') {
      start = 0;
    }

    if (start + search.length > this.length) {
      return false;
    } else {
      return this.indexOf(search, start) !== -1;
    }
  };
}
})(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : this);
(function(global) {
function findIndex(predicate, context) {
  if (this == null) {
    throw new TypeError('Array.prototype.findIndex called on null or undefined');
  }
  if (typeof predicate !== 'function') {
    throw new TypeError('predicate must be a function');
  }
  var list = Object(this);
  var length = list.length >>> 0;
  for (var i = 0; i < length; i++) {
    if (predicate.call(context, list[i], i, list)) {
      return i;
    }
  }
  return -1;
}

if (!Array.prototype.findIndex) {
  Object.defineProperty(Array.prototype, 'findIndex', {
    enumerable: false,
    writable: true,
    configurable: true,
    value: findIndex
  });
}

if (!Array.prototype.find) {
  Object.defineProperty(Array.prototype, 'find', {
    enumerable: false,
    writable: true,
    configurable: true,
    value: function value(predicate, context) {
      if (this == null) {
        throw new TypeError('Array.prototype.find called on null or undefined');
      }
      var index = findIndex.call(this, predicate, context);
      return index === -1 ? undefined : this[index];
    }
  });
}

if (!Array.prototype.includes) {
  Object.defineProperty(Array.prototype, 'includes', {
    enumerable: false,
    writable: true,
    configurable: true,
    value: function value(searchElement) {
      var O = Object(this);
      var len = parseInt(O.length) || 0;
      if (len === 0) {
        return false;
      }
      var n = parseInt(arguments[1]) || 0;
      var k;
      if (n >= 0) {
        k = n;
      } else {
        k = len + n;
        if (k < 0) {
          k = 0;
        }
      }
      var currentElement;
      while (k < len) {
        currentElement = O[k];
        if (searchElement === currentElement || searchElement !== searchElement && currentElement !== currentElement) {
          return true;
        }
        k++;
      }
      return false;
    }
  });
}
})(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : this);
(function(global) {
if (!Array.from) {
  Array.from = function (arrayLike) {
    if (arrayLike == null) {
      throw new TypeError('Object is null or undefined');
    }

    var mapFn = arguments[1];
    var thisArg = arguments[2];

    var C = this;
    var items = Object(arrayLike);
    var symbolIterator = typeof Symbol === 'function' ? typeof Symbol === 'function' ? Symbol.iterator : '@@iterator' : '@@iterator';
    var mapping = typeof mapFn === 'function';
    var usingIterator = typeof items[symbolIterator] === 'function';
    var key = 0;
    var ret;
    var value;

    if (usingIterator) {
      ret = typeof C === 'function' ? new C() : [];
      var it = items[symbolIterator]();
      var next;

      while (!(next = it.next()).done) {
        value = next.value;

        if (mapping) {
          value = mapFn.call(thisArg, value, key);
        }

        ret[key] = value;
        key += 1;
      }

      ret.length = key;
      return ret;
    }

    var len = items.length;
    if (isNaN(len) || len < 0) {
      len = 0;
    }

    ret = typeof C === 'function' ? new C(len) : new Array(len);

    while (key < len) {
      value = items[key];

      if (mapping) {
        value = mapFn.call(thisArg, value, key);
      }

      ret[key] = value;

      key += 1;
    }

    ret.length = key;
    return ret;
  };
}
})(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : this);
(function(global) {

(function () {
  'use strict';

  var hasOwnProperty = Object.prototype.hasOwnProperty;

  if (typeof Object.entries !== 'function') {
    Object.entries = function (object) {
      if (object == null) {
        throw new TypeError('Object.entries called on non-object');
      }

      var entries = [];
      for (var key in object) {
        if (hasOwnProperty.call(object, key)) {
          entries.push([key, object[key]]);
        }
      }
      return entries;
    };
  }

  if (typeof Object.values !== 'function') {
    Object.values = function (object) {
      if (object == null) {
        throw new TypeError('Object.values called on non-object');
      }

      var values = [];
      for (var key in object) {
        if (hasOwnProperty.call(object, key)) {
          values.push(object[key]);
        }
      }
      return values;
    };
  }
})();
})(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : this);
(function(global) {

var babelHelpers = global.babelHelpers = {};

babelHelpers.typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj;
};

babelHelpers.createRawReactElement = function () {
  var REACT_ELEMENT_TYPE = typeof Symbol === "function" && (typeof Symbol === "function" ? Symbol.for : "@@for") && (typeof Symbol === "function" ? Symbol.for : "@@for")("react.element") || 0xeac7;
  return function createRawReactElement(type, key, props) {
    return {
      $$typeof: REACT_ELEMENT_TYPE,
      type: type,
      key: key,
      ref: null,
      props: props,
      _owner: null
    };
  };
}();

babelHelpers.classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

babelHelpers.createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

babelHelpers.defineProperty = function (obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
};

babelHelpers._extends = babelHelpers.extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

babelHelpers.get = function get(object, property, receiver) {
  if (object === null) object = Function.prototype;
  var desc = Object.getOwnPropertyDescriptor(object, property);

  if (desc === undefined) {
    var parent = Object.getPrototypeOf(object);

    if (parent === null) {
      return undefined;
    } else {
      return get(parent, property, receiver);
    }
  } else if ("value" in desc) {
    return desc.value;
  } else {
    var getter = desc.get;

    if (getter === undefined) {
      return undefined;
    }

    return getter.call(receiver);
  }
};

babelHelpers.inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};

babelHelpers.interopRequireDefault = function (obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
};

babelHelpers.interopRequireWildcard = function (obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};

    if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }

    newObj.default = obj;
    return newObj;
  }
};

babelHelpers.objectWithoutProperties = function (obj, keys) {
  var target = {};

  for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
    target[i] = obj[i];
  }

  return target;
};

babelHelpers.possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

babelHelpers.slicedToArray = function () {
  function sliceIterator(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if ((typeof Symbol === "function" ? Symbol.iterator : "@@iterator") in Object(arr)) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();

babelHelpers.taggedTemplateLiteral = function (strings, raw) {
  return Object.freeze(Object.defineProperties(strings, {
    raw: {
      value: Object.freeze(raw)
    }
  }));
};

babelHelpers.toArray = function (arr) {
  return Array.isArray(arr) ? arr : Array.from(arr);
};

babelHelpers.toConsumableArray = function (arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }return arr2;
  } else {
    return Array.from(arr);
  }
};
})(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : this);
__d(/* Runner_SNA/index.android.js */function(global, require, module, exports) {var _reactNative = require(12            ); // 12 = react-native

var _App = require(401        ); // 401 = ./src/App

var _App2 = babelHelpers.interopRequireDefault(_App);

_reactNative.AppRegistry.registerComponent('Runner_SNA', function () {
  return _App2.default;
});
}, 0, null, "Runner_SNA/index.android.js");
__d(/* react-native/Libraries/react-native/react-native.js */function(global, require, module, exports) {
'use strict';

var warning = require(13                ); // 13 = fbjs/lib/warning

if (__DEV__) {
  var warningDedupe = {};
  var addonWarn = function addonWarn(prevName, newPackageName) {
    warning(warningDedupe[prevName], 'React.addons.' + prevName + ' is deprecated. Please import the "' + newPackageName + '" package instead.');
    warningDedupe[prevName] = true;
  };
}

var ReactNative = {
  get ActivityIndicator() {
    return require(15                 ); // 15 = ActivityIndicator
  },
  get ART() {
    return require(176             ); // 176 = ReactNativeART
  },
  get Button() {
    return require(182     ); // 182 = Button
  },
  get DatePickerIOS() {
    return require(270            ); // 270 = DatePickerIOS
  },
  get DrawerLayoutAndroid() {
    return require(271                  ); // 271 = DrawerLayoutAndroid
  },
  get Image() {
    return require(263    ); // 263 = Image
  },
  get ImageEditor() {
    return require(273          ); // 273 = ImageEditor
  },
  get ImageStore() {
    return require(274         ); // 274 = ImageStore
  },
  get KeyboardAvoidingView() {
    return require(275                   ); // 275 = KeyboardAvoidingView
  },
  get ListView() {
    return require(277       ); // 277 = ListView
  },
  get MapView() {
    return require(283      ); // 283 = MapView
  },
  get Modal() {
    return require(284    ); // 284 = Modal
  },
  get Navigator() {
    return require(307        ); // 307 = Navigator
  },
  get NavigatorIOS() {
    return require(325           ); // 325 = NavigatorIOS
  },
  get Picker() {
    return require(326     ); // 326 = Picker
  },
  get PickerIOS() {
    return require(327        ); // 327 = PickerIOS
  },
  get ProgressBarAndroid() {
    return require(329                 ); // 329 = ProgressBarAndroid
  },
  get ProgressViewIOS() {
    return require(330              ); // 330 = ProgressViewIOS
  },
  get ScrollView() {
    return require(265         ); // 265 = ScrollView
  },
  get SegmentedControlIOS() {
    return require(331                  ); // 331 = SegmentedControlIOS
  },
  get Slider() {
    return require(332     ); // 332 = Slider
  },
  get SnapshotViewIOS() {
    return require(333              ); // 333 = SnapshotViewIOS
  },
  get Switch() {
    return require(334     ); // 334 = Switch
  },
  get RefreshControl() {
    return require(335             ); // 335 = RefreshControl
  },
  get StatusBar() {
    return require(272        ); // 272 = StatusBar
  },
  get SwipeableListView() {
    return require(336                ); // 336 = SwipeableListView
  },
  get TabBarIOS() {
    return require(339        ); // 339 = TabBarIOS
  },
  get Text() {
    return require(183   ); // 183 = Text
  },
  get TextInput() {
    return require(340        ); // 340 = TextInput
  },
  get ToastAndroid() {
    return require(71            ); // 71 = ToastAndroid
  },
  get ToolbarAndroid() {
    return require(347             ); // 347 = ToolbarAndroid
  },
  get Touchable() {
    return require(184        ); // 184 = Touchable
  },
  get TouchableHighlight() {
    return require(296                 ); // 296 = TouchableHighlight
  },
  get TouchableNativeFeedback() {
    return require(190                      ); // 190 = TouchableNativeFeedback
  },
  get TouchableOpacity() {
    return require(250               ); // 250 = TouchableOpacity
  },
  get TouchableWithoutFeedback() {
    return require(247                       ); // 247 = TouchableWithoutFeedback
  },
  get View() {
    return require(119   ); // 119 = View
  },
  get ViewPagerAndroid() {
    return require(348               ); // 348 = ViewPagerAndroid
  },
  get WebView() {
    return require(349      ); // 349 = WebView
  },

  get ActionSheetIOS() {
    return require(350             ); // 350 = ActionSheetIOS
  },
  get AdSupportIOS() {
    return require(351           ); // 351 = AdSupportIOS
  },
  get Alert() {
    return require(200    ); // 200 = Alert
  },
  get AlertIOS() {
    return require(201       ); // 201 = AlertIOS
  },
  get Animated() {
    return require(251       ); // 251 = Animated
  },
  get AppRegistry() {
    return require(352          ); // 352 = AppRegistry
  },
  get AppState() {
    return require(61        ); // 61 = AppState
  },
  get AsyncStorage() {
    return require(360           ); // 360 = AsyncStorage
  },
  get BackAndroid() {
    return require(357          ); // 357 = BackAndroid
  },
  get CameraRoll() {
    return require(361         ); // 361 = CameraRoll
  },
  get Clipboard() {
    return require(362        ); // 362 = Clipboard
  },
  get DatePickerAndroid() {
    return require(363                ); // 363 = DatePickerAndroid
  },
  get Dimensions() {
    return require(101         ); // 101 = Dimensions
  },
  get Easing() {
    return require(261     ); // 261 = Easing
  },
  get I18nManager() {
    return require(306          ); // 306 = I18nManager
  },
  get ImagePickerIOS() {
    return require(364             ); // 364 = ImagePickerIOS
  },
  get InteractionManager() {
    return require(253                 ); // 253 = InteractionManager
  },
  get Keyboard() {
    return require(59        ); // 59 = Keyboard
  },
  get LayoutAnimation() {
    return require(276              ); // 276 = LayoutAnimation
  },
  get Linking() {
    return require(365      ); // 365 = Linking
  },
  get NativeEventEmitter() {
    return require(52                  ); // 52 = NativeEventEmitter
  },
  get NavigationExperimental() {
    return require(366                     ); // 366 = NavigationExperimental
  },
  get NetInfo() {
    return require(387      ); // 387 = NetInfo
  },
  get PanResponder() {
    return require(321           ); // 321 = PanResponder
  },
  get PermissionsAndroid() {
    return require(388                 ); // 388 = PermissionsAndroid
  },
  get PixelRatio() {
    return require(100         ); // 100 = PixelRatio
  },
  get PushNotificationIOS() {
    return require(389                  ); // 389 = PushNotificationIOS
  },
  get Settings() {
    return require(390       ); // 390 = Settings
  },
  get Share() {
    return require(391    ); // 391 = Share
  },
  get StatusBarIOS() {
    return require(58            ); // 58 = StatusBarIOS
  },
  get StyleSheet() {
    return require(99          ); // 99 = StyleSheet
  },
  get Systrace() {
    return require(32        ); // 32 = Systrace
  },
  get TimePickerAndroid() {
    return require(392                ); // 392 = TimePickerAndroid
  },
  get UIManager() {
    return require(73         ); // 73 = UIManager
  },
  get Vibration() {
    return require(393        ); // 393 = Vibration
  },
  get VibrationIOS() {
    return require(394           ); // 394 = VibrationIOS
  },

  get DeviceEventEmitter() {
    return require(57                     ); // 57 = RCTDeviceEventEmitter
  },
  get NativeAppEventEmitter() {
    return require(228                       ); // 228 = RCTNativeAppEventEmitter
  },
  get NativeModules() {
    return require(27             ); // 27 = NativeModules
  },
  get Platform() {
    return require(26        ); // 26 = Platform
  },
  get processColor() {
    return require(114           ); // 114 = processColor
  },
  get requireNativeComponent() {
    return require(128                     ); // 128 = requireNativeComponent
  },

  get ColorPropType() {
    return require(16             ); // 16 = ColorPropType
  },
  get EdgeInsetsPropType() {
    return require(120                 ); // 120 = EdgeInsetsPropType
  },
  get PointPropType() {
    return require(266            ); // 266 = PointPropType
  },

  addons: {
    get LinkedStateMixin() {
      if (__DEV__) {
        addonWarn('LinkedStateMixin', 'react-addons-linked-state-mixin');
      }
      return require(395                         ); // 395 = react/lib/LinkedStateMixin
    },
    get PureRenderMixin() {
      if (__DEV__) {
        addonWarn('PureRenderMixin', 'react-addons-pure-render-mixin');
      }
      return require(384                                          ); // 384 = react/lib/ReactComponentWithPureRenderMixin
    },
    get TestModule() {
      if (__DEV__) {
        warning(warningDedupe.TestModule, 'React.addons.TestModule is deprecated. ' + 'Use ReactNative.NativeModules.TestModule instead.');
        warningDedupe.TestModule = true;
      }
      return require(27             ).TestModule; // 27 = NativeModules
    },
    get batchedUpdates() {
      if (__DEV__) {
        warning(warningDedupe.batchedUpdates, 'React.addons.batchedUpdates is deprecated. ' + 'Use ReactNative.unstable_batchedUpdates instead.');
        warningDedupe.batchedUpdates = true;
      }
      return require(142           ).batchedUpdates; // 142 = ReactUpdates
    },
    get createFragment() {
      if (__DEV__) {
        addonWarn('createFragment', 'react-addons-create-fragment');
      }
      return require(398                      ).create; // 398 = react/lib/ReactFragment
    },
    get update() {
      if (__DEV__) {
        addonWarn('update', 'react-addons-update');
      }
      return require(399               ); // 399 = react/lib/update
    }
  }
};

if (__DEV__) {
  (function () {
    var throwOnWrongReactAPI = require(400                   ); // 400 = throwOnWrongReactAPI
    var reactAPIs = ['createClass', 'Component'];

    var _loop = function _loop(key) {
      Object.defineProperty(ReactNative, key, {
        get: function get() {
          throwOnWrongReactAPI(key);
        },

        enumerable: false,
        configurable: false
      });
    };

    for (var _iterator = reactAPIs, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var key = _ref;

      _loop(key);
    }
  })();
}

var ReactNativeInternal = require(191          ); // 191 = ReactNative
function applyForwarding(key) {
  if (__DEV__) {
    Object.defineProperty(ReactNative, key, Object.getOwnPropertyDescriptor(ReactNativeInternal, key));
    return;
  }
  ReactNative[key] = ReactNativeInternal[key];
}
for (var key in ReactNativeInternal) {
  applyForwarding(key);
}
module.exports = ReactNative;
}, 12, null, "react-native/Libraries/react-native/react-native.js");
__d(/* fbjs/lib/warning.js */function(global, require, module, exports) {

'use strict';

var emptyFunction = require(14               ); // 14 = ./emptyFunction

var warning = emptyFunction;

if (process.env.NODE_ENV !== 'production') {
  (function () {
    var printWarning = function printWarning(format) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      var argIndex = 0;
      var message = 'Warning: ' + format.replace(/%s/g, function () {
        return args[argIndex++];
      });
      if (typeof console !== 'undefined') {
        console.error(message);
      }
      try {
        throw new Error(message);
      } catch (x) {}
    };

    warning = function warning(condition, format) {
      if (format === undefined) {
        throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
      }

      if (format.indexOf('Failed Composite propType: ') === 0) {
        return;
      }

      if (!condition) {
        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
          args[_key2 - 2] = arguments[_key2];
        }

        printWarning.apply(undefined, [format].concat(args));
      }
    };
  })();
}

module.exports = warning;
}, 13, null, "fbjs/lib/warning.js");
__d(/* fbjs/lib/emptyFunction.js */function(global, require, module, exports) {"use strict";

function makeEmptyFunction(arg) {
  return function () {
    return arg;
  };
}

var emptyFunction = function emptyFunction() {};

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function () {
  return this;
};
emptyFunction.thatReturnsArgument = function (arg) {
  return arg;
};

module.exports = emptyFunction;
}, 14, null, "fbjs/lib/emptyFunction.js");
__d(/* ActivityIndicator */function(global, require, module, exports) {
'use strict';

var ColorPropType = require(16             ); // 16 = ColorPropType
var NativeMethodsMixin = require(19                  ); // 19 = NativeMethodsMixin
var Platform = require(26        ); // 26 = Platform
var React = require(76     ); // 76 = React
var StyleSheet = require(99          ); // 99 = StyleSheet
var View = require(119   ); // 119 = View

var requireNativeComponent = require(128                     ); // 128 = requireNativeComponent

var PropTypes = React.PropTypes;

var GRAY = '#999999';

var ActivityIndicator = React.createClass({
  displayName: 'ActivityIndicator',

  mixins: [NativeMethodsMixin],

  propTypes: babelHelpers.extends({}, View.propTypes, {
    animating: PropTypes.bool,

    color: ColorPropType,

    size: PropTypes.oneOfType([PropTypes.oneOf(['small', 'large']), PropTypes.number]),

    hidesWhenStopped: PropTypes.bool
  }),

  getDefaultProps: function getDefaultProps() {
    return {
      animating: true,
      color: Platform.OS === 'ios' ? GRAY : undefined,
      hidesWhenStopped: true,
      size: 'small'
    };
  },
  render: function render() {
    var _props = this.props,
        onLayout = _props.onLayout,
        style = _props.style,
        props = babelHelpers.objectWithoutProperties(_props, ['onLayout', 'style']);

    var sizeStyle = void 0;

    switch (props.size) {
      case 'small':
        sizeStyle = styles.sizeSmall;
        break;
      case 'large':
        sizeStyle = styles.sizeLarge;
        break;
      default:
        sizeStyle = { height: props.size, width: props.size };
        break;
    }

    return React.createElement(
      View,
      {
        onLayout: onLayout,
        style: [styles.container, style] },
      React.createElement(RCTActivityIndicator, babelHelpers.extends({}, props, {
        style: sizeStyle,
        styleAttr: 'Normal',
        indeterminate: true
      }))
    );
  }
});

var styles = StyleSheet.create({
  container: {
    alignItems: 'center',
    justifyContent: 'center'
  },
  sizeSmall: {
    width: 20,
    height: 20
  },
  sizeLarge: {
    width: 36,
    height: 36
  }
});

if (Platform.OS === 'ios') {
  var RCTActivityIndicator = requireNativeComponent('RCTActivityIndicatorView', ActivityIndicator, { nativeOnly: { activityIndicatorViewStyle: true } });
} else if (Platform.OS === 'android') {
  var RCTActivityIndicator = requireNativeComponent('AndroidProgressBar', ActivityIndicator, { nativeOnly: {
      indeterminate: true,
      progress: true,
      styleAttr: true
    } });
}

module.exports = ActivityIndicator;
}, 15, null, "ActivityIndicator");
__d(/* ColorPropType */function(global, require, module, exports) {
'use strict';

var ReactPropTypeLocationNames = require(17                                    ); // 17 = react/lib/ReactPropTypeLocationNames

var normalizeColor = require(18              ); // 18 = normalizeColor

var colorPropType = function colorPropType(isRequired, props, propName, componentName, location, propFullName) {
  var color = props[propName];
  if (color === undefined || color === null) {
    if (isRequired) {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error('Required ' + locationName + ' `' + (propFullName || propName) + '` was not specified in `' + componentName + '`.');
    }
    return;
  }

  if (typeof color === 'number') {
    return;
  }

  if (normalizeColor(color) === null) {
    var locationName = ReactPropTypeLocationNames[location];
    return new Error('Invalid ' + locationName + ' `' + (propFullName || propName) + '` supplied to `' + componentName + '`: ' + color + '\n' + 'Valid color formats are\n  - \'#f0f\' (#rgb)\n  - \'#f0fc\' (#rgba)\n  - \'#ff00ff\' (#rrggbb)\n  - \'#ff00ff00\' (#rrggbbaa)\n  - \'rgb(255, 255, 255)\'\n  - \'rgba(255, 255, 255, 1.0)\'\n  - \'hsl(360, 100%, 100%)\'\n  - \'hsla(360, 100%, 100%, 1.0)\'\n  - \'transparent\'\n  - \'red\'\n  - 0xff00ff00 (0xrrggbbaa)\n');
  }
};

var ColorPropType = colorPropType.bind(null, false);
ColorPropType.isRequired = colorPropType.bind(null, true);

module.exports = ColorPropType;
}, 16, null, "ColorPropType");
__d(/* react/lib/ReactPropTypeLocationNames.js */function(global, require, module, exports) {

'use strict';

var ReactPropTypeLocationNames = {};

if (process.env.NODE_ENV !== 'production') {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
}

module.exports = ReactPropTypeLocationNames;
}, 17, null, "react/lib/ReactPropTypeLocationNames.js");
__d(/* normalizeColor */function(global, require, module, exports) {
'use strict';

function normalizeColor(color) {
  var match;

  if (typeof color === 'number') {
    if (color >>> 0 === color && color >= 0 && color <= 0xffffffff) {
      return color;
    }
    return null;
  }

  if (match = matchers.hex6.exec(color)) {
    return parseInt(match[1] + 'ff', 16) >>> 0;
  }

  if (names.hasOwnProperty(color)) {
    return names[color];
  }

  if (match = matchers.rgb.exec(color)) {
    return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | 0x000000ff) >>> 0;
  }

  if (match = matchers.rgba.exec(color)) {
    return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | parse1(match[4])) >>> 0;
  }

  if (match = matchers.hex3.exec(color)) {
    return parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + 'ff', 16) >>> 0;
  }

  if (match = matchers.hex8.exec(color)) {
    return parseInt(match[1], 16) >>> 0;
  }

  if (match = matchers.hex4.exec(color)) {
    return parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + match[4] + match[4], 16) >>> 0;
  }

  if (match = matchers.hsl.exec(color)) {
    return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | 0x000000ff) >>> 0;
  }

  if (match = matchers.hsla.exec(color)) {
    return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | parse1(match[4])) >>> 0;
  }

  return null;
}

function hue2rgb(p, q, t) {
  if (t < 0) {
    t += 1;
  }
  if (t > 1) {
    t -= 1;
  }
  if (t < 1 / 6) {
    return p + (q - p) * 6 * t;
  }
  if (t < 1 / 2) {
    return q;
  }
  if (t < 2 / 3) {
    return p + (q - p) * (2 / 3 - t) * 6;
  }
  return p;
}

function hslToRgb(h, s, l) {
  var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
  var p = 2 * l - q;
  var r = hue2rgb(p, q, h + 1 / 3);
  var g = hue2rgb(p, q, h);
  var b = hue2rgb(p, q, h - 1 / 3);

  return Math.round(r * 255) << 24 | Math.round(g * 255) << 16 | Math.round(b * 255) << 8;
}

var NUMBER = '[-+]?\\d*\\.?\\d+';
var PERCENTAGE = NUMBER + '%';

function call() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return '\\(\\s*(' + args.join(')\\s*,\\s*(') + ')\\s*\\)';
}

var matchers = {
  rgb: new RegExp('rgb' + call(NUMBER, NUMBER, NUMBER)),
  rgba: new RegExp('rgba' + call(NUMBER, NUMBER, NUMBER, NUMBER)),
  hsl: new RegExp('hsl' + call(NUMBER, PERCENTAGE, PERCENTAGE)),
  hsla: new RegExp('hsla' + call(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER)),
  hex3: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
  hex4: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
  hex6: /^#([0-9a-fA-F]{6})$/,
  hex8: /^#([0-9a-fA-F]{8})$/
};

function parse255(str) {
  var int = parseInt(str, 10);
  if (int < 0) {
    return 0;
  }
  if (int > 255) {
    return 255;
  }
  return int;
}

function parse360(str) {
  var int = parseFloat(str);
  return (int % 360 + 360) % 360 / 360;
}

function parse1(str) {
  var num = parseFloat(str);
  if (num < 0) {
    return 0;
  }
  if (num > 1) {
    return 255;
  }
  return Math.round(num * 255);
}

function parsePercentage(str) {
  var int = parseFloat(str, 10);
  if (int < 0) {
    return 0;
  }
  if (int > 100) {
    return 1;
  }
  return int / 100;
}

var names = {
  transparent: 0x00000000,

  aliceblue: 0xf0f8ffff,
  antiquewhite: 0xfaebd7ff,
  aqua: 0x00ffffff,
  aquamarine: 0x7fffd4ff,
  azure: 0xf0ffffff,
  beige: 0xf5f5dcff,
  bisque: 0xffe4c4ff,
  black: 0x000000ff,
  blanchedalmond: 0xffebcdff,
  blue: 0x0000ffff,
  blueviolet: 0x8a2be2ff,
  brown: 0xa52a2aff,
  burlywood: 0xdeb887ff,
  burntsienna: 0xea7e5dff,
  cadetblue: 0x5f9ea0ff,
  chartreuse: 0x7fff00ff,
  chocolate: 0xd2691eff,
  coral: 0xff7f50ff,
  cornflowerblue: 0x6495edff,
  cornsilk: 0xfff8dcff,
  crimson: 0xdc143cff,
  cyan: 0x00ffffff,
  darkblue: 0x00008bff,
  darkcyan: 0x008b8bff,
  darkgoldenrod: 0xb8860bff,
  darkgray: 0xa9a9a9ff,
  darkgreen: 0x006400ff,
  darkgrey: 0xa9a9a9ff,
  darkkhaki: 0xbdb76bff,
  darkmagenta: 0x8b008bff,
  darkolivegreen: 0x556b2fff,
  darkorange: 0xff8c00ff,
  darkorchid: 0x9932ccff,
  darkred: 0x8b0000ff,
  darksalmon: 0xe9967aff,
  darkseagreen: 0x8fbc8fff,
  darkslateblue: 0x483d8bff,
  darkslategray: 0x2f4f4fff,
  darkslategrey: 0x2f4f4fff,
  darkturquoise: 0x00ced1ff,
  darkviolet: 0x9400d3ff,
  deeppink: 0xff1493ff,
  deepskyblue: 0x00bfffff,
  dimgray: 0x696969ff,
  dimgrey: 0x696969ff,
  dodgerblue: 0x1e90ffff,
  firebrick: 0xb22222ff,
  floralwhite: 0xfffaf0ff,
  forestgreen: 0x228b22ff,
  fuchsia: 0xff00ffff,
  gainsboro: 0xdcdcdcff,
  ghostwhite: 0xf8f8ffff,
  gold: 0xffd700ff,
  goldenrod: 0xdaa520ff,
  gray: 0x808080ff,
  green: 0x008000ff,
  greenyellow: 0xadff2fff,
  grey: 0x808080ff,
  honeydew: 0xf0fff0ff,
  hotpink: 0xff69b4ff,
  indianred: 0xcd5c5cff,
  indigo: 0x4b0082ff,
  ivory: 0xfffff0ff,
  khaki: 0xf0e68cff,
  lavender: 0xe6e6faff,
  lavenderblush: 0xfff0f5ff,
  lawngreen: 0x7cfc00ff,
  lemonchiffon: 0xfffacdff,
  lightblue: 0xadd8e6ff,
  lightcoral: 0xf08080ff,
  lightcyan: 0xe0ffffff,
  lightgoldenrodyellow: 0xfafad2ff,
  lightgray: 0xd3d3d3ff,
  lightgreen: 0x90ee90ff,
  lightgrey: 0xd3d3d3ff,
  lightpink: 0xffb6c1ff,
  lightsalmon: 0xffa07aff,
  lightseagreen: 0x20b2aaff,
  lightskyblue: 0x87cefaff,
  lightslategray: 0x778899ff,
  lightslategrey: 0x778899ff,
  lightsteelblue: 0xb0c4deff,
  lightyellow: 0xffffe0ff,
  lime: 0x00ff00ff,
  limegreen: 0x32cd32ff,
  linen: 0xfaf0e6ff,
  magenta: 0xff00ffff,
  maroon: 0x800000ff,
  mediumaquamarine: 0x66cdaaff,
  mediumblue: 0x0000cdff,
  mediumorchid: 0xba55d3ff,
  mediumpurple: 0x9370dbff,
  mediumseagreen: 0x3cb371ff,
  mediumslateblue: 0x7b68eeff,
  mediumspringgreen: 0x00fa9aff,
  mediumturquoise: 0x48d1ccff,
  mediumvioletred: 0xc71585ff,
  midnightblue: 0x191970ff,
  mintcream: 0xf5fffaff,
  mistyrose: 0xffe4e1ff,
  moccasin: 0xffe4b5ff,
  navajowhite: 0xffdeadff,
  navy: 0x000080ff,
  oldlace: 0xfdf5e6ff,
  olive: 0x808000ff,
  olivedrab: 0x6b8e23ff,
  orange: 0xffa500ff,
  orangered: 0xff4500ff,
  orchid: 0xda70d6ff,
  palegoldenrod: 0xeee8aaff,
  palegreen: 0x98fb98ff,
  paleturquoise: 0xafeeeeff,
  palevioletred: 0xdb7093ff,
  papayawhip: 0xffefd5ff,
  peachpuff: 0xffdab9ff,
  peru: 0xcd853fff,
  pink: 0xffc0cbff,
  plum: 0xdda0ddff,
  powderblue: 0xb0e0e6ff,
  purple: 0x800080ff,
  rebeccapurple: 0x663399ff,
  red: 0xff0000ff,
  rosybrown: 0xbc8f8fff,
  royalblue: 0x4169e1ff,
  saddlebrown: 0x8b4513ff,
  salmon: 0xfa8072ff,
  sandybrown: 0xf4a460ff,
  seagreen: 0x2e8b57ff,
  seashell: 0xfff5eeff,
  sienna: 0xa0522dff,
  silver: 0xc0c0c0ff,
  skyblue: 0x87ceebff,
  slateblue: 0x6a5acdff,
  slategray: 0x708090ff,
  slategrey: 0x708090ff,
  snow: 0xfffafaff,
  springgreen: 0x00ff7fff,
  steelblue: 0x4682b4ff,
  tan: 0xd2b48cff,
  teal: 0x008080ff,
  thistle: 0xd8bfd8ff,
  tomato: 0xff6347ff,
  turquoise: 0x40e0d0ff,
  violet: 0xee82eeff,
  wheat: 0xf5deb3ff,
  white: 0xffffffff,
  whitesmoke: 0xf5f5f5ff,
  yellow: 0xffff00ff,
  yellowgreen: 0x9acd32ff
};

module.exports = normalizeColor;
}, 18, null, "normalizeColor");
__d(/* NativeMethodsMixin */function(global, require, module, exports) {
'use strict';

var ReactNativeAttributePayload = require(20                           ); // 20 = ReactNativeAttributePayload
var TextInputState = require(25              ); // 25 = TextInputState
var UIManager = require(73         ); // 73 = UIManager

var findNodeHandle = require(74              ); // 74 = findNodeHandle
var invariant = require(24                  ); // 24 = fbjs/lib/invariant

function warnForStyleProps(props, validAttributes) {
  for (var key in validAttributes.style) {
    if (!(validAttributes[key] || props[key] === undefined)) {
      console.error('You are setting the style `{ ' + key + ': ... }` as a prop. You ' + 'should nest it in a style object. ' + 'E.g. `{ style: { ' + key + ': ... } }`');
    }
  }
}

var NativeMethodsMixin = {
  measure: function measure(callback) {
    UIManager.measure(findNodeHandle(this), mountSafeCallback(this, callback));
  },

  measureInWindow: function measureInWindow(callback) {
    UIManager.measureInWindow(findNodeHandle(this), mountSafeCallback(this, callback));
  },

  measureLayout: function measureLayout(relativeToNativeNode, onSuccess, onFail) {
    UIManager.measureLayout(findNodeHandle(this), relativeToNativeNode, mountSafeCallback(this, onFail), mountSafeCallback(this, onSuccess));
  },

  setNativeProps: function setNativeProps(nativeProps) {
    if (!this.viewConfig) {
      var ctor = this.constructor;
      var componentName = ctor.displayName || ctor.name || '<Unknown Component>';
      invariant(false, componentName + ' "viewConfig" is not defined.');
    }

    if (__DEV__) {
      warnForStyleProps(nativeProps, this.viewConfig.validAttributes);
    }

    var updatePayload = ReactNativeAttributePayload.create(nativeProps, this.viewConfig.validAttributes);

    UIManager.updateView(findNodeHandle(this), this.viewConfig.uiViewClassName, updatePayload);
  },

  focus: function focus() {
    TextInputState.focusTextInput(findNodeHandle(this));
  },

  blur: function blur() {
    TextInputState.blurTextInput(findNodeHandle(this));
  }
};

function throwOnStylesProp(component, props) {
  if (props.styles !== undefined) {
    var owner = component._owner || null;
    var name = component.constructor.displayName;
    var msg = '`styles` is not a supported property of `' + name + '`, did ' + 'you mean `style` (singular)?';
    if (owner && owner.constructor && owner.constructor.displayName) {
      msg += '\n\nCheck the `' + owner.constructor.displayName + '` parent ' + ' component.';
    }
    throw new Error(msg);
  }
}
if (__DEV__) {
  var NativeMethodsMixin_DEV = NativeMethodsMixin;
  invariant(!NativeMethodsMixin_DEV.componentWillMount && !NativeMethodsMixin_DEV.componentWillReceiveProps, 'Do not override existing functions.');
  NativeMethodsMixin_DEV.componentWillMount = function () {
    throwOnStylesProp(this, this.props);
  };
  NativeMethodsMixin_DEV.componentWillReceiveProps = function (newProps) {
    throwOnStylesProp(this, newProps);
  };
}

function mountSafeCallback(context, callback) {
  return function () {
    if (!callback || context.isMounted && !context.isMounted()) {
      return undefined;
    }
    return callback.apply(context, arguments);
  };
}

module.exports = NativeMethodsMixin;
}, 19, null, "NativeMethodsMixin");
__d(/* ReactNativeAttributePayload */function(global, require, module, exports) {
'use strict';

var ReactNativePropRegistry = require(21                       ); // 21 = ReactNativePropRegistry

var deepDiffer = require(22          ); // 22 = deepDiffer
var flattenStyle = require(23            ); // 23 = flattenStyle

var emptyObject = {};

var removedKeys = null;
var removedKeyCount = 0;

function defaultDiffer(prevProp, nextProp) {
  if (typeof nextProp !== 'object' || nextProp === null) {
    return true;
  } else {
    return deepDiffer(prevProp, nextProp);
  }
}

function resolveObject(idOrObject) {
  if (typeof idOrObject === 'number') {
    return ReactNativePropRegistry.getByID(idOrObject);
  }
  return idOrObject;
}

function restoreDeletedValuesInNestedArray(updatePayload, node, validAttributes) {
  if (Array.isArray(node)) {
    var i = node.length;
    while (i-- && removedKeyCount > 0) {
      restoreDeletedValuesInNestedArray(updatePayload, node[i], validAttributes);
    }
  } else if (node && removedKeyCount > 0) {
    var obj = resolveObject(node);
    for (var propKey in removedKeys) {
      if (!removedKeys[propKey]) {
        continue;
      }
      var nextProp = obj[propKey];
      if (nextProp === undefined) {
        continue;
      }

      var attributeConfig = validAttributes[propKey];
      if (!attributeConfig) {
        continue;
      }

      if (typeof nextProp === 'function') {
        nextProp = true;
      }
      if (typeof nextProp === 'undefined') {
        nextProp = null;
      }

      if (typeof attributeConfig !== 'object') {
        updatePayload[propKey] = nextProp;
      } else if (typeof attributeConfig.diff === 'function' || typeof attributeConfig.process === 'function') {
        var nextValue = typeof attributeConfig.process === 'function' ? attributeConfig.process(nextProp) : nextProp;
        updatePayload[propKey] = nextValue;
      }
      removedKeys[propKey] = false;
      removedKeyCount--;
    }
  }
}

function diffNestedArrayProperty(updatePayload, prevArray, nextArray, validAttributes) {
  var minLength = prevArray.length < nextArray.length ? prevArray.length : nextArray.length;
  var i;
  for (i = 0; i < minLength; i++) {
    updatePayload = diffNestedProperty(updatePayload, prevArray[i], nextArray[i], validAttributes);
  }
  for (; i < prevArray.length; i++) {
    updatePayload = clearNestedProperty(updatePayload, prevArray[i], validAttributes);
  }
  for (; i < nextArray.length; i++) {
    updatePayload = addNestedProperty(updatePayload, nextArray[i], validAttributes);
  }
  return updatePayload;
}

function diffNestedProperty(updatePayload, prevProp, nextProp, validAttributes) {

  if (!updatePayload && prevProp === nextProp) {
    return updatePayload;
  }

  if (!prevProp || !nextProp) {
    if (nextProp) {
      return addNestedProperty(updatePayload, nextProp, validAttributes);
    }
    if (prevProp) {
      return clearNestedProperty(updatePayload, prevProp, validAttributes);
    }
    return updatePayload;
  }

  if (!Array.isArray(prevProp) && !Array.isArray(nextProp)) {
    return diffProperties(updatePayload, resolveObject(prevProp), resolveObject(nextProp), validAttributes);
  }

  if (Array.isArray(prevProp) && Array.isArray(nextProp)) {
    return diffNestedArrayProperty(updatePayload, prevProp, nextProp, validAttributes);
  }

  if (Array.isArray(prevProp)) {
    return diffProperties(updatePayload, flattenStyle(prevProp), resolveObject(nextProp), validAttributes);
  }

  return diffProperties(updatePayload, resolveObject(prevProp), flattenStyle(nextProp), validAttributes);
}

function addNestedProperty(updatePayload, nextProp, validAttributes) {
  if (!nextProp) {
    return updatePayload;
  }

  if (!Array.isArray(nextProp)) {
    return addProperties(updatePayload, resolveObject(nextProp), validAttributes);
  }

  for (var i = 0; i < nextProp.length; i++) {
    updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
  }

  return updatePayload;
}

function clearNestedProperty(updatePayload, prevProp, validAttributes) {
  if (!prevProp) {
    return updatePayload;
  }

  if (!Array.isArray(prevProp)) {
    return clearProperties(updatePayload, resolveObject(prevProp), validAttributes);
  }

  for (var i = 0; i < prevProp.length; i++) {
    updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
  }
  return updatePayload;
}

function diffProperties(updatePayload, prevProps, nextProps, validAttributes) {
  var attributeConfig;
  var nextProp;
  var prevProp;

  for (var propKey in nextProps) {
    attributeConfig = validAttributes[propKey];
    if (!attributeConfig) {
      continue;
    }

    prevProp = prevProps[propKey];
    nextProp = nextProps[propKey];

    if (typeof nextProp === 'function') {
      nextProp = true;

      if (typeof prevProp === 'function') {
        prevProp = true;
      }
    }

    if (typeof nextProp === 'undefined') {
      nextProp = null;
      if (typeof prevProp === 'undefined') {
        prevProp = null;
      }
    }

    if (removedKeys) {
      removedKeys[propKey] = false;
    }

    if (updatePayload && updatePayload[propKey] !== undefined) {
      if (typeof attributeConfig !== 'object') {
        updatePayload[propKey] = nextProp;
      } else if (typeof attributeConfig.diff === 'function' || typeof attributeConfig.process === 'function') {
        var nextValue = typeof attributeConfig.process === 'function' ? attributeConfig.process(nextProp) : nextProp;
        updatePayload[propKey] = nextValue;
      }
      continue;
    }

    if (prevProp === nextProp) {
      continue;
    }

    if (typeof attributeConfig !== 'object') {
      if (defaultDiffer(prevProp, nextProp)) {
        (updatePayload || (updatePayload = {}))[propKey] = nextProp;
      }
    } else if (typeof attributeConfig.diff === 'function' || typeof attributeConfig.process === 'function') {
      var shouldUpdate = prevProp === undefined || (typeof attributeConfig.diff === 'function' ? attributeConfig.diff(prevProp, nextProp) : defaultDiffer(prevProp, nextProp));
      if (shouldUpdate) {
        nextValue = typeof attributeConfig.process === 'function' ? attributeConfig.process(nextProp) : nextProp;
        (updatePayload || (updatePayload = {}))[propKey] = nextValue;
      }
    } else {
      removedKeys = null;
      removedKeyCount = 0;

      updatePayload = diffNestedProperty(updatePayload, prevProp, nextProp, attributeConfig);
      if (removedKeyCount > 0 && updatePayload) {
        restoreDeletedValuesInNestedArray(updatePayload, nextProp, attributeConfig);
        removedKeys = null;
      }
    }
  }

  for (propKey in prevProps) {
    if (nextProps[propKey] !== undefined) {
      continue;
    }
    attributeConfig = validAttributes[propKey];
    if (!attributeConfig) {
      continue;
    }

    if (updatePayload && updatePayload[propKey] !== undefined) {
      continue;
    }

    prevProp = prevProps[propKey];
    if (prevProp === undefined) {
      continue;
    }

    if (typeof attributeConfig !== 'object' || typeof attributeConfig.diff === 'function' || typeof attributeConfig.process === 'function') {
      (updatePayload || (updatePayload = {}))[propKey] = null;
      if (!removedKeys) {
        removedKeys = {};
      }
      if (!removedKeys[propKey]) {
        removedKeys[propKey] = true;
        removedKeyCount++;
      }
    } else {
      updatePayload = clearNestedProperty(updatePayload, prevProp, attributeConfig);
    }
  }
  return updatePayload;
}

function addProperties(updatePayload, props, validAttributes) {
  return diffProperties(updatePayload, emptyObject, props, validAttributes);
}

function clearProperties(updatePayload, prevProps, validAttributes) {
  return diffProperties(updatePayload, prevProps, emptyObject, validAttributes);
}

var ReactNativeAttributePayload = {

  create: function create(props, validAttributes) {
    return addProperties(null, props, validAttributes);
  },

  diff: function diff(prevProps, nextProps, validAttributes) {
    return diffProperties(null, prevProps, nextProps, validAttributes);
  }

};

module.exports = ReactNativeAttributePayload;
}, 20, null, "ReactNativeAttributePayload");
__d(/* ReactNativePropRegistry */function(global, require, module, exports) {
'use strict';

var objects = {};
var uniqueID = 1;
var emptyObject = {};

var ReactNativePropRegistry = function () {
  function ReactNativePropRegistry() {
    babelHelpers.classCallCheck(this, ReactNativePropRegistry);
  }

  babelHelpers.createClass(ReactNativePropRegistry, null, [{
    key: 'register',
    value: function register(object) {
      var id = ++uniqueID;
      if (__DEV__) {
        Object.freeze(object);
      }
      objects[id] = object;
      return id;
    }
  }, {
    key: 'getByID',
    value: function getByID(id) {
      if (!id) {
        return emptyObject;
      }

      var object = objects[id];
      if (!object) {
        console.warn('Invalid style with id `' + id + '`. Skipping ...');
        return emptyObject;
      }
      return object;
    }
  }]);
  return ReactNativePropRegistry;
}();

module.exports = ReactNativePropRegistry;
}, 21, null, "ReactNativePropRegistry");
__d(/* deepDiffer */function(global, require, module, exports) {
'use strict';

var deepDiffer = function deepDiffer(one, two) {
  if (one === two) {
    return false;
  }
  if (typeof one === 'function' && typeof two === 'function') {
    return false;
  }
  if (typeof one !== 'object' || one === null) {
    return one !== two;
  }
  if (typeof two !== 'object' || two === null) {
    return true;
  }
  if (one.constructor !== two.constructor) {
    return true;
  }
  if (Array.isArray(one)) {
    var len = one.length;
    if (two.length !== len) {
      return true;
    }
    for (var ii = 0; ii < len; ii++) {
      if (deepDiffer(one[ii], two[ii])) {
        return true;
      }
    }
  } else {
    for (var key in one) {
      if (deepDiffer(one[key], two[key])) {
        return true;
      }
    }
    for (var twoKey in two) {
      if (one[twoKey] === undefined && two[twoKey] !== undefined) {
        return true;
      }
    }
  }
  return false;
};

module.exports = deepDiffer;
}, 22, null, "deepDiffer");
__d(/* flattenStyle */function(global, require, module, exports) {
'use strict';

var ReactNativePropRegistry = require(21                       ); // 21 = ReactNativePropRegistry
var invariant = require(24                  ); // 24 = fbjs/lib/invariant

function getStyle(style) {
  if (typeof style === 'number') {
    return ReactNativePropRegistry.getByID(style);
  }
  return style;
}

function flattenStyle(style) {
  if (!style) {
    return undefined;
  }
  invariant(style !== true, 'style may be false but not true');

  if (!Array.isArray(style)) {
    return getStyle(style);
  }

  var result = {};
  for (var i = 0, styleLength = style.length; i < styleLength; ++i) {
    var computedStyle = flattenStyle(style[i]);
    if (computedStyle) {
      for (var key in computedStyle) {
        result[key] = computedStyle[key];
      }
    }
  }
  return result;
}

module.exports = flattenStyle;
}, 23, null, "flattenStyle");
__d(/* fbjs/lib/invariant.js */function(global, require, module, exports) {

'use strict';

var validateFormat = function validateFormat(format) {};

if (process.env.NODE_ENV !== 'production') {
  validateFormat = function validateFormat(format) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  };
}

function invariant(condition, format, a, b, c, d, e, f) {
  validateFormat(format);

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1;
    throw error;
  }
}

module.exports = invariant;
}, 24, null, "fbjs/lib/invariant.js");
__d(/* TextInputState */function(global, require, module, exports) {
'use strict';

var Platform = require(26        ); // 26 = Platform
var UIManager = require(73         ); // 73 = UIManager

var TextInputState = {
  _currentlyFocusedID: null,

  currentlyFocusedField: function currentlyFocusedField() {
    return this._currentlyFocusedID;
  },

  focusTextInput: function focusTextInput(textFieldID) {
    if (this._currentlyFocusedID !== textFieldID && textFieldID !== null) {
      this._currentlyFocusedID = textFieldID;
      if (Platform.OS === 'ios') {
        UIManager.focus(textFieldID);
      } else if (Platform.OS === 'android') {
        UIManager.dispatchViewManagerCommand(textFieldID, UIManager.AndroidTextInput.Commands.focusTextInput, null);
      }
    }
  },

  blurTextInput: function blurTextInput(textFieldID) {
    if (this._currentlyFocusedID === textFieldID && textFieldID !== null) {
      this._currentlyFocusedID = null;
      if (Platform.OS === 'ios') {
        UIManager.blur(textFieldID);
      } else if (Platform.OS === 'android') {
        UIManager.dispatchViewManagerCommand(textFieldID, UIManager.AndroidTextInput.Commands.blurTextInput, null);
      }
    }
  }
};

module.exports = TextInputState;
}, 25, null, "TextInputState");
__d(/* Platform */function(global, require, module, exports) {

'use strict';

var Platform = {
  OS: 'android',
  get Version() {
    var AndroidConstants = require(27             ).AndroidConstants; // 27 = NativeModules
    return AndroidConstants && AndroidConstants.Version;
  },
  get isTesting() {
    var constants = require(27             ).AndroidConstants; // 27 = NativeModules
    return constants && constants.isTesting;
  },
  select: function select(obj) {
    return obj.android;
  }
};

module.exports = Platform;
}, 26, null, "Platform");
__d(/* NativeModules */function(global, require, module, exports) {
'use strict';

var BatchedBridge = require(28             ); // 28 = BatchedBridge

var defineLazyObjectProperty = require(72                        ); // 72 = defineLazyObjectProperty
var invariant = require(24                  ); // 24 = fbjs/lib/invariant

function genModule(config, moduleID) {
  if (!config) {
    return null;
  }

  var _config = babelHelpers.slicedToArray(config, 5),
      moduleName = _config[0],
      constants = _config[1],
      methods = _config[2],
      promiseMethods = _config[3],
      syncMethods = _config[4];

  invariant(!moduleName.startsWith('RCT') && !moduleName.startsWith('RK'), 'Module name prefixes should\'ve been stripped by the native side ' + 'but wasn\'t for ' + moduleName);

  if (!constants && !methods) {
    return { name: moduleName };
  }

  var module = {};
  methods && methods.forEach(function (methodName, methodID) {
    var isPromise = promiseMethods && arrayContains(promiseMethods, methodID);
    var isSync = syncMethods && arrayContains(syncMethods, methodID);
    invariant(!isPromise || !isSync, 'Cannot have a method that is both async and a sync hook');
    var methodType = isPromise ? 'promise' : isSync ? 'sync' : 'async';
    module[methodName] = genMethod(moduleID, methodID, methodType);
  });
  babelHelpers.extends(module, constants);

  if (__DEV__) {
    BatchedBridge.createDebugLookup(moduleID, moduleName, methods);
  }

  return { name: moduleName, module: module };
}

global.__fbGenNativeModule = genModule;

function loadModule(name, moduleID) {
  invariant(global.nativeRequireModuleConfig, 'Can\'t lazily create module without nativeRequireModuleConfig');
  var config = global.nativeRequireModuleConfig(name);
  var info = genModule(config, moduleID);
  return info && info.module;
}

function genMethod(moduleID, methodID, type) {
  var fn = null;
  if (type === 'promise') {
    fn = function fn() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return new Promise(function (resolve, reject) {
        BatchedBridge.enqueueNativeCall(moduleID, methodID, args, function (data) {
          return resolve(data);
        }, function (errorData) {
          return reject(createErrorFromErrorData(errorData));
        });
      });
    };
  } else if (type === 'sync') {
    fn = function fn() {
      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return global.nativeCallSyncHook(moduleID, methodID, args);
    };
  } else {
    fn = function fn() {
      for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      var lastArg = args.length > 0 ? args[args.length - 1] : null;
      var secondLastArg = args.length > 1 ? args[args.length - 2] : null;
      var hasSuccessCallback = typeof lastArg === 'function';
      var hasErrorCallback = typeof secondLastArg === 'function';
      hasErrorCallback && invariant(hasSuccessCallback, 'Cannot have a non-function arg after a function arg.');
      var onSuccess = hasSuccessCallback ? lastArg : null;
      var onFail = hasErrorCallback ? secondLastArg : null;
      var callbackCount = hasSuccessCallback + hasErrorCallback;
      args = args.slice(0, args.length - callbackCount);
      BatchedBridge.enqueueNativeCall(moduleID, methodID, args, onFail, onSuccess);
    };
  }
  fn.type = type;
  return fn;
}

function arrayContains(array, value) {
  return array.indexOf(value) !== -1;
}

function createErrorFromErrorData(errorData) {
  var message = errorData.message,
      extraErrorInfo = babelHelpers.objectWithoutProperties(errorData, ['message']);

  var error = new Error(message);
  error.framesToPop = 1;
  return babelHelpers.extends(error, extraErrorInfo);
}

var NativeModules = {};
if (global.nativeModuleProxy) {
  NativeModules = global.nativeModuleProxy;
} else {
  var bridgeConfig = global.__fbBatchedBridgeConfig;
  invariant(bridgeConfig, '__fbBatchedBridgeConfig is not set, cannot invoke native modules');

  (bridgeConfig.remoteModuleConfig || []).forEach(function (config, moduleID) {
    var info = genModule(config, moduleID);
    if (!info) {
      return;
    }

    if (info.module) {
      NativeModules[info.name] = info.module;
    } else {
        defineLazyObjectProperty(NativeModules, info.name, {
          get: function get() {
            return loadModule(info.name, moduleID);
          }
        });
      }
  });
}

module.exports = NativeModules;
}, 27, null, "NativeModules");
__d(/* BatchedBridge */function(global, require, module, exports) {
'use strict';

var MessageQueue = require(29            ); // 29 = MessageQueue
var BatchedBridge = new MessageQueue();

BatchedBridge.registerCallableModule('Systrace', require(32        )); // 32 = Systrace
BatchedBridge.registerCallableModule('JSTimersExecution', require(31                 )); // 31 = JSTimersExecution
BatchedBridge.registerCallableModule('HeapCapture', require(48           )); // 48 = HeapCapture
BatchedBridge.registerCallableModule('SamplingProfiler', require(49                )); // 49 = SamplingProfiler

if (__DEV__) {
  BatchedBridge.registerCallableModule('HMRClient', require(50         )); // 50 = HMRClient
}

Object.defineProperty(global, '__fbBatchedBridge', {
  configurable: true,
  value: BatchedBridge
});

module.exports = BatchedBridge;
}, 28, null, "BatchedBridge");
__d(/* MessageQueue */function(global, require, module, exports) {

'use strict';

var ErrorUtils = require(30          ); // 30 = ErrorUtils
var JSTimersExecution = require(31                 ); // 31 = JSTimersExecution
var Systrace = require(32        ); // 32 = Systrace

var deepFreezeAndThrowOnMutationInDev = require(46                                 ); // 46 = deepFreezeAndThrowOnMutationInDev
var invariant = require(24                  ); // 24 = fbjs/lib/invariant
var stringifySafe = require(47             ); // 47 = stringifySafe

var TO_JS = 0;
var TO_NATIVE = 1;

var MODULE_IDS = 0;
var METHOD_IDS = 1;
var PARAMS = 2;
var MIN_TIME_BETWEEN_FLUSHES_MS = 5;

var TRACE_TAG_REACT_APPS = 1 << 17;

var DEBUG_INFO_LIMIT = 32;

var guard = function guard(fn) {
  try {
    fn();
  } catch (error) {
    ErrorUtils.reportFatalError(error);
  }
};

var MessageQueue = function () {
  function MessageQueue() {
    babelHelpers.classCallCheck(this, MessageQueue);

    this._callableModules = {};
    this._queue = [[], [], [], 0];
    this._callbacks = [];
    this._callbackID = 0;
    this._callID = 0;
    this._lastFlush = 0;
    this._eventLoopStartTime = new Date().getTime();

    if (__DEV__) {
      this._debugInfo = {};
      this._remoteModuleTable = {};
      this._remoteMethodTable = {};
    }

    this.callFunctionReturnFlushedQueue = this.callFunctionReturnFlushedQueue.bind(this);
    this.callFunctionReturnResultAndFlushedQueue = this.callFunctionReturnResultAndFlushedQueue.bind(this);
    this.flushedQueue = this.flushedQueue.bind(this);
    this.invokeCallbackAndReturnFlushedQueue = this.invokeCallbackAndReturnFlushedQueue.bind(this);
  }

  babelHelpers.createClass(MessageQueue, [{
    key: 'callFunctionReturnFlushedQueue',
    value: function callFunctionReturnFlushedQueue(module, method, args) {
      var _this = this;

      guard(function () {
        _this.__callFunction(module, method, args);
        _this.__callImmediates();
      });

      return this.flushedQueue();
    }
  }, {
    key: 'callFunctionReturnResultAndFlushedQueue',
    value: function callFunctionReturnResultAndFlushedQueue(module, method, args) {
      var _this2 = this;

      var result = void 0;
      guard(function () {
        result = _this2.__callFunction(module, method, args);
        _this2.__callImmediates();
      });

      return [result, this.flushedQueue()];
    }
  }, {
    key: 'invokeCallbackAndReturnFlushedQueue',
    value: function invokeCallbackAndReturnFlushedQueue(cbID, args) {
      var _this3 = this;

      guard(function () {
        _this3.__invokeCallback(cbID, args);
        _this3.__callImmediates();
      });

      return this.flushedQueue();
    }
  }, {
    key: 'flushedQueue',
    value: function flushedQueue() {
      this.__callImmediates();

      var queue = this._queue;
      this._queue = [[], [], [], this._callID];
      return queue[0].length ? queue : null;
    }
  }, {
    key: 'getEventLoopRunningTime',
    value: function getEventLoopRunningTime() {
      return new Date().getTime() - this._eventLoopStartTime;
    }
  }, {
    key: 'registerCallableModule',
    value: function registerCallableModule(name, module) {
      this._callableModules[name] = module;
    }
  }, {
    key: 'enqueueNativeCall',
    value: function enqueueNativeCall(moduleID, methodID, params, onFail, onSucc) {
      if (onFail || onSucc) {
        if (__DEV__) {
          var callId = this._callbackID >> 1;
          this._debugInfo[callId] = [moduleID, methodID];
          if (callId > DEBUG_INFO_LIMIT) {
            delete this._debugInfo[callId - DEBUG_INFO_LIMIT];
          }
        }
        onFail && params.push(this._callbackID);

        this._callbacks[this._callbackID++] = onFail;
        onSucc && params.push(this._callbackID);

        this._callbacks[this._callbackID++] = onSucc;
      }

      if (__DEV__) {
        global.nativeTraceBeginAsyncFlow && global.nativeTraceBeginAsyncFlow(TRACE_TAG_REACT_APPS, 'native', this._callID);
      }
      this._callID++;

      this._queue[MODULE_IDS].push(moduleID);
      this._queue[METHOD_IDS].push(methodID);

      if (__DEV__) {
        JSON.stringify(params);

        deepFreezeAndThrowOnMutationInDev(params);
      }
      this._queue[PARAMS].push(params);

      var now = new Date().getTime();
      if (global.nativeFlushQueueImmediate && now - this._lastFlush >= MIN_TIME_BETWEEN_FLUSHES_MS) {
        global.nativeFlushQueueImmediate(this._queue);
        this._queue = [[], [], [], this._callID];
        this._lastFlush = now;
      }
      Systrace.counterEvent('pending_js_to_native_queue', this._queue[0].length);
      if (__DEV__ && this.__spy && isFinite(moduleID)) {
        this.__spy({ type: TO_NATIVE,
          module: this._remoteModuleTable[moduleID],
          method: this._remoteMethodTable[moduleID][methodID],
          args: params });
      }
    }
  }, {
    key: 'createDebugLookup',
    value: function createDebugLookup(moduleID, name, methods) {
      if (__DEV__) {
        this._remoteModuleTable[moduleID] = name;
        this._remoteMethodTable[moduleID] = methods;
      }
    }
  }, {
    key: '__callImmediates',
    value: function __callImmediates() {
      Systrace.beginEvent('JSTimersExecution.callImmediates()');
      guard(function () {
        return JSTimersExecution.callImmediates();
      });
      Systrace.endEvent();
    }
  }, {
    key: '__callFunction',
    value: function __callFunction(module, method, args) {
      this._lastFlush = new Date().getTime();
      this._eventLoopStartTime = this._lastFlush;
      Systrace.beginEvent(module + '.' + method + '()');
      if (__DEV__ && this.__spy) {
        this.__spy({ type: TO_JS, module: module, method: method, args: args });
      }
      var moduleMethods = this._callableModules[module];
      invariant(!!moduleMethods, 'Module %s is not a registered callable module (calling %s)', module, method);
      invariant(!!moduleMethods[method], 'Method %s does not exist on module %s', method, module);
      var result = moduleMethods[method].apply(moduleMethods, args);
      Systrace.endEvent();
      return result;
    }
  }, {
    key: '__invokeCallback',
    value: function __invokeCallback(cbID, args) {
      this._lastFlush = new Date().getTime();
      this._eventLoopStartTime = this._lastFlush;
      var callback = this._callbacks[cbID];

      if (__DEV__) {
        var debug = this._debugInfo[cbID >> 1];
        var _module = debug && this._remoteModuleTable[debug[0]];
        var _method = debug && this._remoteMethodTable[debug[0]][debug[1]];
        if (callback == null) {
          var errorMessage = 'Callback with id ' + cbID + ': ' + _module + '.' + _method + '() not found';
          if (_method) {
            errorMessage = 'The callback ' + _method + '() exists in module ' + _module + ', ' + 'but only one callback may be registered to a function in a native module.';
          }
          invariant(callback, errorMessage);
        }
        var profileName = debug ? '<callback for ' + _module + '.' + _method + '>' : cbID;
        if (callback && this.__spy && __DEV__) {
          this.__spy({ type: TO_JS, module: null, method: profileName, args: args });
        }
        Systrace.beginEvent('MessageQueue.invokeCallback(' + profileName + ', ' + stringifySafe(args) + ')');
      } else {
        if (!callback) {
          return;
        }
      }

      this._callbacks[cbID & ~1] = null;

      this._callbacks[cbID | 1] = null;

      callback.apply(null, args);

      if (__DEV__) {
        Systrace.endEvent();
      }
    }
  }], [{
    key: 'spy',
    value: function spy(spyOrToggle) {
      if (spyOrToggle === true) {
        MessageQueue.prototype.__spy = function (info) {
          console.log((info.type === TO_JS ? 'N->JS' : 'JS->N') + ' : ' + ('' + (info.module ? info.module + '.' : '') + info.method) + ('(' + JSON.stringify(info.args) + ')'));
        };
      } else if (spyOrToggle === false) {
        MessageQueue.prototype.__spy = null;
      } else {
        MessageQueue.prototype.__spy = spyOrToggle;
      }
    }
  }]);
  return MessageQueue;
}();

module.exports = MessageQueue;
}, 29, null, "MessageQueue");
__d(/* ErrorUtils */function(global, require, module, exports) {
module.exports = global.ErrorUtils;
}, 30, null, "ErrorUtils");
__d(/* JSTimersExecution */function(global, require, module, exports) {
'use strict';

var Systrace = require(32        ); // 32 = Systrace

var invariant = require(24                  ); // 24 = fbjs/lib/invariant
var performanceNow = require(40                       ); // 40 = fbjs/lib/performanceNow
var warning = require(13                ); // 13 = fbjs/lib/warning

var FRAME_DURATION = 1000 / 60;
var IDLE_CALLBACK_FRAME_DEADLINE = 1;

var hasEmittedTimeDriftWarning = false;

var JSTimersExecution = {
  GUID: 1,

  callbacks: [],
  types: [],
  timerIDs: [],
  immediates: [],
  requestIdleCallbacks: [],
  identifiers: [],

  errors: null,

  callTimer: function callTimer(timerID, frameTime) {
    warning(timerID <= JSTimersExecution.GUID, 'Tried to call timer with ID %s but no such timer exists.', timerID);

    var timerIndex = JSTimersExecution.timerIDs.indexOf(timerID);
    if (timerIndex === -1) {
      return;
    }

    var type = JSTimersExecution.types[timerIndex];
    var callback = JSTimersExecution.callbacks[timerIndex];
    if (!callback || !type) {
      console.error('No callback found for timerID ' + timerID);
      return;
    }

    if (__DEV__) {
      var identifier = JSTimersExecution.identifiers[timerIndex] || {};
      Systrace.beginEvent('Systrace.callTimer: ' + identifier.methodName);
    }

    if (type === 'setTimeout' || type === 'setImmediate' || type === 'requestAnimationFrame' || type === 'requestIdleCallback') {
      JSTimersExecution._clearIndex(timerIndex);
    }

    try {
      if (type === 'setTimeout' || type === 'setInterval' || type === 'setImmediate') {
        callback();
      } else if (type === 'requestAnimationFrame') {
        callback(performanceNow());
      } else if (type === 'requestIdleCallback') {
        callback({
          timeRemaining: function timeRemaining() {
            return Math.max(0, FRAME_DURATION - (performanceNow() - frameTime));
          }
        });
      } else {
        console.error('Tried to call a callback with invalid type: ' + type);
      }
    } catch (e) {
      if (!JSTimersExecution.errors) {
        JSTimersExecution.errors = [e];
      } else {
        JSTimersExecution.errors.push(e);
      }
    }

    if (__DEV__) {
      Systrace.endEvent();
    }
  },
  callTimers: function callTimers(timerIDs) {
    invariant(timerIDs.length !== 0, 'Cannot call `callTimers` with an empty list of IDs.');

    JSTimersExecution.errors = null;
    for (var i = 0; i < timerIDs.length; i++) {
      JSTimersExecution.callTimer(timerIDs[i], 0);
    }

    var errors = JSTimersExecution.errors;
    if (errors) {
      var errorCount = errors.length;
      if (errorCount > 1) {
        for (var ii = 1; ii < errorCount; ii++) {
          require(42        ).setTimeout(function (error) { // 42 = JSTimers
            throw error;
          }.bind(null, errors[ii]), 0);
        }
      }
      throw errors[0];
    }
  },


  callIdleCallbacks: function callIdleCallbacks(frameTime) {
    if (FRAME_DURATION - (performanceNow() - frameTime) < IDLE_CALLBACK_FRAME_DEADLINE) {
      return;
    }

    JSTimersExecution.errors = null;
    if (JSTimersExecution.requestIdleCallbacks.length > 0) {
      var passIdleCallbacks = JSTimersExecution.requestIdleCallbacks.slice();
      JSTimersExecution.requestIdleCallbacks = [];

      for (var i = 0; i < passIdleCallbacks.length; ++i) {
        JSTimersExecution.callTimer(passIdleCallbacks[i], frameTime);
      }
    }

    if (JSTimersExecution.requestIdleCallbacks.length === 0) {
      var _require = require(27             ), // 27 = NativeModules
          Timing = _require.Timing;

      Timing.setSendIdleEvents(false);
    }

    if (JSTimersExecution.errors) {
      JSTimersExecution.errors.forEach(function (error) {
        return require(42        ).setTimeout(function () { // 42 = JSTimers
          throw error;
        }, 0);
      });
    }
  },

  callImmediatesPass: function callImmediatesPass() {
    Systrace.beginEvent('JSTimersExecution.callImmediatesPass()');

    if (JSTimersExecution.immediates.length > 0) {
      var passImmediates = JSTimersExecution.immediates.slice();
      JSTimersExecution.immediates = [];

      for (var i = 0; i < passImmediates.length; ++i) {
        JSTimersExecution.callTimer(passImmediates[i], 0);
      }
    }

    Systrace.endEvent();

    return JSTimersExecution.immediates.length > 0;
  },
  callImmediates: function callImmediates() {
    JSTimersExecution.errors = null;
    while (JSTimersExecution.callImmediatesPass()) {}
    if (JSTimersExecution.errors) {
      JSTimersExecution.errors.forEach(function (error) {
        return require(42        ).setTimeout(function () { // 42 = JSTimers
          throw error;
        }, 0);
      });
    }
  },
  emitTimeDriftWarning: function emitTimeDriftWarning(warningMessage) {
    if (hasEmittedTimeDriftWarning) {
      return;
    }
    hasEmittedTimeDriftWarning = true;
    console.warn(warningMessage);
  },
  _clearIndex: function _clearIndex(i) {
    JSTimersExecution.timerIDs[i] = null;
    JSTimersExecution.callbacks[i] = null;
    JSTimersExecution.types[i] = null;
    JSTimersExecution.identifiers[i] = null;
  }
};

module.exports = JSTimersExecution;
}, 31, null, "JSTimersExecution");
__d(/* Systrace */function(global, require, module, exports) {
'use strict';

var TRACE_TAG_REACT_APPS = 1 << 17;
var TRACE_TAG_JSC_CALLS = 1 << 27;

var _enabled = false;
var _asyncCookie = 0;

var ReactSystraceDevtool = __DEV__ ? {
  onBeforeMountComponent: function onBeforeMountComponent(debugID) {
    var displayName = require(33                                ).getDisplayName(debugID); // 33 = react/lib/ReactComponentTreeHook
    Systrace.beginEvent('ReactReconciler.mountComponent(' + displayName + ')');
  },
  onMountComponent: function onMountComponent(debugID) {
    Systrace.endEvent();
  },
  onBeforeUpdateComponent: function onBeforeUpdateComponent(debugID) {
    var displayName = require(33                                ).getDisplayName(debugID); // 33 = react/lib/ReactComponentTreeHook
    Systrace.beginEvent('ReactReconciler.updateComponent(' + displayName + ')');
  },
  onUpdateComponent: function onUpdateComponent(debugID) {
    Systrace.endEvent();
  },
  onBeforeUnmountComponent: function onBeforeUnmountComponent(debugID) {
    var displayName = require(33                                ).getDisplayName(debugID); // 33 = react/lib/ReactComponentTreeHook
    Systrace.beginEvent('ReactReconciler.unmountComponent(' + displayName + ')');
  },
  onUnmountComponent: function onUnmountComponent(debugID) {
    Systrace.endEvent();
  },
  onBeginLifeCycleTimer: function onBeginLifeCycleTimer(debugID, timerType) {
    var displayName = require(33                                ).getDisplayName(debugID); // 33 = react/lib/ReactComponentTreeHook
    Systrace.beginEvent(displayName + '.' + timerType + '()');
  },
  onEndLifeCycleTimer: function onEndLifeCycleTimer(debugID, timerType) {
    Systrace.endEvent();
  }
} : null;

var Systrace = {
  setEnabled: function setEnabled(enabled) {
    if (_enabled !== enabled) {
      if (__DEV__) {
        if (enabled) {
          global.nativeTraceBeginLegacy && global.nativeTraceBeginLegacy(TRACE_TAG_JSC_CALLS);
          require(36              ).addHook(ReactSystraceDevtool); // 36 = ReactDebugTool
        } else {
          global.nativeTraceEndLegacy && global.nativeTraceEndLegacy(TRACE_TAG_JSC_CALLS);
          require(36              ).removeHook(ReactSystraceDevtool); // 36 = ReactDebugTool
        }
      }
      _enabled = enabled;
    }
  },
  beginEvent: function beginEvent(profileName, args) {
    if (_enabled) {
      profileName = typeof profileName === 'function' ? profileName() : profileName;
      global.nativeTraceBeginSection(TRACE_TAG_REACT_APPS, profileName, args);
    }
  },
  endEvent: function endEvent() {
    if (_enabled) {
      global.nativeTraceEndSection(TRACE_TAG_REACT_APPS);
    }
  },
  beginAsyncEvent: function beginAsyncEvent(profileName) {
    var cookie = _asyncCookie;
    if (_enabled) {
      _asyncCookie++;
      profileName = typeof profileName === 'function' ? profileName() : profileName;
      global.nativeTraceBeginAsyncSection(TRACE_TAG_REACT_APPS, profileName, cookie, 0);
    }
    return cookie;
  },
  endAsyncEvent: function endAsyncEvent(profileName, cookie) {
    if (_enabled) {
      profileName = typeof profileName === 'function' ? profileName() : profileName;
      global.nativeTraceEndAsyncSection(TRACE_TAG_REACT_APPS, profileName, cookie, 0);
    }
  },
  counterEvent: function counterEvent(profileName, value) {
    if (_enabled) {
      profileName = typeof profileName === 'function' ? profileName() : profileName;
      global.nativeTraceCounter && global.nativeTraceCounter(TRACE_TAG_REACT_APPS, profileName, value);
    }
  },
  attachToRelayProfiler: function attachToRelayProfiler(relayProfiler) {
    relayProfiler.attachProfileHandler('*', function (name) {
      var cookie = Systrace.beginAsyncEvent(name);
      return function () {
        Systrace.endAsyncEvent(name, cookie);
      };
    });

    relayProfiler.attachAggregateHandler('*', function (name, callback) {
      Systrace.beginEvent(name);
      callback();
      Systrace.endEvent();
    });
  },
  swizzleJSON: function swizzleJSON() {
    Systrace.measureMethods(JSON, 'JSON', ['parse', 'stringify']);
  },
  measureMethods: function measureMethods(object, objectName, methodNames) {
    if (!__DEV__) {
      return;
    }

    methodNames.forEach(function (methodName) {
      object[methodName] = Systrace.measure(objectName, methodName, object[methodName]);
    });
  },
  measure: function measure(objName, fnName, func) {
    if (!__DEV__) {
      return func;
    }

    var profileName = objName + '.' + fnName;
    return function () {
      if (!_enabled) {
        return func.apply(this, arguments);
      }

      Systrace.beginEvent(profileName);
      var ret = func.apply(this, arguments);
      Systrace.endEvent();
      return ret;
    };
  }
};

if (__DEV__) {
  require.Systrace = Systrace;
}

module.exports = Systrace;
}, 32, null, "Systrace");
__d(/* react/lib/ReactComponentTreeHook.js */function(global, require, module, exports) {

'use strict';

var _prodInvariant = require(34                    ); // 34 = ./reactProdInvariant

var ReactCurrentOwner = require(35                   ); // 35 = ./ReactCurrentOwner

var invariant = require(24                  ); // 24 = fbjs/lib/invariant
var warning = require(13                ); // 13 = fbjs/lib/warning

function isNative(fn) {
  var funcToString = Function.prototype.toString;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
  try {
    var source = funcToString.call(fn);
    return reIsNative.test(source);
  } catch (err) {
    return false;
  }
}

var canUseCollections = typeof Array.from === 'function' && typeof Map === 'function' && isNative(Map) && Map.prototype != null && typeof Map.prototype.keys === 'function' && isNative(Map.prototype.keys) && typeof Set === 'function' && isNative(Set) && Set.prototype != null && typeof Set.prototype.keys === 'function' && isNative(Set.prototype.keys);

var setItem;
var getItem;
var removeItem;
var getItemIDs;
var addRoot;
var removeRoot;
var getRootIDs;

if (canUseCollections) {
  var itemMap = new Map();
  var rootIDSet = new Set();

  setItem = function setItem(id, item) {
    itemMap.set(id, item);
  };
  getItem = function getItem(id) {
    return itemMap.get(id);
  };
  removeItem = function removeItem(id) {
    itemMap['delete'](id);
  };
  getItemIDs = function getItemIDs() {
    return Array.from(itemMap.keys());
  };

  addRoot = function addRoot(id) {
    rootIDSet.add(id);
  };
  removeRoot = function removeRoot(id) {
    rootIDSet['delete'](id);
  };
  getRootIDs = function getRootIDs() {
    return Array.from(rootIDSet.keys());
  };
} else {
  var itemByKey = {};
  var rootByKey = {};

  var getKeyFromID = function getKeyFromID(id) {
    return '.' + id;
  };
  var getIDFromKey = function getIDFromKey(key) {
    return parseInt(key.substr(1), 10);
  };

  setItem = function setItem(id, item) {
    var key = getKeyFromID(id);
    itemByKey[key] = item;
  };
  getItem = function getItem(id) {
    var key = getKeyFromID(id);
    return itemByKey[key];
  };
  removeItem = function removeItem(id) {
    var key = getKeyFromID(id);
    delete itemByKey[key];
  };
  getItemIDs = function getItemIDs() {
    return Object.keys(itemByKey).map(getIDFromKey);
  };

  addRoot = function addRoot(id) {
    var key = getKeyFromID(id);
    rootByKey[key] = true;
  };
  removeRoot = function removeRoot(id) {
    var key = getKeyFromID(id);
    delete rootByKey[key];
  };
  getRootIDs = function getRootIDs() {
    return Object.keys(rootByKey).map(getIDFromKey);
  };
}

var unmountedIDs = [];

function purgeDeep(id) {
  var item = getItem(id);
  if (item) {
    var childIDs = item.childIDs;

    removeItem(id);
    childIDs.forEach(purgeDeep);
  }
}

function describeComponentFrame(name, source, ownerName) {
  return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
}

function _getDisplayName(element) {
  if (element == null) {
    return '#empty';
  } else if (typeof element === 'string' || typeof element === 'number') {
    return '#text';
  } else if (typeof element.type === 'string') {
    return element.type;
  } else {
    return element.type.displayName || element.type.name || 'Unknown';
  }
}

function describeID(id) {
  var name = ReactComponentTreeHook.getDisplayName(id);
  var element = ReactComponentTreeHook.getElement(id);
  var ownerID = ReactComponentTreeHook.getOwnerID(id);
  var ownerName;
  if (ownerID) {
    ownerName = ReactComponentTreeHook.getDisplayName(ownerID);
  }
  process.env.NODE_ENV !== 'production' ? warning(element, 'ReactComponentTreeHook: Missing React element for debugID %s when ' + 'building stack', id) : void 0;
  return describeComponentFrame(name, element && element._source, ownerName);
}

var ReactComponentTreeHook = {
  onSetChildren: function onSetChildren(id, nextChildIDs) {
    var item = getItem(id);
    !item ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
    item.childIDs = nextChildIDs;

    for (var i = 0; i < nextChildIDs.length; i++) {
      var nextChildID = nextChildIDs[i];
      var nextChild = getItem(nextChildID);
      !nextChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected hook events to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('140') : void 0;
      !(nextChild.childIDs != null || typeof nextChild.element !== 'object' || nextChild.element == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onSetChildren() to fire for a container child before its parent includes it in onSetChildren().') : _prodInvariant('141') : void 0;
      !nextChild.isMounted ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onMountComponent() to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('71') : void 0;
      if (nextChild.parentID == null) {
        nextChild.parentID = id;
      }
      !(nextChild.parentID === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onBeforeMountComponent() parent and onSetChildren() to be consistent (%s has parents %s and %s).', nextChildID, nextChild.parentID, id) : _prodInvariant('142', nextChildID, nextChild.parentID, id) : void 0;
    }
  },
  onBeforeMountComponent: function onBeforeMountComponent(id, element, parentID) {
    var item = {
      element: element,
      parentID: parentID,
      text: null,
      childIDs: [],
      isMounted: false,
      updateCount: 0
    };
    setItem(id, item);
  },
  onBeforeUpdateComponent: function onBeforeUpdateComponent(id, element) {
    var item = getItem(id);
    if (!item || !item.isMounted) {
      return;
    }
    item.element = element;
  },
  onMountComponent: function onMountComponent(id) {
    var item = getItem(id);
    !item ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
    item.isMounted = true;
    var isRoot = item.parentID === 0;
    if (isRoot) {
      addRoot(id);
    }
  },
  onUpdateComponent: function onUpdateComponent(id) {
    var item = getItem(id);
    if (!item || !item.isMounted) {
      return;
    }
    item.updateCount++;
  },
  onUnmountComponent: function onUnmountComponent(id) {
    var item = getItem(id);
    if (item) {
      item.isMounted = false;
      var isRoot = item.parentID === 0;
      if (isRoot) {
        removeRoot(id);
      }
    }
    unmountedIDs.push(id);
  },
  purgeUnmountedComponents: function purgeUnmountedComponents() {
    if (ReactComponentTreeHook._preventPurging) {
      return;
    }

    for (var i = 0; i < unmountedIDs.length; i++) {
      var id = unmountedIDs[i];
      purgeDeep(id);
    }
    unmountedIDs.length = 0;
  },
  isMounted: function isMounted(id) {
    var item = getItem(id);
    return item ? item.isMounted : false;
  },
  getCurrentStackAddendum: function getCurrentStackAddendum(topElement) {
    var info = '';
    if (topElement) {
      var name = _getDisplayName(topElement);
      var owner = topElement._owner;
      info += describeComponentFrame(name, topElement._source, owner && owner.getName());
    }

    var currentOwner = ReactCurrentOwner.current;
    var id = currentOwner && currentOwner._debugID;

    info += ReactComponentTreeHook.getStackAddendumByID(id);
    return info;
  },
  getStackAddendumByID: function getStackAddendumByID(id) {
    var info = '';
    while (id) {
      info += describeID(id);
      id = ReactComponentTreeHook.getParentID(id);
    }
    return info;
  },
  getChildIDs: function getChildIDs(id) {
    var item = getItem(id);
    return item ? item.childIDs : [];
  },
  getDisplayName: function getDisplayName(id) {
    var element = ReactComponentTreeHook.getElement(id);
    if (!element) {
      return null;
    }
    return _getDisplayName(element);
  },
  getElement: function getElement(id) {
    var item = getItem(id);
    return item ? item.element : null;
  },
  getOwnerID: function getOwnerID(id) {
    var element = ReactComponentTreeHook.getElement(id);
    if (!element || !element._owner) {
      return null;
    }
    return element._owner._debugID;
  },
  getParentID: function getParentID(id) {
    var item = getItem(id);
    return item ? item.parentID : null;
  },
  getSource: function getSource(id) {
    var item = getItem(id);
    var element = item ? item.element : null;
    var source = element != null ? element._source : null;
    return source;
  },
  getText: function getText(id) {
    var element = ReactComponentTreeHook.getElement(id);
    if (typeof element === 'string') {
      return element;
    } else if (typeof element === 'number') {
      return '' + element;
    } else {
      return null;
    }
  },
  getUpdateCount: function getUpdateCount(id) {
    var item = getItem(id);
    return item ? item.updateCount : 0;
  },

  getRootIDs: getRootIDs,
  getRegisteredIDs: getItemIDs
};

module.exports = ReactComponentTreeHook;
}, 33, null, "react/lib/ReactComponentTreeHook.js");
__d(/* react/lib/reactProdInvariant.js */function(global, require, module, exports) {
'use strict';

function reactProdInvariant(code) {
  var argCount = arguments.length - 1;

  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;

  for (var argIdx = 0; argIdx < argCount; argIdx++) {
    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
  }

  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';

  var error = new Error(message);
  error.name = 'Invariant Violation';
  error.framesToPop = 1;

  throw error;
}

module.exports = reactProdInvariant;
}, 34, null, "react/lib/reactProdInvariant.js");
__d(/* react/lib/ReactCurrentOwner.js */function(global, require, module, exports) {

'use strict';

var ReactCurrentOwner = {
  current: null

};

module.exports = ReactCurrentOwner;
}, 35, null, "react/lib/ReactCurrentOwner.js");
__d(/* ReactDebugTool */function(global, require, module, exports) {

'use strict';

var ReactInvalidSetStateWarningHook = require(37                               ); // 37 = ReactInvalidSetStateWarningHook
var ReactHostOperationHistoryHook = require(38                             ); // 38 = ReactHostOperationHistoryHook
var ReactComponentTreeHook = require(33                                ); // 33 = react/lib/ReactComponentTreeHook
var ExecutionEnvironment = require(39                             ); // 39 = fbjs/lib/ExecutionEnvironment

var performanceNow = require(40                       ); // 40 = fbjs/lib/performanceNow
var warning = require(13                ); // 13 = fbjs/lib/warning

var hooks = [];
var didHookThrowForEvent = {};

function callHook(event, fn, context, arg1, arg2, arg3, arg4, arg5) {
  try {
    fn.call(context, arg1, arg2, arg3, arg4, arg5);
  } catch (e) {
    warning(didHookThrowForEvent[event], 'Exception thrown by hook while handling %s: %s', event, e + '\n' + e.stack);
    didHookThrowForEvent[event] = true;
  }
}

function emitEvent(event, arg1, arg2, arg3, arg4, arg5) {
  for (var i = 0; i < hooks.length; i++) {
    var hook = hooks[i];
    var fn = hook[event];
    if (fn) {
      callHook(event, fn, hook, arg1, arg2, arg3, arg4, arg5);
    }
  }
}

var _isProfiling = false;
var flushHistory = [];
var lifeCycleTimerStack = [];
var currentFlushNesting = 0;
var currentFlushMeasurements = [];
var currentFlushStartTime = 0;
var currentTimerDebugID = null;
var currentTimerStartTime = 0;
var currentTimerNestedFlushDuration = 0;
var currentTimerType = null;

var lifeCycleTimerHasWarned = false;

function clearHistory() {
  ReactComponentTreeHook.purgeUnmountedComponents();
  ReactHostOperationHistoryHook.clearHistory();
}

function getTreeSnapshot(registeredIDs) {
  return registeredIDs.reduce(function (tree, id) {
    var ownerID = ReactComponentTreeHook.getOwnerID(id);
    var parentID = ReactComponentTreeHook.getParentID(id);
    tree[id] = {
      displayName: ReactComponentTreeHook.getDisplayName(id),
      text: ReactComponentTreeHook.getText(id),
      updateCount: ReactComponentTreeHook.getUpdateCount(id),
      childIDs: ReactComponentTreeHook.getChildIDs(id),

      ownerID: ownerID || parentID && ReactComponentTreeHook.getOwnerID(parentID) || 0,
      parentID: parentID
    };
    return tree;
  }, {});
}

function resetMeasurements() {
  var previousStartTime = currentFlushStartTime;
  var previousMeasurements = currentFlushMeasurements;
  var previousOperations = ReactHostOperationHistoryHook.getHistory();

  if (currentFlushNesting === 0) {
    currentFlushStartTime = 0;
    currentFlushMeasurements = [];
    clearHistory();
    return;
  }

  if (previousMeasurements.length || previousOperations.length) {
    var registeredIDs = ReactComponentTreeHook.getRegisteredIDs();
    flushHistory.push({
      duration: performanceNow() - previousStartTime,
      measurements: previousMeasurements || [],
      operations: previousOperations || [],
      treeSnapshot: getTreeSnapshot(registeredIDs)
    });
  }

  clearHistory();
  currentFlushStartTime = performanceNow();
  currentFlushMeasurements = [];
}

function checkDebugID(debugID) {
  var allowRoot = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  if (allowRoot && debugID === 0) {
    return;
  }
  if (!debugID) {
    warning(false, 'ReactDebugTool: debugID may not be empty.');
  }
}

function beginLifeCycleTimer(debugID, timerType) {
  if (currentFlushNesting === 0) {
    return;
  }
  if (currentTimerType && !lifeCycleTimerHasWarned) {
    warning(false, 'There is an internal error in the React performance measurement code. ' + 'Did not expect %s timer to start while %s timer is still in ' + 'progress for %s instance.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another');
    lifeCycleTimerHasWarned = true;
  }
  currentTimerStartTime = performanceNow();
  currentTimerNestedFlushDuration = 0;
  currentTimerDebugID = debugID;
  currentTimerType = timerType;
}

function endLifeCycleTimer(debugID, timerType) {
  if (currentFlushNesting === 0) {
    return;
  }
  if (currentTimerType !== timerType && !lifeCycleTimerHasWarned) {
    warning(false, 'There is an internal error in the React performance measurement code. ' + 'We did not expect %s timer to stop while %s timer is still in ' + 'progress for %s instance. Please report this as a bug in React.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another');
    lifeCycleTimerHasWarned = true;
  }
  if (_isProfiling) {
    currentFlushMeasurements.push({
      timerType: timerType,
      instanceID: debugID,
      duration: performanceNow() - currentTimerStartTime - currentTimerNestedFlushDuration
    });
  }
  currentTimerStartTime = 0;
  currentTimerNestedFlushDuration = 0;
  currentTimerDebugID = null;
  currentTimerType = null;
}

function pauseCurrentLifeCycleTimer() {
  var currentTimer = {
    startTime: currentTimerStartTime,
    nestedFlushStartTime: performanceNow(),
    debugID: currentTimerDebugID,
    timerType: currentTimerType
  };
  lifeCycleTimerStack.push(currentTimer);
  currentTimerStartTime = 0;
  currentTimerNestedFlushDuration = 0;
  currentTimerDebugID = null;
  currentTimerType = null;
}

function resumeCurrentLifeCycleTimer() {
  var _lifeCycleTimerStack$ = lifeCycleTimerStack.pop(),
      startTime = _lifeCycleTimerStack$.startTime,
      nestedFlushStartTime = _lifeCycleTimerStack$.nestedFlushStartTime,
      debugID = _lifeCycleTimerStack$.debugID,
      timerType = _lifeCycleTimerStack$.timerType;

  var nestedFlushDuration = performanceNow() - nestedFlushStartTime;
  currentTimerStartTime = startTime;
  currentTimerNestedFlushDuration += nestedFlushDuration;
  currentTimerDebugID = debugID;
  currentTimerType = timerType;
}

var lastMarkTimeStamp = 0;
var canUsePerformanceMeasure = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function';

function shouldMark(debugID) {
  if (!_isProfiling || !canUsePerformanceMeasure) {
    return false;
  }
  var element = ReactComponentTreeHook.getElement(debugID);
  if (element == null || typeof element !== 'object') {
    return false;
  }
  var isHostElement = typeof element.type === 'string';
  if (isHostElement) {
    return false;
  }
  return true;
}

function markBegin(debugID, markType) {
  if (!shouldMark(debugID)) {
    return;
  }

  var markName = debugID + '::' + markType;
  lastMarkTimeStamp = performanceNow();
  performance.mark(markName);
}

function markEnd(debugID, markType) {
  if (!shouldMark(debugID)) {
    return;
  }

  var markName = debugID + '::' + markType;
  var displayName = ReactComponentTreeHook.getDisplayName(debugID) || 'Unknown';

  var timeStamp = performanceNow();
  if (timeStamp - lastMarkTimeStamp > 0.1) {
    var measurementName = displayName + ' [' + markType + ']';
    performance.measure(measurementName, markName);
  }

  performance.clearMarks(markName);
  performance.clearMeasures(measurementName);
}

var ReactDebugTool = {
  addHook: function addHook(hook) {
    hooks.push(hook);
  },
  removeHook: function removeHook(hook) {
    for (var i = 0; i < hooks.length; i++) {
      if (hooks[i] === hook) {
        hooks.splice(i, 1);
        i--;
      }
    }
  },
  isProfiling: function isProfiling() {
    return _isProfiling;
  },
  beginProfiling: function beginProfiling() {
    if (_isProfiling) {
      return;
    }

    _isProfiling = true;
    flushHistory.length = 0;
    resetMeasurements();
    ReactDebugTool.addHook(ReactHostOperationHistoryHook);
  },
  endProfiling: function endProfiling() {
    if (!_isProfiling) {
      return;
    }

    _isProfiling = false;
    resetMeasurements();
    ReactDebugTool.removeHook(ReactHostOperationHistoryHook);
  },
  getFlushHistory: function getFlushHistory() {
    return flushHistory;
  },
  onBeginFlush: function onBeginFlush() {
    currentFlushNesting++;
    resetMeasurements();
    pauseCurrentLifeCycleTimer();
    emitEvent('onBeginFlush');
  },
  onEndFlush: function onEndFlush() {
    resetMeasurements();
    currentFlushNesting--;
    resumeCurrentLifeCycleTimer();
    emitEvent('onEndFlush');
  },
  onBeginLifeCycleTimer: function onBeginLifeCycleTimer(debugID, timerType) {
    checkDebugID(debugID);
    emitEvent('onBeginLifeCycleTimer', debugID, timerType);
    markBegin(debugID, timerType);
    beginLifeCycleTimer(debugID, timerType);
  },
  onEndLifeCycleTimer: function onEndLifeCycleTimer(debugID, timerType) {
    checkDebugID(debugID);
    endLifeCycleTimer(debugID, timerType);
    markEnd(debugID, timerType);
    emitEvent('onEndLifeCycleTimer', debugID, timerType);
  },
  onBeginProcessingChildContext: function onBeginProcessingChildContext() {
    emitEvent('onBeginProcessingChildContext');
  },
  onEndProcessingChildContext: function onEndProcessingChildContext() {
    emitEvent('onEndProcessingChildContext');
  },
  onHostOperation: function onHostOperation(operation) {
    checkDebugID(operation.instanceID);
    emitEvent('onHostOperation', operation);
  },
  onSetState: function onSetState() {
    emitEvent('onSetState');
  },
  onSetChildren: function onSetChildren(debugID, childDebugIDs) {
    checkDebugID(debugID);
    childDebugIDs.forEach(checkDebugID);
    emitEvent('onSetChildren', debugID, childDebugIDs);
  },
  onBeforeMountComponent: function onBeforeMountComponent(debugID, element, parentDebugID) {
    checkDebugID(debugID);
    checkDebugID(parentDebugID, true);
    emitEvent('onBeforeMountComponent', debugID, element, parentDebugID);
    markBegin(debugID, 'mount');
  },
  onMountComponent: function onMountComponent(debugID) {
    checkDebugID(debugID);
    markEnd(debugID, 'mount');
    emitEvent('onMountComponent', debugID);
  },
  onBeforeUpdateComponent: function onBeforeUpdateComponent(debugID, element) {
    checkDebugID(debugID);
    emitEvent('onBeforeUpdateComponent', debugID, element);
    markBegin(debugID, 'update');
  },
  onUpdateComponent: function onUpdateComponent(debugID) {
    checkDebugID(debugID);
    markEnd(debugID, 'update');
    emitEvent('onUpdateComponent', debugID);
  },
  onBeforeUnmountComponent: function onBeforeUnmountComponent(debugID) {
    checkDebugID(debugID);
    emitEvent('onBeforeUnmountComponent', debugID);
    markBegin(debugID, 'unmount');
  },
  onUnmountComponent: function onUnmountComponent(debugID) {
    checkDebugID(debugID);
    markEnd(debugID, 'unmount');
    emitEvent('onUnmountComponent', debugID);
  },
  onTestEvent: function onTestEvent() {
    emitEvent('onTestEvent');
  }
};

ReactDebugTool.addHook(ReactInvalidSetStateWarningHook);
ReactDebugTool.addHook(ReactComponentTreeHook);
var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
if (/[?&]react_perf\b/.test(url)) {
  ReactDebugTool.beginProfiling();
}

module.exports = ReactDebugTool;
}, 36, null, "ReactDebugTool");
__d(/* ReactInvalidSetStateWarningHook */function(global, require, module, exports) {

'use strict';

var warning = require(13                ); // 13 = fbjs/lib/warning

if (__DEV__) {
  var processingChildContext = false;

  var warnInvalidSetState = function warnInvalidSetState() {
    warning(!processingChildContext, 'setState(...): Cannot call setState() inside getChildContext()');
  };
}

var ReactInvalidSetStateWarningHook = {
  onBeginProcessingChildContext: function onBeginProcessingChildContext() {
    processingChildContext = true;
  },
  onEndProcessingChildContext: function onEndProcessingChildContext() {
    processingChildContext = false;
  },
  onSetState: function onSetState() {
    warnInvalidSetState();
  }
};

module.exports = ReactInvalidSetStateWarningHook;
}, 37, null, "ReactInvalidSetStateWarningHook");
__d(/* ReactHostOperationHistoryHook */function(global, require, module, exports) {

'use strict';

var history = [];

var ReactHostOperationHistoryHook = {
  onHostOperation: function onHostOperation(operation) {
    history.push(operation);
  },
  clearHistory: function clearHistory() {
    if (ReactHostOperationHistoryHook._preventClearing) {
      return;
    }

    history = [];
  },
  getHistory: function getHistory() {
    return history;
  }
};

module.exports = ReactHostOperationHistoryHook;
}, 38, null, "ReactHostOperationHistoryHook");
__d(/* fbjs/lib/ExecutionEnvironment.js */function(global, require, module, exports) {

'use strict';

var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

var ExecutionEnvironment = {

  canUseDOM: canUseDOM,

  canUseWorkers: typeof Worker !== 'undefined',

  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

  canUseViewport: canUseDOM && !!window.screen,

  isInWorker: !canUseDOM };

module.exports = ExecutionEnvironment;
}, 39, null, "fbjs/lib/ExecutionEnvironment.js");
__d(/* fbjs/lib/performanceNow.js */function(global, require, module, exports) {'use strict';

var performance = require(41             ); // 41 = ./performance

var performanceNow;

if (performance.now) {
  performanceNow = function performanceNow() {
    return performance.now();
  };
} else {
  performanceNow = function performanceNow() {
    return Date.now();
  };
}

module.exports = performanceNow;
}, 40, null, "fbjs/lib/performanceNow.js");
__d(/* fbjs/lib/performance.js */function(global, require, module, exports) {

'use strict';

var ExecutionEnvironment = require(39                      ); // 39 = ./ExecutionEnvironment

var performance;

if (ExecutionEnvironment.canUseDOM) {
  performance = window.performance || window.msPerformance || window.webkitPerformance;
}

module.exports = performance || {};
}, 41, null, "fbjs/lib/performance.js");
__d(/* JSTimers */function(global, require, module, exports) {
'use strict';

var RCTTiming = require(27             ).Timing; // 27 = NativeModules
var JSTimersExecution = require(31                 ); // 31 = JSTimersExecution

var parseErrorStack = require(43               ); // 43 = parseErrorStack

function _getFreeIndex() {
  var freeIndex = JSTimersExecution.timerIDs.indexOf(null);
  if (freeIndex === -1) {
    freeIndex = JSTimersExecution.timerIDs.length;
  }
  return freeIndex;
}

function _allocateCallback(func, type) {
  var id = JSTimersExecution.GUID++;
  var freeIndex = _getFreeIndex();
  JSTimersExecution.timerIDs[freeIndex] = id;
  JSTimersExecution.callbacks[freeIndex] = func;
  JSTimersExecution.types[freeIndex] = type;
  if (__DEV__) {
    var e = new Error();
    e.framesToPop = 1;
    var stack = parseErrorStack(e);
    if (stack) {
      JSTimersExecution.identifiers[freeIndex] = stack.shift();
    }
  }
  return id;
}

function _freeCallback(timerID) {
  if (timerID == null) {
    return;
  }

  var index = JSTimersExecution.timerIDs.indexOf(timerID);

  if (index !== -1) {
    JSTimersExecution._clearIndex(index);
    var type = JSTimersExecution.types[index];
    if (type !== 'setImmediate' && type !== 'requestIdleCallback') {
      RCTTiming.deleteTimer(timerID);
    }
  }
}

var JSTimers = {
  setTimeout: function setTimeout(func, duration) {
    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    var id = _allocateCallback(function () {
      return func.apply(undefined, args);
    }, 'setTimeout');
    RCTTiming.createTimer(id, duration || 0, Date.now(), false);
    return id;
  },

  setInterval: function setInterval(func, duration) {
    for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
      args[_key2 - 2] = arguments[_key2];
    }

    var id = _allocateCallback(function () {
      return func.apply(undefined, args);
    }, 'setInterval');
    RCTTiming.createTimer(id, duration || 0, Date.now(), true);
    return id;
  },

  setImmediate: function setImmediate(func) {
    for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
      args[_key3 - 1] = arguments[_key3];
    }

    var id = _allocateCallback(function () {
      return func.apply(undefined, args);
    }, 'setImmediate');
    JSTimersExecution.immediates.push(id);
    return id;
  },

  requestAnimationFrame: function requestAnimationFrame(func) {
    var id = _allocateCallback(func, 'requestAnimationFrame');
    RCTTiming.createTimer(id, 1, Date.now(), false);
    return id;
  },

  requestIdleCallback: function requestIdleCallback(func) {
    if (JSTimersExecution.requestIdleCallbacks.length === 0) {
      RCTTiming.setSendIdleEvents(true);
    }

    var id = _allocateCallback(func, 'requestIdleCallback');
    JSTimersExecution.requestIdleCallbacks.push(id);
    return id;
  },

  cancelIdleCallback: function cancelIdleCallback(timerID) {
    _freeCallback(timerID);
    var index = JSTimersExecution.requestIdleCallbacks.indexOf(timerID);
    if (index !== -1) {
      JSTimersExecution.requestIdleCallbacks.splice(index, 1);
    }

    if (JSTimersExecution.requestIdleCallbacks.length === 0) {
      RCTTiming.setSendIdleEvents(false);
    }
  },

  clearTimeout: function clearTimeout(timerID) {
    _freeCallback(timerID);
  },

  clearInterval: function clearInterval(timerID) {
    _freeCallback(timerID);
  },

  clearImmediate: function clearImmediate(timerID) {
    _freeCallback(timerID);
    var index = JSTimersExecution.immediates.indexOf(timerID);
    if (index !== -1) {
      JSTimersExecution.immediates.splice(index, 1);
    }
  },

  cancelAnimationFrame: function cancelAnimationFrame(timerID) {
    _freeCallback(timerID);
  }
};

module.exports = JSTimers;
}, 42, null, "JSTimers");
__d(/* parseErrorStack */function(global, require, module, exports) {
'use strict';

var stacktraceParser = require(44                 ); // 44 = stacktrace-parser

function parseErrorStack(e) {
  if (!e || !e.stack) {
    return [];
  }

  var stack = Array.isArray(e.stack) ? e.stack : stacktraceParser.parse(e.stack);

  var framesToPop = typeof e.framesToPop === 'number' ? e.framesToPop : 0;
  while (framesToPop--) {
    stack.shift();
  }

  return stack;
}

module.exports = parseErrorStack;
}, 43, null, "parseErrorStack");
__d(/* stacktrace-parser/index.js */function(global, require, module, exports) {module.exports = require(45                          ); // 45 = ./lib/stacktrace-parser.js
}, 44, null, "stacktrace-parser/index.js");
__d(/* stacktrace-parser/lib/stacktrace-parser.js */function(global, require, module, exports) {

var UNKNOWN_FUNCTION = '<unknown>';

var StackTraceParser = {
    parse: function parse(stackString) {
        var chrome = /^\s*at (?:(?:(?:Anonymous function)?|((?:\[object object\])?\S+(?: \[as \S+\])?)) )?\(?((?:file|http|https):.*?):(\d+)(?::(\d+))?\)?\s*$/i,
            gecko = /^(?:\s*([^@]*)(?:\((.*?)\))?@)?(\S.*?):(\d+)(?::(\d+))?\s*$/i,
            node = /^\s*at (?:((?:\[object object\])?\S+(?: \[as \S+\])?) )?\(?(.*?):(\d+)(?::(\d+))?\)?\s*$/i,
            lines = stackString.split('\n'),
            stack = [],
            parts,
            element;

        for (var i = 0, j = lines.length; i < j; ++i) {
            if (parts = gecko.exec(lines[i])) {
                element = {
                    'file': parts[3],
                    'methodName': parts[1] || UNKNOWN_FUNCTION,
                    'lineNumber': +parts[4],
                    'column': parts[5] ? +parts[5] : null
                };
            } else if (parts = chrome.exec(lines[i])) {
                element = {
                    'file': parts[2],
                    'methodName': parts[1] || UNKNOWN_FUNCTION,
                    'lineNumber': +parts[3],
                    'column': parts[4] ? +parts[4] : null
                };
            } else if (parts = node.exec(lines[i])) {
                element = {
                    'file': parts[2],
                    'methodName': parts[1] || UNKNOWN_FUNCTION,
                    'lineNumber': +parts[3],
                    'column': parts[4] ? +parts[4] : null
                };
            } else {
                continue;
            }

            stack.push(element);
        }

        return stack;
    }
};

module.exports = StackTraceParser;
}, 45, null, "stacktrace-parser/lib/stacktrace-parser.js");
__d(/* deepFreezeAndThrowOnMutationInDev */function(global, require, module, exports) {

'use strict';

function deepFreezeAndThrowOnMutationInDev(object) {
  if (__DEV__) {
    if (typeof object !== 'object' || object === null || Object.isFrozen(object) || Object.isSealed(object)) {
      return;
    }

    var keys = Object.keys(object);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      if (object.hasOwnProperty(key)) {
        object.__defineGetter__(key, identity.bind(null, object[key]));
        object.__defineSetter__(key, throwOnImmutableMutation.bind(null, key));
      }
    }

    Object.freeze(object);
    Object.seal(object);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      if (object.hasOwnProperty(key)) {
        deepFreezeAndThrowOnMutationInDev(object[key]);
      }
    }
  }
}

function throwOnImmutableMutation(key, value) {
  throw Error('You attempted to set the key `' + key + '` with the value `' + JSON.stringify(value) + '` on an object that is meant to be immutable ' + 'and has been frozen.');
}

function identity(value) {
  return value;
}

module.exports = deepFreezeAndThrowOnMutationInDev;
}, 46, null, "deepFreezeAndThrowOnMutationInDev");
__d(/* stringifySafe */function(global, require, module, exports) {
'use strict';

function stringifySafe(arg) {
  var ret;
  var type = typeof arg;
  if (arg === undefined) {
    ret = 'undefined';
  } else if (arg === null) {
    ret = 'null';
  } else if (type === 'string') {
    ret = '"' + arg + '"';
  } else if (type === 'function') {
    try {
      ret = arg.toString();
    } catch (e) {
      ret = '[function unknown]';
    }
  } else {
    try {
      ret = JSON.stringify(arg);
    } catch (e) {
      if (typeof arg.toString === 'function') {
        try {
          ret = arg.toString();
        } catch (E) {}
      }
    }
  }
  return ret || '["' + type + '" failed to stringify]';
}

module.exports = stringifySafe;
}, 47, null, "stringifySafe");
__d(/* HeapCapture */function(global, require, module, exports) {
'use strict';

var HeapCapture = {
  captureHeap: function captureHeap(path) {
    var error = null;
    try {
      global.nativeCaptureHeap(path);
      console.log('HeapCapture.captureHeap succeeded: ' + path);
    } catch (e) {
      console.log('HeapCapture.captureHeap error: ' + e.toString());
      error = e.toString();
    }
    require(27             ).JSCHeapCapture.captureComplete(path, error); // 27 = NativeModules
  }
};

module.exports = HeapCapture;
}, 48, null, "HeapCapture");
__d(/* SamplingProfiler */function(global, require, module, exports) {
'use strict';

var SamplingProfiler = {
  poke: function poke(token) {
    var error = null;
    var result = null;
    try {
      result = global.pokeSamplingProfiler();
      if (result === null) {
        console.log('The JSC Sampling Profiler has started');
      } else {
        console.log('The JSC Sampling Profiler has stopped');
      }
    } catch (e) {
      console.log('Error occured when restarting Sampling Profiler: ' + e.toString());
      error = e.toString();
    }
    require(27             ).JSCSamplingProfiler.operationComplete(token, result, error); // 27 = NativeModules
  }
};

module.exports = SamplingProfiler;
}, 49, null, "SamplingProfiler");
__d(/* HMRClient */function(global, require, module, exports) {
'use strict';

var Platform = require(26        ); // 26 = Platform
var invariant = require(24                  ); // 24 = fbjs/lib/invariant

var HMRClient = {
  enable: function enable(platform, bundleEntry, host, port) {
    invariant(platform, 'Missing required parameter `platform`');
    invariant(bundleEntry, 'Missing required paramenter `bundleEntry`');
    invariant(host, 'Missing required paramenter `host`');

    var WebSocket = require(51         ); // 51 = WebSocket

    var wsHostPort = port !== null && port !== '' ? host + ':' + port : host;

    var wsUrl = 'ws://' + wsHostPort + '/hot?' + ('platform=' + platform + '&') + ('bundleEntry=' + bundleEntry.replace('.bundle', '.js'));

    var activeWS = new WebSocket(wsUrl);
    activeWS.onerror = function (e) {
      var error = 'Hot loading isn\'t working because it cannot connect to the development server.\n\nTry the following to fix the issue:\n- Ensure that the packager server is running and available on the same network';

      if (Platform.OS === 'ios') {
        error += '\n- Ensure that the Packager server URL is correctly set in AppDelegate';
      } else {
        error += '\n- Ensure that your device/emulator is connected to your machine and has USB debugging enabled - run \'adb devices\' to see a list of connected devices\n- If you\'re on a physical device connected to the same machine, run \'adb reverse tcp:8081 tcp:8081\' to forward requests from your device\n- If your device is on the same Wi-Fi network, set \'Debug server host & port for device\' in \'Dev settings\' to your machine\'s IP address and the port of the local dev server - e.g. 10.0.1.1:8081';
      }

      error += '\n\nURL: ' + host + ':' + port + '\n\nError: ' + e.message;

      throw new Error(error);
    };
    activeWS.onmessage = function (_ref) {
      var data = _ref.data;

      var HMRLoadingView = require(70              ); // 70 = HMRLoadingView

      data = JSON.parse(data);

      switch (data.type) {
        case 'update-start':
          {
            HMRLoadingView.showMessage('Hot Loading...');
            break;
          }
        case 'update':
          {
            var _data$body = data.body,
                modules = _data$body.modules,
                sourceMappingURLs = _data$body.sourceMappingURLs,
                sourceURLs = _data$body.sourceURLs,
                inverseDependencies = _data$body.inverseDependencies;


            if (Platform.OS === 'ios') {
              var RCTRedBox = require(27             ).RedBox; // 27 = NativeModules
              RCTRedBox && RCTRedBox.dismiss && RCTRedBox.dismiss();
            } else {
              var RCTExceptionsManager = require(27             ).ExceptionsManager; // 27 = NativeModules
              RCTExceptionsManager && RCTExceptionsManager.dismissRedbox && RCTExceptionsManager.dismissRedbox();
            }

            modules.forEach(function (_ref2, i) {
              var id = _ref2.id,
                  code = _ref2.code;

              code = code + '\n\n' + sourceMappingURLs[i];

              var injectFunction = typeof global.nativeInjectHMRUpdate === 'function' ? global.nativeInjectHMRUpdate : eval;

              code = ['__accept(', id + ',', 'function(global,require,module,exports){', '' + code, '\n},', '' + JSON.stringify(inverseDependencies), ');'].join('');

              injectFunction(code, sourceURLs[i]);
            });

            HMRLoadingView.hide();
            break;
          }
        case 'update-done':
          {
            HMRLoadingView.hide();
            break;
          }
        case 'error':
          {
            HMRLoadingView.hide();
            throw new Error(data.body.type + ' ' + data.body.description);
          }
        default:
          {
            throw new Error('Unexpected message: ' + data);
          }
      }
    };
  }
};

module.exports = HMRClient;
}, 50, null, "HMRClient");
__d(/* WebSocket */function(global, require, module, exports) {
'use strict';

var NativeEventEmitter = require(52                  ); // 52 = NativeEventEmitter
var Platform = require(26        ); // 26 = Platform
var RCTWebSocketModule = require(27             ).WebSocketModule; // 27 = NativeModules
var WebSocketEvent = require(63              ); // 63 = WebSocketEvent
var binaryToBase64 = require(64              ); // 64 = binaryToBase64

var EventTarget = require(66                 ); // 66 = event-target-shim
var base64 = require(65         ); // 65 = base64-js

var CONNECTING = 0;
var OPEN = 1;
var CLOSING = 2;
var CLOSED = 3;

var CLOSE_NORMAL = 1000;

var WEBSOCKET_EVENTS = ['close', 'error', 'message', 'open'];

var nextWebSocketId = 0;

var WebSocket = function (_EventTarget) {
  babelHelpers.inherits(WebSocket, _EventTarget);

  function WebSocket(url, protocols, options) {
    babelHelpers.classCallCheck(this, WebSocket);

    var _this = babelHelpers.possibleConstructorReturn(this, (WebSocket.__proto__ || Object.getPrototypeOf(WebSocket)).call(this));

    _this.CONNECTING = CONNECTING;
    _this.OPEN = OPEN;
    _this.CLOSING = CLOSING;
    _this.CLOSED = CLOSED;
    _this.readyState = CONNECTING;

    if (typeof protocols === 'string') {
      protocols = [protocols];
    }

    if (!Array.isArray(protocols)) {
      protocols = null;
    }

    _this._eventEmitter = new NativeEventEmitter(RCTWebSocketModule);
    _this._socketId = nextWebSocketId++;
    RCTWebSocketModule.connect(url, protocols, options, _this._socketId);
    _this._registerEvents();
    return _this;
  }

  babelHelpers.createClass(WebSocket, [{
    key: 'close',
    value: function close(code, reason) {
      if (this.readyState === this.CLOSING || this.readyState === this.CLOSED) {
        return;
      }

      this.readyState = this.CLOSING;
      this._close(code, reason);
    }
  }, {
    key: 'send',
    value: function send(data) {
      if (this.readyState === this.CONNECTING) {
        throw new Error('INVALID_STATE_ERR');
      }

      if (typeof data === 'string') {
        RCTWebSocketModule.send(data, this._socketId);
        return;
      }

      if (data instanceof ArrayBuffer || ArrayBuffer.isView(data)) {
        RCTWebSocketModule.sendBinary(binaryToBase64(data), this._socketId);
        return;
      }

      throw new Error('Unsupported data type');
    }
  }, {
    key: 'ping',
    value: function ping() {
      if (this.readyState === this.CONNECTING) {
        throw new Error('INVALID_STATE_ERR');
      }

      RCTWebSocketModule.ping(this._socketId);
    }
  }, {
    key: '_close',
    value: function _close(code, reason) {
      if (Platform.OS === 'android') {
        var statusCode = typeof code === 'number' ? code : CLOSE_NORMAL;
        var closeReason = typeof reason === 'string' ? reason : '';
        RCTWebSocketModule.close(statusCode, closeReason, this._socketId);
      } else {
        RCTWebSocketModule.close(this._socketId);
      }
    }
  }, {
    key: '_unregisterEvents',
    value: function _unregisterEvents() {
      this._subscriptions.forEach(function (e) {
        return e.remove();
      });
      this._subscriptions = [];
    }
  }, {
    key: '_registerEvents',
    value: function _registerEvents() {
      var _this2 = this;

      this._subscriptions = [this._eventEmitter.addListener('websocketMessage', function (ev) {
        if (ev.id !== _this2._socketId) {
          return;
        }
        _this2.dispatchEvent(new WebSocketEvent('message', {
          data: ev.type === 'binary' ? base64.toByteArray(ev.data).buffer : ev.data
        }));
      }), this._eventEmitter.addListener('websocketOpen', function (ev) {
        if (ev.id !== _this2._socketId) {
          return;
        }
        _this2.readyState = _this2.OPEN;
        _this2.dispatchEvent(new WebSocketEvent('open'));
      }), this._eventEmitter.addListener('websocketClosed', function (ev) {
        if (ev.id !== _this2._socketId) {
          return;
        }
        _this2.readyState = _this2.CLOSED;
        _this2.dispatchEvent(new WebSocketEvent('close', {
          code: ev.code,
          reason: ev.reason
        }));
        _this2._unregisterEvents();
        _this2.close();
      }), this._eventEmitter.addListener('websocketFailed', function (ev) {
        if (ev.id !== _this2._socketId) {
          return;
        }
        _this2.readyState = _this2.CLOSED;
        _this2.dispatchEvent(new WebSocketEvent('error', {
          message: ev.message
        }));
        _this2.dispatchEvent(new WebSocketEvent('close', {
          message: ev.message
        }));
        _this2._unregisterEvents();
        _this2.close();
      })];
    }
  }]);
  return WebSocket;
}(EventTarget.apply(undefined, WEBSOCKET_EVENTS));

WebSocket.CONNECTING = CONNECTING;
WebSocket.OPEN = OPEN;
WebSocket.CLOSING = CLOSING;
WebSocket.CLOSED = CLOSED;


module.exports = WebSocket;
}, 51, null, "WebSocket");
__d(/* NativeEventEmitter */function(global, require, module, exports) {
'use strict';

var EventEmitter = require(53            ); // 53 = EventEmitter
var Platform = require(26        ); // 26 = Platform
var RCTDeviceEventEmitter = require(57                     ); // 57 = RCTDeviceEventEmitter
var invariant = require(24                  ); // 24 = fbjs/lib/invariant

var NativeEventEmitter = function (_EventEmitter) {
  babelHelpers.inherits(NativeEventEmitter, _EventEmitter);

  function NativeEventEmitter(nativeModule) {
    babelHelpers.classCallCheck(this, NativeEventEmitter);

    var _this = babelHelpers.possibleConstructorReturn(this, (NativeEventEmitter.__proto__ || Object.getPrototypeOf(NativeEventEmitter)).call(this, RCTDeviceEventEmitter.sharedSubscriber));

    if (Platform.OS === 'ios') {
      invariant(nativeModule, 'Native module cannot be null.');
      _this._nativeModule = nativeModule;
    }
    return _this;
  }

  babelHelpers.createClass(NativeEventEmitter, [{
    key: 'addListener',
    value: function addListener(eventType, listener, context) {
      if (Platform.OS === 'ios') {
        this._nativeModule.addListener(eventType);
      }
      return babelHelpers.get(NativeEventEmitter.prototype.__proto__ || Object.getPrototypeOf(NativeEventEmitter.prototype), 'addListener', this).call(this, eventType, listener, context);
    }
  }, {
    key: 'removeAllListeners',
    value: function removeAllListeners(eventType) {
      invariant(eventType, 'eventType argument is required.');
      if (Platform.OS === 'ios') {
        var count = this.listeners(eventType).length;
        this._nativeModule.removeListeners(count);
      }
      babelHelpers.get(NativeEventEmitter.prototype.__proto__ || Object.getPrototypeOf(NativeEventEmitter.prototype), 'removeAllListeners', this).call(this, eventType);
    }
  }, {
    key: 'removeSubscription',
    value: function removeSubscription(subscription) {
      if (Platform.OS === 'ios') {
        this._nativeModule.removeListeners(1);
      }
      babelHelpers.get(NativeEventEmitter.prototype.__proto__ || Object.getPrototypeOf(NativeEventEmitter.prototype), 'removeSubscription', this).call(this, subscription);
    }
  }]);
  return NativeEventEmitter;
}(EventEmitter);

module.exports = NativeEventEmitter;
}, 52, null, "NativeEventEmitter");
__d(/* EventEmitter */function(global, require, module, exports) {
'use strict';

var EmitterSubscription = require(54                   ); // 54 = EmitterSubscription
var EventSubscriptionVendor = require(56                       ); // 56 = EventSubscriptionVendor

var emptyFunction = require(14                      ); // 14 = fbjs/lib/emptyFunction
var invariant = require(24                  ); // 24 = fbjs/lib/invariant

var EventEmitter = function () {
  function EventEmitter(subscriber) {
    babelHelpers.classCallCheck(this, EventEmitter);

    this._subscriber = subscriber || new EventSubscriptionVendor();
  }

  babelHelpers.createClass(EventEmitter, [{
    key: 'addListener',
    value: function addListener(eventType, listener, context) {

      return this._subscriber.addSubscription(eventType, new EmitterSubscription(this, this._subscriber, listener, context));
    }
  }, {
    key: 'once',
    value: function once(eventType, listener, context) {
      var _this = this;

      return this.addListener(eventType, function () {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this.removeCurrentListener();
        listener.apply(context, args);
      });
    }
  }, {
    key: 'removeAllListeners',
    value: function removeAllListeners(eventType) {
      this._subscriber.removeAllSubscriptions(eventType);
    }
  }, {
    key: 'removeCurrentListener',
    value: function removeCurrentListener() {
      invariant(!!this._currentSubscription, 'Not in an emitting cycle; there is no current subscription');
      this.removeSubscription(this._currentSubscription);
    }
  }, {
    key: 'removeSubscription',
    value: function removeSubscription(subscription) {
      invariant(subscription.emitter === this, 'Subscription does not belong to this emitter.');
      this._subscriber.removeSubscription(subscription);
    }
  }, {
    key: 'listeners',
    value: function listeners(eventType) {
      var subscriptions = this._subscriber.getSubscriptionsForType(eventType);
      return subscriptions ? subscriptions.filter(emptyFunction.thatReturnsTrue).map(function (subscription) {
        return subscription.listener;
      }) : [];
    }
  }, {
    key: 'emit',
    value: function emit(eventType) {
      var subscriptions = this._subscriber.getSubscriptionsForType(eventType);
      if (subscriptions) {
        for (var i = 0, l = subscriptions.length; i < l; i++) {
          var subscription = subscriptions[i];

          if (subscription) {
            this._currentSubscription = subscription;
            subscription.listener.apply(subscription.context, Array.prototype.slice.call(arguments, 1));
          }
        }
        this._currentSubscription = null;
      }
    }
  }, {
    key: 'removeListener',
    value: function removeListener(eventType, listener) {
      var subscriptions = this._subscriber.getSubscriptionsForType(eventType);
      if (subscriptions) {
        for (var i = 0, l = subscriptions.length; i < l; i++) {
          var subscription = subscriptions[i];

          if (subscription && subscription.listener === listener) {
            subscription.remove();
          }
        }
      }
    }
  }]);
  return EventEmitter;
}();

module.exports = EventEmitter;
}, 53, null, "EventEmitter");
__d(/* EmitterSubscription */function(global, require, module, exports) {
'use strict';

var EventSubscription = require(55                 ); // 55 = EventSubscription

var EmitterSubscription = function (_EventSubscription) {
  babelHelpers.inherits(EmitterSubscription, _EventSubscription);

  function EmitterSubscription(emitter, subscriber, listener, context) {
    babelHelpers.classCallCheck(this, EmitterSubscription);

    var _this = babelHelpers.possibleConstructorReturn(this, (EmitterSubscription.__proto__ || Object.getPrototypeOf(EmitterSubscription)).call(this, subscriber));

    _this.emitter = emitter;
    _this.listener = listener;
    _this.context = context;
    return _this;
  }

  babelHelpers.createClass(EmitterSubscription, [{
    key: 'remove',
    value: function remove() {
      this.emitter.removeSubscription(this);
    }
  }]);
  return EmitterSubscription;
}(EventSubscription);

module.exports = EmitterSubscription;
}, 54, null, "EmitterSubscription");
__d(/* EventSubscription */function(global, require, module, exports) {
'use strict';

var EventSubscription = function () {
  function EventSubscription(subscriber) {
    babelHelpers.classCallCheck(this, EventSubscription);

    this.subscriber = subscriber;
  }

  babelHelpers.createClass(EventSubscription, [{
    key: 'remove',
    value: function remove() {
      this.subscriber.removeSubscription(this);
    }
  }]);
  return EventSubscription;
}();

module.exports = EventSubscription;
}, 55, null, "EventSubscription");
__d(/* EventSubscriptionVendor */function(global, require, module, exports) {
'use strict';

var invariant = require(24                  ); // 24 = fbjs/lib/invariant

var EventSubscriptionVendor = function () {
  function EventSubscriptionVendor() {
    babelHelpers.classCallCheck(this, EventSubscriptionVendor);

    this._subscriptionsForType = {};
    this._currentSubscription = null;
  }

  babelHelpers.createClass(EventSubscriptionVendor, [{
    key: 'addSubscription',
    value: function addSubscription(eventType, subscription) {
      invariant(subscription.subscriber === this, 'The subscriber of the subscription is incorrectly set.');
      if (!this._subscriptionsForType[eventType]) {
        this._subscriptionsForType[eventType] = [];
      }
      var key = this._subscriptionsForType[eventType].length;
      this._subscriptionsForType[eventType].push(subscription);
      subscription.eventType = eventType;
      subscription.key = key;
      return subscription;
    }
  }, {
    key: 'removeAllSubscriptions',
    value: function removeAllSubscriptions(eventType) {
      if (eventType === undefined) {
        this._subscriptionsForType = {};
      } else {
        delete this._subscriptionsForType[eventType];
      }
    }
  }, {
    key: 'removeSubscription',
    value: function removeSubscription(subscription) {
      var eventType = subscription.eventType;
      var key = subscription.key;

      var subscriptionsForType = this._subscriptionsForType[eventType];
      if (subscriptionsForType) {
        delete subscriptionsForType[key];
      }
    }
  }, {
    key: 'getSubscriptionsForType',
    value: function getSubscriptionsForType(eventType) {
      return this._subscriptionsForType[eventType];
    }
  }]);
  return EventSubscriptionVendor;
}();

module.exports = EventSubscriptionVendor;
}, 56, null, "EventSubscriptionVendor");
__d(/* RCTDeviceEventEmitter */function(global, require, module, exports) {
'use strict';

var EventEmitter = require(53            ); // 53 = EventEmitter
var EventSubscriptionVendor = require(56                       ); // 56 = EventSubscriptionVendor
var BatchedBridge = require(28             ); // 28 = BatchedBridge

var RCTDeviceEventEmitter = function (_EventEmitter) {
  babelHelpers.inherits(RCTDeviceEventEmitter, _EventEmitter);

  function RCTDeviceEventEmitter() {
    babelHelpers.classCallCheck(this, RCTDeviceEventEmitter);

    var sharedSubscriber = new EventSubscriptionVendor();

    var _this = babelHelpers.possibleConstructorReturn(this, (RCTDeviceEventEmitter.__proto__ || Object.getPrototypeOf(RCTDeviceEventEmitter)).call(this, sharedSubscriber));

    _this.sharedSubscriber = sharedSubscriber;
    return _this;
  }

  babelHelpers.createClass(RCTDeviceEventEmitter, [{
    key: '_nativeEventModule',
    value: function _nativeEventModule(eventType) {
      if (eventType) {
        if (eventType.lastIndexOf('statusBar', 0) === 0) {
          console.warn('`%s` event should be registered via the StatusBarIOS module', eventType);
          return require(58            ); // 58 = StatusBarIOS
        }
        if (eventType.lastIndexOf('keyboard', 0) === 0) {
          console.warn('`%s` event should be registered via the Keyboard module', eventType);
          return require(59        ); // 59 = Keyboard
        }
        if (eventType === 'appStateDidChange' || eventType === 'memoryWarning') {
          console.warn('`%s` event should be registered via the AppState module', eventType);
          return require(61        ); // 61 = AppState
        }
      }
      return null;
    }
  }, {
    key: 'addListener',
    value: function addListener(eventType, listener, context) {
      var eventModule = this._nativeEventModule(eventType);
      return eventModule ? eventModule.addListener(eventType, listener, context) : babelHelpers.get(RCTDeviceEventEmitter.prototype.__proto__ || Object.getPrototypeOf(RCTDeviceEventEmitter.prototype), 'addListener', this).call(this, eventType, listener, context);
    }
  }, {
    key: 'removeAllListeners',
    value: function removeAllListeners(eventType) {
      var eventModule = this._nativeEventModule(eventType);
      eventModule && eventType ? eventModule.removeAllListeners(eventType) : babelHelpers.get(RCTDeviceEventEmitter.prototype.__proto__ || Object.getPrototypeOf(RCTDeviceEventEmitter.prototype), 'removeAllListeners', this).call(this, eventType);
    }
  }, {
    key: 'removeSubscription',
    value: function removeSubscription(subscription) {
      if (subscription.emitter !== this) {
        subscription.emitter.removeSubscription(subscription);
      } else {
        babelHelpers.get(RCTDeviceEventEmitter.prototype.__proto__ || Object.getPrototypeOf(RCTDeviceEventEmitter.prototype), 'removeSubscription', this).call(this, subscription);
      }
    }
  }]);
  return RCTDeviceEventEmitter;
}(EventEmitter);

RCTDeviceEventEmitter = new RCTDeviceEventEmitter();

BatchedBridge.registerCallableModule('RCTDeviceEventEmitter', RCTDeviceEventEmitter);

module.exports = RCTDeviceEventEmitter;
}, 57, null, "RCTDeviceEventEmitter");
__d(/* StatusBarIOS */function(global, require, module, exports) {
'use strict';

var NativeEventEmitter = require(52                  ); // 52 = NativeEventEmitter

module.exports = new NativeEventEmitter('StatusBarManager');
}, 58, null, "StatusBarIOS");
__d(/* Keyboard */function(global, require, module, exports) {
'use strict';

var invariant = require(24                  ); // 24 = fbjs/lib/invariant
var NativeEventEmitter = require(52                  ); // 52 = NativeEventEmitter
var KeyboardObserver = require(27             ).KeyboardObserver; // 27 = NativeModules
var dismissKeyboard = require(60               ); // 60 = dismissKeyboard
var KeyboardEventEmitter = new NativeEventEmitter(KeyboardObserver);

var Keyboard = {
  addListener: function addListener(eventName, callback) {
    invariant(false, 'Dummy method used for documentation');
  },
  removeListener: function removeListener(eventName, callback) {
    invariant(false, 'Dummy method used for documentation');
  },
  removeAllListeners: function removeAllListeners(eventName) {
    invariant(false, 'Dummy method used for documentation');
  },
  dismiss: function dismiss() {
    invariant(false, 'Dummy method used for documentation');
  }
};

Keyboard = KeyboardEventEmitter;
Keyboard.dismiss = dismissKeyboard;

module.exports = Keyboard;
}, 59, null, "Keyboard");
__d(/* dismissKeyboard */function(global, require, module, exports) {
'use strict';

var TextInputState = require(25              ); // 25 = TextInputState

function dismissKeyboard() {
  TextInputState.blurTextInput(TextInputState.currentlyFocusedField());
}

module.exports = dismissKeyboard;
}, 60, null, "dismissKeyboard");
__d(/* AppState */function(global, require, module, exports) {
'use strict';

var NativeEventEmitter = require(52                  ); // 52 = NativeEventEmitter
var NativeModules = require(27             ); // 27 = NativeModules
var RCTAppState = NativeModules.AppState;

var logError = require(62        ); // 62 = logError
var invariant = require(24                  ); // 24 = fbjs/lib/invariant

var AppState = function (_NativeEventEmitter) {
  babelHelpers.inherits(AppState, _NativeEventEmitter);

  function AppState() {
    babelHelpers.classCallCheck(this, AppState);

    var _this = babelHelpers.possibleConstructorReturn(this, (AppState.__proto__ || Object.getPrototypeOf(AppState)).call(this, RCTAppState));

    _this._eventHandlers = {
      change: new Map(),
      memoryWarning: new Map()
    };

    _this.currentState = RCTAppState.initialAppState || 'active';

    _this.addListener('appStateDidChange', function (appStateData) {
      _this.currentState = appStateData.app_state;
    });

    RCTAppState.getCurrentAppState(function (appStateData) {
      _this.currentState = appStateData.app_state;
    }, logError);
    return _this;
  }

  babelHelpers.createClass(AppState, [{
    key: 'addEventListener',
    value: function addEventListener(type, handler) {
      invariant(['change', 'memoryWarning'].indexOf(type) !== -1, 'Trying to subscribe to unknown event: "%s"', type);
      if (type === 'change') {
        this._eventHandlers[type].set(handler, this.addListener('appStateDidChange', function (appStateData) {
          handler(appStateData.app_state);
        }));
      } else if (type === 'memoryWarning') {
        this._eventHandlers[type].set(handler, this.addListener('memoryWarning', handler));
      }
    }
  }, {
    key: 'removeEventListener',
    value: function removeEventListener(type, handler) {
      invariant(['change', 'memoryWarning'].indexOf(type) !== -1, 'Trying to remove listener for unknown event: "%s"', type);
      if (!this._eventHandlers[type].has(handler)) {
        return;
      }
      this._eventHandlers[type].get(handler).remove();
      this._eventHandlers[type].delete(handler);
    }
  }]);
  return AppState;
}(NativeEventEmitter);

AppState = new AppState();

module.exports = AppState;
}, 61, null, "AppState");
__d(/* logError */function(global, require, module, exports) {
'use strict';

var logError = function logError() {
  if (arguments.length === 1 && arguments[0] instanceof Error) {
    var err = arguments[0];
    console.error('Error: "' + err.message + '".  Stack:\n' + err.stack);
  } else {
    console.error.apply(console, arguments);
  }
};

module.exports = logError;
}, 62, null, "logError");
__d(/* WebSocketEvent */function(global, require, module, exports) {

'use strict';

var WebSocketEvent = function WebSocketEvent(type, eventInitDict) {
  babelHelpers.classCallCheck(this, WebSocketEvent);

  this.type = type.toString();
  babelHelpers.extends(this, eventInitDict);
};

module.exports = WebSocketEvent;
}, 63, null, "WebSocketEvent");
__d(/* binaryToBase64 */function(global, require, module, exports) {
'use strict';

var base64 = require(65         ); // 65 = base64-js

function binaryToBase64(data) {
  if (data instanceof ArrayBuffer) {
    data = new Uint8Array(data);
  }
  if (data instanceof Uint8Array) {
    return base64.fromByteArray(data);
  }
  if (!ArrayBuffer.isView(data)) {
    throw new Error('data must be ArrayBuffer or typed array');
  }
  var _data = data,
      buffer = _data.buffer,
      byteOffset = _data.byteOffset,
      byteLength = _data.byteLength;

  return base64.fromByteArray(new Uint8Array(buffer, byteOffset, byteLength));
}

module.exports = binaryToBase64;
}, 64, null, "binaryToBase64");
__d(/* base64-js/index.js */function(global, require, module, exports) {'use strict';

exports.byteLength = byteLength;
exports.toByteArray = toByteArray;
exports.fromByteArray = fromByteArray;

var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i];
  revLookup[code.charCodeAt(i)] = i;
}

revLookup['-'.charCodeAt(0)] = 62;
revLookup['_'.charCodeAt(0)] = 63;

function placeHoldersCount(b64) {
  var len = b64.length;
  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4');
  }

  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;
}

function byteLength(b64) {
  return b64.length * 3 / 4 - placeHoldersCount(b64);
}

function toByteArray(b64) {
  var i, j, l, tmp, placeHolders, arr;
  var len = b64.length;
  placeHolders = placeHoldersCount(b64);

  arr = new Arr(len * 3 / 4 - placeHolders);

  l = placeHolders > 0 ? len - 4 : len;

  var L = 0;

  for (i = 0, j = 0; i < l; i += 4, j += 3) {
    tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
    arr[L++] = tmp >> 16 & 0xFF;
    arr[L++] = tmp >> 8 & 0xFF;
    arr[L++] = tmp & 0xFF;
  }

  if (placeHolders === 2) {
    tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
    arr[L++] = tmp & 0xFF;
  } else if (placeHolders === 1) {
    tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
    arr[L++] = tmp >> 8 & 0xFF;
    arr[L++] = tmp & 0xFF;
  }

  return arr;
}

function tripletToBase64(num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
}

function encodeChunk(uint8, start, end) {
  var tmp;
  var output = [];
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];
    output.push(tripletToBase64(tmp));
  }
  return output.join('');
}

function fromByteArray(uint8) {
  var tmp;
  var len = uint8.length;
  var extraBytes = len % 3;
  var output = '';
  var parts = [];
  var maxChunkLength = 16383;
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
  }

  if (extraBytes === 1) {
    tmp = uint8[len - 1];
    output += lookup[tmp >> 2];
    output += lookup[tmp << 4 & 0x3F];
    output += '==';
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1];
    output += lookup[tmp >> 10];
    output += lookup[tmp >> 4 & 0x3F];
    output += lookup[tmp << 2 & 0x3F];
    output += '=';
  }

  parts.push(output);

  return parts.join('');
}
}, 65, null, "base64-js/index.js");
__d(/* event-target-shim/lib/event-target.js */function(global, require, module, exports) {

"use strict";

var Commons = require(67         ); // 67 = ./commons
var CustomEventTarget = require(68                     ); // 68 = ./custom-event-target
var EventWrapper = require(69               ); // 69 = ./event-wrapper
var LISTENERS = Commons.LISTENERS;
var CAPTURE = Commons.CAPTURE;
var BUBBLE = Commons.BUBBLE;
var ATTRIBUTE = Commons.ATTRIBUTE;
var newNode = Commons.newNode;
var defineCustomEventTarget = CustomEventTarget.defineCustomEventTarget;
var createEventWrapper = EventWrapper.createEventWrapper;
var STOP_IMMEDIATE_PROPAGATION_FLAG = EventWrapper.STOP_IMMEDIATE_PROPAGATION_FLAG;

var HAS_EVENTTARGET_INTERFACE = typeof window !== "undefined" && typeof window.EventTarget !== "undefined";

var EventTarget = module.exports = function EventTarget() {
    if (this instanceof EventTarget) {
        Object.defineProperty(this, LISTENERS, { value: Object.create(null) });
    } else if (arguments.length === 1 && Array.isArray(arguments[0])) {
        return defineCustomEventTarget(EventTarget, arguments[0]);
    } else if (arguments.length > 0) {
        var types = Array(arguments.length);
        for (var i = 0; i < arguments.length; ++i) {
            types[i] = arguments[i];
        }

        return defineCustomEventTarget(EventTarget, types);
    } else {
        throw new TypeError("Cannot call a class as a function");
    }
};

EventTarget.prototype = Object.create((HAS_EVENTTARGET_INTERFACE ? window.EventTarget : Object).prototype, {
    constructor: {
        value: EventTarget,
        writable: true,
        configurable: true
    },

    addEventListener: {
        value: function addEventListener(type, listener, capture) {
            if (listener == null) {
                return false;
            }
            if (typeof listener !== "function" && typeof listener !== "object") {
                throw new TypeError("\"listener\" is not an object.");
            }

            var kind = capture ? CAPTURE : BUBBLE;
            var node = this[LISTENERS][type];
            if (node == null) {
                this[LISTENERS][type] = newNode(listener, kind);
                return true;
            }

            var prev = null;
            while (node != null) {
                if (node.listener === listener && node.kind === kind) {
                    return false;
                }
                prev = node;
                node = node.next;
            }

            prev.next = newNode(listener, kind);
            return true;
        },
        configurable: true,
        writable: true
    },

    removeEventListener: {
        value: function removeEventListener(type, listener, capture) {
            if (listener == null) {
                return false;
            }

            var kind = capture ? CAPTURE : BUBBLE;
            var prev = null;
            var node = this[LISTENERS][type];
            while (node != null) {
                if (node.listener === listener && node.kind === kind) {
                    if (prev == null) {
                        this[LISTENERS][type] = node.next;
                    } else {
                        prev.next = node.next;
                    }
                    return true;
                }

                prev = node;
                node = node.next;
            }

            return false;
        },
        configurable: true,
        writable: true
    },

    dispatchEvent: {
        value: function dispatchEvent(event) {
            var node = this[LISTENERS][event.type];
            if (node == null) {
                return true;
            }

            var wrapped = createEventWrapper(event, this);

            while (node != null) {
                if (typeof node.listener === "function") {
                    node.listener.call(this, wrapped);
                } else if (node.kind !== ATTRIBUTE && typeof node.listener.handleEvent === "function") {
                    node.listener.handleEvent(wrapped);
                }

                if (wrapped[STOP_IMMEDIATE_PROPAGATION_FLAG]) {
                    break;
                }
                node = node.next;
            }

            return !wrapped.defaultPrevented;
        },
        configurable: true,
        writable: true
    }
});
}, 66, null, "event-target-shim/lib/event-target.js");
__d(/* event-target-shim/lib/commons.js */function(global, require, module, exports) {

"use strict";

var createUniqueKey = exports.createUniqueKey = typeof Symbol !== "undefined" ? Symbol : function createUniqueKey(name) {
  return "[[" + name + "_" + Math.random().toFixed(8).slice(2) + "]]";
};

exports.LISTENERS = createUniqueKey("listeners");

exports.CAPTURE = 1;

exports.BUBBLE = 2;

exports.ATTRIBUTE = 3;

exports.newNode = function newNode(listener, kind) {
  return { listener: listener, kind: kind, next: null };
};
}, 67, null, "event-target-shim/lib/commons.js");
__d(/* event-target-shim/lib/custom-event-target.js */function(global, require, module, exports) {

"use strict";

var Commons = require(67         ); // 67 = ./commons
var LISTENERS = Commons.LISTENERS;
var ATTRIBUTE = Commons.ATTRIBUTE;
var newNode = Commons.newNode;

function getAttributeListener(eventTarget, type) {
    var node = eventTarget[LISTENERS][type];
    while (node != null) {
        if (node.kind === ATTRIBUTE) {
            return node.listener;
        }
        node = node.next;
    }
    return null;
}

function setAttributeListener(eventTarget, type, listener) {
    if (typeof listener !== "function" && typeof listener !== "object") {
        listener = null;
    }

    var prev = null;
    var node = eventTarget[LISTENERS][type];
    while (node != null) {
        if (node.kind === ATTRIBUTE) {
            if (prev == null) {
                eventTarget[LISTENERS][type] = node.next;
            } else {
                prev.next = node.next;
            }
        } else {
            prev = node;
        }

        node = node.next;
    }

    if (listener != null) {
        if (prev == null) {
            eventTarget[LISTENERS][type] = newNode(listener, ATTRIBUTE);
        } else {
            prev.next = newNode(listener, ATTRIBUTE);
        }
    }
}

exports.defineCustomEventTarget = function (EventTargetBase, types) {
    function EventTarget() {
        EventTargetBase.call(this);
    }

    var descripter = {
        constructor: {
            value: EventTarget,
            configurable: true,
            writable: true
        }
    };

    types.forEach(function (type) {
        descripter["on" + type] = {
            get: function get() {
                return getAttributeListener(this, type);
            },
            set: function set(listener) {
                setAttributeListener(this, type, listener);
            },
            configurable: true,
            enumerable: true
        };
    });

    EventTarget.prototype = Object.create(EventTargetBase.prototype, descripter);

    return EventTarget;
};
}, 68, null, "event-target-shim/lib/custom-event-target.js");
__d(/* event-target-shim/lib/event-wrapper.js */function(global, require, module, exports) {

"use strict";

var createUniqueKey = require(67         ).createUniqueKey; // 67 = ./commons

var STOP_IMMEDIATE_PROPAGATION_FLAG = createUniqueKey("stop_immediate_propagation_flag");

var CANCELED_FLAG = createUniqueKey("canceled_flag");

var ORIGINAL_EVENT = createUniqueKey("original_event");

var wrapperPrototypeDefinition = Object.freeze({
    stopPropagation: Object.freeze({
        value: function stopPropagation() {
            var e = this[ORIGINAL_EVENT];
            if (typeof e.stopPropagation === "function") {
                e.stopPropagation();
            }
        },
        writable: true,
        configurable: true
    }),

    stopImmediatePropagation: Object.freeze({
        value: function stopImmediatePropagation() {
            this[STOP_IMMEDIATE_PROPAGATION_FLAG] = true;

            var e = this[ORIGINAL_EVENT];
            if (typeof e.stopImmediatePropagation === "function") {
                e.stopImmediatePropagation();
            }
        },
        writable: true,
        configurable: true
    }),

    preventDefault: Object.freeze({
        value: function preventDefault() {
            if (this.cancelable === true) {
                this[CANCELED_FLAG] = true;
            }

            var e = this[ORIGINAL_EVENT];
            if (typeof e.preventDefault === "function") {
                e.preventDefault();
            }
        },
        writable: true,
        configurable: true
    }),

    defaultPrevented: Object.freeze({
        get: function defaultPrevented() {
            return this[CANCELED_FLAG];
        },
        enumerable: true,
        configurable: true
    })
});

exports.STOP_IMMEDIATE_PROPAGATION_FLAG = STOP_IMMEDIATE_PROPAGATION_FLAG;

exports.createEventWrapper = function createEventWrapper(event, eventTarget) {
    var timeStamp = typeof event.timeStamp === "number" ? event.timeStamp : Date.now();
    var propertyDefinition = {
        type: { value: event.type, enumerable: true },
        target: { value: eventTarget, enumerable: true },
        currentTarget: { value: eventTarget, enumerable: true },
        eventPhase: { value: 2, enumerable: true },
        bubbles: { value: Boolean(event.bubbles), enumerable: true },
        cancelable: { value: Boolean(event.cancelable), enumerable: true },
        timeStamp: { value: timeStamp, enumerable: true },
        isTrusted: { value: false, enumerable: true }
    };
    propertyDefinition[STOP_IMMEDIATE_PROPAGATION_FLAG] = { value: false, writable: true };
    propertyDefinition[CANCELED_FLAG] = { value: false, writable: true };
    propertyDefinition[ORIGINAL_EVENT] = { value: event };

    if (typeof event.detail !== "undefined") {
        propertyDefinition.detail = { value: event.detail, enumerable: true };
    }

    return Object.create(Object.create(event, wrapperPrototypeDefinition), propertyDefinition);
};
}, 69, null, "event-target-shim/lib/event-wrapper.js");
__d(/* HMRLoadingView */function(global, require, module, exports) {

'use strict';

var ToastAndroid = require(71            ); // 71 = ToastAndroid

var TOAST_SHORT_DELAY = 2000;

var HMRLoadingView = function () {
  function HMRLoadingView() {
    babelHelpers.classCallCheck(this, HMRLoadingView);
  }

  babelHelpers.createClass(HMRLoadingView, null, [{
    key: 'showMessage',
    value: function showMessage(message) {
      if (HMRLoadingView._showing) {
        return;
      }
      ToastAndroid.show(message, ToastAndroid.SHORT);
      HMRLoadingView._showing = true;
      setTimeout(function () {
        HMRLoadingView._showing = false;
      }, TOAST_SHORT_DELAY);
    }
  }, {
    key: 'hide',
    value: function hide() {}
  }]);
  return HMRLoadingView;
}();

module.exports = HMRLoadingView;
}, 70, null, "HMRLoadingView");
__d(/* ToastAndroid */function(global, require, module, exports) {

'use strict';

var RCTToastAndroid = require(27             ).ToastAndroid; // 27 = NativeModules

var ToastAndroid = {
  SHORT: RCTToastAndroid.SHORT,
  LONG: RCTToastAndroid.LONG,

  TOP: RCTToastAndroid.TOP,
  BOTTOM: RCTToastAndroid.BOTTOM,
  CENTER: RCTToastAndroid.CENTER,

  show: function show(message, duration) {
    RCTToastAndroid.show(message, duration);
  },

  showWithGravity: function showWithGravity(message, duration, gravity) {
    RCTToastAndroid.showWithGravity(message, duration, gravity);
  }
};

module.exports = ToastAndroid;
}, 71, null, "ToastAndroid");
__d(/* defineLazyObjectProperty */function(global, require, module, exports) {

'use strict';

function defineLazyObjectProperty(object, name, descriptor) {
  var get = descriptor.get;

  var enumerable = descriptor.enumerable !== false;
  var writable = descriptor.writable !== false;

  var value = void 0;
  var valueSet = false;
  function getValue() {
    if (!valueSet) {
      valueSet = true;
      setValue(get());
    }
    return value;
  }
  function setValue(newValue) {
    value = newValue;
    valueSet = true;
    Object.defineProperty(object, name, {
      value: newValue,
      configurable: true,
      enumerable: enumerable,
      writable: writable
    });
  }

  Object.defineProperty(object, name, {
    get: getValue,
    set: setValue,
    configurable: true,
    enumerable: enumerable
  });
}

module.exports = defineLazyObjectProperty;
}, 72, null, "defineLazyObjectProperty");
__d(/* UIManager */function(global, require, module, exports) {
'use strict';

var NativeModules = require(27             ); // 27 = NativeModules
var Platform = require(26        ); // 26 = Platform

var defineLazyObjectProperty = require(72                        ); // 72 = defineLazyObjectProperty
var findNodeHandle = require(74              ); // 74 = findNodeHandle
var invariant = require(24                  ); // 24 = fbjs/lib/invariant

var UIManager = NativeModules.UIManager;


invariant(UIManager, 'UIManager is undefined. The native module config is probably incorrect.');

var _takeSnapshot = UIManager.takeSnapshot;

UIManager.takeSnapshot = function _callee(view, options) {
  return regeneratorRuntime.async(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          if (_takeSnapshot) {
            _context.next = 3;
            break;
          }

          console.warn('UIManager.takeSnapshot is not available on this platform');
          return _context.abrupt('return');

        case 3:
          if (typeof view !== 'number' && view !== 'window') {
            view = findNodeHandle(view) || 'window';
          }
          return _context.abrupt('return', _takeSnapshot(view, options));

        case 5:
        case 'end':
          return _context.stop();
      }
    }
  }, null, this);
};

if (Platform.OS === 'ios') {
  Object.keys(UIManager).forEach(function (viewName) {
    var viewConfig = UIManager[viewName];
    if (viewConfig.Manager) {
      defineLazyObjectProperty(viewConfig, 'Constants', {
        get: function get() {
          var viewManager = NativeModules[viewConfig.Manager];
          var constants = {};
          viewManager && Object.keys(viewManager).forEach(function (key) {
            var value = viewManager[key];
            if (typeof value !== 'function') {
              constants[key] = value;
            }
          });
          return constants;
        }
      });
      defineLazyObjectProperty(viewConfig, 'Commands', {
        get: function get() {
          var viewManager = NativeModules[viewConfig.Manager];
          var commands = {};
          var index = 0;
          viewManager && Object.keys(viewManager).forEach(function (key) {
            var value = viewManager[key];
            if (typeof value === 'function') {
              commands[key] = index++;
            }
          });
          return commands;
        }
      });
    }
  });
} else if (Platform.OS === 'android' && UIManager.AndroidLazyViewManagersEnabled) {
  UIManager.ViewManagerNames.forEach(function (viewManagerName) {
    defineLazyObjectProperty(UIManager, viewManagerName, {
      get: function get() {
        return NativeModules[viewManagerName.replace(/^(RCT|RK)/, '')];
      }
    });
  });
}

module.exports = UIManager;
}, 73, null, "UIManager");
__d(/* findNodeHandle */function(global, require, module, exports) {

'use strict';

var ReactCurrentOwner = require(35                           ); // 35 = react/lib/ReactCurrentOwner
var ReactInstanceMap = require(75                ); // 75 = ReactInstanceMap

var invariant = require(24                  ); // 24 = fbjs/lib/invariant
var warning = require(13                ); // 13 = fbjs/lib/warning

function findNodeHandle(componentOrHandle) {
  if (__DEV__) {
    var owner = ReactCurrentOwner.current;
    if (owner !== null) {
      warning(owner._warnedAboutRefsInRender, '%s is accessing findNodeHandle inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component');
      owner._warnedAboutRefsInRender = true;
    }
  }
  if (componentOrHandle == null) {
    return null;
  }
  if (typeof componentOrHandle === 'number') {
    return componentOrHandle;
  }

  var component = componentOrHandle;

  var internalInstance = ReactInstanceMap.get(component);
  if (internalInstance) {
    return internalInstance.getHostNode();
  } else {
    var rootNodeID = component._rootNodeID;
    if (rootNodeID) {
      return rootNodeID;
    } else {
      invariant(typeof component === 'object' && '_rootNodeID' in component || component.render != null && typeof component.render === 'function', 'findNodeHandle(...): Argument is not a component ' + '(type: %s, keys: %s)', typeof component, Object.keys(component));
      invariant(false, 'findNodeHandle(...): Unable to find node handle for unmounted ' + 'component.');
    }
  }
}

module.exports = findNodeHandle;
}, 74, null, "findNodeHandle");
__d(/* ReactInstanceMap */function(global, require, module, exports) {

'use strict';

var ReactInstanceMap = {
  remove: function remove(key) {
    key._reactInternalInstance = undefined;
  },

  get: function get(key) {
    return key._reactInternalInstance;
  },

  has: function has(key) {
    return key._reactInternalInstance !== undefined;
  },

  set: function set(key, value) {
    key._reactInternalInstance = value;
  }

};

module.exports = ReactInstanceMap;
}, 75, null, "ReactInstanceMap");
__d(/* React */function(global, require, module, exports) {

'use strict';

module.exports = require(77               ); // 77 = react/lib/React
}, 76, null, "React");
__d(/* react/lib/React.js */function(global, require, module, exports) {

'use strict';

var _assign = require(78             ); // 78 = object-assign

var ReactChildren = require(79               ); // 79 = ./ReactChildren
var ReactComponent = require(87                ); // 87 = ./ReactComponent
var ReactPureComponent = require(90                    ); // 90 = ./ReactPureComponent
var ReactClass = require(91            ); // 91 = ./ReactClass
var ReactDOMFactories = require(92                   ); // 92 = ./ReactDOMFactories
var ReactElement = require(81              ); // 81 = ./ReactElement
var ReactPropTypes = require(96                ); // 96 = ./ReactPropTypes
var ReactVersion = require(97              ); // 97 = ./ReactVersion

var onlyChild = require(98           ); // 98 = ./onlyChild
var warning = require(13                ); // 13 = fbjs/lib/warning

var createElement = ReactElement.createElement;
var createFactory = ReactElement.createFactory;
var cloneElement = ReactElement.cloneElement;

if (process.env.NODE_ENV !== 'production') {
  var ReactElementValidator = require(93                       ); // 93 = ./ReactElementValidator
  createElement = ReactElementValidator.createElement;
  createFactory = ReactElementValidator.createFactory;
  cloneElement = ReactElementValidator.cloneElement;
}

var __spread = _assign;

if (process.env.NODE_ENV !== 'production') {
  var warned = false;
  __spread = function __spread() {
    process.env.NODE_ENV !== 'production' ? warning(warned, 'React.__spread is deprecated and should not be used. Use ' + 'Object.assign directly or another helper function with similar ' + 'semantics. You may be seeing this warning due to your compiler. ' + 'See https://fb.me/react-spread-deprecation for more details.') : void 0;
    warned = true;
    return _assign.apply(null, arguments);
  };
}

var React = {

  Children: {
    map: ReactChildren.map,
    forEach: ReactChildren.forEach,
    count: ReactChildren.count,
    toArray: ReactChildren.toArray,
    only: onlyChild
  },

  Component: ReactComponent,
  PureComponent: ReactPureComponent,

  createElement: createElement,
  cloneElement: cloneElement,
  isValidElement: ReactElement.isValidElement,

  PropTypes: ReactPropTypes,
  createClass: ReactClass.createClass,
  createFactory: createFactory,
  createMixin: function createMixin(mixin) {
    return mixin;
  },

  DOM: ReactDOMFactories,

  version: ReactVersion,

  __spread: __spread
};

module.exports = React;
}, 77, null, "react/lib/React.js");
__d(/* object-assign/index.js */function(global, require, module, exports) {/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

'use strict';

var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		var test1 = new String('abc');
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(babelHelpers.extends({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};
}, 78, null, "object-assign/index.js");
__d(/* react/lib/ReactChildren.js */function(global, require, module, exports) {

'use strict';

var PooledClass = require(80             ); // 80 = ./PooledClass
var ReactElement = require(81              ); // 81 = ./ReactElement

var emptyFunction = require(14                      ); // 14 = fbjs/lib/emptyFunction
var traverseAllChildren = require(84                     ); // 84 = ./traverseAllChildren

var twoArgumentPooler = PooledClass.twoArgumentPooler;
var fourArgumentPooler = PooledClass.fourArgumentPooler;

var userProvidedKeyEscapeRegex = /\/+/g;
function escapeUserProvidedKey(text) {
  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
}

function ForEachBookKeeping(forEachFunction, forEachContext) {
  this.func = forEachFunction;
  this.context = forEachContext;
  this.count = 0;
}
ForEachBookKeeping.prototype.destructor = function () {
  this.func = null;
  this.context = null;
  this.count = 0;
};
PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

function forEachSingleChild(bookKeeping, child, name) {
  var func = bookKeeping.func,
      context = bookKeeping.context;

  func.call(context, child, bookKeeping.count++);
}

function forEachChildren(children, forEachFunc, forEachContext) {
  if (children == null) {
    return children;
  }
  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
  traverseAllChildren(children, forEachSingleChild, traverseContext);
  ForEachBookKeeping.release(traverseContext);
}

function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
  this.result = mapResult;
  this.keyPrefix = keyPrefix;
  this.func = mapFunction;
  this.context = mapContext;
  this.count = 0;
}
MapBookKeeping.prototype.destructor = function () {
  this.result = null;
  this.keyPrefix = null;
  this.func = null;
  this.context = null;
  this.count = 0;
};
PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);

function mapSingleChildIntoContext(bookKeeping, child, childKey) {
  var result = bookKeeping.result,
      keyPrefix = bookKeeping.keyPrefix,
      func = bookKeeping.func,
      context = bookKeeping.context;

  var mappedChild = func.call(context, child, bookKeeping.count++);
  if (Array.isArray(mappedChild)) {
    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
  } else if (mappedChild != null) {
    if (ReactElement.isValidElement(mappedChild)) {
      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild, keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
    }
    result.push(mappedChild);
  }
}

function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
  var escapedPrefix = '';
  if (prefix != null) {
    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
  }
  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
  MapBookKeeping.release(traverseContext);
}

function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
  return result;
}

function forEachSingleChildDummy(traverseContext, child, name) {
  return null;
}

function countChildren(children, context) {
  return traverseAllChildren(children, forEachSingleChildDummy, null);
}

function toArray(children) {
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
  return result;
}

var ReactChildren = {
  forEach: forEachChildren,
  map: mapChildren,
  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
  count: countChildren,
  toArray: toArray
};

module.exports = ReactChildren;
}, 79, null, "react/lib/ReactChildren.js");
__d(/* react/lib/PooledClass.js */function(global, require, module, exports) {

'use strict';

var _prodInvariant = require(34                    ); // 34 = ./reactProdInvariant

var invariant = require(24                  ); // 24 = fbjs/lib/invariant

var oneArgumentPooler = function oneArgumentPooler(copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function twoArgumentPooler(a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function threeArgumentPooler(a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fourArgumentPooler = function fourArgumentPooler(a1, a2, a3, a4) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4);
  }
};

var standardReleaser = function standardReleaser(instance) {
  var Klass = this;
  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
  instance.destructor();
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

var addPoolingTo = function addPoolingTo(CopyConstructor, pooler) {
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fourArgumentPooler: fourArgumentPooler
};

module.exports = PooledClass;
}, 80, null, "react/lib/PooledClass.js");
__d(/* react/lib/ReactElement.js */function(global, require, module, exports) {

'use strict';

var _assign = require(78             ); // 78 = object-assign

var ReactCurrentOwner = require(35                   ); // 35 = ./ReactCurrentOwner

var warning = require(13                ); // 13 = fbjs/lib/warning
var canDefineProperty = require(82                   ); // 82 = ./canDefineProperty
var hasOwnProperty = Object.prototype.hasOwnProperty;

var REACT_ELEMENT_TYPE = require(83                    ); // 83 = ./ReactElementSymbol

var RESERVED_PROPS = {
  key: true,
  ref: true,
  __self: true,
  __source: true
};

var specialPropKeyWarningShown, specialPropRefWarningShown;

function hasValidRef(config) {
  if (process.env.NODE_ENV !== 'production') {
    if (hasOwnProperty.call(config, 'ref')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }
  return config.ref !== undefined;
}

function hasValidKey(config) {
  if (process.env.NODE_ENV !== 'production') {
    if (hasOwnProperty.call(config, 'key')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }
  return config.key !== undefined;
}

function defineKeyPropWarningGetter(props, displayName) {
  var warnAboutAccessingKey = function warnAboutAccessingKey() {
    if (!specialPropKeyWarningShown) {
      specialPropKeyWarningShown = true;
      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
    }
  };
  warnAboutAccessingKey.isReactWarning = true;
  Object.defineProperty(props, 'key', {
    get: warnAboutAccessingKey,
    configurable: true
  });
}

function defineRefPropWarningGetter(props, displayName) {
  var warnAboutAccessingRef = function warnAboutAccessingRef() {
    if (!specialPropRefWarningShown) {
      specialPropRefWarningShown = true;
      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
    }
  };
  warnAboutAccessingRef.isReactWarning = true;
  Object.defineProperty(props, 'ref', {
    get: warnAboutAccessingRef,
    configurable: true
  });
}

var ReactElement = function ReactElement(type, key, ref, self, source, owner, props) {
  var element = {
    $$typeof: REACT_ELEMENT_TYPE,

    type: type,
    key: key,
    ref: ref,
    props: props,

    _owner: owner
  };

  if (process.env.NODE_ENV !== 'production') {
    element._store = {};

    if (canDefineProperty) {
      Object.defineProperty(element._store, 'validated', {
        configurable: false,
        enumerable: false,
        writable: true,
        value: false
      });

      Object.defineProperty(element, '_self', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: self
      });

      Object.defineProperty(element, '_source', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: source
      });
    } else {
      element._store.validated = false;
      element._self = self;
      element._source = source;
    }
    if (Object.freeze) {
      Object.freeze(element.props);
      Object.freeze(element);
    }
  }

  return element;
};

ReactElement.createElement = function (type, config, children) {
  var propName;

  var props = {};

  var key = null;
  var ref = null;
  var self = null;
  var source = null;

  if (config != null) {
    if (hasValidRef(config)) {
      ref = config.ref;
    }
    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    self = config.__self === undefined ? null : config.__self;
    source = config.__source === undefined ? null : config.__source;

    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    if (process.env.NODE_ENV !== 'production') {
      if (Object.freeze) {
        Object.freeze(childArray);
      }
    }
    props.children = childArray;
  }

  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;
    for (propName in defaultProps) {
      if (props[propName] === undefined) {
        props[propName] = defaultProps[propName];
      }
    }
  }
  if (process.env.NODE_ENV !== 'production') {
    if (key || ref) {
      if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {
        var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
        if (key) {
          defineKeyPropWarningGetter(props, displayName);
        }
        if (ref) {
          defineRefPropWarningGetter(props, displayName);
        }
      }
    }
  }
  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
};

ReactElement.createFactory = function (type) {
  var factory = ReactElement.createElement.bind(null, type);

  factory.type = type;
  return factory;
};

ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

  return newElement;
};

ReactElement.cloneElement = function (element, config, children) {
  var propName;

  var props = _assign({}, element.props);

  var key = element.key;
  var ref = element.ref;

  var self = element._self;

  var source = element._source;

  var owner = element._owner;

  if (config != null) {
    if (hasValidRef(config)) {
      ref = config.ref;
      owner = ReactCurrentOwner.current;
    }
    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    var defaultProps;
    if (element.type && element.type.defaultProps) {
      defaultProps = element.type.defaultProps;
    }
    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        if (config[propName] === undefined && defaultProps !== undefined) {
          props[propName] = defaultProps[propName];
        } else {
          props[propName] = config[propName];
        }
      }
    }
  }

  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  return ReactElement(element.type, key, ref, self, source, owner, props);
};

ReactElement.isValidElement = function (object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
};

module.exports = ReactElement;
}, 81, null, "react/lib/ReactElement.js");
__d(/* react/lib/canDefineProperty.js */function(global, require, module, exports) {

'use strict';

var canDefineProperty = false;
if (process.env.NODE_ENV !== 'production') {
  try {
    Object.defineProperty({}, 'x', { get: function get() {} });
    canDefineProperty = true;
  } catch (x) {}
}

module.exports = canDefineProperty;
}, 82, null, "react/lib/canDefineProperty.js");
__d(/* react/lib/ReactElementSymbol.js */function(global, require, module, exports) {

'use strict';

var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

module.exports = REACT_ELEMENT_TYPE;
}, 83, null, "react/lib/ReactElementSymbol.js");
__d(/* react/lib/traverseAllChildren.js */function(global, require, module, exports) {

'use strict';

var _prodInvariant = require(34                    ); // 34 = ./reactProdInvariant

var ReactCurrentOwner = require(35                   ); // 35 = ./ReactCurrentOwner
var REACT_ELEMENT_TYPE = require(83                    ); // 83 = ./ReactElementSymbol

var getIteratorFn = require(85               ); // 85 = ./getIteratorFn
var invariant = require(24                  ); // 24 = fbjs/lib/invariant
var KeyEscapeUtils = require(86                ); // 86 = ./KeyEscapeUtils
var warning = require(13                ); // 13 = fbjs/lib/warning

var SEPARATOR = '.';
var SUBSEPARATOR = ':';

var didWarnAboutMaps = false;

function getComponentKey(component, index) {
  if (component && typeof component === 'object' && component.key != null) {
    return KeyEscapeUtils.escape(component.key);
  }

  return index.toString(36);
}

function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    children = null;
  }

  if (children === null || type === 'string' || type === 'number' || type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
    callback(traverseContext, children, nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
    return 1;
  }

  var child;
  var nextName;
  var subtreeCount = 0;
  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getComponentKey(child, i);
      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
    }
  } else {
    var iteratorFn = getIteratorFn(children);
    if (iteratorFn) {
      var iterator = iteratorFn.call(children);
      var step;
      if (iteratorFn !== children.entries) {
        var ii = 0;
        while (!(step = iterator.next()).done) {
          child = step.value;
          nextName = nextNamePrefix + getComponentKey(child, ii++);
          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
        }
      } else {
        if (process.env.NODE_ENV !== 'production') {
          var mapsAsChildrenAddendum = '';
          if (ReactCurrentOwner.current) {
            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
            if (mapsAsChildrenOwnerName) {
              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
            }
          }
          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
          didWarnAboutMaps = true;
        }

        while (!(step = iterator.next()).done) {
          var entry = step.value;
          if (entry) {
            child = entry[1];
            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        }
      }
    } else if (type === 'object') {
      var addendum = '';
      if (process.env.NODE_ENV !== 'production') {
        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
        if (children._isReactElement) {
          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
        }
        if (ReactCurrentOwner.current) {
          var name = ReactCurrentOwner.current.getName();
          if (name) {
            addendum += ' Check the render method of `' + name + '`.';
          }
        }
      }
      var childrenString = String(children);
      !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
    }
  }

  return subtreeCount;
}

function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', callback, traverseContext);
}

module.exports = traverseAllChildren;
}, 84, null, "react/lib/traverseAllChildren.js");
__d(/* react/lib/getIteratorFn.js */function(global, require, module, exports) {

'use strict';

var ITERATOR_SYMBOL = typeof Symbol === 'function' && (typeof Symbol === 'function' ? Symbol.iterator : '@@iterator');
var FAUX_ITERATOR_SYMBOL = '@@iterator';
function getIteratorFn(maybeIterable) {
  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
  if (typeof iteratorFn === 'function') {
    return iteratorFn;
  }
}

module.exports = getIteratorFn;
}, 85, null, "react/lib/getIteratorFn.js");
__d(/* react/lib/KeyEscapeUtils.js */function(global, require, module, exports) {

'use strict';

function escape(key) {
  var escapeRegex = /[=:]/g;
  var escaperLookup = {
    '=': '=0',
    ':': '=2'
  };
  var escapedString = ('' + key).replace(escapeRegex, function (match) {
    return escaperLookup[match];
  });

  return '$' + escapedString;
}

function unescape(key) {
  var unescapeRegex = /(=0|=2)/g;
  var unescaperLookup = {
    '=0': '=',
    '=2': ':'
  };
  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);

  return ('' + keySubstring).replace(unescapeRegex, function (match) {
    return unescaperLookup[match];
  });
}

var KeyEscapeUtils = {
  escape: escape,
  unescape: unescape
};

module.exports = KeyEscapeUtils;
}, 86, null, "react/lib/KeyEscapeUtils.js");
__d(/* react/lib/ReactComponent.js */function(global, require, module, exports) {

'use strict';

var _prodInvariant = require(34                    ); // 34 = ./reactProdInvariant

var ReactNoopUpdateQueue = require(88                      ); // 88 = ./ReactNoopUpdateQueue

var canDefineProperty = require(82                   ); // 82 = ./canDefineProperty
var emptyObject = require(89                    ); // 89 = fbjs/lib/emptyObject
var invariant = require(24                  ); // 24 = fbjs/lib/invariant
var warning = require(13                ); // 13 = fbjs/lib/warning

function ReactComponent(props, context, updater) {
  this.props = props;
  this.context = context;
  this.refs = emptyObject;

  this.updater = updater || ReactNoopUpdateQueue;
}

ReactComponent.prototype.isReactComponent = {};

ReactComponent.prototype.setState = function (partialState, callback) {
  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : _prodInvariant('85') : void 0;
  this.updater.enqueueSetState(this, partialState);
  if (callback) {
    this.updater.enqueueCallback(this, callback, 'setState');
  }
};

ReactComponent.prototype.forceUpdate = function (callback) {
  this.updater.enqueueForceUpdate(this);
  if (callback) {
    this.updater.enqueueCallback(this, callback, 'forceUpdate');
  }
};

if (process.env.NODE_ENV !== 'production') {
  var deprecatedAPIs = {
    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
  };
  var defineDeprecationWarning = function defineDeprecationWarning(methodName, info) {
    if (canDefineProperty) {
      Object.defineProperty(ReactComponent.prototype, methodName, {
        get: function get() {
          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : void 0;
          return undefined;
        }
      });
    }
  };
  for (var fnName in deprecatedAPIs) {
    if (deprecatedAPIs.hasOwnProperty(fnName)) {
      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    }
  }
}

module.exports = ReactComponent;
}, 87, null, "react/lib/ReactComponent.js");
__d(/* react/lib/ReactNoopUpdateQueue.js */function(global, require, module, exports) {

'use strict';

var warning = require(13                ); // 13 = fbjs/lib/warning

function warnNoop(publicInstance, callerName) {
  if (process.env.NODE_ENV !== 'production') {
    var constructor = publicInstance.constructor;
    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
  }
}

var ReactNoopUpdateQueue = {
  isMounted: function isMounted(publicInstance) {
    return false;
  },

  enqueueCallback: function enqueueCallback(publicInstance, callback) {},

  enqueueForceUpdate: function enqueueForceUpdate(publicInstance) {
    warnNoop(publicInstance, 'forceUpdate');
  },

  enqueueReplaceState: function enqueueReplaceState(publicInstance, completeState) {
    warnNoop(publicInstance, 'replaceState');
  },

  enqueueSetState: function enqueueSetState(publicInstance, partialState) {
    warnNoop(publicInstance, 'setState');
  }
};

module.exports = ReactNoopUpdateQueue;
}, 88, null, "react/lib/ReactNoopUpdateQueue.js");
__d(/* fbjs/lib/emptyObject.js */function(global, require, module, exports) {

'use strict';

var emptyObject = {};

if (process.env.NODE_ENV !== 'production') {
  Object.freeze(emptyObject);
}

module.exports = emptyObject;
}, 89, null, "fbjs/lib/emptyObject.js");
__d(/* react/lib/ReactPureComponent.js */function(global, require, module, exports) {

'use strict';

var _assign = require(78             ); // 78 = object-assign

var ReactComponent = require(87                ); // 87 = ./ReactComponent
var ReactNoopUpdateQueue = require(88                      ); // 88 = ./ReactNoopUpdateQueue

var emptyObject = require(89                    ); // 89 = fbjs/lib/emptyObject

function ReactPureComponent(props, context, updater) {
  this.props = props;
  this.context = context;
  this.refs = emptyObject;

  this.updater = updater || ReactNoopUpdateQueue;
}

function ComponentDummy() {}
ComponentDummy.prototype = ReactComponent.prototype;
ReactPureComponent.prototype = new ComponentDummy();
ReactPureComponent.prototype.constructor = ReactPureComponent;

_assign(ReactPureComponent.prototype, ReactComponent.prototype);
ReactPureComponent.prototype.isPureReactComponent = true;

module.exports = ReactPureComponent;
}, 90, null, "react/lib/ReactPureComponent.js");
__d(/* react/lib/ReactClass.js */function(global, require, module, exports) {

'use strict';

var _prodInvariant = require(34                    ), // 34 = ./reactProdInvariant
    _assign = require(78             ); // 78 = object-assign

var ReactComponent = require(87                ); // 87 = ./ReactComponent
var ReactElement = require(81              ); // 81 = ./ReactElement
var ReactPropTypeLocationNames = require(17                            ); // 17 = ./ReactPropTypeLocationNames
var ReactNoopUpdateQueue = require(88                      ); // 88 = ./ReactNoopUpdateQueue

var emptyObject = require(89                    ); // 89 = fbjs/lib/emptyObject
var invariant = require(24                  ); // 24 = fbjs/lib/invariant
var warning = require(13                ); // 13 = fbjs/lib/warning

var MIXINS_KEY = 'mixins';

function identity(fn) {
  return fn;
}

var injectedMixins = [];

var ReactClassInterface = {
  mixins: 'DEFINE_MANY',

  statics: 'DEFINE_MANY',

  propTypes: 'DEFINE_MANY',

  contextTypes: 'DEFINE_MANY',

  childContextTypes: 'DEFINE_MANY',

  getDefaultProps: 'DEFINE_MANY_MERGED',

  getInitialState: 'DEFINE_MANY_MERGED',

  getChildContext: 'DEFINE_MANY_MERGED',

  render: 'DEFINE_ONCE',

  componentWillMount: 'DEFINE_MANY',

  componentDidMount: 'DEFINE_MANY',

  componentWillReceiveProps: 'DEFINE_MANY',

  shouldComponentUpdate: 'DEFINE_ONCE',

  componentWillUpdate: 'DEFINE_MANY',

  componentDidUpdate: 'DEFINE_MANY',

  componentWillUnmount: 'DEFINE_MANY',

  updateComponent: 'OVERRIDE_BASE'

};

var RESERVED_SPEC_KEYS = {
  displayName: function displayName(Constructor, _displayName) {
    Constructor.displayName = _displayName;
  },
  mixins: function mixins(Constructor, _mixins) {
    if (_mixins) {
      for (var i = 0; i < _mixins.length; i++) {
        mixSpecIntoComponent(Constructor, _mixins[i]);
      }
    }
  },
  childContextTypes: function childContextTypes(Constructor, _childContextTypes) {
    if (process.env.NODE_ENV !== 'production') {
      validateTypeDef(Constructor, _childContextTypes, 'childContext');
    }
    Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, _childContextTypes);
  },
  contextTypes: function contextTypes(Constructor, _contextTypes) {
    if (process.env.NODE_ENV !== 'production') {
      validateTypeDef(Constructor, _contextTypes, 'context');
    }
    Constructor.contextTypes = _assign({}, Constructor.contextTypes, _contextTypes);
  },

  getDefaultProps: function getDefaultProps(Constructor, _getDefaultProps) {
    if (Constructor.getDefaultProps) {
      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, _getDefaultProps);
    } else {
      Constructor.getDefaultProps = _getDefaultProps;
    }
  },
  propTypes: function propTypes(Constructor, _propTypes) {
    if (process.env.NODE_ENV !== 'production') {
      validateTypeDef(Constructor, _propTypes, 'prop');
    }
    Constructor.propTypes = _assign({}, Constructor.propTypes, _propTypes);
  },
  statics: function statics(Constructor, _statics) {
    mixStaticSpecIntoComponent(Constructor, _statics);
  },
  autobind: function autobind() {} };

function validateTypeDef(Constructor, typeDef, location) {
  for (var propName in typeDef) {
    if (typeDef.hasOwnProperty(propName)) {
      process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : void 0;
    }
  }
}

function validateMethodOverride(isAlreadyDefined, name) {
  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;

  if (ReactClassMixin.hasOwnProperty(name)) {
    !(specPolicy === 'OVERRIDE_BASE') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.', name) : _prodInvariant('73', name) : void 0;
  }

  if (isAlreadyDefined) {
    !(specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('74', name) : void 0;
  }
}

function mixSpecIntoComponent(Constructor, spec) {
  if (!spec) {
    if (process.env.NODE_ENV !== 'production') {
      var typeofSpec = typeof spec;
      var isMixinValid = typeofSpec === 'object' && spec !== null;

      process.env.NODE_ENV !== 'production' ? warning(isMixinValid, '%s: You\'re attempting to include a mixin that is either null ' + 'or not an object. Check the mixins included by the component, ' + 'as well as any mixins they include themselves. ' + 'Expected object but got %s.', Constructor.displayName || 'ReactClass', spec === null ? null : typeofSpec) : void 0;
    }

    return;
  }

  !(typeof spec !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to use a component class or function as a mixin. Instead, just use a regular object.') : _prodInvariant('75') : void 0;
  !!ReactElement.isValidElement(spec) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to use a component as a mixin. Instead, just use a regular object.') : _prodInvariant('76') : void 0;

  var proto = Constructor.prototype;
  var autoBindPairs = proto.__reactAutoBindPairs;

  if (spec.hasOwnProperty(MIXINS_KEY)) {
    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
  }

  for (var name in spec) {
    if (!spec.hasOwnProperty(name)) {
      continue;
    }

    if (name === MIXINS_KEY) {
      continue;
    }

    var property = spec[name];
    var isAlreadyDefined = proto.hasOwnProperty(name);
    validateMethodOverride(isAlreadyDefined, name);

    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
      RESERVED_SPEC_KEYS[name](Constructor, property);
    } else {
      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
      var isFunction = typeof property === 'function';
      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;

      if (shouldAutoBind) {
        autoBindPairs.push(name, property);
        proto[name] = property;
      } else {
        if (isAlreadyDefined) {
          var specPolicy = ReactClassInterface[name];

          !(isReactClassMethod && (specPolicy === 'DEFINE_MANY_MERGED' || specPolicy === 'DEFINE_MANY')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.', specPolicy, name) : _prodInvariant('77', specPolicy, name) : void 0;

          if (specPolicy === 'DEFINE_MANY_MERGED') {
            proto[name] = createMergedResultFunction(proto[name], property);
          } else if (specPolicy === 'DEFINE_MANY') {
            proto[name] = createChainedFunction(proto[name], property);
          }
        } else {
          proto[name] = property;
          if (process.env.NODE_ENV !== 'production') {
            if (typeof property === 'function' && spec.displayName) {
              proto[name].displayName = spec.displayName + '_' + name;
            }
          }
        }
      }
    }
  }
}

function mixStaticSpecIntoComponent(Constructor, statics) {
  if (!statics) {
    return;
  }
  for (var name in statics) {
    var property = statics[name];
    if (!statics.hasOwnProperty(name)) {
      continue;
    }

    var isReserved = name in RESERVED_SPEC_KEYS;
    !!isReserved ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved property, `%s`, that shouldn\'t be on the "statics" key. Define it as an instance property instead; it will still be accessible on the constructor.', name) : _prodInvariant('78', name) : void 0;

    var isInherited = name in Constructor;
    !!isInherited ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('79', name) : void 0;
    Constructor[name] = property;
  }
}

function mergeIntoWithNoDuplicateKeys(one, two) {
  !(one && two && typeof one === 'object' && typeof two === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : _prodInvariant('80') : void 0;

  for (var key in two) {
    if (two.hasOwnProperty(key)) {
      !(one[key] === undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.', key) : _prodInvariant('81', key) : void 0;
      one[key] = two[key];
    }
  }
  return one;
}

function createMergedResultFunction(one, two) {
  return function mergedResult() {
    var a = one.apply(this, arguments);
    var b = two.apply(this, arguments);
    if (a == null) {
      return b;
    } else if (b == null) {
      return a;
    }
    var c = {};
    mergeIntoWithNoDuplicateKeys(c, a);
    mergeIntoWithNoDuplicateKeys(c, b);
    return c;
  };
}

function createChainedFunction(one, two) {
  return function chainedFunction() {
    one.apply(this, arguments);
    two.apply(this, arguments);
  };
}

function bindAutoBindMethod(component, method) {
  var boundMethod = method.bind(component);
  if (process.env.NODE_ENV !== 'production') {
    boundMethod.__reactBoundContext = component;
    boundMethod.__reactBoundMethod = method;
    boundMethod.__reactBoundArguments = null;
    var componentName = component.constructor.displayName;
    var _bind = boundMethod.bind;
    boundMethod.bind = function (newThis) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      if (newThis !== component && newThis !== null) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : void 0;
      } else if (!args.length) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : void 0;
        return boundMethod;
      }
      var reboundMethod = _bind.apply(boundMethod, arguments);
      reboundMethod.__reactBoundContext = component;
      reboundMethod.__reactBoundMethod = method;
      reboundMethod.__reactBoundArguments = args;
      return reboundMethod;
    };
  }
  return boundMethod;
}

function bindAutoBindMethods(component) {
  var pairs = component.__reactAutoBindPairs;
  for (var i = 0; i < pairs.length; i += 2) {
    var autoBindKey = pairs[i];
    var method = pairs[i + 1];
    component[autoBindKey] = bindAutoBindMethod(component, method);
  }
}

var ReactClassMixin = {
  replaceState: function replaceState(newState, callback) {
    this.updater.enqueueReplaceState(this, newState);
    if (callback) {
      this.updater.enqueueCallback(this, callback, 'replaceState');
    }
  },

  isMounted: function isMounted() {
    return this.updater.isMounted(this);
  }
};

var ReactClassComponent = function ReactClassComponent() {};
_assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);

var ReactClass = {
  createClass: function createClass(spec) {
    var Constructor = identity(function (props, context, updater) {

      if (process.env.NODE_ENV !== 'production') {
        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
      }

      if (this.__reactAutoBindPairs.length) {
        bindAutoBindMethods(this);
      }

      this.props = props;
      this.context = context;
      this.refs = emptyObject;
      this.updater = updater || ReactNoopUpdateQueue;

      this.state = null;

      var initialState = this.getInitialState ? this.getInitialState() : null;
      if (process.env.NODE_ENV !== 'production') {
        if (initialState === undefined && this.getInitialState._isMockFunction) {
          initialState = null;
        }
      }
      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : _prodInvariant('82', Constructor.displayName || 'ReactCompositeComponent') : void 0;

      this.state = initialState;
    });
    Constructor.prototype = new ReactClassComponent();
    Constructor.prototype.constructor = Constructor;
    Constructor.prototype.__reactAutoBindPairs = [];

    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

    mixSpecIntoComponent(Constructor, spec);

    if (Constructor.getDefaultProps) {
      Constructor.defaultProps = Constructor.getDefaultProps();
    }

    if (process.env.NODE_ENV !== 'production') {
      if (Constructor.getDefaultProps) {
        Constructor.getDefaultProps.isReactClassApproved = {};
      }
      if (Constructor.prototype.getInitialState) {
        Constructor.prototype.getInitialState.isReactClassApproved = {};
      }
    }

    !Constructor.prototype.render ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : _prodInvariant('83') : void 0;

    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : void 0;
    }

    for (var methodName in ReactClassInterface) {
      if (!Constructor.prototype[methodName]) {
        Constructor.prototype[methodName] = null;
      }
    }

    return Constructor;
  },

  injection: {
    injectMixin: function injectMixin(mixin) {
      injectedMixins.push(mixin);
    }
  }

};

module.exports = ReactClass;
}, 91, null, "react/lib/ReactClass.js");
__d(/* react/lib/ReactDOMFactories.js */function(global, require, module, exports) {

'use strict';

var ReactElement = require(81              ); // 81 = ./ReactElement

var createDOMFactory = ReactElement.createFactory;
if (process.env.NODE_ENV !== 'production') {
  var ReactElementValidator = require(93                       ); // 93 = ./ReactElementValidator
  createDOMFactory = ReactElementValidator.createFactory;
}

var ReactDOMFactories = {
  a: createDOMFactory('a'),
  abbr: createDOMFactory('abbr'),
  address: createDOMFactory('address'),
  area: createDOMFactory('area'),
  article: createDOMFactory('article'),
  aside: createDOMFactory('aside'),
  audio: createDOMFactory('audio'),
  b: createDOMFactory('b'),
  base: createDOMFactory('base'),
  bdi: createDOMFactory('bdi'),
  bdo: createDOMFactory('bdo'),
  big: createDOMFactory('big'),
  blockquote: createDOMFactory('blockquote'),
  body: createDOMFactory('body'),
  br: createDOMFactory('br'),
  button: createDOMFactory('button'),
  canvas: createDOMFactory('canvas'),
  caption: createDOMFactory('caption'),
  cite: createDOMFactory('cite'),
  code: createDOMFactory('code'),
  col: createDOMFactory('col'),
  colgroup: createDOMFactory('colgroup'),
  data: createDOMFactory('data'),
  datalist: createDOMFactory('datalist'),
  dd: createDOMFactory('dd'),
  del: createDOMFactory('del'),
  details: createDOMFactory('details'),
  dfn: createDOMFactory('dfn'),
  dialog: createDOMFactory('dialog'),
  div: createDOMFactory('div'),
  dl: createDOMFactory('dl'),
  dt: createDOMFactory('dt'),
  em: createDOMFactory('em'),
  embed: createDOMFactory('embed'),
  fieldset: createDOMFactory('fieldset'),
  figcaption: createDOMFactory('figcaption'),
  figure: createDOMFactory('figure'),
  footer: createDOMFactory('footer'),
  form: createDOMFactory('form'),
  h1: createDOMFactory('h1'),
  h2: createDOMFactory('h2'),
  h3: createDOMFactory('h3'),
  h4: createDOMFactory('h4'),
  h5: createDOMFactory('h5'),
  h6: createDOMFactory('h6'),
  head: createDOMFactory('head'),
  header: createDOMFactory('header'),
  hgroup: createDOMFactory('hgroup'),
  hr: createDOMFactory('hr'),
  html: createDOMFactory('html'),
  i: createDOMFactory('i'),
  iframe: createDOMFactory('iframe'),
  img: createDOMFactory('img'),
  input: createDOMFactory('input'),
  ins: createDOMFactory('ins'),
  kbd: createDOMFactory('kbd'),
  keygen: createDOMFactory('keygen'),
  label: createDOMFactory('label'),
  legend: createDOMFactory('legend'),
  li: createDOMFactory('li'),
  link: createDOMFactory('link'),
  main: createDOMFactory('main'),
  map: createDOMFactory('map'),
  mark: createDOMFactory('mark'),
  menu: createDOMFactory('menu'),
  menuitem: createDOMFactory('menuitem'),
  meta: createDOMFactory('meta'),
  meter: createDOMFactory('meter'),
  nav: createDOMFactory('nav'),
  noscript: createDOMFactory('noscript'),
  object: createDOMFactory('object'),
  ol: createDOMFactory('ol'),
  optgroup: createDOMFactory('optgroup'),
  option: createDOMFactory('option'),
  output: createDOMFactory('output'),
  p: createDOMFactory('p'),
  param: createDOMFactory('param'),
  picture: createDOMFactory('picture'),
  pre: createDOMFactory('pre'),
  progress: createDOMFactory('progress'),
  q: createDOMFactory('q'),
  rp: createDOMFactory('rp'),
  rt: createDOMFactory('rt'),
  ruby: createDOMFactory('ruby'),
  s: createDOMFactory('s'),
  samp: createDOMFactory('samp'),
  script: createDOMFactory('script'),
  section: createDOMFactory('section'),
  select: createDOMFactory('select'),
  small: createDOMFactory('small'),
  source: createDOMFactory('source'),
  span: createDOMFactory('span'),
  strong: createDOMFactory('strong'),
  style: createDOMFactory('style'),
  sub: createDOMFactory('sub'),
  summary: createDOMFactory('summary'),
  sup: createDOMFactory('sup'),
  table: createDOMFactory('table'),
  tbody: createDOMFactory('tbody'),
  td: createDOMFactory('td'),
  textarea: createDOMFactory('textarea'),
  tfoot: createDOMFactory('tfoot'),
  th: createDOMFactory('th'),
  thead: createDOMFactory('thead'),
  time: createDOMFactory('time'),
  title: createDOMFactory('title'),
  tr: createDOMFactory('tr'),
  track: createDOMFactory('track'),
  u: createDOMFactory('u'),
  ul: createDOMFactory('ul'),
  'var': createDOMFactory('var'),
  video: createDOMFactory('video'),
  wbr: createDOMFactory('wbr'),

  circle: createDOMFactory('circle'),
  clipPath: createDOMFactory('clipPath'),
  defs: createDOMFactory('defs'),
  ellipse: createDOMFactory('ellipse'),
  g: createDOMFactory('g'),
  image: createDOMFactory('image'),
  line: createDOMFactory('line'),
  linearGradient: createDOMFactory('linearGradient'),
  mask: createDOMFactory('mask'),
  path: createDOMFactory('path'),
  pattern: createDOMFactory('pattern'),
  polygon: createDOMFactory('polygon'),
  polyline: createDOMFactory('polyline'),
  radialGradient: createDOMFactory('radialGradient'),
  rect: createDOMFactory('rect'),
  stop: createDOMFactory('stop'),
  svg: createDOMFactory('svg'),
  text: createDOMFactory('text'),
  tspan: createDOMFactory('tspan')
};

module.exports = ReactDOMFactories;
}, 92, null, "react/lib/ReactDOMFactories.js");
__d(/* react/lib/ReactElementValidator.js */function(global, require, module, exports) {

'use strict';

var ReactCurrentOwner = require(35                   ); // 35 = ./ReactCurrentOwner
var ReactComponentTreeHook = require(33                        ); // 33 = ./ReactComponentTreeHook
var ReactElement = require(81              ); // 81 = ./ReactElement

var checkReactTypeSpec = require(94                    ); // 94 = ./checkReactTypeSpec

var canDefineProperty = require(82                   ); // 82 = ./canDefineProperty
var getIteratorFn = require(85               ); // 85 = ./getIteratorFn
var warning = require(13                ); // 13 = fbjs/lib/warning

function getDeclarationErrorAddendum() {
  if (ReactCurrentOwner.current) {
    var name = ReactCurrentOwner.current.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

var ownerHasKeyUseWarning = {};

function getCurrentComponentErrorInfo(parentType) {
  var info = getDeclarationErrorAddendum();

  if (!info) {
    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
    if (parentName) {
      info = ' Check the top-level render call using <' + parentName + '>.';
    }
  }
  return info;
}

function validateExplicitKey(element, parentType) {
  if (!element._store || element._store.validated || element.key != null) {
    return;
  }
  element._store.validated = true;

  var memoizer = ownerHasKeyUseWarning.uniqueKey || (ownerHasKeyUseWarning.uniqueKey = {});

  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
  if (memoizer[currentComponentErrorInfo]) {
    return;
  }
  memoizer[currentComponentErrorInfo] = true;

  var childOwner = '';
  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
    childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
  }

  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, ReactComponentTreeHook.getCurrentStackAddendum(element)) : void 0;
}

function validateChildKeys(node, parentType) {
  if (typeof node !== 'object') {
    return;
  }
  if (Array.isArray(node)) {
    for (var i = 0; i < node.length; i++) {
      var child = node[i];
      if (ReactElement.isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (ReactElement.isValidElement(node)) {
    if (node._store) {
      node._store.validated = true;
    }
  } else if (node) {
    var iteratorFn = getIteratorFn(node);

    if (iteratorFn) {
      if (iteratorFn !== node.entries) {
        var iterator = iteratorFn.call(node);
        var step;
        while (!(step = iterator.next()).done) {
          if (ReactElement.isValidElement(step.value)) {
            validateExplicitKey(step.value, parentType);
          }
        }
      }
    }
  }
}

function validatePropTypes(element) {
  var componentClass = element.type;
  if (typeof componentClass !== 'function') {
    return;
  }
  var name = componentClass.displayName || componentClass.name;
  if (componentClass.propTypes) {
    checkReactTypeSpec(componentClass.propTypes, element.props, 'prop', name, element, null);
  }
  if (typeof componentClass.getDefaultProps === 'function') {
    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
  }
}

var ReactElementValidator = {

  createElement: function createElement(type, props, children) {
    var validType = typeof type === 'string' || typeof type === 'function';

    if (!validType) {
      if (typeof type !== 'function' && typeof type !== 'string') {
        var info = '';
        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
          info += ' You likely forgot to export your component from the file ' + 'it\'s defined in.';
        }
        info += getDeclarationErrorAddendum();
        process.env.NODE_ENV !== 'production' ? warning(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', type == null ? type : typeof type, info) : void 0;
      }
    }

    var element = ReactElement.createElement.apply(this, arguments);

    if (element == null) {
      return element;
    }

    if (validType) {
      for (var i = 2; i < arguments.length; i++) {
        validateChildKeys(arguments[i], type);
      }
    }

    validatePropTypes(element);

    return element;
  },

  createFactory: function createFactory(type) {
    var validatedFactory = ReactElementValidator.createElement.bind(null, type);

    validatedFactory.type = type;

    if (process.env.NODE_ENV !== 'production') {
      if (canDefineProperty) {
        Object.defineProperty(validatedFactory, 'type', {
          enumerable: false,
          get: function get() {
            process.env.NODE_ENV !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : void 0;
            Object.defineProperty(this, 'type', {
              value: type
            });
            return type;
          }
        });
      }
    }

    return validatedFactory;
  },

  cloneElement: function cloneElement(element, props, children) {
    var newElement = ReactElement.cloneElement.apply(this, arguments);
    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], newElement.type);
    }
    validatePropTypes(newElement);
    return newElement;
  }

};

module.exports = ReactElementValidator;
}, 93, null, "react/lib/ReactElementValidator.js");
__d(/* react/lib/checkReactTypeSpec.js */function(global, require, module, exports) {

'use strict';

var _prodInvariant = require(34                    ); // 34 = ./reactProdInvariant

var ReactPropTypeLocationNames = require(17                            ); // 17 = ./ReactPropTypeLocationNames
var ReactPropTypesSecret = require(95                      ); // 95 = ./ReactPropTypesSecret

var invariant = require(24                  ); // 24 = fbjs/lib/invariant
var warning = require(13                ); // 13 = fbjs/lib/warning

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
  ReactComponentTreeHook = require(33                        ); // 33 = ./ReactComponentTreeHook
}

var loggedTypeFailures = {};

function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
  for (var typeSpecName in typeSpecs) {
    if (typeSpecs.hasOwnProperty(typeSpecName)) {
      var error;

      try {
        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
      } catch (ex) {
        error = ex;
      }
      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        loggedTypeFailures[error.message] = true;

        var componentStackInfo = '';

        if (process.env.NODE_ENV !== 'production') {
          if (!ReactComponentTreeHook) {
            ReactComponentTreeHook = require(33                        ); // 33 = ./ReactComponentTreeHook
          }
          if (debugID !== null) {
            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
          } else if (element !== null) {
            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
          }
        }

        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
      }
    }
  }
}

module.exports = checkReactTypeSpec;
}, 94, null, "react/lib/checkReactTypeSpec.js");
__d(/* react/lib/ReactPropTypesSecret.js */function(global, require, module, exports) {

'use strict';

var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;
}, 95, null, "react/lib/ReactPropTypesSecret.js");
__d(/* react/lib/ReactPropTypes.js */function(global, require, module, exports) {

'use strict';

var ReactElement = require(81              ); // 81 = ./ReactElement
var ReactPropTypeLocationNames = require(17                            ); // 17 = ./ReactPropTypeLocationNames
var ReactPropTypesSecret = require(95                      ); // 95 = ./ReactPropTypesSecret

var emptyFunction = require(14                      ); // 14 = fbjs/lib/emptyFunction
var getIteratorFn = require(85               ); // 85 = ./getIteratorFn
var warning = require(13                ); // 13 = fbjs/lib/warning

var ANONYMOUS = '<<anonymous>>';

var ReactPropTypes = {
  array: createPrimitiveTypeChecker('array'),
  bool: createPrimitiveTypeChecker('boolean'),
  func: createPrimitiveTypeChecker('function'),
  number: createPrimitiveTypeChecker('number'),
  object: createPrimitiveTypeChecker('object'),
  string: createPrimitiveTypeChecker('string'),
  symbol: createPrimitiveTypeChecker('symbol'),

  any: createAnyTypeChecker(),
  arrayOf: createArrayOfTypeChecker,
  element: createElementTypeChecker(),
  instanceOf: createInstanceTypeChecker,
  node: createNodeChecker(),
  objectOf: createObjectOfTypeChecker,
  oneOf: createEnumTypeChecker,
  oneOfType: createUnionTypeChecker,
  shape: createShapeTypeChecker
};

function is(x, y) {
  if (x === y) {
    return x !== 0 || 1 / x === 1 / y;
  } else {
    return x !== x && y !== y;
  }
}

function PropTypeError(message) {
  this.message = message;
  this.stack = '';
}

PropTypeError.prototype = Error.prototype;

function createChainableTypeChecker(validate) {
  if (process.env.NODE_ENV !== 'production') {
    var manualPropTypeCallCache = {};
  }
  function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
    componentName = componentName || ANONYMOUS;
    propFullName = propFullName || propName;
    if (process.env.NODE_ENV !== 'production') {
      if (secret !== ReactPropTypesSecret && typeof console !== 'undefined') {
        var cacheKey = componentName + ':' + propName;
        if (!manualPropTypeCallCache[cacheKey]) {
          process.env.NODE_ENV !== 'production' ? warning(false, 'You are manually calling a React.PropTypes validation ' + 'function for the `%s` prop on `%s`. This is deprecated ' + 'and will not work in production with the next major version. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.', propFullName, componentName) : void 0;
          manualPropTypeCallCache[cacheKey] = true;
        }
      }
    }
    if (props[propName] == null) {
      var locationName = ReactPropTypeLocationNames[location];
      if (isRequired) {
        if (props[propName] === null) {
          return new PropTypeError('The ' + locationName + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
        }
        return new PropTypeError('The ' + locationName + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
      }
      return null;
    } else {
      return validate(props, propName, componentName, location, propFullName);
    }
  }

  var chainedCheckType = checkType.bind(null, false);
  chainedCheckType.isRequired = checkType.bind(null, true);

  return chainedCheckType;
}

function createPrimitiveTypeChecker(expectedType) {
  function validate(props, propName, componentName, location, propFullName, secret) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== expectedType) {
      var locationName = ReactPropTypeLocationNames[location];

      var preciseType = getPreciseType(propValue);

      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createAnyTypeChecker() {
  return createChainableTypeChecker(emptyFunction.thatReturns(null));
}

function createArrayOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location, propFullName) {
    if (typeof typeChecker !== 'function') {
      return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
    }
    var propValue = props[propName];
    if (!Array.isArray(propValue)) {
      var locationName = ReactPropTypeLocationNames[location];
      var propType = getPropType(propValue);
      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
    }
    for (var i = 0; i < propValue.length; i++) {
      var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
      if (error instanceof Error) {
        return error;
      }
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createElementTypeChecker() {
  function validate(props, propName, componentName, location, propFullName) {
    var propValue = props[propName];
    if (!ReactElement.isValidElement(propValue)) {
      var locationName = ReactPropTypeLocationNames[location];
      var propType = getPropType(propValue);
      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createInstanceTypeChecker(expectedClass) {
  function validate(props, propName, componentName, location, propFullName) {
    if (!(props[propName] instanceof expectedClass)) {
      var locationName = ReactPropTypeLocationNames[location];
      var expectedClassName = expectedClass.name || ANONYMOUS;
      var actualClassName = getClassName(props[propName]);
      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createEnumTypeChecker(expectedValues) {
  if (!Array.isArray(expectedValues)) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
    return emptyFunction.thatReturnsNull;
  }

  function validate(props, propName, componentName, location, propFullName) {
    var propValue = props[propName];
    for (var i = 0; i < expectedValues.length; i++) {
      if (is(propValue, expectedValues[i])) {
        return null;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    var valuesString = JSON.stringify(expectedValues);
    return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
  }
  return createChainableTypeChecker(validate);
}

function createObjectOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location, propFullName) {
    if (typeof typeChecker !== 'function') {
      return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
    }
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
    }
    for (var key in propValue) {
      if (propValue.hasOwnProperty(key)) {
        var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error instanceof Error) {
          return error;
        }
      }
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createUnionTypeChecker(arrayOfTypeCheckers) {
  if (!Array.isArray(arrayOfTypeCheckers)) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
    return emptyFunction.thatReturnsNull;
  }

  function validate(props, propName, componentName, location, propFullName) {
    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
        return null;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
  }
  return createChainableTypeChecker(validate);
}

function createNodeChecker() {
  function validate(props, propName, componentName, location, propFullName) {
    if (!isNode(props[propName])) {
      var locationName = ReactPropTypeLocationNames[location];
      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createShapeTypeChecker(shapeTypes) {
  function validate(props, propName, componentName, location, propFullName) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
    }
    for (var key in shapeTypes) {
      var checker = shapeTypes[key];
      if (!checker) {
        continue;
      }
      var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
      if (error) {
        return error;
      }
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function isNode(propValue) {
  switch (typeof propValue) {
    case 'number':
    case 'string':
    case 'undefined':
      return true;
    case 'boolean':
      return !propValue;
    case 'object':
      if (Array.isArray(propValue)) {
        return propValue.every(isNode);
      }
      if (propValue === null || ReactElement.isValidElement(propValue)) {
        return true;
      }

      var iteratorFn = getIteratorFn(propValue);
      if (iteratorFn) {
        var iterator = iteratorFn.call(propValue);
        var step;
        if (iteratorFn !== propValue.entries) {
          while (!(step = iterator.next()).done) {
            if (!isNode(step.value)) {
              return false;
            }
          }
        } else {
          while (!(step = iterator.next()).done) {
            var entry = step.value;
            if (entry) {
              if (!isNode(entry[1])) {
                return false;
              }
            }
          }
        }
      } else {
        return false;
      }

      return true;
    default:
      return false;
  }
}

function isSymbol(propType, propValue) {
  if (propType === 'symbol') {
    return true;
  }

  if (propValue['@@toStringTag'] === 'Symbol') {
    return true;
  }

  if (typeof Symbol === 'function' && propValue instanceof Symbol) {
    return true;
  }

  return false;
}

function getPropType(propValue) {
  var propType = typeof propValue;
  if (Array.isArray(propValue)) {
    return 'array';
  }
  if (propValue instanceof RegExp) {
    return 'object';
  }
  if (isSymbol(propType, propValue)) {
    return 'symbol';
  }
  return propType;
}

function getPreciseType(propValue) {
  var propType = getPropType(propValue);
  if (propType === 'object') {
    if (propValue instanceof Date) {
      return 'date';
    } else if (propValue instanceof RegExp) {
      return 'regexp';
    }
  }
  return propType;
}

function getClassName(propValue) {
  if (!propValue.constructor || !propValue.constructor.name) {
    return ANONYMOUS;
  }
  return propValue.constructor.name;
}

module.exports = ReactPropTypes;
}, 96, null, "react/lib/ReactPropTypes.js");
__d(/* react/lib/ReactVersion.js */function(global, require, module, exports) {

'use strict';

module.exports = '15.4.2';
}, 97, null, "react/lib/ReactVersion.js");
__d(/* react/lib/onlyChild.js */function(global, require, module, exports) {
'use strict';

var _prodInvariant = require(34                    ); // 34 = ./reactProdInvariant

var ReactElement = require(81              ); // 81 = ./ReactElement

var invariant = require(24                  ); // 24 = fbjs/lib/invariant

function onlyChild(children) {
  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React.Children.only expected to receive a single React element child.') : _prodInvariant('143') : void 0;
  return children;
}

module.exports = onlyChild;
}, 98, null, "react/lib/onlyChild.js");
__d(/* StyleSheet */function(global, require, module, exports) {
'use strict';

var PixelRatio = require(100         ); // 100 = PixelRatio
var ReactNativePropRegistry = require(21                       ); // 21 = ReactNativePropRegistry
var ReactNativeStyleAttributes = require(102                         ); // 102 = ReactNativeStyleAttributes
var StyleSheetValidation = require(118                   ); // 118 = StyleSheetValidation

var flatten = require(23            ); // 23 = flattenStyle

var hairlineWidth = PixelRatio.roundToNearestPixel(0.4);
if (hairlineWidth === 0) {
  hairlineWidth = 1 / PixelRatio.get();
}

var absoluteFillObject = {
  position: 'absolute',
  left: 0,
  right: 0,
  top: 0,
  bottom: 0
};
var absoluteFill = ReactNativePropRegistry.register(absoluteFillObject);
module.exports = {
  hairlineWidth: hairlineWidth,

  absoluteFill: absoluteFill,

  absoluteFillObject: absoluteFillObject,

  flatten: flatten,

  setStyleAttributePreprocessor: function setStyleAttributePreprocessor(property, process) {
    var value = void 0;

    if (typeof ReactNativeStyleAttributes[property] === 'string') {
      value = {};
    } else if (typeof ReactNativeStyleAttributes[property] === 'object') {
      value = ReactNativeStyleAttributes[property];
    } else {
      console.error(property + ' is not a valid style attribute');
      return;
    }

    if (__DEV__ && typeof value.process === 'function') {
      console.warn('Overwriting ' + property + ' style attribute preprocessor');
    }

    ReactNativeStyleAttributes[property] = babelHelpers.extends({}, value, { process: process });
  },
  create: function create(obj) {
    var result = {};
    for (var key in obj) {
      StyleSheetValidation.validateStyle(key, obj);
      result[key] = ReactNativePropRegistry.register(obj[key]);
    }
    return result;
  }
};
}, 99, null, "StyleSheet");
__d(/* PixelRatio */function(global, require, module, exports) {
'use strict';

var Dimensions = require(101         ); // 101 = Dimensions

var PixelRatio = function () {
  function PixelRatio() {
    babelHelpers.classCallCheck(this, PixelRatio);
  }

  babelHelpers.createClass(PixelRatio, null, [{
    key: 'get',
    value: function get() {
      return Dimensions.get('window').scale;
    }
  }, {
    key: 'getFontScale',
    value: function getFontScale() {
      return Dimensions.get('window').fontScale || PixelRatio.get();
    }
  }, {
    key: 'getPixelSizeForLayoutSize',
    value: function getPixelSizeForLayoutSize(layoutSize) {
      return Math.round(layoutSize * PixelRatio.get());
    }
  }, {
    key: 'roundToNearestPixel',
    value: function roundToNearestPixel(layoutSize) {
      var ratio = PixelRatio.get();
      return Math.round(layoutSize * ratio) / ratio;
    }
  }, {
    key: 'startDetecting',
    value: function startDetecting() {}
  }]);
  return PixelRatio;
}();

module.exports = PixelRatio;
}, 100, null, "PixelRatio");
__d(/* Dimensions */function(global, require, module, exports) {
'use strict';

var Platform = require(26        ); // 26 = Platform
var UIManager = require(73         ); // 73 = UIManager
var RCTDeviceEventEmitter = require(57                     ); // 57 = RCTDeviceEventEmitter

var invariant = require(24                  ); // 24 = fbjs/lib/invariant

var dimensions = {};

var Dimensions = function () {
  function Dimensions() {
    babelHelpers.classCallCheck(this, Dimensions);
  }

  babelHelpers.createClass(Dimensions, null, [{
    key: 'set',
    value: function set(dims) {
      if (dims && dims.windowPhysicalPixels) {
        dims = JSON.parse(JSON.stringify(dims));

        var windowPhysicalPixels = dims.windowPhysicalPixels;
        dims.window = {
          width: windowPhysicalPixels.width / windowPhysicalPixels.scale,
          height: windowPhysicalPixels.height / windowPhysicalPixels.scale,
          scale: windowPhysicalPixels.scale,
          fontScale: windowPhysicalPixels.fontScale
        };
        if (Platform.OS === 'android') {
          var screenPhysicalPixels = dims.screenPhysicalPixels;
          dims.screen = {
            width: screenPhysicalPixels.width / screenPhysicalPixels.scale,
            height: screenPhysicalPixels.height / screenPhysicalPixels.scale,
            scale: screenPhysicalPixels.scale,
            fontScale: screenPhysicalPixels.fontScale
          };

          delete dims.screenPhysicalPixels;
        } else {
          dims.screen = dims.window;
        }

        delete dims.windowPhysicalPixels;
      }

      babelHelpers.extends(dimensions, dims);
    }
  }, {
    key: 'get',
    value: function get(dim) {
      invariant(dimensions[dim], 'No dimension set for key ' + dim);
      return dimensions[dim];
    }
  }]);
  return Dimensions;
}();

Dimensions.set(UIManager.Dimensions);
RCTDeviceEventEmitter.addListener('didUpdateDimensions', function (update) {
  Dimensions.set(update);
});

module.exports = Dimensions;
}, 101, null, "Dimensions");
__d(/* ReactNativeStyleAttributes */function(global, require, module, exports) {

'use strict';

var ImageStylePropTypes = require(103                  ); // 103 = ImageStylePropTypes
var TextStylePropTypes = require(111                 ); // 111 = TextStylePropTypes
var ViewStylePropTypes = require(112                 ); // 112 = ViewStylePropTypes

var keyMirror = require(105                 ); // 105 = fbjs/lib/keyMirror
var matricesDiffer = require(113             ); // 113 = matricesDiffer
var processColor = require(114           ); // 114 = processColor
var processTransform = require(115               ); // 115 = processTransform
var sizesDiffer = require(117          ); // 117 = sizesDiffer

var ReactNativeStyleAttributes = babelHelpers.extends({}, keyMirror(ViewStylePropTypes), keyMirror(TextStylePropTypes), keyMirror(ImageStylePropTypes));

ReactNativeStyleAttributes.transform = { process: processTransform };
ReactNativeStyleAttributes.transformMatrix = { diff: matricesDiffer };
ReactNativeStyleAttributes.shadowOffset = { diff: sizesDiffer };

ReactNativeStyleAttributes.decomposedMatrix = 'decomposedMatrix';

var colorAttributes = { process: processColor };
ReactNativeStyleAttributes.backgroundColor = colorAttributes;
ReactNativeStyleAttributes.borderBottomColor = colorAttributes;
ReactNativeStyleAttributes.borderColor = colorAttributes;
ReactNativeStyleAttributes.borderLeftColor = colorAttributes;
ReactNativeStyleAttributes.borderRightColor = colorAttributes;
ReactNativeStyleAttributes.borderTopColor = colorAttributes;
ReactNativeStyleAttributes.color = colorAttributes;
ReactNativeStyleAttributes.shadowColor = colorAttributes;
ReactNativeStyleAttributes.textDecorationColor = colorAttributes;
ReactNativeStyleAttributes.tintColor = colorAttributes;
ReactNativeStyleAttributes.textShadowColor = colorAttributes;
ReactNativeStyleAttributes.overlayColor = colorAttributes;

module.exports = ReactNativeStyleAttributes;
}, 102, null, "ReactNativeStyleAttributes");
__d(/* ImageStylePropTypes */function(global, require, module, exports) {
'use strict';

var ImageResizeMode = require(104              ); // 104 = ImageResizeMode
var LayoutPropTypes = require(106              ); // 106 = LayoutPropTypes
var ColorPropType = require(16             ); // 16 = ColorPropType
var ShadowPropTypesIOS = require(107                 ); // 107 = ShadowPropTypesIOS
var TransformPropTypes = require(108                 ); // 108 = TransformPropTypes

var ReactPropTypes = require(76     ).PropTypes; // 76 = React

var ImageStylePropTypes = babelHelpers.extends({}, LayoutPropTypes, ShadowPropTypesIOS, TransformPropTypes, {
  resizeMode: ReactPropTypes.oneOf(Object.keys(ImageResizeMode)),
  backfaceVisibility: ReactPropTypes.oneOf(['visible', 'hidden']),
  backgroundColor: ColorPropType,
  borderColor: ColorPropType,
  borderWidth: ReactPropTypes.number,
  borderRadius: ReactPropTypes.number,
  overflow: ReactPropTypes.oneOf(['visible', 'hidden']),

  tintColor: ColorPropType,
  opacity: ReactPropTypes.number,

  overlayColor: ReactPropTypes.string,

  borderTopLeftRadius: ReactPropTypes.number,
  borderTopRightRadius: ReactPropTypes.number,
  borderBottomLeftRadius: ReactPropTypes.number,
  borderBottomRightRadius: ReactPropTypes.number
});

module.exports = ImageStylePropTypes;
}, 103, null, "ImageStylePropTypes");
__d(/* ImageResizeMode */function(global, require, module, exports) {
'use strict';

var keyMirror = require(105                 ); // 105 = fbjs/lib/keyMirror

var ImageResizeMode = keyMirror({
  contain: null,

  cover: null,

  stretch: null,

  center: null,

  repeat: null
});

module.exports = ImageResizeMode;
}, 104, null, "ImageResizeMode");
__d(/* fbjs/lib/keyMirror.js */function(global, require, module, exports) {

'use strict';

var invariant = require(24           ); // 24 = ./invariant

var keyMirror = function keyMirror(obj) {
  var ret = {};
  var key;
  !(obj instanceof Object && !Array.isArray(obj)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'keyMirror(...): Argument must be an object.') : invariant(false) : void 0;
  for (key in obj) {
    if (!obj.hasOwnProperty(key)) {
      continue;
    }
    ret[key] = key;
  }
  return ret;
};

module.exports = keyMirror;
}, 105, null, "fbjs/lib/keyMirror.js");
__d(/* LayoutPropTypes */function(global, require, module, exports) {
'use strict';

var ReactPropTypes = require(76     ).PropTypes; // 76 = React

var LayoutPropTypes = {
  width: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  height: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  top: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  left: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  right: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  bottom: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  minWidth: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  maxWidth: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  minHeight: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  maxHeight: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  margin: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  marginVertical: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  marginHorizontal: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  marginTop: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  marginBottom: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  marginLeft: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  marginRight: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  padding: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  paddingVertical: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  paddingHorizontal: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  paddingTop: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  paddingBottom: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  paddingLeft: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  paddingRight: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  borderWidth: ReactPropTypes.number,

  borderTopWidth: ReactPropTypes.number,

  borderRightWidth: ReactPropTypes.number,

  borderBottomWidth: ReactPropTypes.number,

  borderLeftWidth: ReactPropTypes.number,

  position: ReactPropTypes.oneOf(['absolute', 'relative']),

  flexDirection: ReactPropTypes.oneOf(['row', 'row-reverse', 'column', 'column-reverse']),

  flexWrap: ReactPropTypes.oneOf(['wrap', 'nowrap']),

  justifyContent: ReactPropTypes.oneOf(['flex-start', 'flex-end', 'center', 'space-between', 'space-around']),

  alignItems: ReactPropTypes.oneOf(['flex-start', 'flex-end', 'center', 'stretch', 'baseline']),

  alignSelf: ReactPropTypes.oneOf(['auto', 'flex-start', 'flex-end', 'center', 'stretch', 'baseline']),

  overflow: ReactPropTypes.oneOf(['visible', 'hidden', 'scroll']),

  flex: ReactPropTypes.number,
  flexGrow: ReactPropTypes.number,
  flexShrink: ReactPropTypes.number,
  flexBasis: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  aspectRatio: ReactPropTypes.number,

  zIndex: ReactPropTypes.number
};

module.exports = LayoutPropTypes;
}, 106, null, "LayoutPropTypes");
__d(/* ShadowPropTypesIOS */function(global, require, module, exports) {
'use strict';

var ColorPropType = require(16             ); // 16 = ColorPropType
var ReactPropTypes = require(76     ).PropTypes; // 76 = React

var ShadowPropTypesIOS = {
  shadowColor: ColorPropType,

  shadowOffset: ReactPropTypes.shape({ width: ReactPropTypes.number, height: ReactPropTypes.number }),

  shadowOpacity: ReactPropTypes.number,

  shadowRadius: ReactPropTypes.number
};

module.exports = ShadowPropTypesIOS;
}, 107, null, "ShadowPropTypesIOS");
__d(/* TransformPropTypes */function(global, require, module, exports) {
'use strict';

var deprecatedPropType = require(109                 ); // 109 = deprecatedPropType

var ReactPropTypes = require(76     ).PropTypes; // 76 = React

var TransformMatrixPropType = function TransformMatrixPropType(props, propName, componentName) {
  if (props[propName]) {
    return new Error('The transformMatrix style property is deprecated. ' + 'Use `transform: [{ matrix: ... }]` instead.');
  }
};

var DecomposedMatrixPropType = function DecomposedMatrixPropType(props, propName, componentName) {
  if (props[propName]) {
    return new Error('The decomposedMatrix style property is deprecated. ' + 'Use `transform: [...]` instead.');
  }
};

var TransformPropTypes = {
  transform: ReactPropTypes.arrayOf(ReactPropTypes.oneOfType([ReactPropTypes.shape({ perspective: ReactPropTypes.number }), ReactPropTypes.shape({ rotate: ReactPropTypes.string }), ReactPropTypes.shape({ rotateX: ReactPropTypes.string }), ReactPropTypes.shape({ rotateY: ReactPropTypes.string }), ReactPropTypes.shape({ rotateZ: ReactPropTypes.string }), ReactPropTypes.shape({ scale: ReactPropTypes.number }), ReactPropTypes.shape({ scaleX: ReactPropTypes.number }), ReactPropTypes.shape({ scaleY: ReactPropTypes.number }), ReactPropTypes.shape({ translateX: ReactPropTypes.number }), ReactPropTypes.shape({ translateY: ReactPropTypes.number }), ReactPropTypes.shape({ skewX: ReactPropTypes.string }), ReactPropTypes.shape({ skewY: ReactPropTypes.string })])),

  transformMatrix: TransformMatrixPropType,
  decomposedMatrix: DecomposedMatrixPropType,

  scaleX: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
  scaleY: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
  rotation: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
  translateX: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
  translateY: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.')
};

module.exports = TransformPropTypes;
}, 108, null, "TransformPropTypes");
__d(/* deprecatedPropType */function(global, require, module, exports) {
'use strict';

var UIManager = require(73         ); // 73 = UIManager
var ReactPropTypesSecret = require(95                              ); // 95 = react/lib/ReactPropTypesSecret
var ReactPropTypeLocations = require(110                               ); // 110 = react/lib/ReactPropTypeLocations

function deprecatedPropType(propType, explanation) {
  return function validate(props, propName, componentName) {
    if (!UIManager[componentName] && props[propName] !== undefined) {
      console.warn('`' + propName + '` supplied to `' + componentName + '` has been deprecated. ' + explanation);
    }

    return propType(props, propName, componentName, ReactPropTypeLocations.prop, null, ReactPropTypesSecret);
  };
}

module.exports = deprecatedPropType;
}, 109, null, "deprecatedPropType");
__d(/* react/lib/ReactPropTypeLocations.js */function(global, require, module, exports) {

'use strict';
}, 110, null, "react/lib/ReactPropTypeLocations.js");
__d(/* TextStylePropTypes */function(global, require, module, exports) {
'use strict';

var ReactPropTypes = require(76     ).PropTypes; // 76 = React
var ColorPropType = require(16             ); // 16 = ColorPropType
var ViewStylePropTypes = require(112                 ); // 112 = ViewStylePropTypes

var TextStylePropTypes = babelHelpers.extends({}, ViewStylePropTypes, {

  color: ColorPropType,
  fontFamily: ReactPropTypes.string,
  fontSize: ReactPropTypes.number,
  fontStyle: ReactPropTypes.oneOf(['normal', 'italic']),

  fontWeight: ReactPropTypes.oneOf(['normal', 'bold', '100', '200', '300', '400', '500', '600', '700', '800', '900']),

  fontVariant: ReactPropTypes.arrayOf(ReactPropTypes.oneOf(['small-caps', 'oldstyle-nums', 'lining-nums', 'tabular-nums', 'proportional-nums'])),
  textShadowOffset: ReactPropTypes.shape({ width: ReactPropTypes.number, height: ReactPropTypes.number }),
  textShadowRadius: ReactPropTypes.number,
  textShadowColor: ColorPropType,

  letterSpacing: ReactPropTypes.number,
  lineHeight: ReactPropTypes.number,

  textAlign: ReactPropTypes.oneOf(['auto', 'left', 'right', 'center', 'justify']),

  textAlignVertical: ReactPropTypes.oneOf(['auto', 'top', 'bottom', 'center']),

  includeFontPadding: ReactPropTypes.bool,
  textDecorationLine: ReactPropTypes.oneOf(['none', 'underline', 'line-through', 'underline line-through']),

  textDecorationStyle: ReactPropTypes.oneOf(['solid', 'double', 'dotted', 'dashed']),

  textDecorationColor: ColorPropType,

  writingDirection: ReactPropTypes.oneOf(['auto', 'ltr', 'rtl'])
});

module.exports = TextStylePropTypes;
}, 111, null, "TextStylePropTypes");
__d(/* ViewStylePropTypes */function(global, require, module, exports) {
'use strict';

var LayoutPropTypes = require(106              ); // 106 = LayoutPropTypes
var ReactPropTypes = require(76     ).PropTypes; // 76 = React
var ColorPropType = require(16             ); // 16 = ColorPropType
var ShadowPropTypesIOS = require(107                 ); // 107 = ShadowPropTypesIOS
var TransformPropTypes = require(108                 ); // 108 = TransformPropTypes

var ViewStylePropTypes = babelHelpers.extends({}, LayoutPropTypes, ShadowPropTypesIOS, TransformPropTypes, {
  backfaceVisibility: ReactPropTypes.oneOf(['visible', 'hidden']),
  backgroundColor: ColorPropType,
  borderColor: ColorPropType,
  borderTopColor: ColorPropType,
  borderRightColor: ColorPropType,
  borderBottomColor: ColorPropType,
  borderLeftColor: ColorPropType,
  borderRadius: ReactPropTypes.number,
  borderTopLeftRadius: ReactPropTypes.number,
  borderTopRightRadius: ReactPropTypes.number,
  borderBottomLeftRadius: ReactPropTypes.number,
  borderBottomRightRadius: ReactPropTypes.number,
  borderStyle: ReactPropTypes.oneOf(['solid', 'dotted', 'dashed']),
  borderWidth: ReactPropTypes.number,
  borderTopWidth: ReactPropTypes.number,
  borderRightWidth: ReactPropTypes.number,
  borderBottomWidth: ReactPropTypes.number,
  borderLeftWidth: ReactPropTypes.number,
  opacity: ReactPropTypes.number,

  elevation: ReactPropTypes.number
});

module.exports = ViewStylePropTypes;
}, 112, null, "ViewStylePropTypes");
__d(/* matricesDiffer */function(global, require, module, exports) {
'use strict';

var matricesDiffer = function matricesDiffer(one, two) {
  if (one === two) {
    return false;
  }
  return !one || !two || one[12] !== two[12] || one[13] !== two[13] || one[14] !== two[14] || one[5] !== two[5] || one[10] !== two[10] || one[1] !== two[1] || one[2] !== two[2] || one[3] !== two[3] || one[4] !== two[4] || one[6] !== two[6] || one[7] !== two[7] || one[8] !== two[8] || one[9] !== two[9] || one[11] !== two[11] || one[15] !== two[15];
};

module.exports = matricesDiffer;
}, 113, null, "matricesDiffer");
__d(/* processColor */function(global, require, module, exports) {
'use strict';

var Platform = require(26        ); // 26 = Platform

var normalizeColor = require(18              ); // 18 = normalizeColor

function processColor(color) {
  if (color === undefined || color === null) {
    return color;
  }

  var int32Color = normalizeColor(color);
  if (int32Color === null) {
    return undefined;
  }

  int32Color = (int32Color << 24 | int32Color >>> 8) >>> 0;

  if (Platform.OS === 'android') {
    int32Color = int32Color | 0x0;
  }
  return int32Color;
}

module.exports = processColor;
}, 114, null, "processColor");
__d(/* processTransform */function(global, require, module, exports) {
'use strict';

var MatrixMath = require(116         ); // 116 = MatrixMath
var Platform = require(26        ); // 26 = Platform

var invariant = require(24                  ); // 24 = fbjs/lib/invariant
var stringifySafe = require(47             ); // 47 = stringifySafe

function processTransform(transform) {
  if (__DEV__) {
    _validateTransforms(transform);
  }

  if (Platform.OS === 'android' || Platform.OS === 'ios') {
    return transform;
  }

  var result = MatrixMath.createIdentityMatrix();

  transform.forEach(function (transformation) {
    var key = Object.keys(transformation)[0];
    var value = transformation[key];

    switch (key) {
      case 'matrix':
        MatrixMath.multiplyInto(result, result, value);
        break;
      case 'perspective':
        _multiplyTransform(result, MatrixMath.reusePerspectiveCommand, [value]);
        break;
      case 'rotateX':
        _multiplyTransform(result, MatrixMath.reuseRotateXCommand, [_convertToRadians(value)]);
        break;
      case 'rotateY':
        _multiplyTransform(result, MatrixMath.reuseRotateYCommand, [_convertToRadians(value)]);
        break;
      case 'rotate':
      case 'rotateZ':
        _multiplyTransform(result, MatrixMath.reuseRotateZCommand, [_convertToRadians(value)]);
        break;
      case 'scale':
        _multiplyTransform(result, MatrixMath.reuseScaleCommand, [value]);
        break;
      case 'scaleX':
        _multiplyTransform(result, MatrixMath.reuseScaleXCommand, [value]);
        break;
      case 'scaleY':
        _multiplyTransform(result, MatrixMath.reuseScaleYCommand, [value]);
        break;
      case 'translate':
        _multiplyTransform(result, MatrixMath.reuseTranslate3dCommand, [value[0], value[1], value[2] || 0]);
        break;
      case 'translateX':
        _multiplyTransform(result, MatrixMath.reuseTranslate2dCommand, [value, 0]);
        break;
      case 'translateY':
        _multiplyTransform(result, MatrixMath.reuseTranslate2dCommand, [0, value]);
        break;
      case 'skewX':
        _multiplyTransform(result, MatrixMath.reuseSkewXCommand, [_convertToRadians(value)]);
        break;
      case 'skewY':
        _multiplyTransform(result, MatrixMath.reuseSkewYCommand, [_convertToRadians(value)]);
        break;
      default:
        throw new Error('Invalid transform name: ' + key);
    }
  });

  return result;
}

function _multiplyTransform(result, matrixMathFunction, args) {
  var matrixToApply = MatrixMath.createIdentityMatrix();
  var argsWithIdentity = [matrixToApply].concat(args);
  matrixMathFunction.apply(this, argsWithIdentity);
  MatrixMath.multiplyInto(result, result, matrixToApply);
}

function _convertToRadians(value) {
  var floatValue = parseFloat(value, 10);
  return value.indexOf('rad') > -1 ? floatValue : floatValue * Math.PI / 180;
}

function _validateTransforms(transform) {
  transform.forEach(function (transformation) {
    var keys = Object.keys(transformation);
    invariant(keys.length === 1, 'You must specify exactly one property per transform object. Passed properties: %s', stringifySafe(transformation));
    var key = keys[0];
    var value = transformation[key];
    _validateTransform(key, value, transformation);
  });
}

function _validateTransform(key, value, transformation) {
  invariant(!value.getValue, 'You passed an Animated.Value to a normal component. ' + 'You need to wrap that component in an Animated. For example, ' + 'replace <View /> by <Animated.View />.');

  var multivalueTransforms = ['matrix', 'translate'];
  if (multivalueTransforms.indexOf(key) !== -1) {
    invariant(Array.isArray(value), 'Transform with key of %s must have an array as the value: %s', key, stringifySafe(transformation));
  }
  switch (key) {
    case 'matrix':
      invariant(value.length === 9 || value.length === 16, 'Matrix transform must have a length of 9 (2d) or 16 (3d). ' + 'Provided matrix has a length of %s: %s', value.length, stringifySafe(transformation));
      break;
    case 'translate':
      invariant(value.length === 2 || value.length === 3, 'Transform with key translate must be an array of length 2 or 3, found %s: %s', value.length, stringifySafe(transformation));
      break;
    case 'rotateX':
    case 'rotateY':
    case 'rotateZ':
    case 'rotate':
    case 'skewX':
    case 'skewY':
      invariant(typeof value === 'string', 'Transform with key of "%s" must be a string: %s', key, stringifySafe(transformation));
      invariant(value.indexOf('deg') > -1 || value.indexOf('rad') > -1, 'Rotate transform must be expressed in degrees (deg) or radians ' + '(rad): %s', stringifySafe(transformation));
      break;
    case 'perspective':
      invariant(typeof value === 'number', 'Transform with key of "%s" must be a number: %s', key, stringifySafe(transformation));
      invariant(value !== 0, 'Transform with key of "%s" cannot be zero: %s', key, stringifySafe(transformation));
      break;
    case 'translateX':
    case 'translateY':
    case 'scale':
    case 'scaleX':
    case 'scaleY':
      invariant(typeof value === 'number', 'Transform with key of "%s" must be a number: %s', key, stringifySafe(transformation));
      break;
    default:
      invariant(false, 'Invalid transform %s: %s', key, stringifySafe(transformation));
  }
}

module.exports = processTransform;
}, 115, null, "processTransform");
__d(/* MatrixMath */function(global, require, module, exports) {
'use strict';

var invariant = require(24                  ); // 24 = fbjs/lib/invariant

var MatrixMath = {
  createIdentityMatrix: function createIdentityMatrix() {
    return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
  },

  createCopy: function createCopy(m) {
    return [m[0], m[1], m[2], m[3], m[4], m[5], m[6], m[7], m[8], m[9], m[10], m[11], m[12], m[13], m[14], m[15]];
  },

  createOrthographic: function createOrthographic(left, right, bottom, top, near, far) {
    var a = 2 / (right - left);
    var b = 2 / (top - bottom);
    var c = -2 / (far - near);

    var tx = -(right + left) / (right - left);
    var ty = -(top + bottom) / (top - bottom);
    var tz = -(far + near) / (far - near);

    return [a, 0, 0, 0, 0, b, 0, 0, 0, 0, c, 0, tx, ty, tz, 1];
  },

  createFrustum: function createFrustum(left, right, bottom, top, near, far) {
    var r_width = 1 / (right - left);
    var r_height = 1 / (top - bottom);
    var r_depth = 1 / (near - far);
    var x = 2 * (near * r_width);
    var y = 2 * (near * r_height);
    var A = (right + left) * r_width;
    var B = (top + bottom) * r_height;
    var C = (far + near) * r_depth;
    var D = 2 * (far * near * r_depth);
    return [x, 0, 0, 0, 0, y, 0, 0, A, B, C, -1, 0, 0, D, 0];
  },

  createPerspective: function createPerspective(fovInRadians, aspect, near, far) {
    var h = 1 / Math.tan(fovInRadians / 2);
    var r_depth = 1 / (near - far);
    var C = (far + near) * r_depth;
    var D = 2 * (far * near * r_depth);
    return [h / aspect, 0, 0, 0, 0, h, 0, 0, 0, 0, C, -1, 0, 0, D, 0];
  },

  createTranslate2d: function createTranslate2d(x, y) {
    var mat = MatrixMath.createIdentityMatrix();
    MatrixMath.reuseTranslate2dCommand(mat, x, y);
    return mat;
  },

  reuseTranslate2dCommand: function reuseTranslate2dCommand(matrixCommand, x, y) {
    matrixCommand[12] = x;
    matrixCommand[13] = y;
  },

  reuseTranslate3dCommand: function reuseTranslate3dCommand(matrixCommand, x, y, z) {
    matrixCommand[12] = x;
    matrixCommand[13] = y;
    matrixCommand[14] = z;
  },

  createScale: function createScale(factor) {
    var mat = MatrixMath.createIdentityMatrix();
    MatrixMath.reuseScaleCommand(mat, factor);
    return mat;
  },

  reuseScaleCommand: function reuseScaleCommand(matrixCommand, factor) {
    matrixCommand[0] = factor;
    matrixCommand[5] = factor;
  },

  reuseScale3dCommand: function reuseScale3dCommand(matrixCommand, x, y, z) {
    matrixCommand[0] = x;
    matrixCommand[5] = y;
    matrixCommand[10] = z;
  },

  reusePerspectiveCommand: function reusePerspectiveCommand(matrixCommand, p) {
    matrixCommand[11] = -1 / p;
  },

  reuseScaleXCommand: function reuseScaleXCommand(matrixCommand, factor) {
    matrixCommand[0] = factor;
  },
  reuseScaleYCommand: function reuseScaleYCommand(matrixCommand, factor) {
    matrixCommand[5] = factor;
  },
  reuseScaleZCommand: function reuseScaleZCommand(matrixCommand, factor) {
    matrixCommand[10] = factor;
  },


  reuseRotateXCommand: function reuseRotateXCommand(matrixCommand, radians) {
    matrixCommand[5] = Math.cos(radians);
    matrixCommand[6] = Math.sin(radians);
    matrixCommand[9] = -Math.sin(radians);
    matrixCommand[10] = Math.cos(radians);
  },

  reuseRotateYCommand: function reuseRotateYCommand(matrixCommand, amount) {
    matrixCommand[0] = Math.cos(amount);
    matrixCommand[2] = -Math.sin(amount);
    matrixCommand[8] = Math.sin(amount);
    matrixCommand[10] = Math.cos(amount);
  },

  reuseRotateZCommand: function reuseRotateZCommand(matrixCommand, radians) {
    matrixCommand[0] = Math.cos(radians);
    matrixCommand[1] = Math.sin(radians);
    matrixCommand[4] = -Math.sin(radians);
    matrixCommand[5] = Math.cos(radians);
  },

  createRotateZ: function createRotateZ(radians) {
    var mat = MatrixMath.createIdentityMatrix();
    MatrixMath.reuseRotateZCommand(mat, radians);
    return mat;
  },

  reuseSkewXCommand: function reuseSkewXCommand(matrixCommand, radians) {
    matrixCommand[4] = Math.tan(radians);
  },

  reuseSkewYCommand: function reuseSkewYCommand(matrixCommand, radians) {
    matrixCommand[1] = Math.tan(radians);
  },

  multiplyInto: function multiplyInto(out, a, b) {
    var a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a03 = a[3],
        a10 = a[4],
        a11 = a[5],
        a12 = a[6],
        a13 = a[7],
        a20 = a[8],
        a21 = a[9],
        a22 = a[10],
        a23 = a[11],
        a30 = a[12],
        a31 = a[13],
        a32 = a[14],
        a33 = a[15];

    var b0 = b[0],
        b1 = b[1],
        b2 = b[2],
        b3 = b[3];
    out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;

    b0 = b[4];b1 = b[5];b2 = b[6];b3 = b[7];
    out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;

    b0 = b[8];b1 = b[9];b2 = b[10];b3 = b[11];
    out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;

    b0 = b[12];b1 = b[13];b2 = b[14];b3 = b[15];
    out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  },

  determinant: function determinant(matrix) {
    var _matrix = babelHelpers.slicedToArray(matrix, 16),
        m00 = _matrix[0],
        m01 = _matrix[1],
        m02 = _matrix[2],
        m03 = _matrix[3],
        m10 = _matrix[4],
        m11 = _matrix[5],
        m12 = _matrix[6],
        m13 = _matrix[7],
        m20 = _matrix[8],
        m21 = _matrix[9],
        m22 = _matrix[10],
        m23 = _matrix[11],
        m30 = _matrix[12],
        m31 = _matrix[13],
        m32 = _matrix[14],
        m33 = _matrix[15];

    return m03 * m12 * m21 * m30 - m02 * m13 * m21 * m30 - m03 * m11 * m22 * m30 + m01 * m13 * m22 * m30 + m02 * m11 * m23 * m30 - m01 * m12 * m23 * m30 - m03 * m12 * m20 * m31 + m02 * m13 * m20 * m31 + m03 * m10 * m22 * m31 - m00 * m13 * m22 * m31 - m02 * m10 * m23 * m31 + m00 * m12 * m23 * m31 + m03 * m11 * m20 * m32 - m01 * m13 * m20 * m32 - m03 * m10 * m21 * m32 + m00 * m13 * m21 * m32 + m01 * m10 * m23 * m32 - m00 * m11 * m23 * m32 - m02 * m11 * m20 * m33 + m01 * m12 * m20 * m33 + m02 * m10 * m21 * m33 - m00 * m12 * m21 * m33 - m01 * m10 * m22 * m33 + m00 * m11 * m22 * m33;
  },
  inverse: function inverse(matrix) {
    var det = MatrixMath.determinant(matrix);
    if (!det) {
      return matrix;
    }

    var _matrix2 = babelHelpers.slicedToArray(matrix, 16),
        m00 = _matrix2[0],
        m01 = _matrix2[1],
        m02 = _matrix2[2],
        m03 = _matrix2[3],
        m10 = _matrix2[4],
        m11 = _matrix2[5],
        m12 = _matrix2[6],
        m13 = _matrix2[7],
        m20 = _matrix2[8],
        m21 = _matrix2[9],
        m22 = _matrix2[10],
        m23 = _matrix2[11],
        m30 = _matrix2[12],
        m31 = _matrix2[13],
        m32 = _matrix2[14],
        m33 = _matrix2[15];

    return [(m12 * m23 * m31 - m13 * m22 * m31 + m13 * m21 * m32 - m11 * m23 * m32 - m12 * m21 * m33 + m11 * m22 * m33) / det, (m03 * m22 * m31 - m02 * m23 * m31 - m03 * m21 * m32 + m01 * m23 * m32 + m02 * m21 * m33 - m01 * m22 * m33) / det, (m02 * m13 * m31 - m03 * m12 * m31 + m03 * m11 * m32 - m01 * m13 * m32 - m02 * m11 * m33 + m01 * m12 * m33) / det, (m03 * m12 * m21 - m02 * m13 * m21 - m03 * m11 * m22 + m01 * m13 * m22 + m02 * m11 * m23 - m01 * m12 * m23) / det, (m13 * m22 * m30 - m12 * m23 * m30 - m13 * m20 * m32 + m10 * m23 * m32 + m12 * m20 * m33 - m10 * m22 * m33) / det, (m02 * m23 * m30 - m03 * m22 * m30 + m03 * m20 * m32 - m00 * m23 * m32 - m02 * m20 * m33 + m00 * m22 * m33) / det, (m03 * m12 * m30 - m02 * m13 * m30 - m03 * m10 * m32 + m00 * m13 * m32 + m02 * m10 * m33 - m00 * m12 * m33) / det, (m02 * m13 * m20 - m03 * m12 * m20 + m03 * m10 * m22 - m00 * m13 * m22 - m02 * m10 * m23 + m00 * m12 * m23) / det, (m11 * m23 * m30 - m13 * m21 * m30 + m13 * m20 * m31 - m10 * m23 * m31 - m11 * m20 * m33 + m10 * m21 * m33) / det, (m03 * m21 * m30 - m01 * m23 * m30 - m03 * m20 * m31 + m00 * m23 * m31 + m01 * m20 * m33 - m00 * m21 * m33) / det, (m01 * m13 * m30 - m03 * m11 * m30 + m03 * m10 * m31 - m00 * m13 * m31 - m01 * m10 * m33 + m00 * m11 * m33) / det, (m03 * m11 * m20 - m01 * m13 * m20 - m03 * m10 * m21 + m00 * m13 * m21 + m01 * m10 * m23 - m00 * m11 * m23) / det, (m12 * m21 * m30 - m11 * m22 * m30 - m12 * m20 * m31 + m10 * m22 * m31 + m11 * m20 * m32 - m10 * m21 * m32) / det, (m01 * m22 * m30 - m02 * m21 * m30 + m02 * m20 * m31 - m00 * m22 * m31 - m01 * m20 * m32 + m00 * m21 * m32) / det, (m02 * m11 * m30 - m01 * m12 * m30 - m02 * m10 * m31 + m00 * m12 * m31 + m01 * m10 * m32 - m00 * m11 * m32) / det, (m01 * m12 * m20 - m02 * m11 * m20 + m02 * m10 * m21 - m00 * m12 * m21 - m01 * m10 * m22 + m00 * m11 * m22) / det];
  },
  transpose: function transpose(m) {
    return [m[0], m[4], m[8], m[12], m[1], m[5], m[9], m[13], m[2], m[6], m[10], m[14], m[3], m[7], m[11], m[15]];
  },
  multiplyVectorByMatrix: function multiplyVectorByMatrix(v, m) {
    var _v = babelHelpers.slicedToArray(v, 4),
        vx = _v[0],
        vy = _v[1],
        vz = _v[2],
        vw = _v[3];

    return [vx * m[0] + vy * m[4] + vz * m[8] + vw * m[12], vx * m[1] + vy * m[5] + vz * m[9] + vw * m[13], vx * m[2] + vy * m[6] + vz * m[10] + vw * m[14], vx * m[3] + vy * m[7] + vz * m[11] + vw * m[15]];
  },
  v3Length: function v3Length(a) {
    return Math.sqrt(a[0] * a[0] + a[1] * a[1] + a[2] * a[2]);
  },
  v3Normalize: function v3Normalize(vector, v3Length) {
    var im = 1 / (v3Length || MatrixMath.v3Length(vector));
    return [vector[0] * im, vector[1] * im, vector[2] * im];
  },
  v3Dot: function v3Dot(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
  },
  v3Combine: function v3Combine(a, b, aScale, bScale) {
    return [aScale * a[0] + bScale * b[0], aScale * a[1] + bScale * b[1], aScale * a[2] + bScale * b[2]];
  },
  v3Cross: function v3Cross(a, b) {
    return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
  },
  quaternionToDegreesXYZ: function quaternionToDegreesXYZ(q, matrix, row) {
    var _q = babelHelpers.slicedToArray(q, 4),
        qx = _q[0],
        qy = _q[1],
        qz = _q[2],
        qw = _q[3];

    var qw2 = qw * qw;
    var qx2 = qx * qx;
    var qy2 = qy * qy;
    var qz2 = qz * qz;
    var test = qx * qy + qz * qw;
    var unit = qw2 + qx2 + qy2 + qz2;
    var conv = 180 / Math.PI;

    if (test > 0.49999 * unit) {
      return [0, 2 * Math.atan2(qx, qw) * conv, 90];
    }
    if (test < -0.49999 * unit) {
      return [0, -2 * Math.atan2(qx, qw) * conv, -90];
    }

    return [MatrixMath.roundTo3Places(Math.atan2(2 * qx * qw - 2 * qy * qz, 1 - 2 * qx2 - 2 * qz2) * conv), MatrixMath.roundTo3Places(Math.atan2(2 * qy * qw - 2 * qx * qz, 1 - 2 * qy2 - 2 * qz2) * conv), MatrixMath.roundTo3Places(Math.asin(2 * qx * qy + 2 * qz * qw) * conv)];
  },
  roundTo3Places: function roundTo3Places(n) {
    var arr = n.toString().split('e');
    return Math.round(arr[0] + 'e' + (arr[1] ? +arr[1] - 3 : 3)) * 0.001;
  },
  decomposeMatrix: function decomposeMatrix(transformMatrix) {

    invariant(transformMatrix.length === 16, 'Matrix decomposition needs a list of 3d matrix values, received %s', transformMatrix);

    var perspective = [];
    var quaternion = [];
    var scale = [];
    var skew = [];
    var translation = [];

    if (!transformMatrix[15]) {
      return;
    }
    var matrix = [];
    var perspectiveMatrix = [];
    for (var i = 0; i < 4; i++) {
      matrix.push([]);
      for (var j = 0; j < 4; j++) {
        var value = transformMatrix[i * 4 + j] / transformMatrix[15];
        matrix[i].push(value);
        perspectiveMatrix.push(j === 3 ? 0 : value);
      }
    }
    perspectiveMatrix[15] = 1;

    if (!MatrixMath.determinant(perspectiveMatrix)) {
      return;
    }

    if (matrix[0][3] !== 0 || matrix[1][3] !== 0 || matrix[2][3] !== 0) {
      var rightHandSide = [matrix[0][3], matrix[1][3], matrix[2][3], matrix[3][3]];

      var inversePerspectiveMatrix = MatrixMath.inverse(perspectiveMatrix);
      var transposedInversePerspectiveMatrix = MatrixMath.transpose(inversePerspectiveMatrix);
      var perspective = MatrixMath.multiplyVectorByMatrix(rightHandSide, transposedInversePerspectiveMatrix);
    } else {
      perspective[0] = perspective[1] = perspective[2] = 0;
      perspective[3] = 1;
    }

    for (var i = 0; i < 3; i++) {
      translation[i] = matrix[3][i];
    }

    var row = [];
    for (i = 0; i < 3; i++) {
      row[i] = [matrix[i][0], matrix[i][1], matrix[i][2]];
    }

    scale[0] = MatrixMath.v3Length(row[0]);
    row[0] = MatrixMath.v3Normalize(row[0], scale[0]);

    skew[0] = MatrixMath.v3Dot(row[0], row[1]);
    row[1] = MatrixMath.v3Combine(row[1], row[0], 1.0, -skew[0]);

    skew[0] = MatrixMath.v3Dot(row[0], row[1]);
    row[1] = MatrixMath.v3Combine(row[1], row[0], 1.0, -skew[0]);

    scale[1] = MatrixMath.v3Length(row[1]);
    row[1] = MatrixMath.v3Normalize(row[1], scale[1]);
    skew[0] /= scale[1];

    skew[1] = MatrixMath.v3Dot(row[0], row[2]);
    row[2] = MatrixMath.v3Combine(row[2], row[0], 1.0, -skew[1]);
    skew[2] = MatrixMath.v3Dot(row[1], row[2]);
    row[2] = MatrixMath.v3Combine(row[2], row[1], 1.0, -skew[2]);

    scale[2] = MatrixMath.v3Length(row[2]);
    row[2] = MatrixMath.v3Normalize(row[2], scale[2]);
    skew[1] /= scale[2];
    skew[2] /= scale[2];

    var pdum3 = MatrixMath.v3Cross(row[1], row[2]);
    if (MatrixMath.v3Dot(row[0], pdum3) < 0) {
      for (i = 0; i < 3; i++) {
        scale[i] *= -1;
        row[i][0] *= -1;
        row[i][1] *= -1;
        row[i][2] *= -1;
      }
    }

    quaternion[0] = 0.5 * Math.sqrt(Math.max(1 + row[0][0] - row[1][1] - row[2][2], 0));
    quaternion[1] = 0.5 * Math.sqrt(Math.max(1 - row[0][0] + row[1][1] - row[2][2], 0));
    quaternion[2] = 0.5 * Math.sqrt(Math.max(1 - row[0][0] - row[1][1] + row[2][2], 0));
    quaternion[3] = 0.5 * Math.sqrt(Math.max(1 + row[0][0] + row[1][1] + row[2][2], 0));

    if (row[2][1] > row[1][2]) {
      quaternion[0] = -quaternion[0];
    }
    if (row[0][2] > row[2][0]) {
      quaternion[1] = -quaternion[1];
    }
    if (row[1][0] > row[0][1]) {
      quaternion[2] = -quaternion[2];
    }

    var rotationDegrees;
    if (quaternion[0] < 0.001 && quaternion[0] >= 0 && quaternion[1] < 0.001 && quaternion[1] >= 0) {
      rotationDegrees = [0, 0, MatrixMath.roundTo3Places(Math.atan2(row[0][1], row[0][0]) * 180 / Math.PI)];
    } else {
      rotationDegrees = MatrixMath.quaternionToDegreesXYZ(quaternion, matrix, row);
    }

    return {
      rotationDegrees: rotationDegrees,
      perspective: perspective,
      quaternion: quaternion,
      scale: scale,
      skew: skew,
      translation: translation,

      rotate: rotationDegrees[2],
      rotateX: rotationDegrees[0],
      rotateY: rotationDegrees[1],
      scaleX: scale[0],
      scaleY: scale[1],
      translateX: translation[0],
      translateY: translation[1]
    };
  }
};

module.exports = MatrixMath;
}, 116, null, "MatrixMath");
__d(/* sizesDiffer */function(global, require, module, exports) {
'use strict';

var dummySize = { width: undefined, height: undefined };

var sizesDiffer = function sizesDiffer(one, two) {
  one = one || dummySize;
  two = two || dummySize;
  return one !== two && (one.width !== two.width || one.height !== two.height);
};

module.exports = sizesDiffer;
}, 117, null, "sizesDiffer");
__d(/* StyleSheetValidation */function(global, require, module, exports) {
'use strict';

var ImageStylePropTypes = require(103                  ); // 103 = ImageStylePropTypes
var ReactPropTypeLocations = require(110                               ); // 110 = react/lib/ReactPropTypeLocations
var ReactPropTypesSecret = require(95                              ); // 95 = react/lib/ReactPropTypesSecret
var TextStylePropTypes = require(111                 ); // 111 = TextStylePropTypes
var ViewStylePropTypes = require(112                 ); // 112 = ViewStylePropTypes

var invariant = require(24                  ); // 24 = fbjs/lib/invariant

var StyleSheetValidation = function () {
  function StyleSheetValidation() {
    babelHelpers.classCallCheck(this, StyleSheetValidation);
  }

  babelHelpers.createClass(StyleSheetValidation, null, [{
    key: 'validateStyleProp',
    value: function validateStyleProp(prop, style, caller) {
      if (!__DEV__) {
        return;
      }
      if (allStylePropTypes[prop] === undefined) {
        var message1 = '"' + prop + '" is not a valid style property.';
        var message2 = '\nValid style props: ' + JSON.stringify(Object.keys(allStylePropTypes).sort(), null, '  ');
        styleError(message1, style, caller, message2);
      }
      var error = allStylePropTypes[prop](style, prop, caller, ReactPropTypeLocations.prop, null, ReactPropTypesSecret);
      if (error) {
        styleError(error.message, style, caller);
      }
    }
  }, {
    key: 'validateStyle',
    value: function validateStyle(name, styles) {
      if (!__DEV__) {
        return;
      }
      for (var prop in styles[name]) {
        StyleSheetValidation.validateStyleProp(prop, styles[name], 'StyleSheet ' + name);
      }
    }
  }, {
    key: 'addValidStylePropTypes',
    value: function addValidStylePropTypes(stylePropTypes) {
      for (var key in stylePropTypes) {
        allStylePropTypes[key] = stylePropTypes[key];
      }
    }
  }]);
  return StyleSheetValidation;
}();

var styleError = function styleError(message1, style, caller, message2) {
  invariant(false, message1 + '\n' + (caller || '<<unknown>>') + ': ' + JSON.stringify(style, null, '  ') + (message2 || ''));
};

var allStylePropTypes = {};

StyleSheetValidation.addValidStylePropTypes(ImageStylePropTypes);
StyleSheetValidation.addValidStylePropTypes(TextStylePropTypes);
StyleSheetValidation.addValidStylePropTypes(ViewStylePropTypes);

module.exports = StyleSheetValidation;
}, 118, null, "StyleSheetValidation");
__d(/* View */function(global, require, module, exports) {
'use strict';

var EdgeInsetsPropType = require(120                 ); // 120 = EdgeInsetsPropType
var NativeMethodsMixin = require(19                  ); // 19 = NativeMethodsMixin
var NativeModules = require(27             ); // 27 = NativeModules
var Platform = require(26        ); // 26 = Platform
var React = require(76     ); // 76 = React
var ReactNativeStyleAttributes = require(102                         ); // 102 = ReactNativeStyleAttributes
var ReactNativeViewAttributes = require(125                        ); // 125 = ReactNativeViewAttributes
var StyleSheetPropType = require(126                 ); // 126 = StyleSheetPropType
var ViewStylePropTypes = require(112                 ); // 112 = ViewStylePropTypes

var invariant = require(24                  ); // 24 = fbjs/lib/invariant

var TVViewPropTypes = {};
if (Platform.isTVOS) {
  TVViewPropTypes = require(127              ); // 127 = TVViewPropTypes
}

var requireNativeComponent = require(128                     ); // 128 = requireNativeComponent

var PropTypes = React.PropTypes;

var stylePropType = StyleSheetPropType(ViewStylePropTypes);

var AccessibilityTraits = ['none', 'button', 'link', 'header', 'search', 'image', 'selected', 'plays', 'key', 'text', 'summary', 'disabled', 'frequentUpdates', 'startsMedia', 'adjustable', 'allowsDirectInteraction', 'pageTurn'];

var AccessibilityComponentType = ['none', 'button', 'radiobutton_checked', 'radiobutton_unchecked'];

var forceTouchAvailable = NativeModules.IOSConstants && NativeModules.IOSConstants.forceTouchAvailable || false;

var statics = {
  AccessibilityTraits: AccessibilityTraits,
  AccessibilityComponentType: AccessibilityComponentType,

  forceTouchAvailable: forceTouchAvailable
};

var View = React.createClass({
  displayName: 'View',

  mixins: [NativeMethodsMixin],

  viewConfig: {
    uiViewClassName: 'RCTView',
    validAttributes: ReactNativeViewAttributes.RCTView
  },

  statics: babelHelpers.extends({}, statics),

  propTypes: babelHelpers.extends({}, TVViewPropTypes, {
    accessible: PropTypes.bool,

    accessibilityLabel: PropTypes.node,

    accessibilityComponentType: PropTypes.oneOf(AccessibilityComponentType),

    accessibilityLiveRegion: PropTypes.oneOf(['none', 'polite', 'assertive']),

    importantForAccessibility: PropTypes.oneOf(['auto', 'yes', 'no', 'no-hide-descendants']),

    accessibilityTraits: PropTypes.oneOfType([PropTypes.oneOf(AccessibilityTraits), PropTypes.arrayOf(PropTypes.oneOf(AccessibilityTraits))]),

    onAccessibilityTap: PropTypes.func,

    onMagicTap: PropTypes.func,

    testID: PropTypes.string,

    onResponderGrant: PropTypes.func,

    onResponderMove: PropTypes.func,

    onResponderReject: PropTypes.func,

    onResponderRelease: PropTypes.func,

    onResponderTerminate: PropTypes.func,

    onResponderTerminationRequest: PropTypes.func,

    onStartShouldSetResponder: PropTypes.func,

    onStartShouldSetResponderCapture: PropTypes.func,

    onMoveShouldSetResponder: PropTypes.func,

    onMoveShouldSetResponderCapture: PropTypes.func,

    hitSlop: EdgeInsetsPropType,

    onLayout: PropTypes.func,

    pointerEvents: PropTypes.oneOf(['box-none', 'none', 'box-only', 'auto']),
    style: stylePropType,

    removeClippedSubviews: PropTypes.bool,

    renderToHardwareTextureAndroid: PropTypes.bool,

    shouldRasterizeIOS: PropTypes.bool,

    collapsable: PropTypes.bool,

    needsOffscreenAlphaCompositing: PropTypes.bool
  }),

  contextTypes: {
    isInAParentText: React.PropTypes.bool
  },

  render: function render() {
    invariant(!(this.context.isInAParentText && Platform.OS === 'android'), 'Nesting of <View> within <Text> is not supported on Android.');

    return React.createElement(RCTView, this.props);
  }
});

var RCTView = requireNativeComponent('RCTView', View, {
  nativeOnly: {
    nativeBackgroundAndroid: true,
    nativeForegroundAndroid: true
  }
});

if (__DEV__) {
  var UIManager = require(73         ); // 73 = UIManager
  var viewConfig = UIManager.viewConfigs && UIManager.viewConfigs.RCTView || {};
  for (var prop in viewConfig.nativeProps) {
    var viewAny = View;
    if (!viewAny.propTypes[prop] && !ReactNativeStyleAttributes[prop]) {
      throw new Error('View is missing propType for native prop `' + prop + '`');
    }
  }
}

var ViewToExport = RCTView;
if (__DEV__) {
  ViewToExport = View;
} else {
  babelHelpers.extends(RCTView, statics);
}

module.exports = ViewToExport;
}, 119, null, "View");
__d(/* EdgeInsetsPropType */function(global, require, module, exports) {
'use strict';

var _require = require(76     ), // 76 = React
    PropTypes = _require.PropTypes;

var createStrictShapeTypeChecker = require(121                           ); // 121 = createStrictShapeTypeChecker

var EdgeInsetsPropType = createStrictShapeTypeChecker({
  top: PropTypes.number,
  left: PropTypes.number,
  bottom: PropTypes.number,
  right: PropTypes.number
});

module.exports = EdgeInsetsPropType;
}, 120, null, "EdgeInsetsPropType");
__d(/* createStrictShapeTypeChecker */function(global, require, module, exports) {
'use strict';

var ReactPropTypeLocationNames = require(17                                    ); // 17 = react/lib/ReactPropTypeLocationNames
var ReactPropTypesSecret = require(95                              ); // 95 = react/lib/ReactPropTypesSecret

var invariant = require(24                  ); // 24 = fbjs/lib/invariant
var merge = require(122    ); // 122 = merge

function createStrictShapeTypeChecker(shapeTypes) {
  function checkType(isRequired, props, propName, componentName, location) {
    if (!props[propName]) {
      if (isRequired) {
        invariant(false, 'Required object `' + propName + '` was not specified in ' + ('`' + componentName + '`.'));
      }
      return;
    }
    var propValue = props[propName];
    var propType = typeof propValue;
    var locationName = location && ReactPropTypeLocationNames[location] || '(unknown)';
    if (propType !== 'object') {
      invariant(false, 'Invalid ' + locationName + ' `' + propName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
    }

    var allKeys = merge(props[propName], shapeTypes);
    for (var key in allKeys) {
      var checker = shapeTypes[key];
      if (!checker) {
        invariant(false, 'Invalid props.' + propName + ' key `' + key + '` supplied to `' + componentName + '`.' + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
      }
      var error = checker(propValue, key, componentName, location, null, ReactPropTypesSecret);
      if (error) {
        invariant(false, error.message + '\nBad object: ' + JSON.stringify(props[propName], null, '  '));
      }
    }
  }
  function chainedCheckType(props, propName, componentName, location) {
    return checkType(false, props, propName, componentName, location);
  }
  chainedCheckType.isRequired = checkType.bind(null, true);
  return chainedCheckType;
}

module.exports = createStrictShapeTypeChecker;
}, 121, null, "createStrictShapeTypeChecker");
__d(/* merge */function(global, require, module, exports) {

"use strict";

var mergeInto = require(123        ); // 123 = mergeInto

var merge = function merge(one, two) {
  var result = {};
  mergeInto(result, one);
  mergeInto(result, two);
  return result;
};

module.exports = merge;
}, 122, null, "merge");
__d(/* mergeInto */function(global, require, module, exports) {

"use strict";

var mergeHelpers = require(124           ); // 124 = mergeHelpers

var checkMergeObjectArg = mergeHelpers.checkMergeObjectArg;
var checkMergeIntoObjectArg = mergeHelpers.checkMergeIntoObjectArg;

function mergeInto(one, two) {
  checkMergeIntoObjectArg(one);
  if (two != null) {
    checkMergeObjectArg(two);
    for (var key in two) {
      if (!two.hasOwnProperty(key)) {
        continue;
      }
      one[key] = two[key];
    }
  }
}

module.exports = mergeInto;
}, 123, null, "mergeInto");
__d(/* mergeHelpers */function(global, require, module, exports) {

"use strict";

var invariant = require(24                  ); // 24 = fbjs/lib/invariant
var keyMirror = require(105                 ); // 105 = fbjs/lib/keyMirror

var MAX_MERGE_DEPTH = 36;

var isTerminal = function isTerminal(o) {
  return typeof o !== 'object' || o === null;
};

var mergeHelpers = {

  MAX_MERGE_DEPTH: MAX_MERGE_DEPTH,

  isTerminal: isTerminal,

  normalizeMergeArg: function normalizeMergeArg(arg) {
    return arg === undefined || arg === null ? {} : arg;
  },

  checkMergeArrayArgs: function checkMergeArrayArgs(one, two) {
    invariant(Array.isArray(one) && Array.isArray(two), 'Tried to merge arrays, instead got %s and %s.', one, two);
  },

  checkMergeObjectArgs: function checkMergeObjectArgs(one, two) {
    mergeHelpers.checkMergeObjectArg(one);
    mergeHelpers.checkMergeObjectArg(two);
  },

  checkMergeObjectArg: function checkMergeObjectArg(arg) {
    invariant(!isTerminal(arg) && !Array.isArray(arg), 'Tried to merge an object, instead got %s.', arg);
  },

  checkMergeIntoObjectArg: function checkMergeIntoObjectArg(arg) {
    invariant((!isTerminal(arg) || typeof arg === 'function') && !Array.isArray(arg), 'Tried to merge into an object, instead got %s.', arg);
  },

  checkMergeLevel: function checkMergeLevel(level) {
    invariant(level < MAX_MERGE_DEPTH, 'Maximum deep merge depth exceeded. You may be attempting to merge ' + 'circular structures in an unsupported way.');
  },

  checkArrayStrategy: function checkArrayStrategy(strategy) {
    invariant(strategy === undefined || strategy in mergeHelpers.ArrayStrategies, 'You must provide an array strategy to deep merge functions to ' + 'instruct the deep merge how to resolve merging two arrays.');
  },

  ArrayStrategies: keyMirror({
    Clobber: true,
    IndexByIndex: true
  })

};

module.exports = mergeHelpers;
}, 124, null, "mergeHelpers");
__d(/* ReactNativeViewAttributes */function(global, require, module, exports) {
'use strict';

var ReactNativeStyleAttributes = require(102                         ); // 102 = ReactNativeStyleAttributes

var ReactNativeViewAttributes = {};

ReactNativeViewAttributes.UIView = {
  pointerEvents: true,
  accessible: true,
  accessibilityLabel: true,
  accessibilityComponentType: true,
  accessibilityLiveRegion: true,
  accessibilityTraits: true,
  importantForAccessibility: true,
  testID: true,
  renderToHardwareTextureAndroid: true,
  shouldRasterizeIOS: true,
  onLayout: true,
  onAccessibilityTap: true,
  onMagicTap: true,
  collapsable: true,
  needsOffscreenAlphaCompositing: true,
  style: ReactNativeStyleAttributes
};

ReactNativeViewAttributes.RCTView = babelHelpers.extends({}, ReactNativeViewAttributes.UIView, {
  removeClippedSubviews: true
});

module.exports = ReactNativeViewAttributes;
}, 125, null, "ReactNativeViewAttributes");
__d(/* StyleSheetPropType */function(global, require, module, exports) {
'use strict';

var createStrictShapeTypeChecker = require(121                           ); // 121 = createStrictShapeTypeChecker
var flattenStyle = require(23            ); // 23 = flattenStyle

function StyleSheetPropType(shape) {
  var shapePropType = createStrictShapeTypeChecker(shape);
  return function (props, propName, componentName, location) {
    var newProps = props;
    if (props[propName]) {
      newProps = {};
      newProps[propName] = flattenStyle(props[propName]);
    }
    return shapePropType(newProps, propName, componentName, location);
  };
}

module.exports = StyleSheetPropType;
}, 126, null, "StyleSheetPropType");
__d(/* TVViewPropTypes */function(global, require, module, exports) {
'use strict';

var PropTypes = require(76     ).PropTypes; // 76 = React

var TVViewPropTypes = {
  isTVSelectable: PropTypes.bool,

  hasTVPreferredFocus: PropTypes.bool,

  tvParallaxProperties: PropTypes.object,

  tvParallaxShiftDistanceX: PropTypes.number,

  tvParallaxShiftDistanceY: PropTypes.number,

  tvParallaxTiltAngle: PropTypes.number,

  tvParallaxMagnification: PropTypes.number

};

module.exports = TVViewPropTypes;
}, 127, null, "TVViewPropTypes");
__d(/* requireNativeComponent */function(global, require, module, exports) {
'use strict';

var ReactNativeStyleAttributes = require(102                         ); // 102 = ReactNativeStyleAttributes
var UIManager = require(73         ); // 73 = UIManager
var UnimplementedView = require(129                ); // 129 = UnimplementedView

var createReactNativeComponentClass = require(130                              ); // 130 = createReactNativeComponentClass
var insetsDiffer = require(169           ); // 169 = insetsDiffer
var matricesDiffer = require(113             ); // 113 = matricesDiffer
var pointsDiffer = require(170           ); // 170 = pointsDiffer
var processColor = require(114           ); // 114 = processColor
var resolveAssetSource = require(171                 ); // 171 = resolveAssetSource
var sizesDiffer = require(117          ); // 117 = sizesDiffer
var verifyPropTypes = require(175              ); // 175 = verifyPropTypes
var warning = require(13                ); // 13 = fbjs/lib/warning

function requireNativeComponent(viewName, componentInterface, extraConfig) {
  var viewConfig = UIManager[viewName];
  if (!viewConfig || !viewConfig.NativeProps) {
    warning(false, 'Native component for "%s" does not exist', viewName);
    return UnimplementedView;
  }

  viewConfig.uiViewClassName = viewName;
  viewConfig.validAttributes = {};
  viewConfig.propTypes = componentInterface && componentInterface.propTypes;

  var nativeProps = babelHelpers.extends({}, UIManager.RCTView.NativeProps, viewConfig.NativeProps);
  for (var key in nativeProps) {
    var useAttribute = false;
    var attribute = {};

    var differ = TypeToDifferMap[nativeProps[key]];
    if (differ) {
      attribute.diff = differ;
      useAttribute = true;
    }

    var processor = TypeToProcessorMap[nativeProps[key]];
    if (processor) {
      attribute.process = processor;
      useAttribute = true;
    }

    viewConfig.validAttributes[key] = useAttribute ? attribute : true;
  }

  viewConfig.validAttributes.style = ReactNativeStyleAttributes;

  if (__DEV__) {
    componentInterface && verifyPropTypes(componentInterface, viewConfig, extraConfig && extraConfig.nativeOnly);
  }

  return createReactNativeComponentClass(viewConfig);
}

var TypeToDifferMap = {
  CATransform3D: matricesDiffer,
  CGPoint: pointsDiffer,
  CGSize: sizesDiffer,
  UIEdgeInsets: insetsDiffer
};

function processColorArray(colors) {
  return colors && colors.map(processColor);
}

var TypeToProcessorMap = {
  CGColor: processColor,
  CGColorArray: processColorArray,
  UIColor: processColor,
  UIColorArray: processColorArray,
  CGImage: resolveAssetSource,
  UIImage: resolveAssetSource,
  RCTImageSource: resolveAssetSource,

  Color: processColor,
  ColorArray: processColorArray
};

module.exports = requireNativeComponent;
}, 128, null, "requireNativeComponent");
__d(/* UnimplementedView */function(global, require, module, exports) {

'use strict';

var React = require(76     ); // 76 = React
var StyleSheet = require(99          ); // 99 = StyleSheet

var UnimplementedView = function (_React$Component) {
  babelHelpers.inherits(UnimplementedView, _React$Component);

  function UnimplementedView() {
    var _ref;

    var _temp, _this, _ret;

    babelHelpers.classCallCheck(this, UnimplementedView);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = UnimplementedView.__proto__ || Object.getPrototypeOf(UnimplementedView)).call.apply(_ref, [this].concat(args))), _this), _this.setNativeProps = function () {}, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
  }

  babelHelpers.createClass(UnimplementedView, [{
    key: 'render',
    value: function render() {
      var View = require(119   ); // 119 = View
      return React.createElement(
        View,
        { style: [styles.unimplementedView, this.props.style] },
        this.props.children
      );
    }
  }]);
  return UnimplementedView;
}(React.Component);

var styles = StyleSheet.create({
  unimplementedView: {
    borderWidth: 1,
    borderColor: 'red',
    alignSelf: 'flex-start'
  }
});

module.exports = UnimplementedView;
}, 129, null, "UnimplementedView");
__d(/* createReactNativeComponentClass */function(global, require, module, exports) {

'use strict';

var ReactNativeBaseComponent = require(131                       ); // 131 = ReactNativeBaseComponent

var createReactNativeComponentClass = function createReactNativeComponentClass(viewConfig) {
  var Constructor = function Constructor(element) {
    this._currentElement = element;
    this._topLevelWrapper = null;
    this._hostParent = null;
    this._hostContainerInfo = null;
    this._rootNodeID = 0;
    this._renderedChildren = null;
  };
  Constructor.displayName = viewConfig.uiViewClassName;
  Constructor.viewConfig = viewConfig;
  Constructor.propTypes = viewConfig.propTypes;
  Constructor.prototype = new ReactNativeBaseComponent(viewConfig);
  Constructor.prototype.constructor = Constructor;

  return Constructor;
};

module.exports = createReactNativeComponentClass;
}, 130, null, "createReactNativeComponentClass");
__d(/* ReactNativeBaseComponent */function(global, require, module, exports) {
'use strict';

var NativeMethodsMixin = require(19                  ); // 19 = NativeMethodsMixin
var ReactNativeAttributePayload = require(20                           ); // 20 = ReactNativeAttributePayload
var ReactNativeComponentTree = require(132                       ); // 132 = ReactNativeComponentTree
var ReactNativeEventEmitter = require(133                      ); // 133 = ReactNativeEventEmitter
var ReactNativeTagHandles = require(141                    ); // 141 = ReactNativeTagHandles
var ReactMultiChild = require(151              ); // 151 = ReactMultiChild
var UIManager = require(73         ); // 73 = UIManager

var deepFreezeAndThrowOnMutationInDev = require(46                                 ); // 46 = deepFreezeAndThrowOnMutationInDev

var registrationNames = ReactNativeEventEmitter.registrationNames;
var putListener = ReactNativeEventEmitter.putListener;
var deleteListener = ReactNativeEventEmitter.deleteListener;
var deleteAllListeners = ReactNativeEventEmitter.deleteAllListeners;

var ReactNativeBaseComponent = function ReactNativeBaseComponent(viewConfig) {
  this.viewConfig = viewConfig;
};

ReactNativeBaseComponent.Mixin = {
  getPublicInstance: function getPublicInstance() {
    return this;
  },

  unmountComponent: function unmountComponent() {
    ReactNativeComponentTree.uncacheNode(this);
    deleteAllListeners(this);
    this.unmountChildren();
    this._rootNodeID = 0;
  },

  initializeChildren: function initializeChildren(children, containerTag, transaction, context) {
    var mountImages = this.mountChildren(children, transaction, context);

    if (mountImages.length) {
      var createdTags = [];
      for (var i = 0, l = mountImages.length; i < l; i++) {
        var mountImage = mountImages[i];
        var childTag = mountImage;
        createdTags[i] = childTag;
      }
      UIManager.setChildren(containerTag, createdTags);
    }
  },

  receiveComponent: function receiveComponent(nextElement, transaction, context) {
    var prevElement = this._currentElement;
    this._currentElement = nextElement;

    if (__DEV__) {
      for (var key in this.viewConfig.validAttributes) {
        if (nextElement.props.hasOwnProperty(key)) {
          deepFreezeAndThrowOnMutationInDev(nextElement.props[key]);
        }
      }
    }

    var updatePayload = ReactNativeAttributePayload.diff(prevElement.props, nextElement.props, this.viewConfig.validAttributes);

    if (updatePayload) {
      UIManager.updateView(this._rootNodeID, this.viewConfig.uiViewClassName, updatePayload);
    }

    this._reconcileListenersUponUpdate(prevElement.props, nextElement.props);
    this.updateChildren(nextElement.props.children, transaction, context);
  },

  _registerListenersUponCreation: function _registerListenersUponCreation(initialProps) {
    for (var key in initialProps) {
      if (registrationNames[key] && initialProps[key]) {
        var listener = initialProps[key];
        putListener(this, key, listener);
      }
    }
  },

  _reconcileListenersUponUpdate: function _reconcileListenersUponUpdate(prevProps, nextProps) {
    for (var key in nextProps) {
      if (registrationNames[key] && nextProps[key] !== prevProps[key]) {
        if (nextProps[key]) {
          putListener(this, key, nextProps[key]);
        } else {
          deleteListener(this, key);
        }
      }
    }
  },

  getHostNode: function getHostNode() {
    return this._rootNodeID;
  },

  mountComponent: function mountComponent(transaction, hostParent, hostContainerInfo, context) {
    var tag = ReactNativeTagHandles.allocateTag();

    this._rootNodeID = tag;
    this._hostParent = hostParent;
    this._hostContainerInfo = hostContainerInfo;

    if (__DEV__) {
      for (var key in this.viewConfig.validAttributes) {
        if (this._currentElement.props.hasOwnProperty(key)) {
          deepFreezeAndThrowOnMutationInDev(this._currentElement.props[key]);
        }
      }
    }

    var updatePayload = ReactNativeAttributePayload.create(this._currentElement.props, this.viewConfig.validAttributes);

    var nativeTopRootTag = hostContainerInfo._tag;
    UIManager.createView(tag, this.viewConfig.uiViewClassName, nativeTopRootTag, updatePayload);

    ReactNativeComponentTree.precacheNode(this, tag);

    this._registerListenersUponCreation(this._currentElement.props);
    this.initializeChildren(this._currentElement.props.children, tag, transaction, context);
    return tag;
  }
};

babelHelpers.extends(ReactNativeBaseComponent.prototype, ReactMultiChild, ReactNativeBaseComponent.Mixin, NativeMethodsMixin);

module.exports = ReactNativeBaseComponent;
}, 131, null, "ReactNativeBaseComponent");
__d(/* ReactNativeComponentTree */function(global, require, module, exports) {

'use strict';

var invariant = require(24                  ); // 24 = fbjs/lib/invariant

var instanceCache = {};

function getRenderedHostOrTextFromComponent(component) {
  var rendered;
  while (rendered = component._renderedComponent) {
    component = rendered;
  }
  return component;
}

function precacheNode(inst, tag) {
  var nativeInst = getRenderedHostOrTextFromComponent(inst);
  instanceCache[tag] = nativeInst;
}

function uncacheNode(inst) {
  var tag = inst._rootNodeID;
  if (tag) {
    delete instanceCache[tag];
  }
}

function getInstanceFromTag(tag) {
  return instanceCache[tag] || null;
}

function getTagFromInstance(inst) {
  invariant(inst._rootNodeID, 'All native instances should have a tag.');
  return inst._rootNodeID;
}

var ReactNativeComponentTree = {
  getClosestInstanceFromNode: getInstanceFromTag,
  getInstanceFromNode: getInstanceFromTag,
  getNodeFromInstance: getTagFromInstance,
  precacheNode: precacheNode,
  uncacheNode: uncacheNode
};

module.exports = ReactNativeComponentTree;
}, 132, null, "ReactNativeComponentTree");
__d(/* ReactNativeEventEmitter */function(global, require, module, exports) {
'use strict';

var EventPluginHub = require(134             ); // 134 = EventPluginHub
var EventPluginRegistry = require(135                  ); // 135 = EventPluginRegistry
var ReactEventEmitterMixin = require(140                     ); // 140 = ReactEventEmitterMixin
var ReactNativeComponentTree = require(132                       ); // 132 = ReactNativeComponentTree
var ReactNativeTagHandles = require(141                    ); // 141 = ReactNativeTagHandles
var ReactUpdates = require(142           ); // 142 = ReactUpdates

var warning = require(13                ); // 13 = fbjs/lib/warning

var EMPTY_NATIVE_EVENT = {};

var touchSubsequence = function touchSubsequence(touches, indices) {
  var ret = [];
  for (var i = 0; i < indices.length; i++) {
    ret.push(touches[indices[i]]);
  }
  return ret;
};

var removeTouchesAtIndices = function removeTouchesAtIndices(touches, indices) {
  var rippedOut = [];

  var temp = touches;
  for (var i = 0; i < indices.length; i++) {
    var index = indices[i];
    rippedOut.push(touches[index]);
    temp[index] = null;
  }
  var fillAt = 0;
  for (var j = 0; j < temp.length; j++) {
    var cur = temp[j];
    if (cur !== null) {
      temp[fillAt++] = cur;
    }
  }
  temp.length = fillAt;
  return rippedOut;
};

var ReactNativeEventEmitter = babelHelpers.extends({}, ReactEventEmitterMixin, {

  registrationNames: EventPluginRegistry.registrationNameModules,

  putListener: EventPluginHub.putListener,

  getListener: EventPluginHub.getListener,

  deleteListener: EventPluginHub.deleteListener,

  deleteAllListeners: EventPluginHub.deleteAllListeners,

  _receiveRootNodeIDEvent: function _receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam) {
    var nativeEvent = nativeEventParam || EMPTY_NATIVE_EVENT;
    var inst = ReactNativeComponentTree.getInstanceFromNode(rootNodeID);
    if (!inst) {
      return;
    }
    ReactUpdates.batchedUpdates(function () {
      ReactNativeEventEmitter.handleTopLevel(topLevelType, inst, nativeEvent, nativeEvent.target);
    });
  },

  receiveEvent: function receiveEvent(tag, topLevelType, nativeEventParam) {
    var rootNodeID = tag;
    ReactNativeEventEmitter._receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam);
  },

  receiveTouches: function receiveTouches(eventTopLevelType, touches, changedIndices) {
    var changedTouches = eventTopLevelType === 'topTouchEnd' || eventTopLevelType === 'topTouchCancel' ? removeTouchesAtIndices(touches, changedIndices) : touchSubsequence(touches, changedIndices);

    for (var jj = 0; jj < changedTouches.length; jj++) {
      var touch = changedTouches[jj];

      touch.changedTouches = changedTouches;
      touch.touches = touches;
      var nativeEvent = touch;
      var rootNodeID = null;
      var target = nativeEvent.target;
      if (target !== null && target !== undefined) {
        if (target < ReactNativeTagHandles.tagsStartAt) {
          if (__DEV__) {
            warning(false, 'A view is reporting that a touch occured on tag zero.');
          }
        } else {
          rootNodeID = target;
        }
      }
      ReactNativeEventEmitter._receiveRootNodeIDEvent(rootNodeID, eventTopLevelType, nativeEvent);
    }
  }
});

module.exports = ReactNativeEventEmitter;
}, 133, null, "ReactNativeEventEmitter");
__d(/* EventPluginHub */function(global, require, module, exports) {

'use strict';

var EventPluginRegistry = require(135                  ); // 135 = EventPluginRegistry
var EventPluginUtils = require(136               ); // 136 = EventPluginUtils
var ReactErrorUtils = require(137              ); // 137 = ReactErrorUtils

var accumulateInto = require(138             ); // 138 = accumulateInto
var forEachAccumulated = require(139                 ); // 139 = forEachAccumulated
var invariant = require(24                  ); // 24 = fbjs/lib/invariant

var listenerBank = {};

var eventQueue = null;

var executeDispatchesAndRelease = function executeDispatchesAndRelease(event, simulated) {
  if (event) {
    EventPluginUtils.executeDispatchesInOrder(event, simulated);

    if (!event.isPersistent()) {
      event.constructor.release(event);
    }
  }
};
var executeDispatchesAndReleaseSimulated = function executeDispatchesAndReleaseSimulated(e) {
  return executeDispatchesAndRelease(e, true);
};
var executeDispatchesAndReleaseTopLevel = function executeDispatchesAndReleaseTopLevel(e) {
  return executeDispatchesAndRelease(e, false);
};

var getDictionaryKey = function getDictionaryKey(inst) {
  return '.' + inst._rootNodeID;
};

var EventPluginHub = {
  injection: {
    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

  },

  putListener: function putListener(inst, registrationName, listener) {
    invariant(typeof listener === 'function', 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener);

    var key = getDictionaryKey(inst);
    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
    bankForRegistrationName[key] = listener;

    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
    if (PluginModule && PluginModule.didPutListener) {
      PluginModule.didPutListener(inst, registrationName, listener);
    }
  },

  getListener: function getListener(inst, registrationName) {
    var bankForRegistrationName = listenerBank[registrationName];
    var key = getDictionaryKey(inst);
    return bankForRegistrationName && bankForRegistrationName[key];
  },

  deleteListener: function deleteListener(inst, registrationName) {
    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
    if (PluginModule && PluginModule.willDeleteListener) {
      PluginModule.willDeleteListener(inst, registrationName);
    }

    var bankForRegistrationName = listenerBank[registrationName];

    if (bankForRegistrationName) {
      var key = getDictionaryKey(inst);
      delete bankForRegistrationName[key];
    }
  },

  deleteAllListeners: function deleteAllListeners(inst) {
    var key = getDictionaryKey(inst);
    for (var registrationName in listenerBank) {
      if (!listenerBank.hasOwnProperty(registrationName)) {
        continue;
      }

      if (!listenerBank[registrationName][key]) {
        continue;
      }

      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
      if (PluginModule && PluginModule.willDeleteListener) {
        PluginModule.willDeleteListener(inst, registrationName);
      }

      delete listenerBank[registrationName][key];
    }
  },

  extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var events;
    var plugins = EventPluginRegistry.plugins;
    for (var i = 0; i < plugins.length; i++) {
      var possiblePlugin = plugins[i];
      if (possiblePlugin) {
        var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
        if (extractedEvents) {
          events = accumulateInto(events, extractedEvents);
        }
      }
    }
    return events;
  },

  enqueueEvents: function enqueueEvents(events) {
    if (events) {
      eventQueue = accumulateInto(eventQueue, events);
    }
  },

  processEventQueue: function processEventQueue(simulated) {
    var processingEventQueue = eventQueue;
    eventQueue = null;
    if (simulated) {
      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
    } else {
      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
    }
    invariant(!eventQueue, 'processEventQueue(): Additional events were enqueued while processing ' + 'an event queue. Support for this has not yet been implemented.');

    ReactErrorUtils.rethrowCaughtError();
  },

  __purge: function __purge() {
    listenerBank = {};
  },

  __getListenerBank: function __getListenerBank() {
    return listenerBank;
  }

};

module.exports = EventPluginHub;
}, 134, null, "EventPluginHub");
__d(/* EventPluginRegistry */function(global, require, module, exports) {

'use strict';

var invariant = require(24                  ); // 24 = fbjs/lib/invariant

var eventPluginOrder = null;

var namesToPlugins = {};

function recomputePluginOrdering() {
  if (!eventPluginOrder) {
    return;
  }
  for (var pluginName in namesToPlugins) {
    var pluginModule = namesToPlugins[pluginName];
    var pluginIndex = eventPluginOrder.indexOf(pluginName);
    invariant(pluginIndex > -1, 'EventPluginRegistry: Cannot inject event plugins that do not exist in ' + 'the plugin ordering, `%s`.', pluginName);
    if (EventPluginRegistry.plugins[pluginIndex]) {
      continue;
    }
    invariant(pluginModule.extractEvents, 'EventPluginRegistry: Event plugins must implement an `extractEvents` ' + 'method, but `%s` does not.', pluginName);
    EventPluginRegistry.plugins[pluginIndex] = pluginModule;
    var publishedEvents = pluginModule.eventTypes;
    for (var eventName in publishedEvents) {
      invariant(publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName), 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName);
    }
  }
}

function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
  invariant(!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName), 'EventPluginHub: More than one plugin attempted to publish the same ' + 'event name, `%s`.', eventName);
  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
  if (phasedRegistrationNames) {
    for (var phaseName in phasedRegistrationNames) {
      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
        var phasedRegistrationName = phasedRegistrationNames[phaseName];
        publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
      }
    }
    return true;
  } else if (dispatchConfig.registrationName) {
    publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
    return true;
  }
  return false;
}

function publishRegistrationName(registrationName, pluginModule, eventName) {
  invariant(!EventPluginRegistry.registrationNameModules[registrationName], 'EventPluginHub: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName);
  EventPluginRegistry.registrationNameModules[registrationName] = pluginModule;
  EventPluginRegistry.registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;

  if (__DEV__) {
    var lowerCasedName = registrationName.toLowerCase();
    EventPluginRegistry.possibleRegistrationNames[lowerCasedName] = registrationName;

    if (registrationName === 'onDoubleClick') {
      EventPluginRegistry.possibleRegistrationNames.ondblclick = registrationName;
    }
  }
}

var EventPluginRegistry = {
  plugins: [],

  eventNameDispatchConfigs: {},

  registrationNameModules: {},

  registrationNameDependencies: {},

  possibleRegistrationNames: __DEV__ ? {} : null,

  injectEventPluginOrder: function injectEventPluginOrder(injectedEventPluginOrder) {
    invariant(!eventPluginOrder, 'EventPluginRegistry: Cannot inject event plugin ordering more than ' + 'once. You are likely trying to load more than one copy of React.');

    eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
    recomputePluginOrdering();
  },

  injectEventPluginsByName: function injectEventPluginsByName(injectedNamesToPlugins) {
    var isOrderingDirty = false;
    for (var pluginName in injectedNamesToPlugins) {
      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
        continue;
      }
      var pluginModule = injectedNamesToPlugins[pluginName];
      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
        invariant(!namesToPlugins[pluginName], 'EventPluginRegistry: Cannot inject two different event plugins ' + 'using the same name, `%s`.', pluginName);
        namesToPlugins[pluginName] = pluginModule;
        isOrderingDirty = true;
      }
    }
    if (isOrderingDirty) {
      recomputePluginOrdering();
    }
  },

  getPluginModuleForEvent: function getPluginModuleForEvent(event) {
    var dispatchConfig = event.dispatchConfig;
    if (dispatchConfig.registrationName) {
      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
    }
    if (dispatchConfig.phasedRegistrationNames !== undefined) {
      var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

      for (var phase in phasedRegistrationNames) {
        if (!phasedRegistrationNames.hasOwnProperty(phase)) {
          continue;
        }
        var pluginModule = EventPluginRegistry.registrationNameModules[phasedRegistrationNames[phase]];
        if (pluginModule) {
          return pluginModule;
        }
      }
    }
    return null;
  },

  _resetEventPlugins: function _resetEventPlugins() {
    eventPluginOrder = null;
    for (var pluginName in namesToPlugins) {
      if (namesToPlugins.hasOwnProperty(pluginName)) {
        delete namesToPlugins[pluginName];
      }
    }
    EventPluginRegistry.plugins.length = 0;

    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
    for (var eventName in eventNameDispatchConfigs) {
      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
        delete eventNameDispatchConfigs[eventName];
      }
    }

    var registrationNameModules = EventPluginRegistry.registrationNameModules;
    for (var registrationName in registrationNameModules) {
      if (registrationNameModules.hasOwnProperty(registrationName)) {
        delete registrationNameModules[registrationName];
      }
    }

    if (__DEV__) {
      var possibleRegistrationNames = EventPluginRegistry.possibleRegistrationNames;
      for (var lowerCasedName in possibleRegistrationNames) {
        if (possibleRegistrationNames.hasOwnProperty(lowerCasedName)) {
          delete possibleRegistrationNames[lowerCasedName];
        }
      }
    }
  }

};

module.exports = EventPluginRegistry;
}, 135, null, "EventPluginRegistry");
__d(/* EventPluginUtils */function(global, require, module, exports) {

'use strict';

var ReactErrorUtils = require(137              ); // 137 = ReactErrorUtils

var invariant = require(24                  ); // 24 = fbjs/lib/invariant
var warning = require(13                ); // 13 = fbjs/lib/warning

var ComponentTree;
var TreeTraversal;
var injection = {
  injectComponentTree: function injectComponentTree(Injected) {
    ComponentTree = Injected;
    if (__DEV__) {
      warning(Injected && Injected.getNodeFromInstance && Injected.getInstanceFromNode, 'EventPluginUtils.injection.injectComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.');
    }
  },
  injectTreeTraversal: function injectTreeTraversal(Injected) {
    TreeTraversal = Injected;
    if (__DEV__) {
      warning(Injected && Injected.isAncestor && Injected.getLowestCommonAncestor, 'EventPluginUtils.injection.injectTreeTraversal(...): Injected ' + 'module is missing isAncestor or getLowestCommonAncestor.');
    }
  }
};

function isEndish(topLevelType) {
  return topLevelType === 'topMouseUp' || topLevelType === 'topTouchEnd' || topLevelType === 'topTouchCancel';
}

function isMoveish(topLevelType) {
  return topLevelType === 'topMouseMove' || topLevelType === 'topTouchMove';
}
function isStartish(topLevelType) {
  return topLevelType === 'topMouseDown' || topLevelType === 'topTouchStart';
}

var validateEventDispatches;
if (__DEV__) {
  validateEventDispatches = function validateEventDispatches(event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchInstances = event._dispatchInstances;

    var listenersIsArr = Array.isArray(dispatchListeners);
    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

    var instancesIsArr = Array.isArray(dispatchInstances);
    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;

    warning(instancesIsArr === listenersIsArr && instancesLen === listenersLen, 'EventPluginUtils: Invalid `event`.');
  };
}

function executeDispatch(event, simulated, listener, inst) {
  var type = event.type || 'unknown-event';
  event.currentTarget = EventPluginUtils.getNodeFromInstance(inst);
  if (simulated) {
    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event);
  } else {
    ReactErrorUtils.invokeGuardedCallback(type, listener, event);
  }
  event.currentTarget = null;
}

function executeDispatchesInOrder(event, simulated) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchInstances = event._dispatchInstances;
  if (__DEV__) {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }

      executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
    }
  } else if (dispatchListeners) {
    executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
  }
  event._dispatchListeners = null;
  event._dispatchInstances = null;
}

function executeDispatchesInOrderStopAtTrueImpl(event) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchInstances = event._dispatchInstances;
  if (__DEV__) {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }

      if (dispatchListeners[i](event, dispatchInstances[i])) {
        return dispatchInstances[i];
      }
    }
  } else if (dispatchListeners) {
    if (dispatchListeners(event, dispatchInstances)) {
      return dispatchInstances;
    }
  }
  return null;
}

function executeDispatchesInOrderStopAtTrue(event) {
  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
  event._dispatchInstances = null;
  event._dispatchListeners = null;
  return ret;
}

function executeDirectDispatch(event) {
  if (__DEV__) {
    validateEventDispatches(event);
  }
  var dispatchListener = event._dispatchListeners;
  var dispatchInstance = event._dispatchInstances;
  invariant(!Array.isArray(dispatchListener), 'executeDirectDispatch(...): Invalid `event`.');
  event.currentTarget = dispatchListener ? EventPluginUtils.getNodeFromInstance(dispatchInstance) : null;
  var res = dispatchListener ? dispatchListener(event) : null;
  event.currentTarget = null;
  event._dispatchListeners = null;
  event._dispatchInstances = null;
  return res;
}

function hasDispatches(event) {
  return !!event._dispatchListeners;
}

var EventPluginUtils = {
  isEndish: isEndish,
  isMoveish: isMoveish,
  isStartish: isStartish,

  executeDirectDispatch: executeDirectDispatch,
  executeDispatchesInOrder: executeDispatchesInOrder,
  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
  hasDispatches: hasDispatches,

  getInstanceFromNode: function getInstanceFromNode(node) {
    return ComponentTree.getInstanceFromNode(node);
  },
  getNodeFromInstance: function getNodeFromInstance(node) {
    return ComponentTree.getNodeFromInstance(node);
  },
  isAncestor: function isAncestor(a, b) {
    return TreeTraversal.isAncestor(a, b);
  },
  getLowestCommonAncestor: function getLowestCommonAncestor(a, b) {
    return TreeTraversal.getLowestCommonAncestor(a, b);
  },
  getParentInstance: function getParentInstance(inst) {
    return TreeTraversal.getParentInstance(inst);
  },
  traverseTwoPhase: function traverseTwoPhase(target, fn, arg) {
    return TreeTraversal.traverseTwoPhase(target, fn, arg);
  },
  traverseEnterLeave: function traverseEnterLeave(from, to, fn, argFrom, argTo) {
    return TreeTraversal.traverseEnterLeave(from, to, fn, argFrom, argTo);
  },

  injection: injection
};

module.exports = EventPluginUtils;
}, 136, null, "EventPluginUtils");
__d(/* ReactErrorUtils */function(global, require, module, exports) {

'use strict';

var caughtError = null;

function invokeGuardedCallback(name, func, a) {
  try {
    func(a);
  } catch (x) {
    if (caughtError === null) {
      caughtError = x;
    }
  }
}

var ReactErrorUtils = {
  invokeGuardedCallback: invokeGuardedCallback,

  invokeGuardedCallbackWithCatch: invokeGuardedCallback,

  rethrowCaughtError: function rethrowCaughtError() {
    if (caughtError) {
      var error = caughtError;
      caughtError = null;
      throw error;
    }
  }
};

if (__DEV__) {
  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
    var fakeNode = document.createElement('react');
    ReactErrorUtils.invokeGuardedCallback = function (name, func, a) {
      var boundFunc = func.bind(null, a);
      var evtType = 'react-' + name;
      fakeNode.addEventListener(evtType, boundFunc, false);
      var evt = document.createEvent('Event');

      evt.initEvent(evtType, false, false);
      fakeNode.dispatchEvent(evt);
      fakeNode.removeEventListener(evtType, boundFunc, false);
    };
  }
}

module.exports = ReactErrorUtils;
}, 137, null, "ReactErrorUtils");
__d(/* accumulateInto */function(global, require, module, exports) {

'use strict';

var invariant = require(24                  ); // 24 = fbjs/lib/invariant

function accumulateInto(current, next) {
  invariant(next != null, 'accumulateInto(...): Accumulated items must not be null or undefined.');

  if (current == null) {
    return next;
  }

  if (Array.isArray(current)) {
    if (Array.isArray(next)) {
      current.push.apply(current, next);
      return current;
    }
    current.push(next);
    return current;
  }

  if (Array.isArray(next)) {
    return [current].concat(next);
  }

  return [current, next];
}

module.exports = accumulateInto;
}, 138, null, "accumulateInto");
__d(/* forEachAccumulated */function(global, require, module, exports) {

'use strict';

function forEachAccumulated(arr, cb, scope) {
  if (Array.isArray(arr)) {
    arr.forEach(cb, scope);
  } else if (arr) {
    cb.call(scope, arr);
  }
}

module.exports = forEachAccumulated;
}, 139, null, "forEachAccumulated");
__d(/* ReactEventEmitterMixin */function(global, require, module, exports) {

'use strict';

var EventPluginHub = require(134             ); // 134 = EventPluginHub

function runEventQueueInBatch(events) {
  EventPluginHub.enqueueEvents(events);
  EventPluginHub.processEventQueue(false);
}

var ReactEventEmitterMixin = {
  handleTopLevel: function handleTopLevel(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var events = EventPluginHub.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
    runEventQueueInBatch(events);
  }
};

module.exports = ReactEventEmitterMixin;
}, 140, null, "ReactEventEmitterMixin");
__d(/* ReactNativeTagHandles */function(global, require, module, exports) {
'use strict';

var invariant = require(24                  ); // 24 = fbjs/lib/invariant

var INITIAL_TAG_COUNT = 1;
var ReactNativeTagHandles = {
  tagsStartAt: INITIAL_TAG_COUNT,
  tagCount: INITIAL_TAG_COUNT,

  allocateTag: function allocateTag() {
    while (this.reactTagIsNativeTopRootID(ReactNativeTagHandles.tagCount)) {
      ReactNativeTagHandles.tagCount++;
    }
    var tag = ReactNativeTagHandles.tagCount;
    ReactNativeTagHandles.tagCount++;
    return tag;
  },

  assertRootTag: function assertRootTag(tag) {
    invariant(this.reactTagIsNativeTopRootID(tag), 'Expect a native root tag, instead got %s', tag);
  },

  reactTagIsNativeTopRootID: function reactTagIsNativeTopRootID(reactTag) {
    return reactTag % 10 === 1;
  }
};

module.exports = ReactNativeTagHandles;
}, 141, null, "ReactNativeTagHandles");
__d(/* ReactUpdates */function(global, require, module, exports) {

'use strict';

var CallbackQueue = require(143            ); // 143 = CallbackQueue
var PooledClass = require(144          ); // 144 = PooledClass
var ReactFeatureFlags = require(145                ); // 145 = ReactFeatureFlags
var ReactReconciler = require(146              ); // 146 = ReactReconciler
var Transaction = require(150          ); // 150 = Transaction

var invariant = require(24                  ); // 24 = fbjs/lib/invariant

var dirtyComponents = [];
var updateBatchNumber = 0;
var asapCallbackQueue = CallbackQueue.getPooled();
var asapEnqueued = false;

var batchingStrategy = null;

function ensureInjected() {
  invariant(ReactUpdates.ReactReconcileTransaction && batchingStrategy, 'ReactUpdates: must inject a reconcile transaction class and batching ' + 'strategy');
}

var NESTED_UPDATES = {
  initialize: function initialize() {
    this.dirtyComponentsLength = dirtyComponents.length;
  },
  close: function close() {
    if (this.dirtyComponentsLength !== dirtyComponents.length) {
      dirtyComponents.splice(0, this.dirtyComponentsLength);
      flushBatchedUpdates();
    } else {
      dirtyComponents.length = 0;
    }
  }
};

var UPDATE_QUEUEING = {
  initialize: function initialize() {
    this.callbackQueue.reset();
  },
  close: function close() {
    this.callbackQueue.notifyAll();
  }
};

var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

function ReactUpdatesFlushTransaction() {
  this.reinitializeTransaction();
  this.dirtyComponentsLength = null;
  this.callbackQueue = CallbackQueue.getPooled();
  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled(true);
}

babelHelpers.extends(ReactUpdatesFlushTransaction.prototype, Transaction, {
  getTransactionWrappers: function getTransactionWrappers() {
    return TRANSACTION_WRAPPERS;
  },

  destructor: function destructor() {
    this.dirtyComponentsLength = null;
    CallbackQueue.release(this.callbackQueue);
    this.callbackQueue = null;
    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
    this.reconcileTransaction = null;
  },

  perform: function perform(method, scope, a) {
    return Transaction.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
  }
});

PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

function batchedUpdates(callback, a, b, c, d, e) {
  ensureInjected();
  return batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
}

function mountOrderComparator(c1, c2) {
  return c1._mountOrder - c2._mountOrder;
}

function runBatchedUpdates(transaction) {
  var len = transaction.dirtyComponentsLength;
  invariant(len === dirtyComponents.length, 'Expected flush transaction\'s stored dirty-components length (%s) to ' + 'match dirty-components array length (%s).', len, dirtyComponents.length);

  dirtyComponents.sort(mountOrderComparator);

  updateBatchNumber++;

  for (var i = 0; i < len; i++) {
    var component = dirtyComponents[i];

    var callbacks = component._pendingCallbacks;
    component._pendingCallbacks = null;

    var markerName;
    if (ReactFeatureFlags.logTopLevelRenders) {
      var namedComponent = component;

      if (component._currentElement.type.isReactTopLevelWrapper) {
        namedComponent = component._renderedComponent;
      }
      markerName = 'React update: ' + namedComponent.getName();
      console.time(markerName);
    }

    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction, updateBatchNumber);

    if (markerName) {
      console.timeEnd(markerName);
    }

    if (callbacks) {
      for (var j = 0; j < callbacks.length; j++) {
        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
      }
    }
  }
}

var flushBatchedUpdates = function flushBatchedUpdates() {
  while (dirtyComponents.length || asapEnqueued) {
    if (dirtyComponents.length) {
      var transaction = ReactUpdatesFlushTransaction.getPooled();
      transaction.perform(runBatchedUpdates, null, transaction);
      ReactUpdatesFlushTransaction.release(transaction);
    }

    if (asapEnqueued) {
      asapEnqueued = false;
      var queue = asapCallbackQueue;
      asapCallbackQueue = CallbackQueue.getPooled();
      queue.notifyAll();
      CallbackQueue.release(queue);
    }
  }
};

function enqueueUpdate(component) {
  ensureInjected();

  if (!batchingStrategy.isBatchingUpdates) {
    batchingStrategy.batchedUpdates(enqueueUpdate, component);
    return;
  }

  dirtyComponents.push(component);
  if (component._updateBatchNumber == null) {
    component._updateBatchNumber = updateBatchNumber + 1;
  }
}

function asap(callback, context) {
  invariant(batchingStrategy.isBatchingUpdates, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' + 'updates are not being batched.');
  asapCallbackQueue.enqueue(callback, context);
  asapEnqueued = true;
}

var ReactUpdatesInjection = {
  injectReconcileTransaction: function injectReconcileTransaction(ReconcileTransaction) {
    invariant(ReconcileTransaction, 'ReactUpdates: must provide a reconcile transaction class');
    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
  },

  injectBatchingStrategy: function injectBatchingStrategy(_batchingStrategy) {
    invariant(_batchingStrategy, 'ReactUpdates: must provide a batching strategy');
    invariant(typeof _batchingStrategy.batchedUpdates === 'function', 'ReactUpdates: must provide a batchedUpdates() function');
    invariant(typeof _batchingStrategy.isBatchingUpdates === 'boolean', 'ReactUpdates: must provide an isBatchingUpdates boolean attribute');
    batchingStrategy = _batchingStrategy;
  },

  getBatchingStrategy: function getBatchingStrategy() {
    return batchingStrategy;
  }
};

var ReactUpdates = {
  ReactReconcileTransaction: null,

  batchedUpdates: batchedUpdates,
  enqueueUpdate: enqueueUpdate,
  flushBatchedUpdates: flushBatchedUpdates,
  injection: ReactUpdatesInjection,
  asap: asap
};

module.exports = ReactUpdates;
}, 142, null, "ReactUpdates");
__d(/* CallbackQueue */function(global, require, module, exports) {

'use strict';

var PooledClass = require(144          ); // 144 = PooledClass

var invariant = require(24                  ); // 24 = fbjs/lib/invariant

var CallbackQueue = function () {
  function CallbackQueue(arg) {
    babelHelpers.classCallCheck(this, CallbackQueue);

    this._callbacks = null;
    this._contexts = null;
    this._arg = arg;
  }

  babelHelpers.createClass(CallbackQueue, [{
    key: 'enqueue',
    value: function enqueue(callback, context) {
      this._callbacks = this._callbacks || [];
      this._callbacks.push(callback);
      this._contexts = this._contexts || [];
      this._contexts.push(context);
    }
  }, {
    key: 'notifyAll',
    value: function notifyAll() {
      var callbacks = this._callbacks;
      var contexts = this._contexts;
      var arg = this._arg;
      if (callbacks && contexts) {
        invariant(callbacks.length === contexts.length, 'Mismatched list of contexts in callback queue');
        this._callbacks = null;
        this._contexts = null;
        for (var i = 0; i < callbacks.length; i++) {
          callbacks[i].call(contexts[i], arg);
        }
        callbacks.length = 0;
        contexts.length = 0;
      }
    }
  }, {
    key: 'checkpoint',
    value: function checkpoint() {
      return this._callbacks ? this._callbacks.length : 0;
    }
  }, {
    key: 'rollback',
    value: function rollback(len) {
      if (this._callbacks && this._contexts) {
        this._callbacks.length = len;
        this._contexts.length = len;
      }
    }
  }, {
    key: 'reset',
    value: function reset() {
      this._callbacks = null;
      this._contexts = null;
    }
  }, {
    key: 'destructor',
    value: function destructor() {
      this.reset();
    }
  }]);
  return CallbackQueue;
}();

module.exports = PooledClass.addPoolingTo(CallbackQueue);
}, 143, null, "CallbackQueue");
__d(/* PooledClass */function(global, require, module, exports) {

'use strict';

var invariant = require(24                  ); // 24 = fbjs/lib/invariant

var oneArgumentPooler = function oneArgumentPooler(copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function twoArgumentPooler(a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function threeArgumentPooler(a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fourArgumentPooler = function fourArgumentPooler(a1, a2, a3, a4) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4);
  }
};

var fiveArgumentPooler = function fiveArgumentPooler(a1, a2, a3, a4, a5) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4, a5);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4, a5);
  }
};

var standardReleaser = function standardReleaser(instance) {
  var Klass = this;
  invariant(instance instanceof Klass, 'Trying to release an instance into a pool of a different type.');
  instance.destructor();
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

var addPoolingTo = function addPoolingTo(CopyConstructor, pooler) {
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fourArgumentPooler: fourArgumentPooler,
  fiveArgumentPooler: fiveArgumentPooler
};

module.exports = PooledClass;
}, 144, null, "PooledClass");
__d(/* ReactFeatureFlags */function(global, require, module, exports) {

'use strict';

var ReactFeatureFlags = {
  logTopLevelRenders: false
};

module.exports = ReactFeatureFlags;
}, 145, null, "ReactFeatureFlags");
__d(/* ReactReconciler */function(global, require, module, exports) {

'use strict';

var ReactRef = require(147       ); // 147 = ReactRef
var ReactInstrumentation = require(149                   ); // 149 = ReactInstrumentation

var warning = require(13                ); // 13 = fbjs/lib/warning

function attachRefs(transaction) {
  ReactRef.attachRefs(this, this._currentElement, transaction);
}

var ReactReconciler = {
  mountComponent: function mountComponent(internalInstance, transaction, hostParent, hostContainerInfo, context, parentDebugID) {
    if (__DEV__) {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeMountComponent(internalInstance._debugID, internalInstance._currentElement, parentDebugID);
      }
    }
    var markup = internalInstance.mountComponent(transaction, hostParent, hostContainerInfo, context, parentDebugID);
    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
    }
    if (__DEV__) {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onMountComponent(internalInstance._debugID);
      }
    }
    return markup;
  },

  getHostNode: function getHostNode(internalInstance) {
    return internalInstance.getHostNode();
  },

  unmountComponent: function unmountComponent(internalInstance, safely) {
    if (__DEV__) {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeUnmountComponent(internalInstance._debugID);
      }
    }
    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
    internalInstance.unmountComponent(safely);
    if (__DEV__) {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onUnmountComponent(internalInstance._debugID);
      }
    }
  },

  receiveComponent: function receiveComponent(internalInstance, nextElement, transaction, context) {
    var prevElement = internalInstance._currentElement;

    if (nextElement === prevElement && context === internalInstance._context) {
      return;
    }

    if (__DEV__) {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, nextElement);
      }
    }

    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);

    if (refsChanged) {
      ReactRef.detachRefs(internalInstance, prevElement);
    }

    internalInstance.receiveComponent(nextElement, transaction, context);

    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
    }

    if (__DEV__) {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
      }
    }
  },

  performUpdateIfNecessary: function performUpdateIfNecessary(internalInstance, transaction, updateBatchNumber) {
    if (internalInstance._updateBatchNumber !== updateBatchNumber) {
      warning(internalInstance._updateBatchNumber == null || internalInstance._updateBatchNumber === updateBatchNumber + 1, 'performUpdateIfNecessary: Unexpected batch number (current %s, ' + 'pending %s)', updateBatchNumber, internalInstance._updateBatchNumber);
      return;
    }
    if (__DEV__) {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, internalInstance._currentElement);
      }
    }
    internalInstance.performUpdateIfNecessary(transaction);
    if (__DEV__) {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
      }
    }
  }

};

module.exports = ReactReconciler;
}, 146, null, "ReactReconciler");
__d(/* ReactRef */function(global, require, module, exports) {

'use strict';

var ReactOwner = require(148         ); // 148 = ReactOwner

var ReactRef = {};

function attachRef(ref, component, owner, transaction) {
  if (typeof ref === 'function') {
    ref(component.getPublicInstance(transaction));
  } else {
    ReactOwner.addComponentAsRefTo(component, ref, owner, transaction);
  }
}

function detachRef(ref, component, owner) {
  if (typeof ref === 'function') {
    ref(null);
  } else {
    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
  }
}

ReactRef.attachRefs = function (instance, element, transaction) {
  if (element === null || typeof element !== 'object') {
    return;
  }
  var ref = element.ref;
  if (ref != null) {
    attachRef(ref, instance, element._owner, transaction);
  }
};

ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {

  var prevRef = null;
  var prevOwner = null;
  if (prevElement !== null && typeof prevElement === 'object') {
    prevRef = prevElement.ref;
    prevOwner = prevElement._owner;
  }

  var nextRef = null;
  var nextOwner = null;
  if (nextElement !== null && typeof nextElement === 'object') {
    nextRef = nextElement.ref;
    nextOwner = nextElement._owner;
  }

  return prevRef !== nextRef || typeof nextRef === 'string' && nextOwner !== prevOwner;
};

ReactRef.detachRefs = function (instance, element) {
  if (element === null || typeof element !== 'object') {
    return;
  }
  var ref = element.ref;
  if (ref != null) {
    detachRef(ref, instance, element._owner);
  }
};

module.exports = ReactRef;
}, 147, null, "ReactRef");
__d(/* ReactOwner */function(global, require, module, exports) {

'use strict';

var invariant = require(24                  ); // 24 = fbjs/lib/invariant

function isValidOwner(object) {
  return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
}

var ReactOwner = {
  addComponentAsRefTo: function addComponentAsRefTo(component, ref, owner, transaction) {
    invariant(isValidOwner(owner), 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might ' + 'be adding a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).');
    owner.attachRef(ref, component, transaction);
  },

  removeComponentAsRefFrom: function removeComponentAsRefFrom(component, ref, owner) {
    invariant(isValidOwner(owner), 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might ' + 'be removing a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).');
    var ownerPublicInstance = owner.getPublicInstance();

    if (ownerPublicInstance && ownerPublicInstance.refs[ref] === component.getPublicInstance()) {
      owner.detachRef(ref);
    }
  }

};

module.exports = ReactOwner;
}, 148, null, "ReactOwner");
__d(/* ReactInstrumentation */function(global, require, module, exports) {

'use strict';

var debugTool = null;

if (__DEV__) {
  var ReactDebugTool = require(36              ); // 36 = ReactDebugTool
  debugTool = ReactDebugTool;
}

module.exports = { debugTool: debugTool };
}, 149, null, "ReactInstrumentation");
__d(/* Transaction */function(global, require, module, exports) {

'use strict';

var invariant = require(24                  ); // 24 = fbjs/lib/invariant

var OBSERVED_ERROR = {};

var TransactionImpl = {
  reinitializeTransaction: function reinitializeTransaction() {
    this.transactionWrappers = this.getTransactionWrappers();
    if (this.wrapperInitData) {
      this.wrapperInitData.length = 0;
    } else {
      this.wrapperInitData = [];
    }
    this._isInTransaction = false;
  },

  _isInTransaction: false,

  getTransactionWrappers: null,

  isInTransaction: function isInTransaction() {
    return !!this._isInTransaction;
  },

  perform: function perform(method, scope, a, b, c, d, e, f) {
    invariant(!this.isInTransaction(), 'Transaction.perform(...): Cannot initialize a transaction when there ' + 'is already an outstanding transaction.');
    var errorThrown;
    var ret;
    try {
      this._isInTransaction = true;

      errorThrown = true;
      this.initializeAll(0);
      ret = method.call(scope, a, b, c, d, e, f);
      errorThrown = false;
    } finally {
      try {
        if (errorThrown) {
          try {
            this.closeAll(0);
          } catch (err) {}
        } else {
          this.closeAll(0);
        }
      } finally {
        this._isInTransaction = false;
      }
    }
    return ret;
  },

  initializeAll: function initializeAll(startIndex) {
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      try {
        this.wrapperInitData[i] = OBSERVED_ERROR;
        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
      } finally {
        if (this.wrapperInitData[i] === OBSERVED_ERROR) {
          try {
            this.initializeAll(i + 1);
          } catch (err) {}
        }
      }
    }
  },

  closeAll: function closeAll(startIndex) {
    invariant(this.isInTransaction(), 'Transaction.closeAll(): Cannot close transaction when none are open.');
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      var initData = this.wrapperInitData[i];
      var errorThrown;
      try {
        errorThrown = true;
        if (initData !== OBSERVED_ERROR && wrapper.close) {
          wrapper.close.call(this, initData);
        }
        errorThrown = false;
      } finally {
        if (errorThrown) {
          try {
            this.closeAll(i + 1);
          } catch (e) {}
        }
      }
    }
    this.wrapperInitData.length = 0;
  }
};

module.exports = TransactionImpl;
}, 150, null, "Transaction");
__d(/* ReactMultiChild */function(global, require, module, exports) {

'use strict';

var ReactComponentEnvironment = require(152                        ); // 152 = ReactComponentEnvironment
var ReactInstanceMap = require(75                ); // 75 = ReactInstanceMap
var ReactInstrumentation = require(149                   ); // 149 = ReactInstrumentation

var ReactCurrentOwner = require(35                           ); // 35 = react/lib/ReactCurrentOwner
var ReactReconciler = require(146              ); // 146 = ReactReconciler
var ReactChildReconciler = require(153                   ); // 153 = ReactChildReconciler

var emptyFunction = require(14                      ); // 14 = fbjs/lib/emptyFunction
var flattenChildren = require(168              ); // 168 = flattenChildren
var invariant = require(24                  ); // 24 = fbjs/lib/invariant

function makeInsertMarkup(markup, afterNode, toIndex) {
  return {
    type: 'INSERT_MARKUP',
    content: markup,
    fromIndex: null,
    fromNode: null,
    toIndex: toIndex,
    afterNode: afterNode
  };
}

function makeMove(child, afterNode, toIndex) {
  return {
    type: 'MOVE_EXISTING',
    content: null,
    fromIndex: child._mountIndex,
    fromNode: ReactReconciler.getHostNode(child),
    toIndex: toIndex,
    afterNode: afterNode
  };
}

function makeRemove(child, node) {
  return {
    type: 'REMOVE_NODE',
    content: null,
    fromIndex: child._mountIndex,
    fromNode: node,
    toIndex: null,
    afterNode: null
  };
}

function makeSetMarkup(markup) {
  return {
    type: 'SET_MARKUP',
    content: markup,
    fromIndex: null,
    fromNode: null,
    toIndex: null,
    afterNode: null
  };
}

function makeTextContent(textContent) {
  return {
    type: 'TEXT_CONTENT',
    content: textContent,
    fromIndex: null,
    fromNode: null,
    toIndex: null,
    afterNode: null
  };
}

function enqueue(queue, update) {
  if (update) {
    queue = queue || [];
    queue.push(update);
  }
  return queue;
}

function processQueue(inst, updateQueue) {
  ReactComponentEnvironment.processChildrenUpdates(inst, updateQueue);
}

var setChildrenForInstrumentation = emptyFunction;
if (__DEV__) {
  var getDebugID = function getDebugID(inst) {
    if (!inst._debugID) {
      var internal;
      if (internal = ReactInstanceMap.get(inst)) {
        inst = internal;
      }
    }
    return inst._debugID;
  };
  setChildrenForInstrumentation = function setChildrenForInstrumentation(children) {
    var debugID = getDebugID(this);

    if (debugID !== 0) {
      ReactInstrumentation.debugTool.onSetChildren(debugID, children ? Object.keys(children).map(function (key) {
        return children[key]._debugID;
      }) : []);
    }
  };
}

var ReactMultiChild = {
  _reconcilerInstantiateChildren: function _reconcilerInstantiateChildren(nestedChildren, transaction, context) {
    if (__DEV__) {
      var selfDebugID = getDebugID(this);
      if (this._currentElement) {
        try {
          ReactCurrentOwner.current = this._currentElement._owner;
          return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context, selfDebugID);
        } finally {
          ReactCurrentOwner.current = null;
        }
      }
    }
    return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
  },

  _reconcilerUpdateChildren: function _reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context) {
    var nextChildren;
    var selfDebugID = 0;
    if (__DEV__) {
      selfDebugID = getDebugID(this);
      if (this._currentElement) {
        try {
          ReactCurrentOwner.current = this._currentElement._owner;
          nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
        } finally {
          ReactCurrentOwner.current = null;
        }
        ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
        return nextChildren;
      }
    }
    nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
    ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
    return nextChildren;
  },

  mountChildren: function mountChildren(nestedChildren, transaction, context) {
    var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
    this._renderedChildren = children;

    var mountImages = [];
    var index = 0;
    for (var name in children) {
      if (children.hasOwnProperty(name)) {
        var child = children[name];
        var selfDebugID = 0;
        if (__DEV__) {
          selfDebugID = getDebugID(this);
        }
        var mountImage = ReactReconciler.mountComponent(child, transaction, this, this._hostContainerInfo, context, selfDebugID);
        child._mountIndex = index++;
        mountImages.push(mountImage);
      }
    }

    if (__DEV__) {
      setChildrenForInstrumentation.call(this, children);
    }

    return mountImages;
  },

  updateTextContent: function updateTextContent(nextContent) {
    var prevChildren = this._renderedChildren;

    ReactChildReconciler.unmountChildren(prevChildren, false);
    for (var name in prevChildren) {
      if (prevChildren.hasOwnProperty(name)) {
        invariant(false, 'updateTextContent called on non-empty component.');
      }
    }

    var updates = [makeTextContent(nextContent)];
    processQueue(this, updates);
  },

  updateMarkup: function updateMarkup(nextMarkup) {
    var prevChildren = this._renderedChildren;

    ReactChildReconciler.unmountChildren(prevChildren, false);
    for (var name in prevChildren) {
      if (prevChildren.hasOwnProperty(name)) {
        invariant(false, 'updateTextContent called on non-empty component.');
      }
    }
    var updates = [makeSetMarkup(nextMarkup)];
    processQueue(this, updates);
  },

  updateChildren: function updateChildren(nextNestedChildrenElements, transaction, context) {
    this._updateChildren(nextNestedChildrenElements, transaction, context);
  },

  _updateChildren: function _updateChildren(nextNestedChildrenElements, transaction, context) {
    var prevChildren = this._renderedChildren;
    var removedNodes = {};
    var mountImages = [];
    var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context);
    if (!nextChildren && !prevChildren) {
      return;
    }
    var updates = null;
    var name;

    var nextIndex = 0;
    var lastIndex = 0;

    var nextMountIndex = 0;
    var lastPlacedNode = null;
    for (name in nextChildren) {
      if (!nextChildren.hasOwnProperty(name)) {
        continue;
      }
      var prevChild = prevChildren && prevChildren[name];
      var nextChild = nextChildren[name];
      if (prevChild === nextChild) {
        updates = enqueue(updates, this.moveChild(prevChild, lastPlacedNode, nextIndex, lastIndex));
        lastIndex = Math.max(prevChild._mountIndex, lastIndex);
        prevChild._mountIndex = nextIndex;
      } else {
        if (prevChild) {
          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
        }

        updates = enqueue(updates, this._mountChildAtIndex(nextChild, mountImages[nextMountIndex], lastPlacedNode, nextIndex, transaction, context));
        nextMountIndex++;
      }
      nextIndex++;
      lastPlacedNode = ReactReconciler.getHostNode(nextChild);
    }

    for (name in removedNodes) {
      if (removedNodes.hasOwnProperty(name)) {
        updates = enqueue(updates, this._unmountChild(prevChildren[name], removedNodes[name]));
      }
    }
    if (updates) {
      processQueue(this, updates);
    }
    this._renderedChildren = nextChildren;

    if (__DEV__) {
      setChildrenForInstrumentation.call(this, nextChildren);
    }
  },

  unmountChildren: function unmountChildren(safely) {
    var renderedChildren = this._renderedChildren;
    ReactChildReconciler.unmountChildren(renderedChildren, safely);
    this._renderedChildren = null;
  },

  moveChild: function moveChild(child, afterNode, toIndex, lastIndex) {
    if (child._mountIndex < lastIndex) {
      return makeMove(child, afterNode, toIndex);
    }
  },

  createChild: function createChild(child, afterNode, mountImage) {
    return makeInsertMarkup(mountImage, afterNode, child._mountIndex);
  },

  removeChild: function removeChild(child, node) {
    return makeRemove(child, node);
  },

  _mountChildAtIndex: function _mountChildAtIndex(child, mountImage, afterNode, index, transaction, context) {
    child._mountIndex = index;
    return this.createChild(child, afterNode, mountImage);
  },

  _unmountChild: function _unmountChild(child, node) {
    var update = this.removeChild(child, node);
    child._mountIndex = null;
    return update;
  }
};

module.exports = ReactMultiChild;
}, 151, null, "ReactMultiChild");
__d(/* ReactComponentEnvironment */function(global, require, module, exports) {

'use strict';

var invariant = require(24                  ); // 24 = fbjs/lib/invariant

var injected = false;

var ReactComponentEnvironment = {
  replaceNodeWithMarkup: null,

  processChildrenUpdates: null,

  injection: {
    injectEnvironment: function injectEnvironment(environment) {
      invariant(!injected, 'ReactCompositeComponent: injectEnvironment() can only be called once.');
      ReactComponentEnvironment.replaceNodeWithMarkup = environment.replaceNodeWithMarkup;
      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
      injected = true;
    }
  }

};

module.exports = ReactComponentEnvironment;
}, 152, null, "ReactComponentEnvironment");
__d(/* ReactChildReconciler */function(global, require, module, exports) {

'use strict';

var ReactReconciler = require(146              ); // 146 = ReactReconciler

var instantiateReactComponent = require(154                        ); // 154 = instantiateReactComponent
var KeyEscapeUtils = require(164             ); // 164 = KeyEscapeUtils
var shouldUpdateReactComponent = require(161                         ); // 161 = shouldUpdateReactComponent
var traverseAllChildren = require(165                  ); // 165 = traverseAllChildren
var warning = require(13                ); // 13 = fbjs/lib/warning

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
  ReactComponentTreeHook = require(33                                ); // 33 = react/lib/ReactComponentTreeHook
}

function instantiateChild(childInstances, child, name, selfDebugID) {
  var keyUnique = childInstances[name] === undefined;
  if (__DEV__) {
    if (!ReactComponentTreeHook) {
      ReactComponentTreeHook = require(33                                ); // 33 = react/lib/ReactComponentTreeHook
    }
    if (!keyUnique) {
      warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID));
    }
  }
  if (child != null && keyUnique) {
    childInstances[name] = instantiateReactComponent(child, true);
  }
}

var ReactChildReconciler = {
  instantiateChildren: function instantiateChildren(nestedChildNodes, transaction, context, selfDebugID) {
    if (nestedChildNodes == null) {
      return null;
    }
    var childInstances = {};

    if (__DEV__) {
      traverseAllChildren(nestedChildNodes, function (childInsts, child, name) {
        return instantiateChild(childInsts, child, name, selfDebugID);
      }, childInstances);
    } else {
      traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
    }
    return childInstances;
  },

  updateChildren: function updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, hostParent, hostContainerInfo, context, selfDebugID) {
    if (!nextChildren && !prevChildren) {
      return;
    }
    var name;
    var prevChild;
    for (name in nextChildren) {
      if (!nextChildren.hasOwnProperty(name)) {
        continue;
      }
      prevChild = prevChildren && prevChildren[name];
      var prevElement = prevChild && prevChild._currentElement;
      var nextElement = nextChildren[name];
      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
        nextChildren[name] = prevChild;
      } else {
        if (prevChild) {
          removedNodes[name] = ReactReconciler.getHostNode(prevChild);
          ReactReconciler.unmountComponent(prevChild, false);
        }

        var nextChildInstance = instantiateReactComponent(nextElement, true);
        nextChildren[name] = nextChildInstance;

        var nextChildMountImage = ReactReconciler.mountComponent(nextChildInstance, transaction, hostParent, hostContainerInfo, context, selfDebugID);
        mountImages.push(nextChildMountImage);
      }
    }

    for (name in prevChildren) {
      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
        prevChild = prevChildren[name];
        removedNodes[name] = ReactReconciler.getHostNode(prevChild);
        ReactReconciler.unmountComponent(prevChild, false);
      }
    }
  },

  unmountChildren: function unmountChildren(renderedChildren, safely) {
    for (var name in renderedChildren) {
      if (renderedChildren.hasOwnProperty(name)) {
        var renderedChild = renderedChildren[name];
        ReactReconciler.unmountComponent(renderedChild, safely);
      }
    }
  }

};

module.exports = ReactChildReconciler;
}, 153, null, "ReactChildReconciler");
__d(/* instantiateReactComponent */function(global, require, module, exports) {

'use strict';

var ReactCompositeComponent = require(155                      ); // 155 = ReactCompositeComponent
var ReactEmptyComponent = require(162                  ); // 162 = ReactEmptyComponent
var ReactHostComponent = require(163                 ); // 163 = ReactHostComponent

var invariant = require(24                  ); // 24 = fbjs/lib/invariant
var warning = require(13                ); // 13 = fbjs/lib/warning

var ReactCompositeComponentWrapper = function ReactCompositeComponentWrapper(element) {
  this.construct(element);
};
babelHelpers.extends(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent, {
  _instantiateReactComponent: instantiateReactComponent
});

function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

function isInternalComponentType(type) {
  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
}

var nextDebugID = 1;

function instantiateReactComponent(node, shouldHaveDebugID) {
  var instance;

  if (node === null || node === false) {
    instance = ReactEmptyComponent.create(instantiateReactComponent);
  } else if (typeof node === 'object') {
    var element = node;
    invariant(element && (typeof element.type === 'function' || typeof element.type === 'string'), 'Element type is invalid: expected a string (for built-in components) ' + 'or a class/function (for composite components) but got: %s.%s', element.type == null ? element.type : typeof element.type, getDeclarationErrorAddendum(element._owner));

    if (typeof element.type === 'string') {
      instance = ReactHostComponent.createInternalComponent(element);
    } else if (isInternalComponentType(element.type)) {
      instance = new element.type(element);

      if (!instance.getHostNode) {
        instance.getHostNode = instance.getNativeNode;
      }
    } else {
      instance = new ReactCompositeComponentWrapper(element);
    }
  } else if (typeof node === 'string' || typeof node === 'number') {
    instance = ReactHostComponent.createInstanceForText(node);
  } else {
    invariant(false, 'Encountered invalid React node of type %s', typeof node);
  }

  if (__DEV__) {
    warning(typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.getHostNode === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.');
  }

  instance._mountIndex = 0;
  instance._mountImage = null;

  if (__DEV__) {
    instance._debugID = shouldHaveDebugID ? nextDebugID++ : 0;
  }

  if (__DEV__) {
    if (Object.preventExtensions) {
      Object.preventExtensions(instance);
    }
  }

  return instance;
}

module.exports = instantiateReactComponent;
}, 154, null, "instantiateReactComponent");
__d(/* ReactCompositeComponent */function(global, require, module, exports) {

'use strict';

var React = require(76     ); // 76 = React
var ReactComponentEnvironment = require(152                        ); // 152 = ReactComponentEnvironment
var ReactCurrentOwner = require(35                           ); // 35 = react/lib/ReactCurrentOwner
var ReactErrorUtils = require(137              ); // 137 = ReactErrorUtils
var ReactInstanceMap = require(75                ); // 75 = ReactInstanceMap
var ReactInstrumentation = require(149                   ); // 149 = ReactInstrumentation
var ReactNodeTypes = require(156             ); // 156 = ReactNodeTypes
var ReactReconciler = require(146              ); // 146 = ReactReconciler

if (__DEV__) {
  var checkReactTypeSpec = require(157                 ); // 157 = checkReactTypeSpec
}

var emptyObject = require(89                    ); // 89 = fbjs/lib/emptyObject
var invariant = require(24                  ); // 24 = fbjs/lib/invariant
var shallowEqual = require(160                    ); // 160 = fbjs/lib/shallowEqual
var shouldUpdateReactComponent = require(161                         ); // 161 = shouldUpdateReactComponent
var warning = require(13                ); // 13 = fbjs/lib/warning

var CompositeTypes = {
  ImpureClass: 0,
  PureClass: 1,
  StatelessFunctional: 2
};

function StatelessComponent(Component) {}
StatelessComponent.prototype.render = function () {
  var Component = ReactInstanceMap.get(this)._currentElement.type;
  var element = Component(this.props, this.context, this.updater);
  warnIfInvalidElement(Component, element);
  return element;
};

function warnIfInvalidElement(Component, element) {
  if (__DEV__) {
    warning(element === null || element === false || React.isValidElement(element), '%s(...): A valid React element (or null) must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component');
    warning(!Component.childContextTypes, '%s(...): childContextTypes cannot be defined on a functional component.', Component.displayName || Component.name || 'Component');
  }
}

function shouldConstruct(Component) {
  return !!(Component.prototype && Component.prototype.isReactComponent);
}

function isPureComponent(Component) {
  return !!(Component.prototype && Component.prototype.isPureReactComponent);
}

function measureLifeCyclePerf(fn, debugID, timerType) {
  if (debugID === 0) {
    return fn();
  }

  ReactInstrumentation.debugTool.onBeginLifeCycleTimer(debugID, timerType);
  try {
    return fn();
  } finally {
    ReactInstrumentation.debugTool.onEndLifeCycleTimer(debugID, timerType);
  }
}

var nextMountID = 1;

var ReactCompositeComponent = {
  construct: function construct(element) {
    this._currentElement = element;
    this._rootNodeID = 0;
    this._compositeType = null;
    this._instance = null;
    this._hostParent = null;
    this._hostContainerInfo = null;

    this._updateBatchNumber = null;
    this._pendingElement = null;
    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;

    this._renderedNodeType = null;
    this._renderedComponent = null;
    this._context = null;
    this._mountOrder = 0;
    this._topLevelWrapper = null;

    this._pendingCallbacks = null;

    this._calledComponentWillUnmount = false;

    if (__DEV__) {
      this._warnedAboutRefsInRender = false;
    }
  },

  mountComponent: function mountComponent(transaction, hostParent, hostContainerInfo, context) {
    var _this = this;

    this._context = context;
    this._mountOrder = nextMountID++;
    this._hostParent = hostParent;
    this._hostContainerInfo = hostContainerInfo;

    var publicProps = this._currentElement.props;
    var publicContext = this._processContext(context);

    var Component = this._currentElement.type;

    var updateQueue = transaction.getUpdateQueue();

    var doConstruct = shouldConstruct(Component);
    var inst = this._constructComponent(doConstruct, publicProps, publicContext, updateQueue);
    var renderedElement;

    if (!doConstruct && (inst == null || inst.render == null)) {
      renderedElement = inst;
      warnIfInvalidElement(Component, renderedElement);
      invariant(inst === null || inst === false || React.isValidElement(inst), '%s(...): A valid React element (or null) must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component');
      inst = new StatelessComponent(Component);
      this._compositeType = CompositeTypes.StatelessFunctional;
    } else {
      if (isPureComponent(Component)) {
        this._compositeType = CompositeTypes.PureClass;
      } else {
        this._compositeType = CompositeTypes.ImpureClass;
      }
    }

    if (__DEV__) {
      if (inst.render == null) {
        warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', Component.displayName || Component.name || 'Component');
      }

      var propsMutated = inst.props !== publicProps;
      var componentName = Component.displayName || Component.name || 'Component';

      warning(inst.props === undefined || !propsMutated, '%s(...): When calling super() in `%s`, make sure to pass ' + 'up the same props that your component\'s constructor was passed.', componentName, componentName);
    }

    inst.props = publicProps;
    inst.context = publicContext;
    inst.refs = emptyObject;
    inst.updater = updateQueue;

    this._instance = inst;

    ReactInstanceMap.set(inst, this);

    if (__DEV__) {
      warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component');
      warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component');
      warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component');
      warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component');
      warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component');
      warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component');
      warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component');
    }

    var initialState = inst.state;
    if (initialState === undefined) {
      inst.state = initialState = null;
    }
    invariant(typeof initialState === 'object' && !Array.isArray(initialState), '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent');

    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;

    var markup;
    if (inst.unstable_handleError) {
      markup = this.performInitialMountWithErrorHandling(renderedElement, hostParent, hostContainerInfo, transaction, context);
    } else {
      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
    }

    if (inst.componentDidMount) {
      if (__DEV__) {
        transaction.getReactMountReady().enqueue(function () {
          measureLifeCyclePerf(function () {
            return inst.componentDidMount();
          }, _this._debugID, 'componentDidMount');
        });
      } else {
        transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
      }
    }

    return markup;
  },

  _constructComponent: function _constructComponent(doConstruct, publicProps, publicContext, updateQueue) {
    if (__DEV__) {
      ReactCurrentOwner.current = this;
      try {
        return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
      } finally {
        ReactCurrentOwner.current = null;
      }
    } else {
      return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
    }
  },

  _constructComponentWithoutOwner: function _constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue) {
    var Component = this._currentElement.type;

    if (doConstruct) {
      if (__DEV__) {
        return measureLifeCyclePerf(function () {
          return new Component(publicProps, publicContext, updateQueue);
        }, this._debugID, 'ctor');
      } else {
        return new Component(publicProps, publicContext, updateQueue);
      }
    }

    if (__DEV__) {
      return measureLifeCyclePerf(function () {
        return Component(publicProps, publicContext, updateQueue);
      }, this._debugID, 'render');
    } else {
      return Component(publicProps, publicContext, updateQueue);
    }
  },

  performInitialMountWithErrorHandling: function performInitialMountWithErrorHandling(renderedElement, hostParent, hostContainerInfo, transaction, context) {
    var markup;
    var checkpoint = transaction.checkpoint();
    try {
      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
    } catch (e) {
      transaction.rollback(checkpoint);
      this._instance.unstable_handleError(e);
      if (this._pendingStateQueue) {
        this._instance.state = this._processPendingState(this._instance.props, this._instance.context);
      }
      checkpoint = transaction.checkpoint();

      this._renderedComponent.unmountComponent(true);
      transaction.rollback(checkpoint);

      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
    }
    return markup;
  },

  performInitialMount: function performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context) {
    var inst = this._instance;

    var debugID = 0;
    if (__DEV__) {
      debugID = this._debugID;
    }

    if (inst.componentWillMount) {
      if (__DEV__) {
        measureLifeCyclePerf(function () {
          return inst.componentWillMount();
        }, debugID, 'componentWillMount');
      } else {
        inst.componentWillMount();
      }

      if (this._pendingStateQueue) {
        inst.state = this._processPendingState(inst.props, inst.context);
      }
    }

    if (renderedElement === undefined) {
      renderedElement = this._renderValidatedComponent();
    }

    var nodeType = ReactNodeTypes.getType(renderedElement);
    this._renderedNodeType = nodeType;
    var child = this._instantiateReactComponent(renderedElement, nodeType !== ReactNodeTypes.EMPTY);
    this._renderedComponent = child;

    var markup = ReactReconciler.mountComponent(child, transaction, hostParent, hostContainerInfo, this._processChildContext(context), debugID);

    if (__DEV__) {
      if (debugID !== 0) {
        var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
        ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
      }
    }

    return markup;
  },

  getHostNode: function getHostNode() {
    return ReactReconciler.getHostNode(this._renderedComponent);
  },

  unmountComponent: function unmountComponent(safely) {
    if (!this._renderedComponent) {
      return;
    }

    var inst = this._instance;

    if (inst.componentWillUnmount && !inst._calledComponentWillUnmount) {
      inst._calledComponentWillUnmount = true;

      if (safely) {
        var name = this.getName() + '.componentWillUnmount()';
        ReactErrorUtils.invokeGuardedCallback(name, inst.componentWillUnmount.bind(inst));
      } else {
        if (__DEV__) {
          measureLifeCyclePerf(function () {
            return inst.componentWillUnmount();
          }, this._debugID, 'componentWillUnmount');
        } else {
          inst.componentWillUnmount();
        }
      }
    }

    if (this._renderedComponent) {
      ReactReconciler.unmountComponent(this._renderedComponent, safely);
      this._renderedNodeType = null;
      this._renderedComponent = null;
      this._instance = null;
    }

    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;
    this._pendingCallbacks = null;
    this._pendingElement = null;

    this._context = null;
    this._rootNodeID = 0;
    this._topLevelWrapper = null;

    ReactInstanceMap.remove(inst);
  },

  _maskContext: function _maskContext(context) {
    var Component = this._currentElement.type;
    var contextTypes = Component.contextTypes;
    if (!contextTypes) {
      return emptyObject;
    }
    var maskedContext = {};
    for (var contextName in contextTypes) {
      maskedContext[contextName] = context[contextName];
    }
    return maskedContext;
  },

  _processContext: function _processContext(context) {
    var maskedContext = this._maskContext(context);
    if (__DEV__) {
      var Component = this._currentElement.type;
      if (Component.contextTypes) {
        this._checkContextTypes(Component.contextTypes, maskedContext, 'context');
      }
    }
    return maskedContext;
  },

  _processChildContext: function _processChildContext(currentContext) {
    var Component = this._currentElement.type;
    var inst = this._instance;
    var childContext;

    if (inst.getChildContext) {
      if (__DEV__) {
        ReactInstrumentation.debugTool.onBeginProcessingChildContext();
        try {
          childContext = inst.getChildContext();
        } finally {
          ReactInstrumentation.debugTool.onEndProcessingChildContext();
        }
      } else {
        childContext = inst.getChildContext();
      }
    }

    if (childContext) {
      invariant(typeof Component.childContextTypes === 'object', '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', this.getName() || 'ReactCompositeComponent');
      if (__DEV__) {
        this._checkContextTypes(Component.childContextTypes, childContext, 'childContext');
      }
      for (var name in childContext) {
        invariant(name in Component.childContextTypes, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name);
      }
      return babelHelpers.extends({}, currentContext, childContext);
    }
    return currentContext;
  },

  _checkContextTypes: function _checkContextTypes(typeSpecs, values, location) {
    if (__DEV__) {
      checkReactTypeSpec(typeSpecs, values, location, this.getName(), null, this._debugID);
    }
  },

  receiveComponent: function receiveComponent(nextElement, transaction, nextContext) {
    var prevElement = this._currentElement;
    var prevContext = this._context;

    this._pendingElement = null;

    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
  },

  performUpdateIfNecessary: function performUpdateIfNecessary(transaction) {
    if (this._pendingElement != null) {
      ReactReconciler.receiveComponent(this, this._pendingElement, transaction, this._context);
    } else if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
    } else {
      this._updateBatchNumber = null;
    }
  },

  updateComponent: function updateComponent(transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
    var inst = this._instance;
    invariant(inst != null, 'Attempted to update component `%s` that has already been unmounted ' + '(or failed to mount).', this.getName() || 'ReactCompositeComponent');

    var willReceive = false;
    var nextContext;

    if (this._context === nextUnmaskedContext) {
      nextContext = inst.context;
    } else {
      nextContext = this._processContext(nextUnmaskedContext);
      willReceive = true;
    }

    var prevProps = prevParentElement.props;
    var nextProps = nextParentElement.props;

    if (prevParentElement !== nextParentElement) {
      willReceive = true;
    }

    if (willReceive && inst.componentWillReceiveProps) {
      if (__DEV__) {
        measureLifeCyclePerf(function () {
          return inst.componentWillReceiveProps(nextProps, nextContext);
        }, this._debugID, 'componentWillReceiveProps');
      } else {
        inst.componentWillReceiveProps(nextProps, nextContext);
      }
    }

    var nextState = this._processPendingState(nextProps, nextContext);
    var shouldUpdate = true;

    if (!this._pendingForceUpdate) {
      if (inst.shouldComponentUpdate) {
        if (__DEV__) {
          shouldUpdate = measureLifeCyclePerf(function () {
            return inst.shouldComponentUpdate(nextProps, nextState, nextContext);
          }, this._debugID, 'shouldComponentUpdate');
        } else {
          shouldUpdate = inst.shouldComponentUpdate(nextProps, nextState, nextContext);
        }
      } else {
        if (this._compositeType === CompositeTypes.PureClass) {
          shouldUpdate = !shallowEqual(prevProps, nextProps) || !shallowEqual(inst.state, nextState);
        }
      }
    }

    if (__DEV__) {
      warning(shouldUpdate !== undefined, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent');
    }

    this._updateBatchNumber = null;
    if (shouldUpdate) {
      this._pendingForceUpdate = false;

      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
    } else {
      this._currentElement = nextParentElement;
      this._context = nextUnmaskedContext;
      inst.props = nextProps;
      inst.state = nextState;
      inst.context = nextContext;
    }
  },

  _processPendingState: function _processPendingState(props, context) {
    var inst = this._instance;
    var queue = this._pendingStateQueue;
    var replace = this._pendingReplaceState;
    this._pendingReplaceState = false;
    this._pendingStateQueue = null;

    if (!queue) {
      return inst.state;
    }

    if (replace && queue.length === 1) {
      return queue[0];
    }

    var nextState = babelHelpers.extends({}, replace ? queue[0] : inst.state);
    for (var i = replace ? 1 : 0; i < queue.length; i++) {
      var partial = queue[i];
      babelHelpers.extends(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
    }

    return nextState;
  },

  _performComponentUpdate: function _performComponentUpdate(nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
    var _this2 = this;

    var inst = this._instance;

    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
    var prevProps;
    var prevState;
    var prevContext;
    if (hasComponentDidUpdate) {
      prevProps = inst.props;
      prevState = inst.state;
      prevContext = inst.context;
    }

    if (inst.componentWillUpdate) {
      if (__DEV__) {
        measureLifeCyclePerf(function () {
          return inst.componentWillUpdate(nextProps, nextState, nextContext);
        }, this._debugID, 'componentWillUpdate');
      } else {
        inst.componentWillUpdate(nextProps, nextState, nextContext);
      }
    }

    this._currentElement = nextElement;
    this._context = unmaskedContext;
    inst.props = nextProps;
    inst.state = nextState;
    inst.context = nextContext;

    this._updateRenderedComponent(transaction, unmaskedContext);

    if (hasComponentDidUpdate) {
      if (__DEV__) {
        transaction.getReactMountReady().enqueue(function () {
          measureLifeCyclePerf(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), _this2._debugID, 'componentDidUpdate');
        });
      } else {
        transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
      }
    }
  },

  _updateRenderedComponent: function _updateRenderedComponent(transaction, context) {
    var prevComponentInstance = this._renderedComponent;
    var prevRenderedElement = prevComponentInstance._currentElement;
    var nextRenderedElement = this._renderValidatedComponent();

    var debugID = 0;
    if (__DEV__) {
      debugID = this._debugID;
    }

    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
    } else {
      var oldHostNode = ReactReconciler.getHostNode(prevComponentInstance);
      ReactReconciler.unmountComponent(prevComponentInstance, false);

      var nodeType = ReactNodeTypes.getType(nextRenderedElement);
      this._renderedNodeType = nodeType;
      var child = this._instantiateReactComponent(nextRenderedElement, nodeType !== ReactNodeTypes.EMPTY);
      this._renderedComponent = child;

      var nextMarkup = ReactReconciler.mountComponent(child, transaction, this._hostParent, this._hostContainerInfo, this._processChildContext(context), debugID);

      if (__DEV__) {
        if (debugID !== 0) {
          var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
          ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
        }
      }

      this._replaceNodeWithMarkup(oldHostNode, nextMarkup, prevComponentInstance);
    }
  },

  _replaceNodeWithMarkup: function _replaceNodeWithMarkup(oldHostNode, nextMarkup, prevInstance) {
    ReactComponentEnvironment.replaceNodeWithMarkup(oldHostNode, nextMarkup, prevInstance);
  },

  _renderValidatedComponentWithoutOwnerOrContext: function _renderValidatedComponentWithoutOwnerOrContext() {
    var inst = this._instance;
    var renderedElement;

    if (__DEV__) {
      renderedElement = measureLifeCyclePerf(function () {
        return inst.render();
      }, this._debugID, 'render');
    } else {
      renderedElement = inst.render();
    }

    if (__DEV__) {
      if (renderedElement === undefined && inst.render._isMockFunction) {
        renderedElement = null;
      }
    }

    return renderedElement;
  },

  _renderValidatedComponent: function _renderValidatedComponent() {
    var renderedElement;
    if (__DEV__ || this._compositeType !== CompositeTypes.StatelessFunctional) {
      ReactCurrentOwner.current = this;
      try {
        renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
      } finally {
        ReactCurrentOwner.current = null;
      }
    } else {
      renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
    }
    invariant(renderedElement === null || renderedElement === false || React.isValidElement(renderedElement), '%s.render(): A valid React element (or null) must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent');

    return renderedElement;
  },

  attachRef: function attachRef(ref, component, transaction) {
    var inst = this.getPublicInstance();
    invariant(inst != null, 'Stateless function components cannot have refs.');
    var publicComponentInstance = component.getPublicInstance(transaction);
    if (__DEV__) {
      var componentName = component && component.getName ? component.getName() : 'a component';
      warning(publicComponentInstance != null || component._compositeType !== CompositeTypes.StatelessFunctional, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName());
    }
    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
    refs[ref] = publicComponentInstance;
  },

  detachRef: function detachRef(ref) {
    var refs = this.getPublicInstance().refs;
    delete refs[ref];
  },

  getName: function getName() {
    var type = this._currentElement.type;
    var constructor = this._instance && this._instance.constructor;
    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
  },

  getPublicInstance: function getPublicInstance() {
    var inst = this._instance;
    if (this._compositeType === CompositeTypes.StatelessFunctional) {
      return null;
    }
    return inst;
  },

  _instantiateReactComponent: null

};

module.exports = ReactCompositeComponent;
}, 155, null, "ReactCompositeComponent");
__d(/* ReactNodeTypes */function(global, require, module, exports) {

'use strict';

var React = require(76     ); // 76 = React

var invariant = require(24                  ); // 24 = fbjs/lib/invariant

var ReactNodeTypes = {
  HOST: 0,
  COMPOSITE: 1,
  EMPTY: 2,

  getType: function getType(node) {
    if (node === null || node === false) {
      return ReactNodeTypes.EMPTY;
    } else if (React.isValidElement(node)) {
      if (typeof node.type === 'function') {
        return ReactNodeTypes.COMPOSITE;
      } else {
        return ReactNodeTypes.HOST;
      }
    }
    invariant(false, 'Unexpected node: %s', node);
  }
};

module.exports = ReactNodeTypes;
}, 156, null, "ReactNodeTypes");
__d(/* checkReactTypeSpec */function(global, require, module, exports) {

'use strict';

var ReactPropTypeLocationNames = require(158                         ); // 158 = ReactPropTypeLocationNames
var ReactPropTypesSecret = require(159                   ); // 159 = ReactPropTypesSecret

var invariant = require(24                  ); // 24 = fbjs/lib/invariant
var warning = require(13                ); // 13 = fbjs/lib/warning

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
  ReactComponentTreeHook = require(33                                ); // 33 = react/lib/ReactComponentTreeHook
}

var loggedTypeFailures = {};

function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
  for (var typeSpecName in typeSpecs) {
    if (typeSpecs.hasOwnProperty(typeSpecName)) {
      var error;

      try {
        invariant(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName);
        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
      } catch (ex) {
        error = ex;
      }
      warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error);
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        loggedTypeFailures[error.message] = true;

        var componentStackInfo = '';

        if (__DEV__) {
          if (!ReactComponentTreeHook) {
            ReactComponentTreeHook = require(33                                ); // 33 = react/lib/ReactComponentTreeHook
          }
          if (debugID !== null) {
            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
          } else if (element !== null) {
            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
          }
        }

        warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo);
      }
    }
  }
}

module.exports = checkReactTypeSpec;
}, 157, null, "checkReactTypeSpec");
__d(/* ReactPropTypeLocationNames */function(global, require, module, exports) {

'use strict';

var ReactPropTypeLocationNames = {};

if (__DEV__) {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
}

module.exports = ReactPropTypeLocationNames;
}, 158, null, "ReactPropTypeLocationNames");
__d(/* ReactPropTypesSecret */function(global, require, module, exports) {

'use strict';

var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;
}, 159, null, "ReactPropTypesSecret");
__d(/* fbjs/lib/shallowEqual.js */function(global, require, module, exports) {

'use strict';

var hasOwnProperty = Object.prototype.hasOwnProperty;

function is(x, y) {
  if (x === y) {
    return x !== 0 || y !== 0 || 1 / x === 1 / y;
  } else {
    return x !== x && y !== y;
  }
}

function shallowEqual(objA, objB) {
  if (is(objA, objB)) {
    return true;
  }

  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  }

  for (var i = 0; i < keysA.length; i++) {
    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
      return false;
    }
  }

  return true;
}

module.exports = shallowEqual;
}, 160, null, "fbjs/lib/shallowEqual.js");
__d(/* shouldUpdateReactComponent */function(global, require, module, exports) {

'use strict';

function shouldUpdateReactComponent(prevElement, nextElement) {
  var prevEmpty = prevElement === null || prevElement === false;
  var nextEmpty = nextElement === null || nextElement === false;
  if (prevEmpty || nextEmpty) {
    return prevEmpty === nextEmpty;
  }

  var prevType = typeof prevElement;
  var nextType = typeof nextElement;
  if (prevType === 'string' || prevType === 'number') {
    return nextType === 'string' || nextType === 'number';
  } else {
    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
  }
}

module.exports = shouldUpdateReactComponent;
}, 161, null, "shouldUpdateReactComponent");
__d(/* ReactEmptyComponent */function(global, require, module, exports) {

'use strict';

var emptyComponentFactory;

var ReactEmptyComponentInjection = {
  injectEmptyComponentFactory: function injectEmptyComponentFactory(factory) {
    emptyComponentFactory = factory;
  }
};

var ReactEmptyComponent = {
  create: function create(instantiate) {
    return emptyComponentFactory(instantiate);
  }
};

ReactEmptyComponent.injection = ReactEmptyComponentInjection;

module.exports = ReactEmptyComponent;
}, 162, null, "ReactEmptyComponent");
__d(/* ReactHostComponent */function(global, require, module, exports) {

'use strict';

var invariant = require(24                  ); // 24 = fbjs/lib/invariant

var genericComponentClass = null;

var tagToComponentClass = {};
var textComponentClass = null;

var ReactHostComponentInjection = {
  injectGenericComponentClass: function injectGenericComponentClass(componentClass) {
    genericComponentClass = componentClass;
  },

  injectTextComponentClass: function injectTextComponentClass(componentClass) {
    textComponentClass = componentClass;
  },

  injectComponentClasses: function injectComponentClasses(componentClasses) {
    babelHelpers.extends(tagToComponentClass, componentClasses);
  }
};

function createInternalComponent(element) {
  invariant(genericComponentClass, 'There is no registered component for the tag %s', element.type);
  return new genericComponentClass(element);
}

function createInstanceForText(text) {
  return new textComponentClass(text);
}

function isTextComponent(component) {
  return component instanceof textComponentClass;
}

var ReactHostComponent = {
  createInternalComponent: createInternalComponent,
  createInstanceForText: createInstanceForText,
  isTextComponent: isTextComponent,
  injection: ReactHostComponentInjection
};

module.exports = ReactHostComponent;
}, 163, null, "ReactHostComponent");
__d(/* KeyEscapeUtils */function(global, require, module, exports) {

'use strict';

function escape(key) {
  var escapeRegex = /[=:]/g;
  var escaperLookup = {
    '=': '=0',
    ':': '=2'
  };
  var escapedString = ('' + key).replace(escapeRegex, function (match) {
    return escaperLookup[match];
  });

  return '$' + escapedString;
}

function unescape(key) {
  var unescapeRegex = /(=0|=2)/g;
  var unescaperLookup = {
    '=0': '=',
    '=2': ':'
  };
  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);

  return ('' + keySubstring).replace(unescapeRegex, function (match) {
    return unescaperLookup[match];
  });
}

var KeyEscapeUtils = {
  escape: escape,
  unescape: unescape
};

module.exports = KeyEscapeUtils;
}, 164, null, "KeyEscapeUtils");
__d(/* traverseAllChildren */function(global, require, module, exports) {

'use strict';

var ReactCurrentOwner = require(35                           ); // 35 = react/lib/ReactCurrentOwner
var REACT_ELEMENT_TYPE = require(166                 ); // 166 = ReactElementSymbol

var getIteratorFn = require(167            ); // 167 = getIteratorFn
var invariant = require(24                  ); // 24 = fbjs/lib/invariant
var KeyEscapeUtils = require(164             ); // 164 = KeyEscapeUtils
var warning = require(13                ); // 13 = fbjs/lib/warning

var SEPARATOR = '.';
var SUBSEPARATOR = ':';

var didWarnAboutMaps = false;

function getComponentKey(component, index) {
  if (component && typeof component === 'object' && component.key != null) {
    return KeyEscapeUtils.escape(component.key);
  }

  return index.toString(36);
}

function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    children = null;
  }

  if (children === null || type === 'string' || type === 'number' || type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
    callback(traverseContext, children, nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
    return 1;
  }

  var child;
  var nextName;
  var subtreeCount = 0;
  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getComponentKey(child, i);
      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
    }
  } else {
    var iteratorFn = getIteratorFn(children);
    if (iteratorFn) {
      var iterator = iteratorFn.call(children);
      var step;
      if (iteratorFn !== children.entries) {
        var ii = 0;
        while (!(step = iterator.next()).done) {
          child = step.value;
          nextName = nextNamePrefix + getComponentKey(child, ii++);
          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
        }
      } else {
        if (__DEV__) {
          var mapsAsChildrenAddendum = '';
          if (ReactCurrentOwner.current) {
            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
            if (mapsAsChildrenOwnerName) {
              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
            }
          }
          warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum);
          didWarnAboutMaps = true;
        }

        while (!(step = iterator.next()).done) {
          var entry = step.value;
          if (entry) {
            child = entry[1];
            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        }
      }
    } else if (type === 'object') {
      var addendum = '';
      if (__DEV__) {
        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
        if (children._isReactElement) {
          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
        }
        if (ReactCurrentOwner.current) {
          var name = ReactCurrentOwner.current.getName();
          if (name) {
            addendum += ' Check the render method of `' + name + '`.';
          }
        }
      }
      var childrenString = String(children);
      invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum);
    }
  }

  return subtreeCount;
}

function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', callback, traverseContext);
}

module.exports = traverseAllChildren;
}, 165, null, "traverseAllChildren");
__d(/* ReactElementSymbol */function(global, require, module, exports) {

'use strict';

var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && (typeof Symbol === 'function' ? Symbol.for : '@@for') && (typeof Symbol === 'function' ? Symbol.for : '@@for')('react.element') || 0xeac7;

module.exports = REACT_ELEMENT_TYPE;
}, 166, null, "ReactElementSymbol");
__d(/* getIteratorFn */function(global, require, module, exports) {

'use strict';

var ITERATOR_SYMBOL = typeof Symbol === 'function' && (typeof Symbol === 'function' ? Symbol.iterator : '@@iterator');
var FAUX_ITERATOR_SYMBOL = '@@iterator';
function getIteratorFn(maybeIterable) {
  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
  if (typeof iteratorFn === 'function') {
    return iteratorFn;
  }
}

module.exports = getIteratorFn;
}, 167, null, "getIteratorFn");
__d(/* flattenChildren */function(global, require, module, exports) {

'use strict';

var KeyEscapeUtils = require(164             ); // 164 = KeyEscapeUtils
var traverseAllChildren = require(165                  ); // 165 = traverseAllChildren
var warning = require(13                ); // 13 = fbjs/lib/warning

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
  ReactComponentTreeHook = require(33                                ); // 33 = react/lib/ReactComponentTreeHook
}

function flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID) {
  if (traverseContext && typeof traverseContext === 'object') {
    var result = traverseContext;
    var keyUnique = result[name] === undefined;
    if (__DEV__) {
      if (!ReactComponentTreeHook) {
        ReactComponentTreeHook = require(33                                ); // 33 = react/lib/ReactComponentTreeHook
      }
      if (!keyUnique) {
        warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID));
      }
    }
    if (keyUnique && child != null) {
      result[name] = child;
    }
  }
}

function flattenChildren(children, selfDebugID) {
  if (children == null) {
    return children;
  }
  var result = {};

  if (__DEV__) {
    traverseAllChildren(children, function (traverseContext, child, name) {
      return flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID);
    }, result);
  } else {
    traverseAllChildren(children, flattenSingleChildIntoContext, result);
  }
  return result;
}

module.exports = flattenChildren;
}, 168, null, "flattenChildren");
__d(/* insetsDiffer */function(global, require, module, exports) {
'use strict';

var dummyInsets = {
  top: undefined,
  left: undefined,
  right: undefined,
  bottom: undefined
};

var insetsDiffer = function insetsDiffer(one, two) {
  one = one || dummyInsets;
  two = two || dummyInsets;
  return one !== two && (one.top !== two.top || one.left !== two.left || one.right !== two.right || one.bottom !== two.bottom);
};

module.exports = insetsDiffer;
}, 169, null, "insetsDiffer");
__d(/* pointsDiffer */function(global, require, module, exports) {
'use strict';

var dummyPoint = { x: undefined, y: undefined };

var pointsDiffer = function pointsDiffer(one, two) {
  one = one || dummyPoint;
  two = two || dummyPoint;
  return one !== two && (one.x !== two.x || one.y !== two.y);
};

module.exports = pointsDiffer;
}, 170, null, "pointsDiffer");
__d(/* resolveAssetSource */function(global, require, module, exports) {
'use strict';

var AssetRegistry = require(172            ); // 172 = AssetRegistry
var AssetSourceResolver = require(173                  ); // 173 = AssetSourceResolver

var _require = require(27             ), // 27 = NativeModules
    SourceCode = _require.SourceCode;

var _customSourceTransformer = void 0,
    _serverURL = void 0,
    _bundleSourcePath = void 0;

function getDevServerURL() {
  if (_serverURL === undefined) {
    var scriptURL = SourceCode.scriptURL;
    var match = scriptURL && scriptURL.match(/^https?:\/\/.*?\//);
    if (match) {
      _serverURL = match[0];
    } else {
      _serverURL = null;
    }
  }
  return _serverURL;
}

function getBundleSourcePath() {
  if (_bundleSourcePath === undefined) {
    var scriptURL = SourceCode.scriptURL;
    if (!scriptURL) {
      _bundleSourcePath = null;
      return _bundleSourcePath;
    }
    if (scriptURL.startsWith('assets://')) {
      _bundleSourcePath = null;
      return _bundleSourcePath;
    }
    if (scriptURL.startsWith('file://')) {
      _bundleSourcePath = scriptURL.substring(7, scriptURL.lastIndexOf('/') + 1);
    } else {
      _bundleSourcePath = scriptURL.substring(0, scriptURL.lastIndexOf('/') + 1);
    }
  }

  return _bundleSourcePath;
}

function setCustomSourceTransformer(transformer) {
  _customSourceTransformer = transformer;
}

function resolveAssetSource(source) {
  if (typeof source === 'object') {
    return source;
  }

  var asset = AssetRegistry.getAssetByID(source);
  if (!asset) {
    return null;
  }

  var resolver = new AssetSourceResolver(getDevServerURL(), getBundleSourcePath(), asset);
  if (_customSourceTransformer) {
    return _customSourceTransformer(resolver);
  }
  return resolver.defaultAsset();
}

module.exports = resolveAssetSource;
module.exports.pickScale = AssetSourceResolver.pickScale;
module.exports.setCustomSourceTransformer = setCustomSourceTransformer;
}, 171, null, "resolveAssetSource");
__d(/* AssetRegistry */function(global, require, module, exports) {
'use strict';

var assets = [];

function registerAsset(asset) {
  return assets.push(asset);
}

function getAssetByID(assetId) {
  return assets[assetId - 1];
}

module.exports = { registerAsset: registerAsset, getAssetByID: getAssetByID };
}, 172, null, "AssetRegistry");
__d(/* AssetSourceResolver */function(global, require, module, exports) {
'use strict';

var PixelRatio = require(100         ); // 100 = PixelRatio
var Platform = require(26        ); // 26 = Platform

var assetPathUtils = require(174                                    ); // 174 = ../../local-cli/bundle/assetPathUtils
var invariant = require(24                  ); // 24 = fbjs/lib/invariant

function getScaledAssetPath(asset) {
  var scale = AssetSourceResolver.pickScale(asset.scales, PixelRatio.get());
  var scaleSuffix = scale === 1 ? '' : '@' + scale + 'x';
  var assetDir = assetPathUtils.getBasePath(asset);
  return assetDir + '/' + asset.name + scaleSuffix + '.' + asset.type;
}

function getAssetPathInDrawableFolder(asset) {
  var scale = AssetSourceResolver.pickScale(asset.scales, PixelRatio.get());
  var drawbleFolder = assetPathUtils.getAndroidDrawableFolderName(asset, scale);
  var fileName = assetPathUtils.getAndroidResourceIdentifier(asset);
  return drawbleFolder + '/' + fileName + '.' + asset.type;
}

var AssetSourceResolver = function () {
  function AssetSourceResolver(serverUrl, bundlePath, asset) {
    babelHelpers.classCallCheck(this, AssetSourceResolver);

    this.serverUrl = serverUrl;
    this.bundlePath = bundlePath;
    this.asset = asset;
  }

  babelHelpers.createClass(AssetSourceResolver, [{
    key: 'isLoadedFromServer',
    value: function isLoadedFromServer() {
      return !!this.serverUrl;
    }
  }, {
    key: 'isLoadedFromFileSystem',
    value: function isLoadedFromFileSystem() {
      return !!this.bundlePath;
    }
  }, {
    key: 'defaultAsset',
    value: function defaultAsset() {
      if (this.isLoadedFromServer()) {
        return this.assetServerURL();
      }

      if (Platform.OS === 'android') {
        return this.isLoadedFromFileSystem() ? this.drawableFolderInBundle() : this.resourceIdentifierWithoutScale();
      } else {
        return this.scaledAssetPathInBundle();
      }
    }
  }, {
    key: 'assetServerURL',
    value: function assetServerURL() {
      invariant(!!this.serverUrl, 'need server to load from');
      return this.fromSource(this.serverUrl + getScaledAssetPath(this.asset) + '?platform=' + Platform.OS + '&hash=' + this.asset.hash);
    }
  }, {
    key: 'scaledAssetPath',
    value: function scaledAssetPath() {
      return this.fromSource(getScaledAssetPath(this.asset));
    }
  }, {
    key: 'scaledAssetPathInBundle',
    value: function scaledAssetPathInBundle() {
      var path = this.bundlePath || '';
      return this.fromSource(path + getScaledAssetPath(this.asset));
    }
  }, {
    key: 'resourceIdentifierWithoutScale',
    value: function resourceIdentifierWithoutScale() {
      invariant(Platform.OS === 'android', 'resource identifiers work on Android');
      return this.fromSource(assetPathUtils.getAndroidResourceIdentifier(this.asset));
    }
  }, {
    key: 'drawableFolderInBundle',
    value: function drawableFolderInBundle() {
      var path = this.bundlePath || '';
      return this.fromSource('file://' + path + getAssetPathInDrawableFolder(this.asset));
    }
  }, {
    key: 'fromSource',
    value: function fromSource(source) {
      return {
        __packager_asset: true,
        width: this.asset.width,
        height: this.asset.height,
        uri: source,
        scale: AssetSourceResolver.pickScale(this.asset.scales, PixelRatio.get())
      };
    }
  }], [{
    key: 'pickScale',
    value: function pickScale(scales, deviceScale) {
      for (var i = 0; i < scales.length; i++) {
        if (scales[i] >= deviceScale) {
          return scales[i];
        }
      }

      return scales[scales.length - 1] || 1;
    }
  }]);
  return AssetSourceResolver;
}();

module.exports = AssetSourceResolver;
}, 173, null, "AssetSourceResolver");
__d(/* react-native/local-cli/bundle/assetPathUtils.js */function(global, require, module, exports) {
'use strict';

function getAndroidAssetSuffix(scale) {
  switch (scale) {
    case 0.75:
      return 'ldpi';
    case 1:
      return 'mdpi';
    case 1.5:
      return 'hdpi';
    case 2:
      return 'xhdpi';
    case 3:
      return 'xxhdpi';
    case 4:
      return 'xxxhdpi';
  }
}

function getAndroidDrawableFolderName(asset, scale) {
  var suffix = getAndroidAssetSuffix(scale);
  if (!suffix) {
    throw new Error('Don\'t know which android drawable suffix to use for asset: ' + JSON.stringify(asset));
  }
  var androidFolder = 'drawable-' + suffix;
  return androidFolder;
}

function getAndroidResourceIdentifier(asset) {
  var folderPath = getBasePath(asset);
  return (folderPath + '/' + asset.name).toLowerCase().replace(/\//g, '_').replace(/([^a-z0-9_])/g, '').replace(/^assets_/, '');
}

function getBasePath(asset) {
  var basePath = asset.httpServerLocation;
  if (basePath[0] === '/') {
    basePath = basePath.substr(1);
  }
  return basePath;
}

module.exports = {
  getAndroidAssetSuffix: getAndroidAssetSuffix,
  getAndroidDrawableFolderName: getAndroidDrawableFolderName,
  getAndroidResourceIdentifier: getAndroidResourceIdentifier,
  getBasePath: getBasePath
};
}, 174, null, "react-native/local-cli/bundle/assetPathUtils.js");
__d(/* verifyPropTypes */function(global, require, module, exports) {
'use strict';

var ReactNativeStyleAttributes = require(102                         ); // 102 = ReactNativeStyleAttributes

function verifyPropTypes(componentInterface, viewConfig, nativePropsToIgnore) {
  if (!viewConfig) {
    return;
  }
  var componentName = componentInterface.displayName || componentInterface.name || 'unknown';

  if (!componentInterface.propTypes) {
    throw new Error('`' + componentName + '` has no propTypes defined`');
  }

  var nativeProps = viewConfig.NativeProps;
  for (var prop in nativeProps) {
    if (!componentInterface.propTypes[prop] && !ReactNativeStyleAttributes[prop] && (!nativePropsToIgnore || !nativePropsToIgnore[prop])) {
      var message;
      if (componentInterface.propTypes.hasOwnProperty(prop)) {
        message = '`' + componentName + '` has incorrectly defined propType for native prop `' + viewConfig.uiViewClassName + '.' + prop + '` of native type `' + nativeProps[prop];
      } else {
        message = '`' + componentName + '` has no propType for native prop `' + viewConfig.uiViewClassName + '.' + prop + '` of native type `' + nativeProps[prop] + '`';
      }
      message += '\nIf you haven\'t changed this prop yourself, this usually means that ' + 'your versions of the native code and JavaScript code are out of sync. Updating both ' + 'should make this error go away.';
      throw new Error(message);
    }
  }
}

module.exports = verifyPropTypes;
}, 175, null, "verifyPropTypes");
__d(/* ReactNativeART */function(global, require, module, exports) {
'use strict';

var Color = require(177             ); // 177 = art/core/color
var Path = require(178                  ); // 178 = ARTSerializablePath
var Transform = require(181                 ); // 181 = art/core/transform

var React = require(76     ); // 76 = React
var ReactNativeViewAttributes = require(125                        ); // 125 = ReactNativeViewAttributes

var createReactNativeComponentClass = require(130                              ); // 130 = createReactNativeComponentClass
var merge = require(122    ); // 122 = merge
var invariant = require(24                  ); // 24 = fbjs/lib/invariant

function arrayDiffer(a, b) {
  if (a == null || b == null) {
    return true;
  }
  if (a.length !== b.length) {
    return true;
  }
  for (var i = 0; i < a.length; i++) {
    if (a[i] !== b[i]) {
      return true;
    }
  }
  return false;
}

function fontAndLinesDiffer(a, b) {
  if (a === b) {
    return false;
  }
  if (a.font !== b.font) {
    if (a.font === null) {
      return true;
    }
    if (b.font === null) {
      return true;
    }

    if (a.font.fontFamily !== b.font.fontFamily || a.font.fontSize !== b.font.fontSize || a.font.fontWeight !== b.font.fontWeight || a.font.fontStyle !== b.font.fontStyle) {
      return true;
    }
  }
  return arrayDiffer(a.lines, b.lines);
}

var SurfaceViewAttributes = merge(ReactNativeViewAttributes.UIView, {});

var NodeAttributes = {
  transform: { diff: arrayDiffer },
  opacity: true
};

var GroupAttributes = merge(NodeAttributes, {
  clipping: { diff: arrayDiffer }
});

var RenderableAttributes = merge(NodeAttributes, {
  fill: { diff: arrayDiffer },
  stroke: { diff: arrayDiffer },
  strokeWidth: true,
  strokeCap: true,
  strokeJoin: true,
  strokeDash: { diff: arrayDiffer }
});

var ShapeAttributes = merge(RenderableAttributes, {
  d: { diff: arrayDiffer }
});

var TextAttributes = merge(RenderableAttributes, {
  alignment: true,
  frame: { diff: fontAndLinesDiffer },
  path: { diff: arrayDiffer }
});

var NativeSurfaceView = createReactNativeComponentClass({
  validAttributes: SurfaceViewAttributes,
  uiViewClassName: 'ARTSurfaceView'
});

var NativeGroup = createReactNativeComponentClass({
  validAttributes: GroupAttributes,
  uiViewClassName: 'ARTGroup'
});

var NativeShape = createReactNativeComponentClass({
  validAttributes: ShapeAttributes,
  uiViewClassName: 'ARTShape'
});

var NativeText = createReactNativeComponentClass({
  validAttributes: TextAttributes,
  uiViewClassName: 'ARTText'
});

function childrenAsString(children) {
  if (!children) {
    return '';
  }
  if (typeof children === 'string') {
    return children;
  }
  if (children.length) {
    return children.join('\n');
  }
  return '';
}

var Surface = function (_React$Component) {
  babelHelpers.inherits(Surface, _React$Component);

  function Surface() {
    babelHelpers.classCallCheck(this, Surface);
    return babelHelpers.possibleConstructorReturn(this, (Surface.__proto__ || Object.getPrototypeOf(Surface)).apply(this, arguments));
  }

  babelHelpers.createClass(Surface, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return { isInSurface: true };
    }
  }, {
    key: 'render',
    value: function render() {
      var props = this.props;
      var w = extractNumber(props.width, 0);
      var h = extractNumber(props.height, 0);
      return React.createElement(
        NativeSurfaceView,
        { style: [props.style, { width: w, height: h }] },
        this.props.children
      );
    }
  }]);
  return Surface;
}(React.Component);

Surface.childContextTypes = {
  isInSurface: React.PropTypes.bool
};


function extractNumber(value, defaultValue) {
  if (value == null) {
    return defaultValue;
  }
  return +value;
}

var pooledTransform = new Transform();

function extractTransform(props) {
  var scaleX = props.scaleX != null ? props.scaleX : props.scale != null ? props.scale : 1;
  var scaleY = props.scaleY != null ? props.scaleY : props.scale != null ? props.scale : 1;

  pooledTransform.transformTo(1, 0, 0, 1, 0, 0).move(props.x || 0, props.y || 0).rotate(props.rotation || 0, props.originX, props.originY).scale(scaleX, scaleY, props.originX, props.originY);

  if (props.transform != null) {
    pooledTransform.transform(props.transform);
  }

  return [pooledTransform.xx, pooledTransform.yx, pooledTransform.xy, pooledTransform.yy, pooledTransform.x, pooledTransform.y];
}

function extractOpacity(props) {
  if (props.visible === false) {
    return 0;
  }
  if (props.opacity == null) {
    return 1;
  }
  return +props.opacity;
}

var Group = function (_React$Component2) {
  babelHelpers.inherits(Group, _React$Component2);

  function Group() {
    babelHelpers.classCallCheck(this, Group);
    return babelHelpers.possibleConstructorReturn(this, (Group.__proto__ || Object.getPrototypeOf(Group)).apply(this, arguments));
  }

  babelHelpers.createClass(Group, [{
    key: 'render',
    value: function render() {
      var props = this.props;
      invariant(this.context.isInSurface, 'ART: <Group /> must be a child of a <Surface />');
      return React.createElement(
        NativeGroup,
        {
          opacity: extractOpacity(props),
          transform: extractTransform(props) },
        this.props.children
      );
    }
  }]);
  return Group;
}(React.Component);

Group.contextTypes = {
  isInSurface: React.PropTypes.bool.isRequired
};

var ClippingRectangle = function (_React$Component3) {
  babelHelpers.inherits(ClippingRectangle, _React$Component3);

  function ClippingRectangle() {
    babelHelpers.classCallCheck(this, ClippingRectangle);
    return babelHelpers.possibleConstructorReturn(this, (ClippingRectangle.__proto__ || Object.getPrototypeOf(ClippingRectangle)).apply(this, arguments));
  }

  babelHelpers.createClass(ClippingRectangle, [{
    key: 'render',
    value: function render() {
      var props = this.props;
      var x = extractNumber(props.x, 0);
      var y = extractNumber(props.y, 0);
      var w = extractNumber(props.width, 0);
      var h = extractNumber(props.height, 0);
      var clipping = [x, y, w, h];

      var propsExcludingXAndY = merge(props);
      delete propsExcludingXAndY.x;
      delete propsExcludingXAndY.y;
      return React.createElement(
        NativeGroup,
        {
          clipping: clipping,
          opacity: extractOpacity(props),
          transform: extractTransform(propsExcludingXAndY) },
        this.props.children
      );
    }
  }]);
  return ClippingRectangle;
}(React.Component);

var SOLID_COLOR = 0;
var LINEAR_GRADIENT = 1;
var RADIAL_GRADIENT = 2;
var PATTERN = 3;

function insertColorIntoArray(color, targetArray, atIndex) {
  var c = new Color(color);
  targetArray[atIndex + 0] = c.red / 255;
  targetArray[atIndex + 1] = c.green / 255;
  targetArray[atIndex + 2] = c.blue / 255;
  targetArray[atIndex + 3] = c.alpha;
}

function insertColorsIntoArray(stops, targetArray, atIndex) {
  var i = 0;
  if ('length' in stops) {
    while (i < stops.length) {
      insertColorIntoArray(stops[i], targetArray, atIndex + i * 4);
      i++;
    }
  } else {
    for (var offset in stops) {
      insertColorIntoArray(stops[offset], targetArray, atIndex + i * 4);
      i++;
    }
  }
  return atIndex + i * 4;
}

function insertOffsetsIntoArray(stops, targetArray, atIndex, multi, reverse) {
  var offsetNumber;
  var i = 0;
  if ('length' in stops) {
    while (i < stops.length) {
      offsetNumber = i / (stops.length - 1) * multi;
      targetArray[atIndex + i] = reverse ? 1 - offsetNumber : offsetNumber;
      i++;
    }
  } else {
    for (var offsetString in stops) {
      offsetNumber = +offsetString * multi;
      targetArray[atIndex + i] = reverse ? 1 - offsetNumber : offsetNumber;
      i++;
    }
  }
  return atIndex + i;
}

function insertColorStopsIntoArray(stops, targetArray, atIndex) {
  var lastIndex = insertColorsIntoArray(stops, targetArray, atIndex);
  insertOffsetsIntoArray(stops, targetArray, lastIndex, 1, false);
}

function insertDoubleColorStopsIntoArray(stops, targetArray, atIndex) {
  var lastIndex = insertColorsIntoArray(stops, targetArray, atIndex);
  lastIndex = insertColorsIntoArray(stops, targetArray, lastIndex);
  lastIndex = insertOffsetsIntoArray(stops, targetArray, lastIndex, 0.5, false);
  insertOffsetsIntoArray(stops, targetArray, lastIndex, 0.5, true);
}

function applyBoundingBoxToBrushData(brushData, props) {
  var type = brushData[0];
  var width = +props.width;
  var height = +props.height;
  if (type === LINEAR_GRADIENT) {
    brushData[1] *= width;
    brushData[2] *= height;
    brushData[3] *= width;
    brushData[4] *= height;
  } else if (type === RADIAL_GRADIENT) {
    brushData[1] *= width;
    brushData[2] *= height;
    brushData[3] *= width;
    brushData[4] *= height;
    brushData[5] *= width;
    brushData[6] *= height;
  } else if (type === PATTERN) {}
}

function extractBrush(colorOrBrush, props) {
  if (colorOrBrush == null) {
    return null;
  }
  if (colorOrBrush._brush) {
    if (colorOrBrush._bb) {
      applyBoundingBoxToBrushData(colorOrBrush._brush, props);
      colorOrBrush._bb = false;
    }
    return colorOrBrush._brush;
  }
  var c = new Color(colorOrBrush);
  return [SOLID_COLOR, c.red / 255, c.green / 255, c.blue / 255, c.alpha];
}

function extractColor(color) {
  if (color == null) {
    return null;
  }
  var c = new Color(color);
  return [c.red / 255, c.green / 255, c.blue / 255, c.alpha];
}

function extractStrokeCap(strokeCap) {
  switch (strokeCap) {
    case 'butt':
      return 0;
    case 'square':
      return 2;
    default:
      return 1;}
}

function extractStrokeJoin(strokeJoin) {
  switch (strokeJoin) {
    case 'miter':
      return 0;
    case 'bevel':
      return 2;
    default:
      return 1;}
}

var Shape = function (_React$Component4) {
  babelHelpers.inherits(Shape, _React$Component4);

  function Shape() {
    babelHelpers.classCallCheck(this, Shape);
    return babelHelpers.possibleConstructorReturn(this, (Shape.__proto__ || Object.getPrototypeOf(Shape)).apply(this, arguments));
  }

  babelHelpers.createClass(Shape, [{
    key: 'render',
    value: function render() {
      var props = this.props;
      var path = props.d || childrenAsString(props.children);
      var d = new Path(path).toJSON();
      return React.createElement(NativeShape, {
        fill: extractBrush(props.fill, props),
        opacity: extractOpacity(props),
        stroke: extractColor(props.stroke),
        strokeCap: extractStrokeCap(props.strokeCap),
        strokeDash: props.strokeDash || null,
        strokeJoin: extractStrokeJoin(props.strokeJoin),
        strokeWidth: extractNumber(props.strokeWidth, 1),
        transform: extractTransform(props),

        d: d
      });
    }
  }]);
  return Shape;
}(React.Component);

var cachedFontObjectsFromString = {};

var fontFamilyPrefix = /^[\s"']*/;
var fontFamilySuffix = /[\s"']*$/;

function extractSingleFontFamily(fontFamilyString) {
  return fontFamilyString.split(',')[0].replace(fontFamilyPrefix, '').replace(fontFamilySuffix, '');
}

function parseFontString(font) {
  if (cachedFontObjectsFromString.hasOwnProperty(font)) {
    return cachedFontObjectsFromString[font];
  }
  var regexp = /^\s*((?:(?:normal|bold|italic)\s+)*)(?:(\d+(?:\.\d+)?)[ptexm\%]*(?:\s*\/.*?)?\s+)?\s*\"?([^\"]*)/i;
  var match = regexp.exec(font);
  if (!match) {
    return null;
  }
  var fontFamily = extractSingleFontFamily(match[3]);
  var fontSize = +match[2] || 12;
  var isBold = /bold/.exec(match[1]);
  var isItalic = /italic/.exec(match[1]);
  cachedFontObjectsFromString[font] = {
    fontFamily: fontFamily,
    fontSize: fontSize,
    fontWeight: isBold ? 'bold' : 'normal',
    fontStyle: isItalic ? 'italic' : 'normal'
  };
  return cachedFontObjectsFromString[font];
}

function extractFont(font) {
  if (font == null) {
    return null;
  }
  if (typeof font === 'string') {
    return parseFontString(font);
  }
  var fontFamily = extractSingleFontFamily(font.fontFamily);
  var fontSize = +font.fontSize || 12;
  return {
    fontFamily: fontFamily,
    fontSize: fontSize,
    fontWeight: font.fontWeight,
    fontStyle: font.fontStyle
  };
}

var newLine = /\n/g;
function extractFontAndLines(font, text) {
  return { font: extractFont(font), lines: text.split(newLine) };
}

function extractAlignment(alignment) {
  switch (alignment) {
    case 'right':
      return 1;
    case 'center':
      return 2;
    default:
      return 0;
  }
}

var Text = function (_React$Component5) {
  babelHelpers.inherits(Text, _React$Component5);

  function Text() {
    babelHelpers.classCallCheck(this, Text);
    return babelHelpers.possibleConstructorReturn(this, (Text.__proto__ || Object.getPrototypeOf(Text)).apply(this, arguments));
  }

  babelHelpers.createClass(Text, [{
    key: 'render',
    value: function render() {
      var props = this.props;
      var textPath = props.path ? new Path(props.path).toJSON() : null;
      var textFrame = extractFontAndLines(props.font, childrenAsString(props.children));
      return React.createElement(NativeText, {
        fill: extractBrush(props.fill, props),
        opacity: extractOpacity(props),
        stroke: extractColor(props.stroke),
        strokeCap: extractStrokeCap(props.strokeCap),
        strokeDash: props.strokeDash || null,
        strokeJoin: extractStrokeJoin(props.strokeJoin),
        strokeWidth: extractNumber(props.strokeWidth, 1),
        transform: extractTransform(props),

        alignment: extractAlignment(props.alignment),
        frame: textFrame,
        path: textPath
      });
    }
  }]);
  return Text;
}(React.Component);

function LinearGradient(stops, x1, y1, x2, y2) {
  var type = LINEAR_GRADIENT;

  if (arguments.length < 5) {
    var angle = (x1 == null ? 270 : x1) * Math.PI / 180;

    var x = Math.cos(angle);
    var y = -Math.sin(angle);
    var l = (Math.abs(x) + Math.abs(y)) / 2;

    x *= l;y *= l;

    x1 = 0.5 - x;
    x2 = 0.5 + x;
    y1 = 0.5 - y;
    y2 = 0.5 + y;
    this._bb = true;
  } else {
    this._bb = false;
  }

  var brushData = [type, +x1, +y1, +x2, +y2];
  insertColorStopsIntoArray(stops, brushData, 5);
  this._brush = brushData;
}

function RadialGradient(stops, fx, fy, rx, ry, cx, cy) {
  if (ry == null) {
    ry = rx;
  }
  if (cx == null) {
    cx = fx;
  }
  if (cy == null) {
    cy = fy;
  }
  if (fx == null) {
    fx = fy = rx = ry = cx = cy = 0.5;
    this._bb = true;
  } else {
    this._bb = false;
  }

  var brushData = [RADIAL_GRADIENT, +fx, +fy, +rx * 2, +ry * 2, +cx, +cy];
  insertDoubleColorStopsIntoArray(stops, brushData, 7);
  this._brush = brushData;
}

function Pattern(url, width, height, left, top) {
  this._brush = [PATTERN, url, +left || 0, +top || 0, +width, +height];
}

var ReactART = {
  LinearGradient: LinearGradient,
  RadialGradient: RadialGradient,
  Pattern: Pattern,
  Transform: Transform,
  Path: Path,
  Surface: Surface,
  Group: Group,
  ClippingRectangle: ClippingRectangle,
  Shape: Shape,
  Text: Text
};

module.exports = ReactART;
}, 176, null, "ReactNativeART");
__d(/* art/core/color.js */function(global, require, module, exports) {var colors = {
	maroon: '#800000', red: '#ff0000', orange: '#ffA500', yellow: '#ffff00', olive: '#808000',
	purple: '#800080', fuchsia: "#ff00ff", white: '#ffffff', lime: '#00ff00', green: '#008000',
	navy: '#000080', blue: '#0000ff', aqua: '#00ffff', teal: '#008080',
	black: '#000000', silver: '#c0c0c0', gray: '#808080'
};

var map = function map(array, fn) {
	var results = [];
	for (var i = 0, l = array.length; i < l; i++) {
		results[i] = fn(array[i], i);
	}return results;
};

var Color = function Color(color, type) {

	if (color.isColor) {

		this.red = color.red;
		this.green = color.green;
		this.blue = color.blue;
		this.alpha = color.alpha;
	} else {

		var namedColor = colors[color];
		if (namedColor) {
			color = namedColor;
			type = 'hex';
		}

		switch (typeof color) {
			case 'string':
				if (!type) type = (type = color.match(/^rgb|^hsb|^hsl/)) ? type[0] : 'hex';break;
			case 'object':
				type = type || 'rgb';color = color.toString();break;
			case 'number':
				type = 'hex';color = color.toString(16);break;
		}

		color = Color['parse' + type.toUpperCase()](color);
		this.red = color[0];
		this.green = color[1];
		this.blue = color[2];
		this.alpha = color[3];
	}

	this.isColor = true;
};

var limit = function limit(number, min, max) {
	return Math.min(max, Math.max(min, number));
};

var listMatch = /([-.\d]+\%?)\s*,\s*([-.\d]+\%?)\s*,\s*([-.\d]+\%?)\s*,?\s*([-.\d]*\%?)/;
var hexMatch = /^#?([a-f0-9]{1,2})([a-f0-9]{1,2})([a-f0-9]{1,2})([a-f0-9]{0,2})$/i;

Color.parseRGB = function (color) {
	return map(color.match(listMatch).slice(1), function (bit, i) {
		if (bit) bit = parseFloat(bit) * (bit[bit.length - 1] == '%' ? 2.55 : 1);
		return i < 3 ? Math.round((bit %= 256) < 0 ? bit + 256 : bit) : limit(bit === '' ? 1 : Number(bit), 0, 1);
	});
};

Color.parseHEX = function (color) {
	if (color.length == 1) color = color + color + color;
	return map(color.match(hexMatch).slice(1), function (bit, i) {
		if (i == 3) return bit ? parseInt(bit, 16) / 255 : 1;
		return parseInt(bit.length == 1 ? bit + bit : bit, 16);
	});
};

Color.parseHSB = function (color) {
	var hsb = map(color.match(listMatch).slice(1), function (bit, i) {
		if (bit) bit = parseFloat(bit);
		if (i === 0) return Math.round((bit %= 360) < 0 ? bit + 360 : bit);else if (i < 3) return limit(Math.round(bit), 0, 100);else return limit(bit === '' ? 1 : Number(bit), 0, 1);
	});

	var a = hsb[3];
	var br = Math.round(hsb[2] / 100 * 255);
	if (hsb[1] == 0) return [br, br, br, a];

	var hue = hsb[0];
	var f = hue % 60;
	var p = Math.round(hsb[2] * (100 - hsb[1]) / 10000 * 255);
	var q = Math.round(hsb[2] * (6000 - hsb[1] * f) / 600000 * 255);
	var t = Math.round(hsb[2] * (6000 - hsb[1] * (60 - f)) / 600000 * 255);

	switch (Math.floor(hue / 60)) {
		case 0:
			return [br, t, p, a];
		case 1:
			return [q, br, p, a];
		case 2:
			return [p, br, t, a];
		case 3:
			return [p, q, br, a];
		case 4:
			return [t, p, br, a];
		default:
			return [br, p, q, a];
	}
};

Color.parseHSL = function (color) {
	var hsb = map(color.match(listMatch).slice(1), function (bit, i) {
		if (bit) bit = parseFloat(bit);
		if (i === 0) return Math.round((bit %= 360) < 0 ? bit + 360 : bit);else if (i < 3) return limit(Math.round(bit), 0, 100);else return limit(bit === '' ? 1 : Number(bit), 0, 1);
	});

	var h = hsb[0] / 60;
	var s = hsb[1] / 100;
	var l = hsb[2] / 100;
	var a = hsb[3];

	var c = (1 - Math.abs(2 * l - 1)) * s;
	var x = c * (1 - Math.abs(h % 2 - 1));
	var m = l - c / 2;

	var p = Math.round((c + m) * 255);
	var q = Math.round((x + m) * 255);
	var t = Math.round(m * 255);

	switch (Math.floor(h)) {
		case 0:
			return [p, q, t, a];
		case 1:
			return [q, p, t, a];
		case 2:
			return [t, p, q, a];
		case 3:
			return [t, q, p, a];
		case 4:
			return [q, t, p, a];
		default:
			return [p, t, q, a];
	}
};

var toString = function toString(type, array) {
	if (array[3] != 1) type += 'a';else array.pop();
	return type + '(' + array.join(', ') + ')';
};

Color.prototype = {

	toHSB: function toHSB(array) {
		var red = this.red,
		    green = this.green,
		    blue = this.blue,
		    alpha = this.alpha;

		var max = Math.max(red, green, blue),
		    min = Math.min(red, green, blue),
		    delta = max - min;
		var hue = 0,
		    saturation = delta != 0 ? delta / max : 0,
		    brightness = max / 255;
		if (saturation) {
			var rr = (max - red) / delta,
			    gr = (max - green) / delta,
			    br = (max - blue) / delta;
			hue = red == max ? br - gr : green == max ? 2 + rr - br : 4 + gr - rr;
			if ((hue /= 6) < 0) hue++;
		}

		var hsb = [Math.round(hue * 360), Math.round(saturation * 100), Math.round(brightness * 100), alpha];

		return array ? hsb : toString('hsb', hsb);
	},

	toHSL: function toHSL(array) {
		var red = this.red,
		    green = this.green,
		    blue = this.blue,
		    alpha = this.alpha;

		var max = Math.max(red, green, blue),
		    min = Math.min(red, green, blue),
		    delta = max - min;
		var hue = 0,
		    saturation = delta != 0 ? delta / (255 - Math.abs(max + min - 255)) : 0,
		    lightness = (max + min) / 512;
		if (saturation) {
			var rr = (max - red) / delta,
			    gr = (max - green) / delta,
			    br = (max - blue) / delta;
			hue = red == max ? br - gr : green == max ? 2 + rr - br : 4 + gr - rr;
			if ((hue /= 6) < 0) hue++;
		}

		var hsl = [Math.round(hue * 360), Math.round(saturation * 100), Math.round(lightness * 100), alpha];

		return array ? hsl : toString('hsl', hsl);
	},

	toHEX: function toHEX(array) {

		var a = this.alpha;
		var alpha = (a = Math.round(a * 255).toString(16)).length == 1 ? a + a : a;

		var hex = map([this.red, this.green, this.blue], function (bit) {
			bit = bit.toString(16);
			return bit.length == 1 ? '0' + bit : bit;
		});

		return array ? hex.concat(alpha) : '#' + hex.join('') + (alpha == 'ff' ? '' : alpha);
	},

	toRGB: function toRGB(array) {
		var rgb = [this.red, this.green, this.blue, this.alpha];
		return array ? rgb : toString('rgb', rgb);
	}

};

Color.prototype.toString = Color.prototype.toRGB;

Color.hex = function (hex) {
	return new Color(hex, 'hex');
};

if (this.hex == null) this.hex = Color.hex;

Color.hsb = function (h, s, b, a) {
	return new Color([h || 0, s || 0, b || 0, a == null ? 1 : a], 'hsb');
};

if (this.hsb == null) this.hsb = Color.hsb;

Color.hsl = function (h, s, l, a) {
	return new Color([h || 0, s || 0, l || 0, a == null ? 1 : a], 'hsl');
};

if (this.hsl == null) this.hsl = Color.hsl;

Color.rgb = function (r, g, b, a) {
	return new Color([r || 0, g || 0, b || 0, a == null ? 1 : a], 'rgb');
};

if (this.rgb == null) this.rgb = Color.rgb;

Color.detach = function (color) {
	color = new Color(color);
	return [Color.rgb(color.red, color.green, color.blue).toString(), color.alpha];
};

module.exports = Color;
}, 177, null, "art/core/color.js");
__d(/* ARTSerializablePath */function(global, require, module, exports) {
'use strict';

var Class = require(179                ); // 179 = art/core/class.js
var Path = require(180               ); // 180 = art/core/path.js

var MOVE_TO = 0;
var CLOSE = 1;
var LINE_TO = 2;
var CURVE_TO = 3;
var ARC = 4;

var SerializablePath = Class(Path, {

  initialize: function initialize(path) {
    this.reset();
    if (path instanceof SerializablePath) {
      this.path = path.path.slice(0);
    } else if (path) {
      if (path.applyToPath) {
        path.applyToPath(this);
      } else {
        this.push(path);
      }
    }
  },

  onReset: function onReset() {
    this.path = [];
  },

  onMove: function onMove(sx, sy, x, y) {
    this.path.push(MOVE_TO, x, y);
  },

  onLine: function onLine(sx, sy, x, y) {
    this.path.push(LINE_TO, x, y);
  },

  onBezierCurve: function onBezierCurve(sx, sy, p1x, p1y, p2x, p2y, x, y) {
    this.path.push(CURVE_TO, p1x, p1y, p2x, p2y, x, y);
  },

  _arcToBezier: Path.prototype.onArc,

  onArc: function onArc(sx, sy, ex, ey, cx, cy, rx, ry, sa, ea, ccw, rotation) {
    if (rx !== ry || rotation) {
      return this._arcToBezier(sx, sy, ex, ey, cx, cy, rx, ry, sa, ea, ccw, rotation);
    }
    this.path.push(ARC, cx, cy, rx, sa, ea, ccw ? 0 : 1);
  },

  onClose: function onClose() {
    this.path.push(CLOSE);
  },

  toJSON: function toJSON() {
    return this.path;
  }

});

module.exports = SerializablePath;
}, 178, null, "ARTSerializablePath");
__d(/* art/core/class.js */function(global, require, module, exports) {module.exports = function (mixins) {
	var proto = {};
	for (var i = 0, l = arguments.length; i < l; i++) {
		var mixin = arguments[i];
		if (typeof mixin == 'function') mixin = mixin.prototype;
		for (var key in mixin) {
			proto[key] = mixin[key];
		}
	}
	if (!proto.initialize) proto.initialize = function () {};
	proto.constructor = function (a, b, c, d, e, f, g, h) {
		return new proto.initialize(a, b, c, d, e, f, g, h);
	};
	proto.constructor.prototype = proto.initialize.prototype = proto;
	return proto.constructor;
};
}, 179, null, "art/core/class.js");
__d(/* art/core/path.js */function(global, require, module, exports) {var Class = require(179      ); // 179 = ./class

module.exports = Class({

	initialize: function initialize(path) {
		this.reset().push(path);
	},

	push: function push() {
		var p = Array.prototype.join.call(arguments, ' ').match(/[a-df-z]|[\-+]?(?:[\d\.]e[\-+]?|[^\s\-+,a-z])+/ig);
		if (!p) return this;

		var last,
		    cmd = p[0],
		    i = 1;
		while (cmd) {
			switch (cmd) {
				case 'm':
					this.move(p[i++], p[i++]);break;
				case 'l':
					this.line(p[i++], p[i++]);break;
				case 'c':
					this.curve(p[i++], p[i++], p[i++], p[i++], p[i++], p[i++]);break;
				case 's':
					this.curve(p[i++], p[i++], null, null, p[i++], p[i++]);break;
				case 'q':
					this.curve(p[i++], p[i++], p[i++], p[i++]);break;
				case 't':
					this.curve(p[i++], p[i++]);break;
				case 'a':
					this.arc(p[i + 5], p[i + 6], p[i], p[i + 1], p[i + 3], !+p[i + 4], p[i + 2]);i += 7;break;
				case 'h':
					this.line(p[i++], 0);break;
				case 'v':
					this.line(0, p[i++]);break;

				case 'M':
					this.moveTo(p[i++], p[i++]);break;
				case 'L':
					this.lineTo(p[i++], p[i++]);break;
				case 'C':
					this.curveTo(p[i++], p[i++], p[i++], p[i++], p[i++], p[i++]);break;
				case 'S':
					this.curveTo(p[i++], p[i++], null, null, p[i++], p[i++]);break;
				case 'Q':
					this.curveTo(p[i++], p[i++], p[i++], p[i++]);break;
				case 'T':
					this.curveTo(p[i++], p[i++]);break;
				case 'A':
					this.arcTo(p[i + 5], p[i + 6], p[i], p[i + 1], p[i + 3], !+p[i + 4], p[i + 2]);i += 7;break;
				case 'H':
					this.lineTo(p[i++], this.penY);break;
				case 'V':
					this.lineTo(this.penX, p[i++]);break;

				case 'Z':case 'z':
					this.close();break;
				default:
					cmd = last;i--;continue;
			}

			last = cmd;
			if (last == 'm') last = 'l';else if (last == 'M') last = 'L';
			cmd = p[i++];
		}
		return this;
	},

	reset: function reset() {
		this.penX = this.penY = 0;
		this.penDownX = this.penDownY = null;
		this._pivotX = this._pivotY = 0;
		this.onReset();
		return this;
	},

	move: function move(x, y) {
		this.onMove(this.penX, this.penY, this._pivotX = this.penX += +x, this._pivotY = this.penY += +y);
		return this;
	},
	moveTo: function moveTo(x, y) {
		this.onMove(this.penX, this.penY, this._pivotX = this.penX = +x, this._pivotY = this.penY = +y);
		return this;
	},

	line: function line(x, y) {
		return this.lineTo(this.penX + +x, this.penY + +y);
	},
	lineTo: function lineTo(x, y) {
		if (this.penDownX == null) {
			this.penDownX = this.penX;this.penDownY = this.penY;
		}
		this.onLine(this.penX, this.penY, this._pivotX = this.penX = +x, this._pivotY = this.penY = +y);
		return this;
	},

	curve: function curve(c1x, c1y, c2x, c2y, ex, ey) {
		var x = this.penX,
		    y = this.penY;
		return this.curveTo(x + +c1x, y + +c1y, c2x == null ? null : x + +c2x, c2y == null ? null : y + +c2y, ex == null ? null : x + +ex, ey == null ? null : y + +ey);
	},
	curveTo: function curveTo(c1x, c1y, c2x, c2y, ex, ey) {
		var x = this.penX,
		    y = this.penY;
		if (c2x == null) {
			c2x = +c1x;c2y = +c1y;
			c1x = x * 2 - (this._pivotX || 0);c1y = y * 2 - (this._pivotY || 0);
		}
		if (ex == null) {
			this._pivotX = +c1x;this._pivotY = +c1y;
			ex = +c2x;ey = +c2y;
			c2x = (ex + +c1x * 2) / 3;c2y = (ey + +c1y * 2) / 3;
			c1x = (x + +c1x * 2) / 3;c1y = (y + +c1y * 2) / 3;
		} else {
			this._pivotX = +c2x;this._pivotY = +c2y;
		}
		if (this.penDownX == null) {
			this.penDownX = x;this.penDownY = y;
		}
		this.onBezierCurve(x, y, +c1x, +c1y, +c2x, +c2y, this.penX = +ex, this.penY = +ey);
		return this;
	},

	arc: function arc(x, y, rx, ry, outer, counterClockwise, rotation) {
		return this.arcTo(this.penX + +x, this.penY + +y, rx, ry, outer, counterClockwise, rotation);
	},
	arcTo: function arcTo(x, y, rx, ry, outer, counterClockwise, rotation) {
		ry = Math.abs(+ry || +rx || +y - this.penY);
		rx = Math.abs(+rx || +x - this.penX);

		if (!rx || !ry || x == this.penX && y == this.penY) return this.lineTo(x, y);

		var tX = this.penX,
		    tY = this.penY,
		    clockwise = !+counterClockwise,
		    large = !!+outer;

		var rad = rotation ? rotation * Math.PI / 180 : 0,
		    cos = Math.cos(rad),
		    sin = Math.sin(rad);
		x -= tX;y -= tY;

		var cx = cos * x / 2 + sin * y / 2,
		    cy = -sin * x / 2 + cos * y / 2,
		    rxry = rx * rx * ry * ry,
		    rycx = ry * ry * cx * cx,
		    rxcy = rx * rx * cy * cy,
		    a = rxry - rxcy - rycx;

		if (a < 0) {
			a = Math.sqrt(1 - a / rxry);
			rx *= a;ry *= a;
			cx = x / 2;cy = y / 2;
		} else {
			a = Math.sqrt(a / (rxcy + rycx));
			if (large == clockwise) a = -a;
			var cxd = -a * cy * rx / ry,
			    cyd = a * cx * ry / rx;
			cx = cos * cxd - sin * cyd + x / 2;
			cy = sin * cxd + cos * cyd + y / 2;
		}

		var xx = cos / rx,
		    yx = sin / rx,
		    xy = -sin / ry,
		    yy = cos / ry;

		var sa = Math.atan2(xy * -cx + yy * -cy, xx * -cx + yx * -cy),
		    ea = Math.atan2(xy * (x - cx) + yy * (y - cy), xx * (x - cx) + yx * (y - cy));

		cx += tX;cy += tY;
		x += tX;y += tY;

		if (this.penDownX == null) {
			this.penDownX = this.penX;this.penDownY = this.penY;
		}
		this.onArc(tX, tY, this._pivotX = this.penX = x, this._pivotY = this.penY = y, cx, cy, rx, ry, sa, ea, !clockwise, rotation);
		return this;
	},

	counterArc: function counterArc(x, y, rx, ry, outer) {
		return this.arc(x, y, rx, ry, outer, true);
	},
	counterArcTo: function counterArcTo(x, y, rx, ry, outer) {
		return this.arcTo(x, y, rx, ry, outer, true);
	},

	close: function close() {
		if (this.penDownX != null) {
			this.onClose(this.penX, this.penY, this.penX = this.penDownX, this.penY = this.penDownY);
			this.penDownX = null;
		}
		return this;
	},

	onReset: function onReset() {},

	onMove: function onMove(sx, sy, ex, ey) {},

	onLine: function onLine(sx, sy, ex, ey) {
		this.onBezierCurve(sx, sy, sx, sy, ex, ey, ex, ey);
	},

	onBezierCurve: function onBezierCurve(sx, sy, c1x, c1y, c2x, c2y, ex, ey) {
		var gx = ex - sx,
		    gy = ey - sy,
		    g = gx * gx + gy * gy,
		    v1,
		    v2,
		    cx,
		    cy,
		    u;

		cx = c1x - sx;cy = c1y - sy;
		u = cx * gx + cy * gy;

		if (u > g) {
			cx -= gx;
			cy -= gy;
		} else if (u > 0 && g != 0) {
			cx -= u / g * gx;
			cy -= u / g * gy;
		}

		v1 = cx * cx + cy * cy;

		cx = c2x - sx;cy = c2y - sy;
		u = cx * gx + cy * gy;

		if (u > g) {
			cx -= gx;
			cy -= gy;
		} else if (u > 0 && g != 0) {
			cx -= u / g * gx;
			cy -= u / g * gy;
		}

		v2 = cx * cx + cy * cy;

		if (v1 < 0.01 && v2 < 0.01) {
			this.onLine(sx, sy, ex, ey);
			return;
		}

		if (isNaN(v1) || isNaN(v2)) {
			throw new Error('Bad input');
		}

		var s1x = (c1x + c2x) * 0.5,
		    s1y = (c1y + c2y) * 0.5,
		    l1x = (c1x + sx) * 0.5,
		    l1y = (c1y + sy) * 0.5,
		    l2x = (l1x + s1x) * 0.5,
		    l2y = (l1y + s1y) * 0.5,
		    r2x = (ex + c2x) * 0.5,
		    r2y = (ey + c2y) * 0.5,
		    r1x = (r2x + s1x) * 0.5,
		    r1y = (r2y + s1y) * 0.5,
		    l2r1x = (l2x + r1x) * 0.5,
		    l2r1y = (l2y + r1y) * 0.5;

		this.onBezierCurve(sx, sy, l1x, l1y, l2x, l2y, l2r1x, l2r1y);
		this.onBezierCurve(l2r1x, l2r1y, r1x, r1y, r2x, r2y, ex, ey);
	},

	onArc: function onArc(sx, sy, ex, ey, cx, cy, rx, ry, sa, ea, ccw, rotation) {
		var rad = rotation ? rotation * Math.PI / 180 : 0,
		    cos = Math.cos(rad),
		    sin = Math.sin(rad),
		    xx = cos * rx,
		    yx = -sin * ry,
		    xy = sin * rx,
		    yy = cos * ry;

		var arc = ea - sa;
		if (arc < 0 && !ccw) arc += Math.PI * 2;else if (arc > 0 && ccw) arc -= Math.PI * 2;

		var n = Math.ceil(Math.abs(arc / (Math.PI / 2))),
		    step = arc / n,
		    k = 4 / 3 * Math.tan(step / 4);

		var x = Math.cos(sa),
		    y = Math.sin(sa);

		for (var i = 0; i < n; i++) {
			var cp1x = x - k * y,
			    cp1y = y + k * x;

			sa += step;
			x = Math.cos(sa);y = Math.sin(sa);

			var cp2x = x + k * y,
			    cp2y = y - k * x;

			this.onBezierCurve(sx, sy, cx + xx * cp1x + yx * cp1y, cy + xy * cp1x + yy * cp1y, cx + xx * cp2x + yx * cp2y, cy + xy * cp2x + yy * cp2y, sx = cx + xx * x + yx * y, sy = cy + xy * x + yy * y);
		}
	},

	onClose: function onClose(sx, sy, ex, ey) {
		this.onLine(sx, sy, ex, ey);
	}

});
}, 180, null, "art/core/path.js");
__d(/* art/core/transform.js */function(global, require, module, exports) {var Class = require(179      ); // 179 = ./class

function Transform(xx, yx, xy, yy, x, y) {
	if (xx && typeof xx == 'object') {
		yx = xx.yx;yy = xx.yy;y = xx.y;
		xy = xx.xy;x = xx.x;xx = xx.xx;
	}
	this.xx = xx == null ? 1 : xx;
	this.yx = yx || 0;
	this.xy = xy || 0;
	this.yy = yy == null ? 1 : yy;
	this.x = (x == null ? this.x : x) || 0;
	this.y = (y == null ? this.y : y) || 0;
	this._transform();
	return this;
};

module.exports = Class({

	initialize: Transform,

	_transform: function _transform() {},

	xx: 1, yx: 0, x: 0,
	xy: 0, yy: 1, y: 0,

	transform: function transform(xx, yx, xy, yy, x, y) {
		var m = this;
		if (xx && typeof xx == 'object') {
			yx = xx.yx;yy = xx.yy;y = xx.y;
			xy = xx.xy;x = xx.x;xx = xx.xx;
		}
		if (!x) x = 0;
		if (!y) y = 0;
		return this.transformTo(m.xx * xx + m.xy * yx, m.yx * xx + m.yy * yx, m.xx * xy + m.xy * yy, m.yx * xy + m.yy * yy, m.xx * x + m.xy * y + m.x, m.yx * x + m.yy * y + m.y);
	},

	transformTo: Transform,

	translate: function translate(x, y) {
		return this.transform(1, 0, 0, 1, x, y);
	},

	move: function move(x, y) {
		this.x += x || 0;
		this.y += y || 0;
		this._transform();
		return this;
	},

	scale: function scale(x, y) {
		if (y == null) y = x;
		return this.transform(x, 0, 0, y, 0, 0);
	},

	rotate: function rotate(deg, x, y) {
		if (x == null || y == null) {
			x = (this.left || 0) + (this.width || 0) / 2;
			y = (this.top || 0) + (this.height || 0) / 2;
		}

		var rad = deg * Math.PI / 180,
		    sin = Math.sin(rad),
		    cos = Math.cos(rad);

		this.transform(1, 0, 0, 1, x, y);
		var m = this;

		return this.transformTo(cos * m.xx - sin * m.yx, sin * m.xx + cos * m.yx, cos * m.xy - sin * m.yy, sin * m.xy + cos * m.yy, m.x, m.y).transform(1, 0, 0, 1, -x, -y);
	},

	moveTo: function moveTo(x, y) {
		var m = this;
		return this.transformTo(m.xx, m.yx, m.xy, m.yy, x, y);
	},

	rotateTo: function rotateTo(deg, x, y) {
		var m = this;
		var flip = m.yx / m.xx > m.yy / m.xy ? -1 : 1;
		if (m.xx < 0 ? m.xy >= 0 : m.xy < 0) flip = -flip;
		return this.rotate(deg - Math.atan2(flip * m.yx, flip * m.xx) * 180 / Math.PI, x, y);
	},

	scaleTo: function scaleTo(x, y) {
		var m = this;

		var h = Math.sqrt(m.xx * m.xx + m.yx * m.yx);
		m.xx /= h;m.yx /= h;

		h = Math.sqrt(m.yy * m.yy + m.xy * m.xy);
		m.yy /= h;m.xy /= h;

		return this.scale(x, y);
	},

	resizeTo: function resizeTo(width, height) {
		var w = this.width,
		    h = this.height;
		if (!w || !h) return this;
		return this.scaleTo(width / w, height / h);
	},

	inversePoint: function inversePoint(x, y) {
		var a = this.xx,
		    b = this.yx,
		    c = this.xy,
		    d = this.yy,
		    e = this.x,
		    f = this.y;
		var det = b * c - a * d;
		if (det == 0) return null;
		return {
			x: (d * (e - x) + c * (y - f)) / det,
			y: (a * (f - y) + b * (x - e)) / det
		};
	},

	point: function point(x, y) {
		var m = this;
		return {
			x: m.xx * x + m.xy * y + m.x,
			y: m.yx * x + m.yy * y + m.y
		};
	}

});
}, 181, null, "art/core/transform.js");
__d(/* Button */function(global, require, module, exports) {
'use strict';

var ColorPropType = require(16             ); // 16 = ColorPropType
var Platform = require(26        ); // 26 = Platform
var React = require(76     ); // 76 = React
var StyleSheet = require(99          ); // 99 = StyleSheet
var Text = require(183   ); // 183 = Text
var TouchableNativeFeedback = require(190                      ); // 190 = TouchableNativeFeedback
var TouchableOpacity = require(250               ); // 250 = TouchableOpacity
var View = require(119   ); // 119 = View

var invariant = require(24                  ); // 24 = fbjs/lib/invariant

var Button = function (_React$Component) {
  babelHelpers.inherits(Button, _React$Component);

  function Button() {
    babelHelpers.classCallCheck(this, Button);
    return babelHelpers.possibleConstructorReturn(this, (Button.__proto__ || Object.getPrototypeOf(Button)).apply(this, arguments));
  }

  babelHelpers.createClass(Button, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          accessibilityLabel = _props.accessibilityLabel,
          color = _props.color,
          onPress = _props.onPress,
          title = _props.title,
          disabled = _props.disabled,
          testID = _props.testID;

      var buttonStyles = [styles.button];
      var textStyles = [styles.text];
      var Touchable = Platform.OS === 'android' ? TouchableNativeFeedback : TouchableOpacity;
      if (color && Platform.OS === 'ios') {
        textStyles.push({ color: color });
      } else if (color) {
        buttonStyles.push({ backgroundColor: color });
      }
      if (disabled) {
        buttonStyles.push(styles.buttonDisabled);
        textStyles.push(styles.textDisabled);
      }
      invariant(typeof title === 'string', 'The title prop of a Button must be a string');
      var formattedTitle = Platform.OS === 'android' ? title.toUpperCase() : title;
      return React.createElement(
        Touchable,
        {
          accessibilityComponentType: 'button',
          accessibilityLabel: accessibilityLabel,
          accessibilityTraits: ['button'],
          testID: testID,
          disabled: disabled,
          onPress: onPress },
        React.createElement(
          View,
          { style: buttonStyles },
          React.createElement(
            Text,
            { style: textStyles },
            formattedTitle
          )
        )
      );
    }
  }]);
  return Button;
}(React.Component);

Button.propTypes = {
  title: React.PropTypes.string.isRequired,

  accessibilityLabel: React.PropTypes.string,

  color: ColorPropType,

  disabled: React.PropTypes.bool,

  onPress: React.PropTypes.func.isRequired,

  testID: React.PropTypes.string
};

var defaultBlue = '#2196F3';
if (Platform.OS === 'ios') {
  defaultBlue = '#0C42FD';
}

var styles = StyleSheet.create({
  button: Platform.select({
    ios: {},
    android: {
      elevation: 4,
      backgroundColor: defaultBlue,
      borderRadius: 2
    }
  }),
  text: Platform.select({
    ios: {
      color: defaultBlue,
      textAlign: 'center',
      padding: 8,
      fontSize: 18
    },
    android: {
      textAlign: 'center',
      color: 'white',
      padding: 8,
      fontWeight: '500'
    }
  }),
  buttonDisabled: Platform.select({
    ios: {},
    android: {
      elevation: 0,
      backgroundColor: '#dfdfdf'
    }
  }),
  textDisabled: Platform.select({
    ios: {
      color: '#cdcdcd'
    },
    android: {
      color: '#a1a1a1'
    }
  })
});

module.exports = Button;
}, 182, null, "Button");
__d(/* Text */function(global, require, module, exports) {
'use strict';

var ColorPropType = require(16             ); // 16 = ColorPropType
var EdgeInsetsPropType = require(120                 ); // 120 = EdgeInsetsPropType
var NativeMethodsMixin = require(19                  ); // 19 = NativeMethodsMixin
var Platform = require(26        ); // 26 = Platform
var React = require(76     ); // 76 = React
var ReactNativeViewAttributes = require(125                        ); // 125 = ReactNativeViewAttributes
var StyleSheetPropType = require(126                 ); // 126 = StyleSheetPropType
var TextStylePropTypes = require(111                 ); // 111 = TextStylePropTypes
var Touchable = require(184        ); // 184 = Touchable

var processColor = require(114           ); // 114 = processColor
var createReactNativeComponentClass = require(130                              ); // 130 = createReactNativeComponentClass
var mergeFast = require(189        ); // 189 = mergeFast

var PropTypes = React.PropTypes;


var stylePropType = StyleSheetPropType(TextStylePropTypes);

var viewConfig = {
  validAttributes: mergeFast(ReactNativeViewAttributes.UIView, {
    isHighlighted: true,
    numberOfLines: true,
    ellipsizeMode: true,
    allowFontScaling: true,
    selectable: true,
    selectionColor: true,
    adjustsFontSizeToFit: true,
    minimumFontScale: true,
    textBreakStrategy: true
  }),
  uiViewClassName: 'RCTText'
};

var Text = React.createClass({
  displayName: 'Text',

  propTypes: {
    ellipsizeMode: PropTypes.oneOf(['head', 'middle', 'tail', 'clip']),

    numberOfLines: PropTypes.number,

    textBreakStrategy: PropTypes.oneOf(['simple', 'highQuality', 'balanced']),

    onLayout: PropTypes.func,

    onPress: PropTypes.func,

    onLongPress: PropTypes.func,

    pressRetentionOffset: EdgeInsetsPropType,

    selectable: PropTypes.bool,

    selectionColor: ColorPropType,

    suppressHighlighting: PropTypes.bool,
    style: stylePropType,

    testID: PropTypes.string,

    allowFontScaling: PropTypes.bool,

    accessible: PropTypes.bool,

    adjustsFontSizeToFit: PropTypes.bool,

    minimumFontScale: PropTypes.number
  },
  getDefaultProps: function getDefaultProps() {
    return {
      accessible: true,
      allowFontScaling: true,
      ellipsizeMode: 'tail'
    };
  },

  getInitialState: function getInitialState() {
    return mergeFast(Touchable.Mixin.touchableGetInitialState(), {
      isHighlighted: false
    });
  },
  mixins: [NativeMethodsMixin],
  viewConfig: viewConfig,
  getChildContext: function getChildContext() {
    return { isInAParentText: true };
  },

  childContextTypes: {
    isInAParentText: PropTypes.bool
  },
  contextTypes: {
    isInAParentText: PropTypes.bool
  },

  _handlers: null,
  _hasPressHandler: function _hasPressHandler() {
    return !!this.props.onPress || !!this.props.onLongPress;
  },

  touchableHandleActivePressIn: null,
  touchableHandleActivePressOut: null,
  touchableHandlePress: null,
  touchableHandleLongPress: null,
  touchableGetPressRectOffset: null,
  render: function render() {
    var _this = this;

    var newProps = this.props;
    if (this.props.onStartShouldSetResponder || this._hasPressHandler()) {
      if (!this._handlers) {
        this._handlers = {
          onStartShouldSetResponder: function onStartShouldSetResponder() {
            var shouldSetFromProps = _this.props.onStartShouldSetResponder && _this.props.onStartShouldSetResponder();
            var setResponder = shouldSetFromProps || _this._hasPressHandler();
            if (setResponder && !_this.touchableHandleActivePressIn) {
              for (var key in Touchable.Mixin) {
                if (typeof Touchable.Mixin[key] === 'function') {
                  _this[key] = Touchable.Mixin[key].bind(_this);
                }
              }
              _this.touchableHandleActivePressIn = function () {
                if (_this.props.suppressHighlighting || !_this._hasPressHandler()) {
                  return;
                }
                _this.setState({
                  isHighlighted: true
                });
              };

              _this.touchableHandleActivePressOut = function () {
                if (_this.props.suppressHighlighting || !_this._hasPressHandler()) {
                  return;
                }
                _this.setState({
                  isHighlighted: false
                });
              };

              _this.touchableHandlePress = function (e) {
                _this.props.onPress && _this.props.onPress(e);
              };

              _this.touchableHandleLongPress = function (e) {
                _this.props.onLongPress && _this.props.onLongPress(e);
              };

              _this.touchableGetPressRectOffset = function () {
                return this.props.pressRetentionOffset || PRESS_RECT_OFFSET;
              };
            }
            return setResponder;
          },
          onResponderGrant: function (e, dispatchID) {
            this.touchableHandleResponderGrant(e, dispatchID);
            this.props.onResponderGrant && this.props.onResponderGrant.apply(this, arguments);
          }.bind(this),
          onResponderMove: function (e) {
            this.touchableHandleResponderMove(e);
            this.props.onResponderMove && this.props.onResponderMove.apply(this, arguments);
          }.bind(this),
          onResponderRelease: function (e) {
            this.touchableHandleResponderRelease(e);
            this.props.onResponderRelease && this.props.onResponderRelease.apply(this, arguments);
          }.bind(this),
          onResponderTerminate: function (e) {
            this.touchableHandleResponderTerminate(e);
            this.props.onResponderTerminate && this.props.onResponderTerminate.apply(this, arguments);
          }.bind(this),
          onResponderTerminationRequest: function () {
            var allowTermination = this.touchableHandleResponderTerminationRequest();
            if (allowTermination && this.props.onResponderTerminationRequest) {
              allowTermination = this.props.onResponderTerminationRequest.apply(this, arguments);
            }
            return allowTermination;
          }.bind(this)
        };
      }
      newProps = babelHelpers.extends({}, this.props, this._handlers, {
        isHighlighted: this.state.isHighlighted
      });
    }
    if (newProps.selectionColor != null) {
      newProps = babelHelpers.extends({}, newProps, {
        selectionColor: processColor(newProps.selectionColor)
      });
    }
    if (Touchable.TOUCH_TARGET_DEBUG && newProps.onPress) {
      newProps = babelHelpers.extends({}, newProps, {
        style: [this.props.style, { color: 'magenta' }]
      });
    }
    if (this.context.isInAParentText) {
      return React.createElement(RCTVirtualText, newProps);
    } else {
      return React.createElement(RCTText, newProps);
    }
  }
});

var PRESS_RECT_OFFSET = { top: 20, left: 20, right: 20, bottom: 30 };

var RCTText = createReactNativeComponentClass(viewConfig);
var RCTVirtualText = RCTText;

if (Platform.OS === 'android') {
  RCTVirtualText = createReactNativeComponentClass({
    validAttributes: mergeFast(ReactNativeViewAttributes.UIView, {
      isHighlighted: true
    }),
    uiViewClassName: 'RCTVirtualText'
  });
}

module.exports = Text;
}, 183, null, "Text");
__d(/* Touchable */function(global, require, module, exports) {

'use strict';

var BoundingDimensions = require(185                 ); // 185 = BoundingDimensions
var Platform = require(26        ); // 26 = Platform
var Position = require(186       ); // 186 = Position
var React = require(76     ); // 76 = React
var TVEventHandler = require(187             ); // 187 = TVEventHandler
var TouchEventUtils = require(188                       ); // 188 = fbjs/lib/TouchEventUtils
var UIManager = require(73         ); // 73 = UIManager
var View = require(119   ); // 119 = View

var findNodeHandle = require(74              ); // 74 = findNodeHandle
var keyMirror = require(105                 ); // 105 = fbjs/lib/keyMirror
var normalizeColor = require(18              ); // 18 = normalizeColor

var States = keyMirror({
  NOT_RESPONDER: null,
  RESPONDER_INACTIVE_PRESS_IN: null,
  RESPONDER_INACTIVE_PRESS_OUT: null,
  RESPONDER_ACTIVE_PRESS_IN: null,
  RESPONDER_ACTIVE_PRESS_OUT: null,
  RESPONDER_ACTIVE_LONG_PRESS_IN: null,
  RESPONDER_ACTIVE_LONG_PRESS_OUT: null,
  ERROR: null
});

var IsActive = {
  RESPONDER_ACTIVE_PRESS_OUT: true,
  RESPONDER_ACTIVE_PRESS_IN: true
};

var IsPressingIn = {
  RESPONDER_INACTIVE_PRESS_IN: true,
  RESPONDER_ACTIVE_PRESS_IN: true,
  RESPONDER_ACTIVE_LONG_PRESS_IN: true
};

var IsLongPressingIn = {
  RESPONDER_ACTIVE_LONG_PRESS_IN: true
};

var Signals = keyMirror({
  DELAY: null,
  RESPONDER_GRANT: null,
  RESPONDER_RELEASE: null,
  RESPONDER_TERMINATED: null,
  ENTER_PRESS_RECT: null,
  LEAVE_PRESS_RECT: null,
  LONG_PRESS_DETECTED: null
});

var Transitions = {
  NOT_RESPONDER: {
    DELAY: States.ERROR,
    RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,
    RESPONDER_RELEASE: States.ERROR,
    RESPONDER_TERMINATED: States.ERROR,
    ENTER_PRESS_RECT: States.ERROR,
    LEAVE_PRESS_RECT: States.ERROR,
    LONG_PRESS_DETECTED: States.ERROR
  },
  RESPONDER_INACTIVE_PRESS_IN: {
    DELAY: States.RESPONDER_ACTIVE_PRESS_IN,
    RESPONDER_GRANT: States.ERROR,
    RESPONDER_RELEASE: States.NOT_RESPONDER,
    RESPONDER_TERMINATED: States.NOT_RESPONDER,
    ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,
    LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,
    LONG_PRESS_DETECTED: States.ERROR
  },
  RESPONDER_INACTIVE_PRESS_OUT: {
    DELAY: States.RESPONDER_ACTIVE_PRESS_OUT,
    RESPONDER_GRANT: States.ERROR,
    RESPONDER_RELEASE: States.NOT_RESPONDER,
    RESPONDER_TERMINATED: States.NOT_RESPONDER,
    ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,
    LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,
    LONG_PRESS_DETECTED: States.ERROR
  },
  RESPONDER_ACTIVE_PRESS_IN: {
    DELAY: States.ERROR,
    RESPONDER_GRANT: States.ERROR,
    RESPONDER_RELEASE: States.NOT_RESPONDER,
    RESPONDER_TERMINATED: States.NOT_RESPONDER,
    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,
    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,
    LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN
  },
  RESPONDER_ACTIVE_PRESS_OUT: {
    DELAY: States.ERROR,
    RESPONDER_GRANT: States.ERROR,
    RESPONDER_RELEASE: States.NOT_RESPONDER,
    RESPONDER_TERMINATED: States.NOT_RESPONDER,
    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,
    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,
    LONG_PRESS_DETECTED: States.ERROR
  },
  RESPONDER_ACTIVE_LONG_PRESS_IN: {
    DELAY: States.ERROR,
    RESPONDER_GRANT: States.ERROR,
    RESPONDER_RELEASE: States.NOT_RESPONDER,
    RESPONDER_TERMINATED: States.NOT_RESPONDER,
    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,
    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,
    LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN
  },
  RESPONDER_ACTIVE_LONG_PRESS_OUT: {
    DELAY: States.ERROR,
    RESPONDER_GRANT: States.ERROR,
    RESPONDER_RELEASE: States.NOT_RESPONDER,
    RESPONDER_TERMINATED: States.NOT_RESPONDER,
    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,
    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,
    LONG_PRESS_DETECTED: States.ERROR
  },
  error: {
    DELAY: States.NOT_RESPONDER,
    RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,
    RESPONDER_RELEASE: States.NOT_RESPONDER,
    RESPONDER_TERMINATED: States.NOT_RESPONDER,
    ENTER_PRESS_RECT: States.NOT_RESPONDER,
    LEAVE_PRESS_RECT: States.NOT_RESPONDER,
    LONG_PRESS_DETECTED: States.NOT_RESPONDER
  }
};

var HIGHLIGHT_DELAY_MS = 130;

var PRESS_EXPAND_PX = 20;

var LONG_PRESS_THRESHOLD = 500;

var LONG_PRESS_DELAY_MS = LONG_PRESS_THRESHOLD - HIGHLIGHT_DELAY_MS;

var LONG_PRESS_ALLOWED_MOVEMENT = 10;

var TouchableMixin = {
  componentDidMount: function componentDidMount() {
    if (!Platform.isTVOS) {
      return;
    }

    this._tvEventHandler = new TVEventHandler();
    this._tvEventHandler.enable(this, function (cmp, evt) {
      var myTag = findNodeHandle(cmp);
      evt.dispatchConfig = {};
      if (myTag === evt.tag) {
        if (evt.eventType === 'focus') {
          cmp.touchableHandleActivePressIn && cmp.touchableHandleActivePressIn(evt);
        } else if (evt.eventType === 'blur') {
          cmp.touchableHandleActivePressOut && cmp.touchableHandleActivePressOut(evt);
        } else if (evt.eventType === 'select') {
          cmp.touchableHandlePress && cmp.touchableHandlePress(evt);
        }
      }
    });
  },

  componentWillUnmount: function componentWillUnmount() {
    if (this._tvEventHandler) {
      this._tvEventHandler.disable();
      delete this._tvEventHandler;
    }
    this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);
    this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);
    this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);
  },

  touchableGetInitialState: function touchableGetInitialState() {
    return {
      touchable: { touchState: undefined, responderID: null }
    };
  },

  touchableHandleResponderTerminationRequest: function touchableHandleResponderTerminationRequest() {
    return !this.props.rejectResponderTermination;
  },

  touchableHandleStartShouldSetResponder: function touchableHandleStartShouldSetResponder() {
    return !this.props.disabled;
  },

  touchableLongPressCancelsPress: function touchableLongPressCancelsPress() {
    return true;
  },

  touchableHandleResponderGrant: function touchableHandleResponderGrant(e) {
    var dispatchID = e.currentTarget;

    e.persist();

    this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);
    this.pressOutDelayTimeout = null;

    this.state.touchable.touchState = States.NOT_RESPONDER;
    this.state.touchable.responderID = dispatchID;
    this._receiveSignal(Signals.RESPONDER_GRANT, e);
    var delayMS = this.touchableGetHighlightDelayMS !== undefined ? Math.max(this.touchableGetHighlightDelayMS(), 0) : HIGHLIGHT_DELAY_MS;
    delayMS = isNaN(delayMS) ? HIGHLIGHT_DELAY_MS : delayMS;
    if (delayMS !== 0) {
      this.touchableDelayTimeout = setTimeout(this._handleDelay.bind(this, e), delayMS);
    } else {
      this._handleDelay(e);
    }

    var longDelayMS = this.touchableGetLongPressDelayMS !== undefined ? Math.max(this.touchableGetLongPressDelayMS(), 10) : LONG_PRESS_DELAY_MS;
    longDelayMS = isNaN(longDelayMS) ? LONG_PRESS_DELAY_MS : longDelayMS;
    this.longPressDelayTimeout = setTimeout(this._handleLongDelay.bind(this, e), longDelayMS + delayMS);
  },

  touchableHandleResponderRelease: function touchableHandleResponderRelease(e) {
    this._receiveSignal(Signals.RESPONDER_RELEASE, e);
  },

  touchableHandleResponderTerminate: function touchableHandleResponderTerminate(e) {
    this._receiveSignal(Signals.RESPONDER_TERMINATED, e);
  },

  touchableHandleResponderMove: function touchableHandleResponderMove(e) {
    if (this.state.touchable.touchState === States.RESPONDER_INACTIVE_PRESS_IN) {
      return;
    }

    if (!this.state.touchable.positionOnActivate) {
      return;
    }

    var positionOnActivate = this.state.touchable.positionOnActivate;
    var dimensionsOnActivate = this.state.touchable.dimensionsOnActivate;
    var pressRectOffset = this.touchableGetPressRectOffset ? this.touchableGetPressRectOffset() : {
      left: PRESS_EXPAND_PX,
      right: PRESS_EXPAND_PX,
      top: PRESS_EXPAND_PX,
      bottom: PRESS_EXPAND_PX
    };

    var pressExpandLeft = pressRectOffset.left;
    var pressExpandTop = pressRectOffset.top;
    var pressExpandRight = pressRectOffset.right;
    var pressExpandBottom = pressRectOffset.bottom;

    var hitSlop = this.touchableGetHitSlop ? this.touchableGetHitSlop() : null;

    if (hitSlop) {
      pressExpandLeft += hitSlop.left;
      pressExpandTop += hitSlop.top;
      pressExpandRight += hitSlop.right;
      pressExpandBottom += hitSlop.bottom;
    }

    var touch = TouchEventUtils.extractSingleTouch(e.nativeEvent);
    var pageX = touch && touch.pageX;
    var pageY = touch && touch.pageY;

    if (this.pressInLocation) {
      var movedDistance = this._getDistanceBetweenPoints(pageX, pageY, this.pressInLocation.pageX, this.pressInLocation.pageY);
      if (movedDistance > LONG_PRESS_ALLOWED_MOVEMENT) {
        this._cancelLongPressDelayTimeout();
      }
    }

    var isTouchWithinActive = pageX > positionOnActivate.left - pressExpandLeft && pageY > positionOnActivate.top - pressExpandTop && pageX < positionOnActivate.left + dimensionsOnActivate.width + pressExpandRight && pageY < positionOnActivate.top + dimensionsOnActivate.height + pressExpandBottom;
    if (isTouchWithinActive) {
      this._receiveSignal(Signals.ENTER_PRESS_RECT, e);
      var curState = this.state.touchable.touchState;
      if (curState === States.RESPONDER_INACTIVE_PRESS_IN) {
        this._cancelLongPressDelayTimeout();
      }
    } else {
      this._cancelLongPressDelayTimeout();
      this._receiveSignal(Signals.LEAVE_PRESS_RECT, e);
    }
  },

  _remeasureMetricsOnActivation: function _remeasureMetricsOnActivation() {
    var tag = this.state.touchable.responderID;
    if (tag == null) {
      return;
    }

    UIManager.measure(tag, this._handleQueryLayout);
  },

  _handleQueryLayout: function _handleQueryLayout(l, t, w, h, globalX, globalY) {
    this.state.touchable.positionOnActivate && Position.release(this.state.touchable.positionOnActivate);
    this.state.touchable.dimensionsOnActivate && BoundingDimensions.release(this.state.touchable.dimensionsOnActivate);
    this.state.touchable.positionOnActivate = Position.getPooled(globalX, globalY);
    this.state.touchable.dimensionsOnActivate = BoundingDimensions.getPooled(w, h);
  },

  _handleDelay: function _handleDelay(e) {
    this.touchableDelayTimeout = null;
    this._receiveSignal(Signals.DELAY, e);
  },

  _handleLongDelay: function _handleLongDelay(e) {
    this.longPressDelayTimeout = null;
    var curState = this.state.touchable.touchState;
    if (curState !== States.RESPONDER_ACTIVE_PRESS_IN && curState !== States.RESPONDER_ACTIVE_LONG_PRESS_IN) {
      console.error('Attempted to transition from state `' + curState + '` to `' + States.RESPONDER_ACTIVE_LONG_PRESS_IN + '`, which is not supported. This is ' + 'most likely due to `Touchable.longPressDelayTimeout` not being cancelled.');
    } else {
      this._receiveSignal(Signals.LONG_PRESS_DETECTED, e);
    }
  },

  _receiveSignal: function _receiveSignal(signal, e) {
    var responderID = this.state.touchable.responderID;
    var curState = this.state.touchable.touchState;
    var nextState = Transitions[curState] && Transitions[curState][signal];
    if (!responderID && signal === Signals.RESPONDER_RELEASE) {
      return;
    }
    if (!nextState) {
      throw new Error('Unrecognized signal `' + signal + '` or state `' + curState + '` for Touchable responder `' + responderID + '`');
    }
    if (nextState === States.ERROR) {
      throw new Error('Touchable cannot transition from `' + curState + '` to `' + signal + '` for responder `' + responderID + '`');
    }
    if (curState !== nextState) {
      this._performSideEffectsForTransition(curState, nextState, signal, e);
      this.state.touchable.touchState = nextState;
    }
  },

  _cancelLongPressDelayTimeout: function _cancelLongPressDelayTimeout() {
    this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);
    this.longPressDelayTimeout = null;
  },

  _isHighlight: function _isHighlight(state) {
    return state === States.RESPONDER_ACTIVE_PRESS_IN || state === States.RESPONDER_ACTIVE_LONG_PRESS_IN;
  },

  _savePressInLocation: function _savePressInLocation(e) {
    var touch = TouchEventUtils.extractSingleTouch(e.nativeEvent);
    var pageX = touch && touch.pageX;
    var pageY = touch && touch.pageY;
    var locationX = touch && touch.locationX;
    var locationY = touch && touch.locationY;
    this.pressInLocation = { pageX: pageX, pageY: pageY, locationX: locationX, locationY: locationY };
  },

  _getDistanceBetweenPoints: function _getDistanceBetweenPoints(aX, aY, bX, bY) {
    var deltaX = aX - bX;
    var deltaY = aY - bY;
    return Math.sqrt(deltaX * deltaX + deltaY * deltaY);
  },

  _performSideEffectsForTransition: function _performSideEffectsForTransition(curState, nextState, signal, e) {
    var curIsHighlight = this._isHighlight(curState);
    var newIsHighlight = this._isHighlight(nextState);

    var isFinalSignal = signal === Signals.RESPONDER_TERMINATED || signal === Signals.RESPONDER_RELEASE;

    if (isFinalSignal) {
      this._cancelLongPressDelayTimeout();
    }

    if (!IsActive[curState] && IsActive[nextState]) {
      this._remeasureMetricsOnActivation();
    }

    if (IsPressingIn[curState] && signal === Signals.LONG_PRESS_DETECTED) {
      this.touchableHandleLongPress && this.touchableHandleLongPress(e);
    }

    if (newIsHighlight && !curIsHighlight) {
      this._startHighlight(e);
    } else if (!newIsHighlight && curIsHighlight) {
      this._endHighlight(e);
    }

    if (IsPressingIn[curState] && signal === Signals.RESPONDER_RELEASE) {
      var hasLongPressHandler = !!this.props.onLongPress;
      var pressIsLongButStillCallOnPress = IsLongPressingIn[curState] && (!hasLongPressHandler || !this.touchableLongPressCancelsPress());

      var shouldInvokePress = !IsLongPressingIn[curState] || pressIsLongButStillCallOnPress;
      if (shouldInvokePress && this.touchableHandlePress) {
        if (!newIsHighlight && !curIsHighlight) {
          this._startHighlight(e);
          this._endHighlight(e);
        }
        this.touchableHandlePress(e);
      }
    }

    this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);
    this.touchableDelayTimeout = null;
  },

  _startHighlight: function _startHighlight(e) {
    this._savePressInLocation(e);
    this.touchableHandleActivePressIn && this.touchableHandleActivePressIn(e);
  },

  _endHighlight: function _endHighlight(e) {
    var _this = this;

    if (this.touchableHandleActivePressOut) {
      if (this.touchableGetPressOutDelayMS && this.touchableGetPressOutDelayMS()) {
        this.pressOutDelayTimeout = setTimeout(function () {
          _this.touchableHandleActivePressOut(e);
        }, this.touchableGetPressOutDelayMS());
      } else {
        this.touchableHandleActivePressOut(e);
      }
    }
  }

};

var Touchable = {
  Mixin: TouchableMixin,
  TOUCH_TARGET_DEBUG: false,
  renderDebugView: function renderDebugView(_ref) {
    var color = _ref.color,
        hitSlop = _ref.hitSlop;

    if (!Touchable.TOUCH_TARGET_DEBUG) {
      return null;
    }
    if (!__DEV__) {
      throw Error('Touchable.TOUCH_TARGET_DEBUG should not be enabled in prod!');
    }
    var debugHitSlopStyle = {};
    hitSlop = hitSlop || { top: 0, bottom: 0, left: 0, right: 0 };
    for (var key in hitSlop) {
      debugHitSlopStyle[key] = -hitSlop[key];
    }
    var hexColor = '#' + ('00000000' + normalizeColor(color).toString(16)).substr(-8);
    return React.createElement(View, {
      pointerEvents: 'none',
      style: babelHelpers.extends({
        position: 'absolute',
        borderColor: hexColor.slice(0, -2) + '55',
        borderWidth: 1,
        borderStyle: 'dashed',
        backgroundColor: hexColor.slice(0, -2) + '0F' }, debugHitSlopStyle)
    });
  }
};

module.exports = Touchable;
}, 184, null, "Touchable");
__d(/* BoundingDimensions */function(global, require, module, exports) {

'use strict';

var PooledClass = require(80                     ); // 80 = react/lib/PooledClass

var twoArgumentPooler = PooledClass.twoArgumentPooler;

function BoundingDimensions(width, height) {
  this.width = width;
  this.height = height;
}

BoundingDimensions.prototype.destructor = function () {
  this.width = null;
  this.height = null;
};

BoundingDimensions.getPooledFromElement = function (element) {
  return BoundingDimensions.getPooled(element.offsetWidth, element.offsetHeight);
};

PooledClass.addPoolingTo(BoundingDimensions, twoArgumentPooler);

module.exports = BoundingDimensions;
}, 185, null, "BoundingDimensions");
__d(/* Position */function(global, require, module, exports) {

'use strict';

var PooledClass = require(80                     ); // 80 = react/lib/PooledClass

var twoArgumentPooler = PooledClass.twoArgumentPooler;

function Position(left, top) {
  this.left = left;
  this.top = top;
}

Position.prototype.destructor = function () {
  this.left = null;
  this.top = null;
};

PooledClass.addPoolingTo(Position, twoArgumentPooler);

module.exports = Position;
}, 186, null, "Position");
__d(/* TVEventHandler */function(global, require, module, exports) {
'use strict';

function TVEventHandler() {}

TVEventHandler.prototype.enable = function (component, callback) {};

TVEventHandler.prototype.disable = function () {};

module.exports = TVEventHandler;
}, 187, null, "TVEventHandler");
__d(/* fbjs/lib/TouchEventUtils.js */function(global, require, module, exports) {"use strict";

var TouchEventUtils = {
  extractSingleTouch: function extractSingleTouch(nativeEvent) {
    var touches = nativeEvent.touches;
    var changedTouches = nativeEvent.changedTouches;
    var hasTouches = touches && touches.length > 0;
    var hasChangedTouches = changedTouches && changedTouches.length > 0;

    return !hasTouches && hasChangedTouches ? changedTouches[0] : hasTouches ? touches[0] : nativeEvent;
  }
};

module.exports = TouchEventUtils;
}, 188, null, "fbjs/lib/TouchEventUtils.js");
__d(/* mergeFast */function(global, require, module, exports) {
'use strict';

var mergeFast = function mergeFast(one, two) {
  var ret = {};
  for (var keyOne in one) {
    ret[keyOne] = one[keyOne];
  }
  for (var keyTwo in two) {
    ret[keyTwo] = two[keyTwo];
  }
  return ret;
};

module.exports = mergeFast;
}, 189, null, "mergeFast");
__d(/* TouchableNativeFeedback */function(global, require, module, exports) {
'use strict';

var Platform = require(26        ); // 26 = Platform
var React = require(76     ); // 76 = React
var ReactNative = require(191          ); // 191 = ReactNative
var Touchable = require(184        ); // 184 = Touchable
var TouchableWithoutFeedback = require(247                       ); // 247 = TouchableWithoutFeedback
var UIManager = require(73         ); // 73 = UIManager

var ensurePositiveDelayProps = require(249                       ); // 249 = ensurePositiveDelayProps
var processColor = require(114           ); // 114 = processColor

var PropTypes = React.PropTypes;

var rippleBackgroundPropType = PropTypes.shape({
  type: React.PropTypes.oneOf(['RippleAndroid']),
  color: PropTypes.number,
  borderless: PropTypes.bool
});

var themeAttributeBackgroundPropType = PropTypes.shape({
  type: React.PropTypes.oneOf(['ThemeAttrAndroid']),
  attribute: PropTypes.string.isRequired
});

var backgroundPropType = PropTypes.oneOfType([rippleBackgroundPropType, themeAttributeBackgroundPropType]);

var PRESS_RETENTION_OFFSET = { top: 20, left: 20, right: 20, bottom: 30 };

var TouchableNativeFeedback = React.createClass({
  displayName: 'TouchableNativeFeedback',

  propTypes: babelHelpers.extends({}, TouchableWithoutFeedback.propTypes, {
    background: backgroundPropType,

    useForeground: PropTypes.bool
  }),

  statics: {
    SelectableBackground: function SelectableBackground() {
      return { type: 'ThemeAttrAndroid', attribute: 'selectableItemBackground' };
    },

    SelectableBackgroundBorderless: function SelectableBackgroundBorderless() {
      return { type: 'ThemeAttrAndroid', attribute: 'selectableItemBackgroundBorderless' };
    },

    Ripple: function Ripple(color, borderless) {
      return { type: 'RippleAndroid', color: processColor(color), borderless: borderless };
    },

    canUseNativeForeground: function canUseNativeForeground() {
      return Platform.OS === 'android' && Platform.Version >= 23;
    }
  },

  mixins: [Touchable.Mixin],

  getDefaultProps: function getDefaultProps() {
    return {
      background: this.SelectableBackground()
    };
  },

  getInitialState: function getInitialState() {
    return this.touchableGetInitialState();
  },

  componentDidMount: function componentDidMount() {
    ensurePositiveDelayProps(this.props);
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    ensurePositiveDelayProps(nextProps);
  },

  touchableHandleActivePressIn: function touchableHandleActivePressIn(e) {
    this.props.onPressIn && this.props.onPressIn(e);
    this._dispatchPressedStateChange(true);
    this._dispatchHotspotUpdate(this.pressInLocation.locationX, this.pressInLocation.locationY);
  },

  touchableHandleActivePressOut: function touchableHandleActivePressOut(e) {
    this.props.onPressOut && this.props.onPressOut(e);
    this._dispatchPressedStateChange(false);
  },

  touchableHandlePress: function touchableHandlePress(e) {
    this.props.onPress && this.props.onPress(e);
  },

  touchableHandleLongPress: function touchableHandleLongPress(e) {
    this.props.onLongPress && this.props.onLongPress(e);
  },

  touchableGetPressRectOffset: function touchableGetPressRectOffset() {
    return this.props.pressRetentionOffset || PRESS_RETENTION_OFFSET;
  },

  touchableGetHitSlop: function touchableGetHitSlop() {
    return this.props.hitSlop;
  },

  touchableGetHighlightDelayMS: function touchableGetHighlightDelayMS() {
    return this.props.delayPressIn;
  },

  touchableGetLongPressDelayMS: function touchableGetLongPressDelayMS() {
    return this.props.delayLongPress;
  },

  touchableGetPressOutDelayMS: function touchableGetPressOutDelayMS() {
    return this.props.delayPressOut;
  },

  _handleResponderMove: function _handleResponderMove(e) {
    this.touchableHandleResponderMove(e);
    this._dispatchHotspotUpdate(e.nativeEvent.locationX, e.nativeEvent.locationY);
  },

  _dispatchHotspotUpdate: function _dispatchHotspotUpdate(destX, destY) {
    UIManager.dispatchViewManagerCommand(ReactNative.findNodeHandle(this), UIManager.RCTView.Commands.hotspotUpdate, [destX || 0, destY || 0]);
  },

  _dispatchPressedStateChange: function _dispatchPressedStateChange(pressed) {
    UIManager.dispatchViewManagerCommand(ReactNative.findNodeHandle(this), UIManager.RCTView.Commands.setPressed, [pressed]);
  },

  render: function render() {
    var _babelHelpers$extends;

    var child = React.Children.only(this.props.children);
    var children = child.props.children;
    if (Touchable.TOUCH_TARGET_DEBUG && child.type.displayName === 'View') {
      if (!Array.isArray(children)) {
        children = [children];
      }
      children.push(Touchable.renderDebugView({ color: 'brown', hitSlop: this.props.hitSlop }));
    }
    if (this.props.useForeground && !TouchableNativeFeedback.canUseNativeForeground()) {
      console.warn('Requested foreground ripple, but it is not available on this version of Android. ' + 'Consider calling TouchableNativeFeedback.canUseNativeForeground() and using a different ' + 'Touchable if the result is false.');
    }
    var drawableProp = this.props.useForeground && TouchableNativeFeedback.canUseNativeForeground() ? 'nativeForegroundAndroid' : 'nativeBackgroundAndroid';
    var childProps = babelHelpers.extends({}, child.props, (_babelHelpers$extends = {}, babelHelpers.defineProperty(_babelHelpers$extends, drawableProp, this.props.background), babelHelpers.defineProperty(_babelHelpers$extends, 'accessible', this.props.accessible !== false), babelHelpers.defineProperty(_babelHelpers$extends, 'accessibilityLabel', this.props.accessibilityLabel), babelHelpers.defineProperty(_babelHelpers$extends, 'accessibilityComponentType', this.props.accessibilityComponentType), babelHelpers.defineProperty(_babelHelpers$extends, 'accessibilityTraits', this.props.accessibilityTraits), babelHelpers.defineProperty(_babelHelpers$extends, 'children', children), babelHelpers.defineProperty(_babelHelpers$extends, 'testID', this.props.testID), babelHelpers.defineProperty(_babelHelpers$extends, 'onLayout', this.props.onLayout), babelHelpers.defineProperty(_babelHelpers$extends, 'hitSlop', this.props.hitSlop), babelHelpers.defineProperty(_babelHelpers$extends, 'onStartShouldSetResponder', this.touchableHandleStartShouldSetResponder), babelHelpers.defineProperty(_babelHelpers$extends, 'onResponderTerminationRequest', this.touchableHandleResponderTerminationRequest), babelHelpers.defineProperty(_babelHelpers$extends, 'onResponderGrant', this.touchableHandleResponderGrant), babelHelpers.defineProperty(_babelHelpers$extends, 'onResponderMove', this._handleResponderMove), babelHelpers.defineProperty(_babelHelpers$extends, 'onResponderRelease', this.touchableHandleResponderRelease), babelHelpers.defineProperty(_babelHelpers$extends, 'onResponderTerminate', this.touchableHandleResponderTerminate), _babelHelpers$extends));

    return React.cloneElement(child, childProps);
  }
});

module.exports = TouchableNativeFeedback;
}, 190, null, "TouchableNativeFeedback");
__d(/* ReactNative */function(global, require, module, exports) {
'use strict';

var ReactNativeComponentTree = require(132                       ); // 132 = ReactNativeComponentTree
var ReactNativeDefaultInjection = require(192                          ); // 192 = ReactNativeDefaultInjection

var ReactNativeMount = require(221               ); // 221 = ReactNativeMount
var ReactUpdates = require(142           ); // 142 = ReactUpdates

var findNodeHandle = require(74              ); // 74 = findNodeHandle

ReactNativeDefaultInjection.inject();

var render = function render(element, mountInto, callback) {
  return ReactNativeMount.renderComponent(element, mountInto, callback);
};

var ReactNative = {
  hasReactNativeInitialized: false,
  findNodeHandle: findNodeHandle,
  render: render,
  unmountComponentAtNode: ReactNativeMount.unmountComponentAtNode,

  unstable_batchedUpdates: ReactUpdates.batchedUpdates,


  unmountComponentAtNodeAndRemoveContainer: ReactNativeMount.unmountComponentAtNodeAndRemoveContainer
};

if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
    ComponentTree: {
      getClosestInstanceFromNode: function getClosestInstanceFromNode(node) {
        return ReactNativeComponentTree.getClosestInstanceFromNode(node);
      },
      getNodeFromInstance: function getNodeFromInstance(inst) {
        while (inst._renderedComponent) {
          inst = inst._renderedComponent;
        }
        if (inst) {
          return ReactNativeComponentTree.getNodeFromInstance(inst);
        } else {
          return null;
        }
      }
    },
    Mount: ReactNativeMount,
    Reconciler: require(146              ) // 146 = ReactReconciler
  });
}

module.exports = ReactNative;
}, 191, null, "ReactNative");
__d(/* ReactNativeDefaultInjection */function(global, require, module, exports) {
'use strict';

require(193             ); // 193 = InitializeCore

var EventPluginHub = require(134             ); // 134 = EventPluginHub
var EventPluginUtils = require(136               ); // 136 = EventPluginUtils
var RCTEventEmitter = require(230              ); // 230 = RCTEventEmitter
var React = require(76     ); // 76 = React
var ReactComponentEnvironment = require(152                        ); // 152 = ReactComponentEnvironment
var ReactDefaultBatchingStrategy = require(231                           ); // 231 = ReactDefaultBatchingStrategy
var ReactEmptyComponent = require(162                  ); // 162 = ReactEmptyComponent
var ReactNativeBridgeEventPlugin = require(232                           ); // 232 = ReactNativeBridgeEventPlugin
var ReactHostComponent = require(163                 ); // 163 = ReactHostComponent
var ReactNativeComponentEnvironment = require(235                              ); // 235 = ReactNativeComponentEnvironment
var ReactNativeComponentTree = require(132                       ); // 132 = ReactNativeComponentTree
var ReactNativeEventEmitter = require(133                      ); // 133 = ReactNativeEventEmitter
var ReactNativeEventPluginOrder = require(238                          ); // 238 = ReactNativeEventPluginOrder
var ReactNativeGlobalResponderHandler = require(239                                ); // 239 = ReactNativeGlobalResponderHandler
var ReactNativeTextComponent = require(240                       ); // 240 = ReactNativeTextComponent
var ReactNativeTreeTraversal = require(241                       ); // 241 = ReactNativeTreeTraversal
var ReactSimpleEmptyComponent = require(242                        ); // 242 = ReactSimpleEmptyComponent
var ReactUpdates = require(142           ); // 142 = ReactUpdates
var ResponderEventPlugin = require(243                   ); // 243 = ResponderEventPlugin

var invariant = require(24                  ); // 24 = fbjs/lib/invariant

function inject() {
  RCTEventEmitter.register(ReactNativeEventEmitter);

  EventPluginHub.injection.injectEventPluginOrder(ReactNativeEventPluginOrder);
  EventPluginUtils.injection.injectComponentTree(ReactNativeComponentTree);
  EventPluginUtils.injection.injectTreeTraversal(ReactNativeTreeTraversal);

  ResponderEventPlugin.injection.injectGlobalResponderHandler(ReactNativeGlobalResponderHandler);

  EventPluginHub.injection.injectEventPluginsByName({
    'ResponderEventPlugin': ResponderEventPlugin,
    'ReactNativeBridgeEventPlugin': ReactNativeBridgeEventPlugin
  });

  ReactUpdates.injection.injectReconcileTransaction(ReactNativeComponentEnvironment.ReactReconcileTransaction);

  ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);

  ReactComponentEnvironment.injection.injectEnvironment(ReactNativeComponentEnvironment);

  var EmptyComponent = function EmptyComponent(instantiate) {
    var View = require(119   ); // 119 = View
    return new ReactSimpleEmptyComponent(React.createElement(View, {
      collapsable: true,
      style: { position: 'absolute' }
    }), instantiate);
  };

  ReactEmptyComponent.injection.injectEmptyComponentFactory(EmptyComponent);

  ReactHostComponent.injection.injectTextComponentClass(ReactNativeTextComponent);
  ReactHostComponent.injection.injectGenericComponentClass(function (tag) {
    var info = '';
    if (typeof tag === 'string' && /^[a-z]/.test(tag)) {
      info += ' Each component name should start with an uppercase letter.';
    }
    invariant(false, 'Expected a component class, got %s.%s', tag, info);
  });
}

module.exports = {
  inject: inject
};
}, 192, null, "ReactNativeDefaultInjection");
__d(/* InitializeCore */function(global, require, module, exports) {
'use strict';

if (global.GLOBAL === undefined) {
  global.GLOBAL = global;
}

if (global.window === undefined) {
  global.window = global;
}

var defineLazyObjectProperty = require(72                        ); // 72 = defineLazyObjectProperty

function defineProperty(object, name, getValue, eager) {
  var descriptor = Object.getOwnPropertyDescriptor(object, name);
  if (descriptor) {
    var backupName = 'original' + name[0].toUpperCase() + name.substr(1);
    Object.defineProperty(object, backupName, babelHelpers.extends({}, descriptor, {
      value: object[name]
    }));
  }

  var _ref = descriptor || {},
      enumerable = _ref.enumerable,
      writable = _ref.writable,
      configurable = _ref.configurable;

  if (descriptor && !configurable) {
    console.error('Failed to set polyfill. ' + name + ' is not configurable.');
    return;
  }

  if (eager === true) {
    Object.defineProperty(object, name, {
      configurable: true,
      enumerable: enumerable !== false,
      writable: writable !== false,
      value: getValue()
    });
  } else {
    defineLazyObjectProperty(object, name, {
      get: getValue,
      enumerable: enumerable !== false,
      writable: writable !== false
    });
  }
}

global.process = global.process || {};
global.process.env = global.process.env || {};
if (!global.process.env.NODE_ENV) {
  global.process.env.NODE_ENV = __DEV__ ? 'development' : 'production';
}

var Systrace = require(32        ); // 32 = Systrace
Systrace.setEnabled(global.__RCTProfileIsProfiling || false);

var ExceptionsManager = require(194                ); // 194 = ExceptionsManager
ExceptionsManager.installConsoleErrorReporter();

require(199     ); // 199 = RCTLog

if (!global.__fbDisableExceptionsManager) {
  var handleError = function handleError(e, isFatal) {
    try {
      ExceptionsManager.handleException(e, isFatal);
    } catch (ee) {
      console.log('Failed to print error: ', ee.message);

      throw e;
    }
  };

  var ErrorUtils = require(30          ); // 30 = ErrorUtils
  ErrorUtils.setGlobalHandler(handleError);
}

var defineLazyTimer = function defineLazyTimer(name) {
  defineProperty(global, name, function () {
    return require(42        )[name]; // 42 = JSTimers
  });
};
defineLazyTimer('setTimeout');
defineLazyTimer('setInterval');
defineLazyTimer('setImmediate');
defineLazyTimer('clearTimeout');
defineLazyTimer('clearInterval');
defineLazyTimer('clearImmediate');
defineLazyTimer('requestAnimationFrame');
defineLazyTimer('cancelAnimationFrame');
defineLazyTimer('requestIdleCallback');
defineLazyTimer('cancelIdleCallback');

if (!global.alert) {
  global.alert = function (text) {
    require(200    ).alert('Alert', '' + text); // 200 = Alert
  };
}

defineProperty(global, 'Promise', function () {
  return require(202      ); // 202 = Promise
});

defineProperty(global, 'regeneratorRuntime', function () {
  delete global.regeneratorRuntime;
  require(208                          ); // 208 = regenerator-runtime/runtime
  return global.regeneratorRuntime;
});

defineProperty(global, 'XMLHttpRequest', function () {
  return require(209             ); // 209 = XMLHttpRequest
});
defineProperty(global, 'FormData', function () {
  return require(211       ); // 211 = FormData
});

defineProperty(global, 'fetch', function () {
  return require(197    ).fetch; // 197 = fetch
});
defineProperty(global, 'Headers', function () {
  return require(197    ).Headers; // 197 = fetch
});
defineProperty(global, 'Request', function () {
  return require(197    ).Request; // 197 = fetch
});
defineProperty(global, 'Response', function () {
  return require(197    ).Response; // 197 = fetch
});
defineProperty(global, 'WebSocket', function () {
  return require(51         ); // 51 = WebSocket
});

var navigator = global.navigator;
if (navigator === undefined) {
  global.navigator = navigator = {};
}

defineProperty(navigator, 'product', function () {
  return 'ReactNative';
}, true);
defineProperty(navigator, 'geolocation', function () {
  return require(213          ); // 213 = Geolocation
});

defineProperty(global, 'Map', function () {
  return require(214  ); // 214 = Map
}, true);
defineProperty(global, 'Set', function () {
  return require(219  ); // 219 = Set
}, true);

if (__DEV__) {
  if (!window.document) {
    var setupDevtools = require(220            ); // 220 = setupDevtools
    setupDevtools();
  }

  require(224                         ); // 224 = RCTDebugComponentOwnership
}

if (__DEV__) {
  var JSInspector = require(225          ); // 225 = JSInspector
  JSInspector.registerAgent(require(226           )); // 226 = NetworkAgent
}

require(57                     ); // 57 = RCTDeviceEventEmitter
require(228                       ); // 228 = RCTNativeAppEventEmitter
require(229                ); // 229 = PerformanceLogger
}, 193, null, "InitializeCore");
__d(/* ExceptionsManager */function(global, require, module, exports) {
'use strict';

var exceptionID = 0;
function reportException(e, isFatal) {
  var _require = require(27             ), // 27 = NativeModules
      ExceptionsManager = _require.ExceptionsManager;

  if (ExceptionsManager) {
    var parseErrorStack = require(43               ); // 43 = parseErrorStack
    var stack = parseErrorStack(e);
    var currentExceptionID = ++exceptionID;
    if (isFatal) {
      ExceptionsManager.reportFatalException(e.message, stack, currentExceptionID);
    } else {
      ExceptionsManager.reportSoftException(e.message, stack, currentExceptionID);
    }
    if (__DEV__) {
      var symbolicateStackTrace = require(195                    ); // 195 = symbolicateStackTrace
      symbolicateStackTrace(stack).then(function (prettyStack) {
        if (prettyStack) {
          ExceptionsManager.updateExceptionMessage(e.message, prettyStack, currentExceptionID);
        } else {
          throw new Error('The stack is null');
        }
      }).catch(function (error) {
        return console.warn('Unable to symbolicate stack trace: ' + error.message);
      });
    }
  }
}

function handleException(e, isFatal) {
  if (!e.message) {
    e = new Error(e);
  }
  if (console._errorOriginal) {
    console._errorOriginal(e.message);
  } else {
    console.error(e.message);
  }
  reportException(e, isFatal);
}

function reactConsoleErrorHandler() {
  console._errorOriginal.apply(console, arguments);
  if (!console.reportErrorsAsExceptions) {
    return;
  }

  if (arguments[0] && arguments[0].stack) {
    reportException(arguments[0], false);
  } else {
    var stringifySafe = require(47             ); // 47 = stringifySafe
    var str = Array.prototype.map.call(arguments, stringifySafe).join(', ');
    if (str.slice(0, 10) === '"Warning: ') {
      return;
    }
    var error = new Error('console.error: ' + str);
    error.framesToPop = 1;
    reportException(error, false);
  }
}

function installConsoleErrorReporter() {
  if (console._errorOriginal) {
    return;
  }

  console._errorOriginal = console.error.bind(console);
  console.error = reactConsoleErrorHandler;
  if (console.reportErrorsAsExceptions === undefined) {
    console.reportErrorsAsExceptions = true;
  }
}

module.exports = { handleException: handleException, installConsoleErrorReporter: installConsoleErrorReporter };
}, 194, null, "ExceptionsManager");
__d(/* symbolicateStackTrace */function(global, require, module, exports) {
'use strict';

var getDevServer = require(196           ); // 196 = getDevServer

var _require = require(27             ), // 27 = NativeModules
    SourceCode = _require.SourceCode;

var fetch = void 0;

function isSourcedFromDisk(sourcePath) {
  return !/^http/.test(sourcePath) && /[\\/]/.test(sourcePath);
}

function symbolicateStackTrace(stack) {
  var devServer, stackCopy, foundInternalSource, response, json;
  return regeneratorRuntime.async(function symbolicateStackTrace$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          if (!fetch) {
            fetch = global.fetch || require(197    ).fetch; // 197 = fetch
          }

          devServer = getDevServer();

          if (devServer.bundleLoadedFromServer) {
            _context.next = 4;
            break;
          }

          throw new Error('Bundle was not loaded from the packager');

        case 4:
          stackCopy = stack;


          if (SourceCode.scriptURL) {
            foundInternalSource = false;

            stackCopy = stack.map(function (frame) {
              if (!foundInternalSource && isSourcedFromDisk(frame.file)) {
                return babelHelpers.extends({}, frame, { file: SourceCode.scriptURL });
              }

              foundInternalSource = true;
              return frame;
            });
          }

          _context.next = 8;
          return regeneratorRuntime.awrap(fetch(devServer.url + 'symbolicate', {
            method: 'POST',
            body: JSON.stringify({ stack: stackCopy })
          }));

        case 8:
          response = _context.sent;
          _context.next = 11;
          return regeneratorRuntime.awrap(response.json());

        case 11:
          json = _context.sent;
          return _context.abrupt('return', json.stack);

        case 13:
        case 'end':
          return _context.stop();
      }
    }
  }, null, this);
}

module.exports = symbolicateStackTrace;
}, 195, null, "symbolicateStackTrace");
__d(/* getDevServer */function(global, require, module, exports) {
'use strict';

var _require = require(27             ), // 27 = NativeModules
    SourceCode = _require.SourceCode;

var _cachedDevServerURL = void 0;
var FALLBACK = 'http://localhost:8081/';

function getDevServer() {
  if (_cachedDevServerURL === undefined) {
    var match = SourceCode.scriptURL && SourceCode.scriptURL.match(/^https?:\/\/.*?\//);
    _cachedDevServerURL = match ? match[0] : null;
  }

  return {
    url: _cachedDevServerURL || FALLBACK,
    bundleLoadedFromServer: _cachedDevServerURL !== null
  };
}

module.exports = getDevServer;
}, 196, null, "getDevServer");
__d(/* fetch */function(global, require, module, exports) {
'use strict';

require(198           ); // 198 = whatwg-fetch

module.exports = { fetch: fetch, Headers: Headers, Request: Request, Response: Response };
}, 197, null, "fetch");
__d(/* whatwg-fetch/fetch.js */function(global, require, module, exports) {(function (self) {
  'use strict';

  if (self.fetch) {
    return;
  }

  var support = {
    searchParams: 'URLSearchParams' in self,
    iterable: 'Symbol' in self && 'iterator' in Symbol,
    blob: 'FileReader' in self && 'Blob' in self && function () {
      try {
        new Blob();
        return true;
      } catch (e) {
        return false;
      }
    }(),
    formData: 'FormData' in self,
    arrayBuffer: 'ArrayBuffer' in self
  };

  if (support.arrayBuffer) {
    var viewClasses = ['[object Int8Array]', '[object Uint8Array]', '[object Uint8ClampedArray]', '[object Int16Array]', '[object Uint16Array]', '[object Int32Array]', '[object Uint32Array]', '[object Float32Array]', '[object Float64Array]'];

    var isDataView = function isDataView(obj) {
      return obj && DataView.prototype.isPrototypeOf(obj);
    };

    var isArrayBufferView = ArrayBuffer.isView || function (obj) {
      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
    };
  }

  function normalizeName(name) {
    if (typeof name !== 'string') {
      name = String(name);
    }
    if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {
      throw new TypeError('Invalid character in header field name');
    }
    return name.toLowerCase();
  }

  function normalizeValue(value) {
    if (typeof value !== 'string') {
      value = String(value);
    }
    return value;
  }

  function iteratorFor(items) {
    var iterator = {
      next: function next() {
        var value = items.shift();
        return { done: value === undefined, value: value };
      }
    };

    if (support.iterable) {
      iterator[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator'] = function () {
        return iterator;
      };
    }

    return iterator;
  }

  function Headers(headers) {
    this.map = {};

    if (headers instanceof Headers) {
      headers.forEach(function (value, name) {
        this.append(name, value);
      }, this);
    } else if (headers) {
      Object.getOwnPropertyNames(headers).forEach(function (name) {
        this.append(name, headers[name]);
      }, this);
    }
  }

  Headers.prototype.append = function (name, value) {
    name = normalizeName(name);
    value = normalizeValue(value);
    var list = this.map[name];
    if (!list) {
      list = [];
      this.map[name] = list;
    }
    list.push(value);
  };

  Headers.prototype['delete'] = function (name) {
    delete this.map[normalizeName(name)];
  };

  Headers.prototype.get = function (name) {
    var values = this.map[normalizeName(name)];
    return values ? values[0] : null;
  };

  Headers.prototype.getAll = function (name) {
    return this.map[normalizeName(name)] || [];
  };

  Headers.prototype.has = function (name) {
    return this.map.hasOwnProperty(normalizeName(name));
  };

  Headers.prototype.set = function (name, value) {
    this.map[normalizeName(name)] = [normalizeValue(value)];
  };

  Headers.prototype.forEach = function (callback, thisArg) {
    Object.getOwnPropertyNames(this.map).forEach(function (name) {
      this.map[name].forEach(function (value) {
        callback.call(thisArg, value, name, this);
      }, this);
    }, this);
  };

  Headers.prototype.keys = function () {
    var items = [];
    this.forEach(function (value, name) {
      items.push(name);
    });
    return iteratorFor(items);
  };

  Headers.prototype.values = function () {
    var items = [];
    this.forEach(function (value) {
      items.push(value);
    });
    return iteratorFor(items);
  };

  Headers.prototype.entries = function () {
    var items = [];
    this.forEach(function (value, name) {
      items.push([name, value]);
    });
    return iteratorFor(items);
  };

  if (support.iterable) {
    Headers.prototype[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator'] = Headers.prototype.entries;
  }

  function consumed(body) {
    if (body.bodyUsed) {
      return Promise.reject(new TypeError('Already read'));
    }
    body.bodyUsed = true;
  }

  function fileReaderReady(reader) {
    return new Promise(function (resolve, reject) {
      reader.onload = function () {
        resolve(reader.result);
      };
      reader.onerror = function () {
        reject(reader.error);
      };
    });
  }

  function readBlobAsArrayBuffer(blob) {
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    reader.readAsArrayBuffer(blob);
    return promise;
  }

  function readBlobAsText(blob) {
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    reader.readAsText(blob);
    return promise;
  }

  function readArrayBufferAsText(buf) {
    var view = new Uint8Array(buf);
    var chars = new Array(view.length);

    for (var i = 0; i < view.length; i++) {
      chars[i] = String.fromCharCode(view[i]);
    }
    return chars.join('');
  }

  function bufferClone(buf) {
    if (buf.slice) {
      return buf.slice(0);
    } else {
      var view = new Uint8Array(buf.byteLength);
      view.set(new Uint8Array(buf));
      return view.buffer;
    }
  }

  function Body() {
    this.bodyUsed = false;

    this._initBody = function (body) {
      this._bodyInit = body;
      if (!body) {
        this._bodyText = '';
      } else if (typeof body === 'string') {
        this._bodyText = body;
      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
        this._bodyBlob = body;
      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
        this._bodyFormData = body;
      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
        this._bodyText = body.toString();
      } else if (support.arrayBuffer && support.blob && isDataView(body)) {
        this._bodyArrayBuffer = bufferClone(body.buffer);

        this._bodyInit = new Blob([this._bodyArrayBuffer]);
      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
        this._bodyArrayBuffer = bufferClone(body);
      } else {
        throw new Error('unsupported BodyInit type');
      }

      if (!this.headers.get('content-type')) {
        if (typeof body === 'string') {
          this.headers.set('content-type', 'text/plain;charset=UTF-8');
        } else if (this._bodyBlob && this._bodyBlob.type) {
          this.headers.set('content-type', this._bodyBlob.type);
        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
        }
      }
    };

    if (support.blob) {
      this.blob = function () {
        var rejected = consumed(this);
        if (rejected) {
          return rejected;
        }

        if (this._bodyBlob) {
          return Promise.resolve(this._bodyBlob);
        } else if (this._bodyArrayBuffer) {
          return Promise.resolve(new Blob([this._bodyArrayBuffer]));
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as blob');
        } else {
          return Promise.resolve(new Blob([this._bodyText]));
        }
      };

      this.arrayBuffer = function () {
        if (this._bodyArrayBuffer) {
          return consumed(this) || Promise.resolve(this._bodyArrayBuffer);
        } else {
          return this.blob().then(readBlobAsArrayBuffer);
        }
      };
    }

    this.text = function () {
      var rejected = consumed(this);
      if (rejected) {
        return rejected;
      }

      if (this._bodyBlob) {
        return readBlobAsText(this._bodyBlob);
      } else if (this._bodyArrayBuffer) {
        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
      } else if (this._bodyFormData) {
        throw new Error('could not read FormData body as text');
      } else {
        return Promise.resolve(this._bodyText);
      }
    };

    if (support.formData) {
      this.formData = function () {
        return this.text().then(decode);
      };
    }

    this.json = function () {
      return this.text().then(JSON.parse);
    };

    return this;
  }

  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];

  function normalizeMethod(method) {
    var upcased = method.toUpperCase();
    return methods.indexOf(upcased) > -1 ? upcased : method;
  }

  function Request(input, options) {
    options = options || {};
    var body = options.body;

    if (typeof input === 'string') {
      this.url = input;
    } else {
      if (input.bodyUsed) {
        throw new TypeError('Already read');
      }
      this.url = input.url;
      this.credentials = input.credentials;
      if (!options.headers) {
        this.headers = new Headers(input.headers);
      }
      this.method = input.method;
      this.mode = input.mode;
      if (!body && input._bodyInit != null) {
        body = input._bodyInit;
        input.bodyUsed = true;
      }
    }

    this.credentials = options.credentials || this.credentials || 'omit';
    if (options.headers || !this.headers) {
      this.headers = new Headers(options.headers);
    }
    this.method = normalizeMethod(options.method || this.method || 'GET');
    this.mode = options.mode || this.mode || null;
    this.referrer = null;

    if ((this.method === 'GET' || this.method === 'HEAD') && body) {
      throw new TypeError('Body not allowed for GET or HEAD requests');
    }
    this._initBody(body);
  }

  Request.prototype.clone = function () {
    return new Request(this, { body: this._bodyInit });
  };

  function decode(body) {
    var form = new FormData();
    body.trim().split('&').forEach(function (bytes) {
      if (bytes) {
        var split = bytes.split('=');
        var name = split.shift().replace(/\+/g, ' ');
        var value = split.join('=').replace(/\+/g, ' ');
        form.append(decodeURIComponent(name), decodeURIComponent(value));
      }
    });
    return form;
  }

  function parseHeaders(rawHeaders) {
    var headers = new Headers();
    rawHeaders.split('\r\n').forEach(function (line) {
      var parts = line.split(':');
      var key = parts.shift().trim();
      if (key) {
        var value = parts.join(':').trim();
        headers.append(key, value);
      }
    });
    return headers;
  }

  Body.call(Request.prototype);

  function Response(bodyInit, options) {
    if (!options) {
      options = {};
    }

    this.type = 'default';
    this.status = 'status' in options ? options.status : 200;
    this.ok = this.status >= 200 && this.status < 300;
    this.statusText = 'statusText' in options ? options.statusText : 'OK';
    this.headers = new Headers(options.headers);
    this.url = options.url || '';
    this._initBody(bodyInit);
  }

  Body.call(Response.prototype);

  Response.prototype.clone = function () {
    return new Response(this._bodyInit, {
      status: this.status,
      statusText: this.statusText,
      headers: new Headers(this.headers),
      url: this.url
    });
  };

  Response.error = function () {
    var response = new Response(null, { status: 0, statusText: '' });
    response.type = 'error';
    return response;
  };

  var redirectStatuses = [301, 302, 303, 307, 308];

  Response.redirect = function (url, status) {
    if (redirectStatuses.indexOf(status) === -1) {
      throw new RangeError('Invalid status code');
    }

    return new Response(null, { status: status, headers: { location: url } });
  };

  self.Headers = Headers;
  self.Request = Request;
  self.Response = Response;

  self.fetch = function (input, init) {
    return new Promise(function (resolve, reject) {
      var request = new Request(input, init);
      var xhr = new XMLHttpRequest();

      xhr.onload = function () {
        var options = {
          status: xhr.status,
          statusText: xhr.statusText,
          headers: parseHeaders(xhr.getAllResponseHeaders() || '')
        };
        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
        var body = 'response' in xhr ? xhr.response : xhr.responseText;
        resolve(new Response(body, options));
      };

      xhr.onerror = function () {
        reject(new TypeError('Network request failed'));
      };

      xhr.ontimeout = function () {
        reject(new TypeError('Network request failed'));
      };

      xhr.open(request.method, request.url, true);

      if (request.credentials === 'include') {
        xhr.withCredentials = true;
      }

      if ('responseType' in xhr && support.blob) {
        xhr.responseType = 'blob';
      }

      request.headers.forEach(function (value, name) {
        xhr.setRequestHeader(name, value);
      });

      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
    });
  };
  self.fetch.polyfill = true;
})(typeof self !== 'undefined' ? self : this);
}, 198, null, "whatwg-fetch/fetch.js");
__d(/* RCTLog */function(global, require, module, exports) {
'use strict';

var BatchedBridge = require(28             ); // 28 = BatchedBridge

var invariant = require(24                  ); // 24 = fbjs/lib/invariant

var levelsMap = {
  log: 'log',
  info: 'info',
  warn: 'warn',
  error: 'error',
  fatal: 'error'
};

var RCTLog = function () {
  function RCTLog() {
    babelHelpers.classCallCheck(this, RCTLog);
  }

  babelHelpers.createClass(RCTLog, null, [{
    key: 'logIfNoNativeHook',
    value: function logIfNoNativeHook() {
      var args = Array.prototype.slice.call(arguments);
      var level = args.shift();
      var logFn = levelsMap[level];
      invariant(logFn, 'Level "' + level + '" not one of ' + Object.keys(levelsMap));
      if (typeof global.nativeLoggingHook === 'undefined') {
        console[logFn].apply(console, args);
      }

      return true;
    }
  }]);
  return RCTLog;
}();

BatchedBridge.registerCallableModule('RCTLog', RCTLog);

module.exports = RCTLog;
}, 199, null, "RCTLog");
__d(/* Alert */function(global, require, module, exports) {
'use strict';

var AlertIOS = require(201       ); // 201 = AlertIOS
var Platform = require(26        ); // 26 = Platform
var DialogModuleAndroid = require(27             ).DialogManagerAndroid; // 27 = NativeModules

var Alert = function () {
  function Alert() {
    babelHelpers.classCallCheck(this, Alert);
  }

  babelHelpers.createClass(Alert, null, [{
    key: 'alert',
    value: function alert(title, message, buttons, options, type) {
      if (Platform.OS === 'ios') {
        if (typeof type !== 'undefined') {
          console.warn('Alert.alert() with a 5th "type" parameter is deprecated and will be removed. Use AlertIOS.prompt() instead.');
          AlertIOS.alert(title, message, buttons, type);
          return;
        }
        AlertIOS.alert(title, message, buttons);
      } else if (Platform.OS === 'android') {
        AlertAndroid.alert(title, message, buttons, options);
      }
    }
  }]);
  return Alert;
}();

var AlertAndroid = function () {
  function AlertAndroid() {
    babelHelpers.classCallCheck(this, AlertAndroid);
  }

  babelHelpers.createClass(AlertAndroid, null, [{
    key: 'alert',
    value: function alert(title, message, buttons, options) {
      var config = {
        title: title || '',
        message: message || ''
      };

      if (options) {
        config = babelHelpers.extends({}, config, { cancelable: options.cancelable });
      }

      var validButtons = buttons ? buttons.slice(0, 3) : [{ text: 'OK' }];
      var buttonPositive = validButtons.pop();
      var buttonNegative = validButtons.pop();
      var buttonNeutral = validButtons.pop();
      if (buttonNeutral) {
        config = babelHelpers.extends({}, config, { buttonNeutral: buttonNeutral.text || '' });
      }
      if (buttonNegative) {
        config = babelHelpers.extends({}, config, { buttonNegative: buttonNegative.text || '' });
      }
      if (buttonPositive) {
        config = babelHelpers.extends({}, config, { buttonPositive: buttonPositive.text || '' });
      }
      DialogModuleAndroid.showAlert(config, function (errorMessage) {
        return console.warn(errorMessage);
      }, function (action, buttonKey) {
        if (action !== DialogModuleAndroid.buttonClicked) {
          return;
        }
        if (buttonKey === DialogModuleAndroid.buttonNeutral) {
          buttonNeutral.onPress && buttonNeutral.onPress();
        } else if (buttonKey === DialogModuleAndroid.buttonNegative) {
          buttonNegative.onPress && buttonNegative.onPress();
        } else if (buttonKey === DialogModuleAndroid.buttonPositive) {
          buttonPositive.onPress && buttonPositive.onPress();
        }
      });
    }
  }]);
  return AlertAndroid;
}();

module.exports = Alert;
}, 200, null, "Alert");
__d(/* AlertIOS */function(global, require, module, exports) {
'use strict';

var RCTAlertManager = require(27             ).AlertManager; // 27 = NativeModules

var AlertIOS = function () {
  function AlertIOS() {
    babelHelpers.classCallCheck(this, AlertIOS);
  }

  babelHelpers.createClass(AlertIOS, null, [{
    key: 'alert',
    value: function alert(title, message, callbackOrButtons, type) {
      if (typeof type !== 'undefined') {
        console.warn('AlertIOS.alert() with a 4th "type" parameter is deprecated and will be removed. Use AlertIOS.prompt() instead.');
        this.prompt(title, message, callbackOrButtons, type);
        return;
      }
      this.prompt(title, message, callbackOrButtons, 'default');
    }
  }, {
    key: 'prompt',
    value: function prompt(title, message, callbackOrButtons) {
      var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'plain-text';
      var defaultValue = arguments[4];
      var keyboardType = arguments[5];

      if (typeof type === 'function') {
        console.warn('You passed a callback function as the "type" argument to AlertIOS.prompt(). React Native is ' + 'assuming  you want to use the deprecated AlertIOS.prompt(title, defaultValue, buttons, callback) ' + 'signature. The current signature is AlertIOS.prompt(title, message, callbackOrButtons, type, defaultValue, ' + 'keyboardType) and the old syntax will be removed in a future version.');

        var callback = type;
        var defaultValue = message;
        RCTAlertManager.alertWithArgs({
          title: title || undefined,
          type: 'plain-text',
          defaultValue: defaultValue
        }, function (id, value) {
          callback(value);
        });
        return;
      }

      var callbacks = [];
      var buttons = [];
      var cancelButtonKey;
      var destructiveButtonKey;
      if (typeof callbackOrButtons === 'function') {
        callbacks = [callbackOrButtons];
      } else if (callbackOrButtons instanceof Array) {
        callbackOrButtons.forEach(function (btn, index) {
          callbacks[index] = btn.onPress;
          if (btn.style === 'cancel') {
            cancelButtonKey = String(index);
          } else if (btn.style === 'destructive') {
            destructiveButtonKey = String(index);
          }
          if (btn.text || index < (callbackOrButtons || []).length - 1) {
            var btnDef = {};
            btnDef[index] = btn.text || '';
            buttons.push(btnDef);
          }
        });
      }

      RCTAlertManager.alertWithArgs({
        title: title || undefined,
        message: message || undefined,
        buttons: buttons,
        type: type || undefined,
        defaultValue: defaultValue,
        cancelButtonKey: cancelButtonKey,
        destructiveButtonKey: destructiveButtonKey,
        keyboardType: keyboardType
      }, function (id, value) {
        var cb = callbacks[id];
        cb && cb(value);
      });
    }
  }]);
  return AlertIOS;
}();

module.exports = AlertIOS;
}, 201, null, "AlertIOS");
__d(/* Promise */function(global, require, module, exports) {
'use strict';

var Promise = require(203                      ); // 203 = fbjs/lib/Promise.native

if (__DEV__) {
  require(207                                      ).enable({ // 207 = promise/setimmediate/rejection-tracking
    allRejections: true,
    onUnhandled: function onUnhandled(id) {
      var error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var _error$message = error.message,
          message = _error$message === undefined ? null : _error$message,
          _error$stack = error.stack,
          stack = _error$stack === undefined ? null : _error$stack;

      var warning = 'Possible Unhandled Promise Rejection (id: ' + id + '):\n' + (message == null ? '' : message + '\n') + (stack == null ? '' : stack);
      console.warn(warning);
    },
    onHandled: function onHandled(id) {
      var warning = 'Promise Rejection Handled (id: ' + id + ')\n' + 'This means you can ignore any previous messages of the form ' + ('"Possible Unhandled Promise Rejection (id: ' + id + '):"');
      console.warn(warning);
    }
  });
}

module.exports = Promise;
}, 202, null, "Promise");
__d(/* fbjs/lib/Promise.native.js */function(global, require, module, exports) {

'use strict';

var Promise = require(204                                  ); // 204 = promise/setimmediate/es6-extensions
require(206                        ); // 206 = promise/setimmediate/done

Promise.prototype['finally'] = function (onSettled) {
  return this.then(onSettled, onSettled);
};

module.exports = Promise;
}, 203, null, "fbjs/lib/Promise.native.js");
__d(/* promise/setimmediate/es6-extensions.js */function(global, require, module, exports) {'use strict';

var Promise = require(205        ); // 205 = ./core.js

module.exports = Promise;

var TRUE = valuePromise(true);
var FALSE = valuePromise(false);
var NULL = valuePromise(null);
var UNDEFINED = valuePromise(undefined);
var ZERO = valuePromise(0);
var EMPTYSTRING = valuePromise('');

function valuePromise(value) {
  var p = new Promise(Promise._61);
  p._81 = 1;
  p._65 = value;
  return p;
}
Promise.resolve = function (value) {
  if (value instanceof Promise) return value;

  if (value === null) return NULL;
  if (value === undefined) return UNDEFINED;
  if (value === true) return TRUE;
  if (value === false) return FALSE;
  if (value === 0) return ZERO;
  if (value === '') return EMPTYSTRING;

  if (typeof value === 'object' || typeof value === 'function') {
    try {
      var then = value.then;
      if (typeof then === 'function') {
        return new Promise(then.bind(value));
      }
    } catch (ex) {
      return new Promise(function (resolve, reject) {
        reject(ex);
      });
    }
  }
  return valuePromise(value);
};

Promise.all = function (arr) {
  var args = Array.prototype.slice.call(arr);

  return new Promise(function (resolve, reject) {
    if (args.length === 0) return resolve([]);
    var remaining = args.length;
    function res(i, val) {
      if (val && (typeof val === 'object' || typeof val === 'function')) {
        if (val instanceof Promise && val.then === Promise.prototype.then) {
          while (val._81 === 3) {
            val = val._65;
          }
          if (val._81 === 1) return res(i, val._65);
          if (val._81 === 2) reject(val._65);
          val.then(function (val) {
            res(i, val);
          }, reject);
          return;
        } else {
          var then = val.then;
          if (typeof then === 'function') {
            var p = new Promise(then.bind(val));
            p.then(function (val) {
              res(i, val);
            }, reject);
            return;
          }
        }
      }
      args[i] = val;
      if (--remaining === 0) {
        resolve(args);
      }
    }
    for (var i = 0; i < args.length; i++) {
      res(i, args[i]);
    }
  });
};

Promise.reject = function (value) {
  return new Promise(function (resolve, reject) {
    reject(value);
  });
};

Promise.race = function (values) {
  return new Promise(function (resolve, reject) {
    values.forEach(function (value) {
      Promise.resolve(value).then(resolve, reject);
    });
  });
};

Promise.prototype['catch'] = function (onRejected) {
  return this.then(null, onRejected);
};
}, 204, null, "promise/setimmediate/es6-extensions.js");
__d(/* promise/setimmediate/core.js */function(global, require, module, exports) {'use strict';

function noop() {}

var LAST_ERROR = null;
var IS_ERROR = {};
function getThen(obj) {
  try {
    return obj.then;
  } catch (ex) {
    LAST_ERROR = ex;
    return IS_ERROR;
  }
}

function tryCallOne(fn, a) {
  try {
    return fn(a);
  } catch (ex) {
    LAST_ERROR = ex;
    return IS_ERROR;
  }
}
function tryCallTwo(fn, a, b) {
  try {
    fn(a, b);
  } catch (ex) {
    LAST_ERROR = ex;
    return IS_ERROR;
  }
}

module.exports = Promise;

function Promise(fn) {
  if (typeof this !== 'object') {
    throw new TypeError('Promises must be constructed via new');
  }
  if (typeof fn !== 'function') {
    throw new TypeError('not a function');
  }
  this._45 = 0;
  this._81 = 0;
  this._65 = null;
  this._54 = null;
  if (fn === noop) return;
  doResolve(fn, this);
}
Promise._10 = null;
Promise._97 = null;
Promise._61 = noop;

Promise.prototype.then = function (onFulfilled, onRejected) {
  if (this.constructor !== Promise) {
    return safeThen(this, onFulfilled, onRejected);
  }
  var res = new Promise(noop);
  handle(this, new Handler(onFulfilled, onRejected, res));
  return res;
};

function safeThen(self, onFulfilled, onRejected) {
  return new self.constructor(function (resolve, reject) {
    var res = new Promise(noop);
    res.then(resolve, reject);
    handle(self, new Handler(onFulfilled, onRejected, res));
  });
};
function handle(self, deferred) {
  while (self._81 === 3) {
    self = self._65;
  }
  if (Promise._10) {
    Promise._10(self);
  }
  if (self._81 === 0) {
    if (self._45 === 0) {
      self._45 = 1;
      self._54 = deferred;
      return;
    }
    if (self._45 === 1) {
      self._45 = 2;
      self._54 = [self._54, deferred];
      return;
    }
    self._54.push(deferred);
    return;
  }
  handleResolved(self, deferred);
}

function handleResolved(self, deferred) {
  setImmediate(function () {
    var cb = self._81 === 1 ? deferred.onFulfilled : deferred.onRejected;
    if (cb === null) {
      if (self._81 === 1) {
        resolve(deferred.promise, self._65);
      } else {
        reject(deferred.promise, self._65);
      }
      return;
    }
    var ret = tryCallOne(cb, self._65);
    if (ret === IS_ERROR) {
      reject(deferred.promise, LAST_ERROR);
    } else {
      resolve(deferred.promise, ret);
    }
  });
}
function resolve(self, newValue) {
  if (newValue === self) {
    return reject(self, new TypeError('A promise cannot be resolved with itself.'));
  }
  if (newValue && (typeof newValue === 'object' || typeof newValue === 'function')) {
    var then = getThen(newValue);
    if (then === IS_ERROR) {
      return reject(self, LAST_ERROR);
    }
    if (then === self.then && newValue instanceof Promise) {
      self._81 = 3;
      self._65 = newValue;
      finale(self);
      return;
    } else if (typeof then === 'function') {
      doResolve(then.bind(newValue), self);
      return;
    }
  }
  self._81 = 1;
  self._65 = newValue;
  finale(self);
}

function reject(self, newValue) {
  self._81 = 2;
  self._65 = newValue;
  if (Promise._97) {
    Promise._97(self, newValue);
  }
  finale(self);
}
function finale(self) {
  if (self._45 === 1) {
    handle(self, self._54);
    self._54 = null;
  }
  if (self._45 === 2) {
    for (var i = 0; i < self._54.length; i++) {
      handle(self, self._54[i]);
    }
    self._54 = null;
  }
}

function Handler(onFulfilled, onRejected, promise) {
  this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
  this.onRejected = typeof onRejected === 'function' ? onRejected : null;
  this.promise = promise;
}

function doResolve(fn, promise) {
  var done = false;
  var res = tryCallTwo(fn, function (value) {
    if (done) return;
    done = true;
    resolve(promise, value);
  }, function (reason) {
    if (done) return;
    done = true;
    reject(promise, reason);
  });
  if (!done && res === IS_ERROR) {
    done = true;
    reject(promise, LAST_ERROR);
  }
}
}, 205, null, "promise/setimmediate/core.js");
__d(/* promise/setimmediate/done.js */function(global, require, module, exports) {'use strict';

var Promise = require(205        ); // 205 = ./core.js

module.exports = Promise;
Promise.prototype.done = function (onFulfilled, onRejected) {
  var self = arguments.length ? this.then.apply(this, arguments) : this;
  self.then(null, function (err) {
    setTimeout(function () {
      throw err;
    }, 0);
  });
};
}, 206, null, "promise/setimmediate/done.js");
__d(/* promise/setimmediate/rejection-tracking.js */function(global, require, module, exports) {'use strict';

var Promise = require(205     ); // 205 = ./core

var DEFAULT_WHITELIST = [ReferenceError, TypeError, RangeError];

var enabled = false;
exports.disable = disable;
function disable() {
  enabled = false;
  Promise._10 = null;
  Promise._97 = null;
}

exports.enable = enable;
function enable(options) {
  options = options || {};
  if (enabled) disable();
  enabled = true;
  var id = 0;
  var displayId = 0;
  var rejections = {};
  Promise._10 = function (promise) {
    if (promise._81 === 2 && rejections[promise._72]) {
      if (rejections[promise._72].logged) {
        onHandled(promise._72);
      } else {
        clearTimeout(rejections[promise._72].timeout);
      }
      delete rejections[promise._72];
    }
  };
  Promise._97 = function (promise, err) {
    if (promise._45 === 0) {
      promise._72 = id++;
      rejections[promise._72] = {
        displayId: null,
        error: err,
        timeout: setTimeout(onUnhandled.bind(null, promise._72), matchWhitelist(err, DEFAULT_WHITELIST) ? 100 : 2000),
        logged: false
      };
    }
  };
  function onUnhandled(id) {
    if (options.allRejections || matchWhitelist(rejections[id].error, options.whitelist || DEFAULT_WHITELIST)) {
      rejections[id].displayId = displayId++;
      if (options.onUnhandled) {
        rejections[id].logged = true;
        options.onUnhandled(rejections[id].displayId, rejections[id].error);
      } else {
        rejections[id].logged = true;
        logError(rejections[id].displayId, rejections[id].error);
      }
    }
  }
  function onHandled(id) {
    if (rejections[id].logged) {
      if (options.onHandled) {
        options.onHandled(rejections[id].displayId, rejections[id].error);
      } else if (!rejections[id].onUnhandled) {
        console.warn('Promise Rejection Handled (id: ' + rejections[id].displayId + '):');
        console.warn('  This means you can ignore any previous messages of the form "Possible Unhandled Promise Rejection" with id ' + rejections[id].displayId + '.');
      }
    }
  }
}

function logError(id, error) {
  console.warn('Possible Unhandled Promise Rejection (id: ' + id + '):');
  var errStr = (error && (error.stack || error)) + '';
  errStr.split('\n').forEach(function (line) {
    console.warn('  ' + line);
  });
}

function matchWhitelist(error, list) {
  return list.some(function (cls) {
    return error instanceof cls;
  });
}
}, 207, null, "promise/setimmediate/rejection-tracking.js");
__d(/* regenerator-runtime/runtime.js */function(global, require, module, exports) {

!function (global) {
  "use strict";

  var hasOwn = Object.prototype.hasOwnProperty;
  var undefined;
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    if (inModule) {
      module.exports = runtime;
    }

    return;
  }

  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  runtime.wrap = wrap;

  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  var ContinueSentinel = {};

  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype;
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction";

  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function (method) {
      prototype[method] = function (arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function (genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor ? ctor === GeneratorFunction || (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
  };

  runtime.mark = function (genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  runtime.awrap = function (arg) {
    return new AwaitArgument(arg);
  };

  function AwaitArgument(arg) {
    this.arg = arg;
  }

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value instanceof AwaitArgument) {
          return Promise.resolve(value.arg).then(function (value) {
            invoke("next", value, resolve, reject);
          }, function (err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function (unwrapped) {
          result.value = unwrapped;
          resolve(result);
        }, reject);
      }
    }

    if (typeof process === "object" && process.domain) {
      invoke = process.domain.bind(invoke);
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function (resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
    }

    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);

  runtime.async = function (innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));

    return runtime.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
      return result.done ? result.value : iter.next();
    });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        return doneResult();
      }

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          if (method === "return" || method === "throw" && delegate.iterator[method] === undefined) {
            context.delegate = null;

            var returnMethod = delegate.iterator["return"];
            if (returnMethod) {
              var record = tryCatch(returnMethod, delegate.iterator, arg);
              if (record.type === "throw") {
                method = "throw";
                arg = record.arg;
                continue;
              }
            }

            if (method === "return") {
              continue;
            }
          }

          var record = tryCatch(delegate.iterator[method], delegate.iterator, arg);

          if (record.type === "throw") {
            context.delegate = null;

            method = "throw";
            arg = record.arg;
            continue;
          }

          method = "next";
          arg = undefined;

          var info = record.arg;
          if (info.done) {
            context[delegate.resultName] = info.value;
            context.next = delegate.nextLoc;
          } else {
            state = GenStateSuspendedYield;
            return info;
          }

          context.delegate = null;
        }

        if (method === "next") {
          context.sent = context._sent = arg;
        } else if (method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw arg;
          }

          if (context.dispatchException(arg)) {
            method = "next";
            arg = undefined;
          }
        } else if (method === "return") {
          context.abrupt("return", arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          state = context.done ? GenStateCompleted : GenStateSuspendedYield;

          var info = {
            value: record.arg,
            done: context.done
          };

          if (record.arg === ContinueSentinel) {
            if (context.delegate && method === "next") {
              arg = undefined;
            }
          } else {
            return info;
          }
        } else if (record.type === "throw") {
          state = GenStateCompleted;

          method = "throw";
          arg = record.arg;
        }
      }
    };
  }

  defineIteratorMethods(Gp);

  Gp[iteratorSymbol] = function () {
    return this;
  };

  Gp[toStringTagSymbol] = "Generator";

  Gp.toString = function () {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function (object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1,
            next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function reset(skipTempReset) {
      this.prev = 0;
      this.next = 0;

      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function stop() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function dispatchException(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;
        return !!caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }
          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }
          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function abrupt(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.next = finallyEntry.finallyLoc;
      } else {
        this.complete(record);
      }

      return ContinueSentinel;
    },

    complete: function complete(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" || record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = record.arg;
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }
    },

    finish: function finish(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function _catch(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      throw new Error("illegal catch attempt");
    },

    delegateYield: function delegateYield(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      return ContinueSentinel;
    }
  };
}(typeof global === "object" ? global : typeof window === "object" ? window : typeof self === "object" ? self : this);
}, 208, null, "regenerator-runtime/runtime.js");
__d(/* XMLHttpRequest */function(global, require, module, exports) {
'use strict';

var EventTarget = require(66                 ); // 66 = event-target-shim
var RCTNetworking = require(210            ); // 210 = RCTNetworking

var base64 = require(65         ); // 65 = base64-js
var invariant = require(24                  ); // 24 = fbjs/lib/invariant
var warning = require(13                ); // 13 = fbjs/lib/warning

var UNSENT = 0;
var OPENED = 1;
var HEADERS_RECEIVED = 2;
var LOADING = 3;
var DONE = 4;

var SUPPORTED_RESPONSE_TYPES = {
  arraybuffer: typeof global.ArrayBuffer === 'function',
  blob: typeof global.Blob === 'function',
  document: false,
  json: true,
  text: true,
  '': true
};

var REQUEST_EVENTS = ['abort', 'error', 'load', 'loadstart', 'progress', 'timeout', 'loadend'];

var XHR_EVENTS = REQUEST_EVENTS.concat('readystatechange');

var XMLHttpRequestEventTarget = function (_EventTarget) {
  babelHelpers.inherits(XMLHttpRequestEventTarget, _EventTarget);

  function XMLHttpRequestEventTarget() {
    babelHelpers.classCallCheck(this, XMLHttpRequestEventTarget);
    return babelHelpers.possibleConstructorReturn(this, (XMLHttpRequestEventTarget.__proto__ || Object.getPrototypeOf(XMLHttpRequestEventTarget)).apply(this, arguments));
  }

  return XMLHttpRequestEventTarget;
}(EventTarget.apply(undefined, REQUEST_EVENTS));

var XMLHttpRequest = function (_EventTarget2) {
  babelHelpers.inherits(XMLHttpRequest, _EventTarget2);
  babelHelpers.createClass(XMLHttpRequest, null, [{
    key: 'setInterceptor',
    value: function setInterceptor(interceptor) {
      XMLHttpRequest._interceptor = interceptor;
    }
  }]);

  function XMLHttpRequest() {
    babelHelpers.classCallCheck(this, XMLHttpRequest);

    var _this2 = babelHelpers.possibleConstructorReturn(this, (XMLHttpRequest.__proto__ || Object.getPrototypeOf(XMLHttpRequest)).call(this));

    _this2.UNSENT = UNSENT;
    _this2.OPENED = OPENED;
    _this2.HEADERS_RECEIVED = HEADERS_RECEIVED;
    _this2.LOADING = LOADING;
    _this2.DONE = DONE;
    _this2.readyState = UNSENT;
    _this2.status = 0;
    _this2.timeout = 0;
    _this2.upload = new XMLHttpRequestEventTarget();
    _this2._aborted = false;
    _this2._hasError = false;
    _this2._method = null;
    _this2._response = '';
    _this2._url = null;
    _this2._timedOut = false;
    _this2._trackingName = 'unknown';
    _this2._incrementalEvents = false;

    _this2._reset();
    return _this2;
  }

  babelHelpers.createClass(XMLHttpRequest, [{
    key: '_reset',
    value: function _reset() {
      this.readyState = this.UNSENT;
      this.responseHeaders = undefined;
      this.status = 0;
      delete this.responseURL;

      this._requestId = null;

      this._cachedResponse = undefined;
      this._hasError = false;
      this._headers = {};
      this._response = '';
      this._responseType = '';
      this._sent = false;
      this._lowerCaseResponseHeaders = {};

      this._clearSubscriptions();
      this._timedOut = false;
    }
  }, {
    key: '__didCreateRequest',
    value: function __didCreateRequest(requestId) {
      this._requestId = requestId;

      XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.requestSent(requestId, this._url || '', this._method || 'GET', this._headers);
    }
  }, {
    key: '__didUploadProgress',
    value: function __didUploadProgress(requestId, progress, total) {
      if (requestId === this._requestId) {
        this.upload.dispatchEvent({
          type: 'progress',
          lengthComputable: true,
          loaded: progress,
          total: total
        });
      }
    }
  }, {
    key: '__didReceiveResponse',
    value: function __didReceiveResponse(requestId, status, responseHeaders, responseURL) {
      if (requestId === this._requestId) {
        this.status = status;
        this.setResponseHeaders(responseHeaders);
        this.setReadyState(this.HEADERS_RECEIVED);
        if (responseURL || responseURL === '') {
          this.responseURL = responseURL;
        } else {
          delete this.responseURL;
        }

        XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.responseReceived(requestId, responseURL || this._url || '', status, responseHeaders || {});
      }
    }
  }, {
    key: '__didReceiveData',
    value: function __didReceiveData(requestId, response) {
      if (requestId !== this._requestId) {
        return;
      }
      this._response = response;
      this._cachedResponse = undefined;
      this.setReadyState(this.LOADING);

      XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.dataReceived(requestId, response);
    }
  }, {
    key: '__didReceiveIncrementalData',
    value: function __didReceiveIncrementalData(requestId, responseText, progress, total) {
      if (requestId !== this._requestId) {
        return;
      }
      if (!this._response) {
        this._response = responseText;
      } else {
        this._response += responseText;
      }

      XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.dataReceived(requestId, responseText);

      this.setReadyState(this.LOADING);
      this.__didReceiveDataProgress(requestId, progress, total);
    }
  }, {
    key: '__didReceiveDataProgress',
    value: function __didReceiveDataProgress(requestId, loaded, total) {
      if (requestId !== this._requestId) {
        return;
      }
      this.dispatchEvent({
        type: 'progress',
        lengthComputable: total >= 0,
        loaded: loaded,
        total: total
      });
    }
  }, {
    key: '__didCompleteResponse',
    value: function __didCompleteResponse(requestId, error, timeOutError) {
      if (requestId === this._requestId) {
        if (error) {
          if (this._responseType === '' || this._responseType === 'text') {
            this._response = error;
          }
          this._hasError = true;
          if (timeOutError) {
            this._timedOut = true;
          }
        }
        this._clearSubscriptions();
        this._requestId = null;
        this.setReadyState(this.DONE);

        if (error) {
          XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.loadingFailed(requestId, error);
        } else {
          XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.loadingFinished(requestId, this._response.length);
        }
      }
    }
  }, {
    key: '_clearSubscriptions',
    value: function _clearSubscriptions() {
      (this._subscriptions || []).forEach(function (sub) {
        sub.remove();
      });
      this._subscriptions = [];
    }
  }, {
    key: 'getAllResponseHeaders',
    value: function getAllResponseHeaders() {
      if (!this.responseHeaders) {
        return null;
      }
      var headers = this.responseHeaders || {};
      return Object.keys(headers).map(function (headerName) {
        return headerName + ': ' + headers[headerName];
      }).join('\r\n');
    }
  }, {
    key: 'getResponseHeader',
    value: function getResponseHeader(header) {
      var value = this._lowerCaseResponseHeaders[header.toLowerCase()];
      return value !== undefined ? value : null;
    }
  }, {
    key: 'setRequestHeader',
    value: function setRequestHeader(header, value) {
      if (this.readyState !== this.OPENED) {
        throw new Error('Request has not been opened');
      }
      this._headers[header.toLowerCase()] = String(value);
    }
  }, {
    key: 'setTrackingName',
    value: function setTrackingName(trackingName) {
      this._trackingName = trackingName;
      return this;
    }
  }, {
    key: 'open',
    value: function open(method, url, async) {
      if (this.readyState !== this.UNSENT) {
        throw new Error('Cannot open, already sending');
      }
      if (async !== undefined && !async) {
        throw new Error('Synchronous http requests are not supported');
      }
      if (!url) {
        throw new Error('Cannot load an empty url');
      }
      this._method = method.toUpperCase();
      this._url = url;
      this._aborted = false;
      this.setReadyState(this.OPENED);
    }
  }, {
    key: 'send',
    value: function send(data) {
      var _this3 = this;

      if (this.readyState !== this.OPENED) {
        throw new Error('Request has not been opened');
      }
      if (this._sent) {
        throw new Error('Request has already been sent');
      }
      this._sent = true;
      var incrementalEvents = this._incrementalEvents || !!this.onreadystatechange || !!this.onprogress;

      this._subscriptions.push(RCTNetworking.addListener('didSendNetworkData', function (args) {
        return _this3.__didUploadProgress.apply(_this3, babelHelpers.toConsumableArray(args));
      }));
      this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkResponse', function (args) {
        return _this3.__didReceiveResponse.apply(_this3, babelHelpers.toConsumableArray(args));
      }));
      this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkData', function (args) {
        return _this3.__didReceiveData.apply(_this3, babelHelpers.toConsumableArray(args));
      }));
      this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkIncrementalData', function (args) {
        return _this3.__didReceiveIncrementalData.apply(_this3, babelHelpers.toConsumableArray(args));
      }));
      this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkDataProgress', function (args) {
        return _this3.__didReceiveDataProgress.apply(_this3, babelHelpers.toConsumableArray(args));
      }));
      this._subscriptions.push(RCTNetworking.addListener('didCompleteNetworkResponse', function (args) {
        return _this3.__didCompleteResponse.apply(_this3, babelHelpers.toConsumableArray(args));
      }));

      var nativeResponseType = 'text';
      if (this._responseType === 'arraybuffer' || this._responseType === 'blob') {
        nativeResponseType = 'base64';
      }

      invariant(this._method, 'Request method needs to be defined.');
      invariant(this._url, 'Request URL needs to be defined.');
      RCTNetworking.sendRequest(this._method, this._trackingName, this._url, this._headers, data, nativeResponseType, incrementalEvents, this.timeout, this.__didCreateRequest.bind(this));
    }
  }, {
    key: 'abort',
    value: function abort() {
      this._aborted = true;
      if (this._requestId) {
        RCTNetworking.abortRequest(this._requestId);
      }

      if (!(this.readyState === this.UNSENT || this.readyState === this.OPENED && !this._sent || this.readyState === this.DONE)) {
        this._reset();
        this.setReadyState(this.DONE);
      }

      this._reset();
    }
  }, {
    key: 'setResponseHeaders',
    value: function setResponseHeaders(responseHeaders) {
      this.responseHeaders = responseHeaders || null;
      var headers = responseHeaders || {};
      this._lowerCaseResponseHeaders = Object.keys(headers).reduce(function (lcaseHeaders, headerName) {
        lcaseHeaders[headerName.toLowerCase()] = headers[headerName];
        return lcaseHeaders;
      }, {});
    }
  }, {
    key: 'setReadyState',
    value: function setReadyState(newState) {
      this.readyState = newState;
      this.dispatchEvent({ type: 'readystatechange' });
      if (newState === this.DONE) {
        if (this._aborted) {
          this.dispatchEvent({ type: 'abort' });
        } else if (this._hasError) {
          if (this._timedOut) {
            this.dispatchEvent({ type: 'timeout' });
          } else {
            this.dispatchEvent({ type: 'error' });
          }
        } else {
          this.dispatchEvent({ type: 'load' });
        }
        this.dispatchEvent({ type: 'loadend' });
      }
    }
  }, {
    key: 'addEventListener',
    value: function addEventListener(type, listener) {
      if (type === 'readystatechange' || type === 'progress') {
        this._incrementalEvents = true;
      }
      babelHelpers.get(XMLHttpRequest.prototype.__proto__ || Object.getPrototypeOf(XMLHttpRequest.prototype), 'addEventListener', this).call(this, type, listener);
    }
  }, {
    key: 'responseType',
    get: function get() {
      return this._responseType;
    },
    set: function set(responseType) {
      if (this._sent) {
        throw new Error('Failed to set the \'responseType\' property on \'XMLHttpRequest\': The ' + 'response type cannot be set after the request has been sent.');
      }
      if (!SUPPORTED_RESPONSE_TYPES.hasOwnProperty(responseType)) {
        warning(false, 'The provided value \'' + responseType + '\' is not a valid \'responseType\'.');
        return;
      }

      invariant(SUPPORTED_RESPONSE_TYPES[responseType] || responseType === 'document', 'The provided value \'' + responseType + '\' is unsupported in this environment.');
      this._responseType = responseType;
    }
  }, {
    key: 'responseText',
    get: function get() {
      if (this._responseType !== '' && this._responseType !== 'text') {
        throw new Error("The 'responseText' property is only available if 'responseType' " + ('is set to \'\' or \'text\', but it is \'' + this._responseType + '\'.'));
      }
      if (this.readyState < LOADING) {
        return '';
      }
      return this._response;
    }
  }, {
    key: 'response',
    get: function get() {
      var responseType = this.responseType;

      if (responseType === '' || responseType === 'text') {
        return this.readyState < LOADING || this._hasError ? '' : this._response;
      }

      if (this.readyState !== DONE) {
        return null;
      }

      if (this._cachedResponse !== undefined) {
        return this._cachedResponse;
      }

      switch (responseType) {
        case 'document':
          this._cachedResponse = null;
          break;

        case 'arraybuffer':
          this._cachedResponse = base64.toByteArray(this._response).buffer;
          break;

        case 'blob':
          this._cachedResponse = new global.Blob([base64.toByteArray(this._response).buffer], { type: this.getResponseHeader('content-type') || '' });
          break;

        case 'json':
          try {
            this._cachedResponse = JSON.parse(this._response);
          } catch (_) {
            this._cachedResponse = null;
          }
          break;

        default:
          this._cachedResponse = null;
      }

      return this._cachedResponse;
    }
  }]);
  return XMLHttpRequest;
}(EventTarget.apply(undefined, babelHelpers.toConsumableArray(XHR_EVENTS)));

XMLHttpRequest.UNSENT = UNSENT;
XMLHttpRequest.OPENED = OPENED;
XMLHttpRequest.HEADERS_RECEIVED = HEADERS_RECEIVED;
XMLHttpRequest.LOADING = LOADING;
XMLHttpRequest.DONE = DONE;
XMLHttpRequest._interceptor = null;


module.exports = XMLHttpRequest;
}, 209, null, "XMLHttpRequest");
__d(/* RCTNetworking */function(global, require, module, exports) {
'use strict';

var FormData = require(211       ); // 211 = FormData
var NativeEventEmitter = require(52                  ); // 52 = NativeEventEmitter
var RCTNetworkingNative = require(27             ).Networking; // 27 = NativeModules
var convertRequestBody = require(212                 ); // 212 = convertRequestBody

function convertHeadersMapToArray(headers) {
  var headerArray = [];
  for (var name in headers) {
    headerArray.push([name, headers[name]]);
  }
  return headerArray;
}

var _requestId = 1;
function generateRequestId() {
  return _requestId++;
}

var RCTNetworking = function (_NativeEventEmitter) {
  babelHelpers.inherits(RCTNetworking, _NativeEventEmitter);

  function RCTNetworking() {
    babelHelpers.classCallCheck(this, RCTNetworking);
    return babelHelpers.possibleConstructorReturn(this, (RCTNetworking.__proto__ || Object.getPrototypeOf(RCTNetworking)).call(this, RCTNetworkingNative));
  }

  babelHelpers.createClass(RCTNetworking, [{
    key: 'sendRequest',
    value: function sendRequest(method, trackingName, url, headers, data, responseType, incrementalUpdates, timeout, callback) {
      var body = convertRequestBody(data);
      if (body && body.formData) {
        body.formData = body.formData.map(function (part) {
          return babelHelpers.extends({}, part, {
            headers: convertHeadersMapToArray(part.headers)
          });
        });
      }
      var requestId = generateRequestId();
      RCTNetworkingNative.sendRequest(method, url, requestId, convertHeadersMapToArray(headers), babelHelpers.extends({}, body, { trackingName: trackingName }), responseType, incrementalUpdates, timeout);
      callback(requestId);
    }
  }, {
    key: 'abortRequest',
    value: function abortRequest(requestId) {
      RCTNetworkingNative.abortRequest(requestId);
    }
  }, {
    key: 'clearCookies',
    value: function clearCookies(callback) {
      RCTNetworkingNative.clearCookies(callback);
    }
  }]);
  return RCTNetworking;
}(NativeEventEmitter);

module.exports = new RCTNetworking();
}, 210, null, "RCTNetworking");
__d(/* FormData */function(global, require, module, exports) {
'use strict';

var FormData = function () {
  function FormData() {
    babelHelpers.classCallCheck(this, FormData);

    this._parts = [];
  }

  babelHelpers.createClass(FormData, [{
    key: 'append',
    value: function append(key, value) {
      this._parts.push([key, value]);
    }
  }, {
    key: 'getParts',
    value: function getParts() {
      return this._parts.map(function (_ref) {
        var _ref2 = babelHelpers.slicedToArray(_ref, 2),
            name = _ref2[0],
            value = _ref2[1];

        var contentDisposition = 'form-data; name="' + name + '"';

        var headers = { 'content-disposition': contentDisposition };

        if (typeof value === 'object') {
          if (typeof value.name === 'string') {
            headers['content-disposition'] += '; filename="' + value.name + '"';
          }
          if (typeof value.type === 'string') {
            headers['content-type'] = value.type;
          }
          return babelHelpers.extends({}, value, { headers: headers, fieldName: name });
        }

        return { string: String(value), headers: headers, fieldName: name };
      });
    }
  }]);
  return FormData;
}();

module.exports = FormData;
}, 211, null, "FormData");
__d(/* convertRequestBody */function(global, require, module, exports) {
'use strict';

var binaryToBase64 = require(64              ); // 64 = binaryToBase64

var FormData = require(211       ); // 211 = FormData

function convertRequestBody(body) {
  if (typeof body === 'string') {
    return { string: body };
  }
  if (body instanceof FormData) {
    return { formData: body.getParts() };
  }
  if (body instanceof ArrayBuffer || ArrayBuffer.isView(body)) {
    return { base64: binaryToBase64(body) };
  }
  return body;
}

module.exports = convertRequestBody;
}, 212, null, "convertRequestBody");
__d(/* Geolocation */function(global, require, module, exports) {
'use strict';

var NativeEventEmitter = require(52                  ); // 52 = NativeEventEmitter
var RCTLocationObserver = require(27             ).LocationObserver; // 27 = NativeModules

var invariant = require(24                  ); // 24 = fbjs/lib/invariant
var logError = require(62        ); // 62 = logError
var warning = require(13                ); // 13 = fbjs/lib/warning

var LocationEventEmitter = new NativeEventEmitter(RCTLocationObserver);

var subscriptions = [];
var updatesEnabled = false;

var Geolocation = {
  getCurrentPosition: function getCurrentPosition(geo_success, geo_error, geo_options) {
    invariant(typeof geo_success === 'function', 'Must provide a valid geo_success callback.');
    RCTLocationObserver.getCurrentPosition(geo_options || {}, geo_success, geo_error || logError);
  },

  watchPosition: function watchPosition(success, error, options) {
    if (!updatesEnabled) {
      RCTLocationObserver.startObserving(options || {});
      updatesEnabled = true;
    }
    var watchID = subscriptions.length;
    subscriptions.push([LocationEventEmitter.addListener('geolocationDidChange', success), error ? LocationEventEmitter.addListener('geolocationError', error) : null]);
    return watchID;
  },

  clearWatch: function clearWatch(watchID) {
    var sub = subscriptions[watchID];
    if (!sub) {
      return;
    }

    sub[0].remove();

    var sub1 = sub[1];sub1 && sub1.remove();
    subscriptions[watchID] = undefined;
    var noWatchers = true;
    for (var ii = 0; ii < subscriptions.length; ii++) {
      if (subscriptions[ii]) {
        noWatchers = false;
      }
    }
    if (noWatchers) {
      Geolocation.stopObserving();
    }
  },

  stopObserving: function stopObserving() {
    if (updatesEnabled) {
      RCTLocationObserver.stopObserving();
      updatesEnabled = false;
      for (var ii = 0; ii < subscriptions.length; ii++) {
        var sub = subscriptions[ii];
        if (sub) {
          warning('Called stopObserving with existing subscriptions.');
          sub[0].remove();

          var sub1 = sub[1];sub1 && sub1.remove();
        }
      }
      subscriptions = [];
    }
  }
};

module.exports = Geolocation;
}, 213, null, "Geolocation");
__d(/* Map */function(global, require, module, exports) {

'use strict';

var _shouldPolyfillES6Collection = require(215                           ); // 215 = _shouldPolyfillES6Collection
var guid = require(216   ); // 216 = guid
var isNode = require(217              ); // 217 = fbjs/lib/isNode
var toIterator = require(218         ); // 218 = toIterator

module.exports = function (global, undefined) {
  if (!_shouldPolyfillES6Collection('Map')) {
    return global.Map;
  }

  var KIND_KEY = 'key';
  var KIND_VALUE = 'value';
  var KIND_KEY_VALUE = 'key+value';

  var KEY_PREFIX = '$map_';

  var SECRET_SIZE_PROP;
  if (__DEV__) {
    SECRET_SIZE_PROP = '$size' + guid();
  }

  var OLD_IE_HASH_PREFIX = 'IE_HASH_';

  var Map = function () {
    function Map(iterable) {
      babelHelpers.classCallCheck(this, Map);

      if (!isObject(this)) {
        throw new TypeError('Wrong map object type.');
      }

      initMap(this);

      if (iterable != null) {
        var it = toIterator(iterable);
        var next;
        while (!(next = it.next()).done) {
          if (!isObject(next.value)) {
            throw new TypeError('Expected iterable items to be pair objects.');
          }
          this.set(next.value[0], next.value[1]);
        }
      }
    }

    babelHelpers.createClass(Map, [{
      key: 'clear',
      value: function clear() {
        initMap(this);
      }
    }, {
      key: 'has',
      value: function has(key) {
        var index = getIndex(this, key);
        return !!(index != null && this._mapData[index]);
      }
    }, {
      key: 'set',
      value: function set(key, value) {
        var index = getIndex(this, key);

        if (index != null && this._mapData[index]) {
          this._mapData[index][1] = value;
        } else {
          index = this._mapData.push([key, value]) - 1;
          setIndex(this, key, index);
          if (__DEV__) {
            this[SECRET_SIZE_PROP] += 1;
          } else {
            this.size += 1;
          }
        }

        return this;
      }
    }, {
      key: 'get',
      value: function get(key) {
        var index = getIndex(this, key);
        if (index == null) {
          return undefined;
        } else {
          return this._mapData[index][1];
        }
      }
    }, {
      key: 'delete',
      value: function _delete(key) {
        var index = getIndex(this, key);
        if (index != null && this._mapData[index]) {
          setIndex(this, key, undefined);
          this._mapData[index] = undefined;
          if (__DEV__) {
            this[SECRET_SIZE_PROP] -= 1;
          } else {
            this.size -= 1;
          }
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: 'entries',
      value: function entries() {
        return new MapIterator(this, KIND_KEY_VALUE);
      }
    }, {
      key: 'keys',
      value: function keys() {
        return new MapIterator(this, KIND_KEY);
      }
    }, {
      key: 'values',
      value: function values() {
        return new MapIterator(this, KIND_VALUE);
      }
    }, {
      key: 'forEach',
      value: function forEach(callback, thisArg) {
        if (typeof callback !== 'function') {
          throw new TypeError('Callback must be callable.');
        }

        var boundCallback = callback.bind(thisArg || undefined);
        var mapData = this._mapData;

        for (var i = 0; i < mapData.length; i++) {
          var entry = mapData[i];
          if (entry != null) {
            boundCallback(entry[1], entry[0], this);
          }
        }
      }
    }]);
    return Map;
  }();

  Map.prototype[toIterator.ITERATOR_SYMBOL] = Map.prototype.entries;

  var MapIterator = function () {
    function MapIterator(map, kind) {
      babelHelpers.classCallCheck(this, MapIterator);

      if (!(isObject(map) && map._mapData)) {
        throw new TypeError('Object is not a map.');
      }

      if ([KIND_KEY, KIND_KEY_VALUE, KIND_VALUE].indexOf(kind) === -1) {
        throw new Error('Invalid iteration kind.');
      }

      this._map = map;
      this._nextIndex = 0;
      this._kind = kind;
    }

    babelHelpers.createClass(MapIterator, [{
      key: 'next',
      value: function next() {
        if (!this instanceof Map) {
          throw new TypeError('Expected to be called on a MapIterator.');
        }

        var map = this._map;
        var index = this._nextIndex;
        var kind = this._kind;

        if (map == null) {
          return createIterResultObject(undefined, true);
        }

        var entries = map._mapData;

        while (index < entries.length) {
          var record = entries[index];

          index += 1;
          this._nextIndex = index;

          if (record) {
            if (kind === KIND_KEY) {
              return createIterResultObject(record[0], false);
            } else if (kind === KIND_VALUE) {
              return createIterResultObject(record[1], false);
            } else if (kind) {
              return createIterResultObject(record, false);
            }
          }
        }

        this._map = undefined;

        return createIterResultObject(undefined, true);
      }
    }]);
    return MapIterator;
  }();

  MapIterator.prototype[toIterator.ITERATOR_SYMBOL] = function () {
    return this;
  };

  function getIndex(map, key) {
    if (isObject(key)) {
      var hash = getHash(key);
      return map._objectIndex[hash];
    } else {
      var prefixedKey = KEY_PREFIX + key;
      if (typeof key === 'string') {
        return map._stringIndex[prefixedKey];
      } else {
        return map._otherIndex[prefixedKey];
      }
    }
  }

  function setIndex(map, key, index) {
    var shouldDelete = index == null;

    if (isObject(key)) {
      var hash = getHash(key);
      if (shouldDelete) {
        delete map._objectIndex[hash];
      } else {
        map._objectIndex[hash] = index;
      }
    } else {
      var prefixedKey = KEY_PREFIX + key;
      if (typeof key === 'string') {
        if (shouldDelete) {
          delete map._stringIndex[prefixedKey];
        } else {
          map._stringIndex[prefixedKey] = index;
        }
      } else {
        if (shouldDelete) {
          delete map._otherIndex[prefixedKey];
        } else {
          map._otherIndex[prefixedKey] = index;
        }
      }
    }
  }

  function initMap(map) {
    map._mapData = [];

    map._objectIndex = {};

    map._stringIndex = {};

    map._otherIndex = {};

    if (__DEV__) {
      if (isES5) {
        if (map.hasOwnProperty(SECRET_SIZE_PROP)) {
          map[SECRET_SIZE_PROP] = 0;
        } else {
          Object.defineProperty(map, SECRET_SIZE_PROP, {
            value: 0,
            writable: true
          });
          Object.defineProperty(map, 'size', {
            set: function set(v) {
              console.error('PLEASE FIX ME: You are changing the map size property which ' + 'should not be writable and will break in production.');
              throw new Error('The map size property is not writable.');
            },
            get: function get() {
              return map[SECRET_SIZE_PROP];
            }
          });
        }

        return;
      }
    }

    map.size = 0;
  }

  function isObject(o) {
    return o != null && (typeof o === 'object' || typeof o === 'function');
  }

  function createIterResultObject(value, done) {
    return { value: value, done: done };
  }

  var isES5 = function () {
    try {
      Object.defineProperty({}, 'x', {});
      return true;
    } catch (e) {
      return false;
    }
  }();

  function isExtensible(o) {
    if (!isES5) {
      return true;
    } else {
      return Object.isExtensible(o);
    }
  }

  function getIENodeHash(node) {
    var uniqueID;
    switch (node.nodeType) {
      case 1:
        uniqueID = node.uniqueID;
        break;
      case 9:
        uniqueID = node.documentElement.uniqueID;
        break;
      default:
        return null;
    }

    if (uniqueID) {
      return OLD_IE_HASH_PREFIX + uniqueID;
    } else {
      return null;
    }
  }

  var getHash = function () {
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    var hashProperty = guid();
    var hashCounter = 0;

    return function getHash(o) {
      if (o[hashProperty]) {
        return o[hashProperty];
      } else if (!isES5 && o.propertyIsEnumerable && o.propertyIsEnumerable[hashProperty]) {
        return o.propertyIsEnumerable[hashProperty];
      } else if (!isES5 && isNode(o) && getIENodeHash(o)) {
        return getIENodeHash(o);
      } else if (!isES5 && o[hashProperty]) {
        return o[hashProperty];
      }

      if (isExtensible(o)) {
        hashCounter += 1;
        if (isES5) {
          Object.defineProperty(o, hashProperty, {
            enumerable: false,
            writable: false,
            configurable: false,
            value: hashCounter
          });
        } else if (o.propertyIsEnumerable) {
          o.propertyIsEnumerable = function () {
            return propIsEnumerable.apply(this, arguments);
          };
          o.propertyIsEnumerable[hashProperty] = hashCounter;
        } else if (isNode(o)) {
          o[hashProperty] = hashCounter;
        } else {
          throw new Error('Unable to set a non-enumerable property on object.');
        }
        return hashCounter;
      } else {
        throw new Error('Non-extensible objects are not allowed as keys.');
      }
    };
  }();

  return Map;
}(Function('return this')());
}, 214, null, "Map");
__d(/* _shouldPolyfillES6Collection */function(global, require, module, exports) {
'use strict';

function shouldPolyfillES6Collection(collectionName) {
  var Collection = global[collectionName];
  if (Collection == null) {
    return true;
  }

  if (typeof global.Symbol !== 'function') {
    return true;
  }

  var proto = Collection.prototype;

  return Collection == null || typeof Collection !== 'function' || typeof proto.clear !== 'function' || new Collection().size !== 0 || typeof proto.keys !== 'function' || typeof proto.forEach !== 'function';
}

module.exports = shouldPolyfillES6Collection;
}, 215, null, "_shouldPolyfillES6Collection");
__d(/* guid */function(global, require, module, exports) {

'use strict';

function guid() {
  return 'f' + (Math.random() * (1 << 30)).toString(16).replace('.', '');
}

module.exports = guid;
}, 216, null, "guid");
__d(/* fbjs/lib/isNode.js */function(global, require, module, exports) {'use strict';

function isNode(object) {
  return !!(object && (typeof Node === 'function' ? object instanceof Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
}

module.exports = isNode;
}, 217, null, "fbjs/lib/isNode.js");
__d(/* toIterator */function(global, require, module, exports) {
'use strict';

var KIND_KEY = 'key';
var KIND_VALUE = 'value';
var KIND_KEY_VAL = 'key+value';

var ITERATOR_SYMBOL = typeof Symbol === 'function' ? typeof Symbol === 'function' ? Symbol.iterator : '@@iterator' : '@@iterator';

var toIterator = function () {
  if (!(Array.prototype[ITERATOR_SYMBOL] && String.prototype[ITERATOR_SYMBOL])) {
    return function () {
      var ArrayIterator = function () {
        function ArrayIterator(array, kind) {
          babelHelpers.classCallCheck(this, ArrayIterator);

          if (!Array.isArray(array)) {
            throw new TypeError('Object is not an Array');
          }
          this._iteratedObject = array;
          this._kind = kind;
          this._nextIndex = 0;
        }

        babelHelpers.createClass(ArrayIterator, [{
          key: 'next',
          value: function next() {
            if (!this instanceof ArrayIterator) {
              throw new TypeError('Object is not an ArrayIterator');
            }

            if (this._iteratedObject == null) {
              return createIterResultObject(undefined, true);
            }

            var array = this._iteratedObject;
            var len = this._iteratedObject.length;
            var index = this._nextIndex;
            var kind = this._kind;

            if (index >= len) {
              this._iteratedObject = undefined;
              return createIterResultObject(undefined, true);
            }

            this._nextIndex = index + 1;

            if (kind === KIND_KEY) {
              return createIterResultObject(index, false);
            } else if (kind === KIND_VALUE) {
              return createIterResultObject(array[index], false);
            } else if (kind === KIND_KEY_VAL) {
              return createIterResultObject([index, array[index]], false);
            }
          }
        }, {
          key: '@@iterator',
          value: function iterator() {
            return this;
          }
        }]);
        return ArrayIterator;
      }();

      var StringIterator = function () {
        function StringIterator(string) {
          babelHelpers.classCallCheck(this, StringIterator);

          if (typeof string !== 'string') {
            throw new TypeError('Object is not a string');
          }
          this._iteratedString = string;
          this._nextIndex = 0;
        }

        babelHelpers.createClass(StringIterator, [{
          key: 'next',
          value: function next() {
            if (!this instanceof StringIterator) {
              throw new TypeError('Object is not a StringIterator');
            }

            if (this._iteratedString == null) {
              return createIterResultObject(undefined, true);
            }

            var index = this._nextIndex;
            var s = this._iteratedString;
            var len = s.length;

            if (index >= len) {
              this._iteratedString = undefined;
              return createIterResultObject(undefined, true);
            }

            var ret;
            var first = s.charCodeAt(index);

            if (first < 0xD800 || first > 0xDBFF || index + 1 === len) {
              ret = s[index];
            } else {
              var second = s.charCodeAt(index + 1);
              if (second < 0xDC00 || second > 0xDFFF) {
                ret = s[index];
              } else {
                ret = s[index] + s[index + 1];
              }
            }

            this._nextIndex = index + ret.length;

            return createIterResultObject(ret, false);
          }
        }, {
          key: '@@iterator',
          value: function iterator() {
            return this;
          }
        }]);
        return StringIterator;
      }();

      function createIterResultObject(value, done) {
        return { value: value, done: done };
      }

      return function (object, kind) {
        if (typeof object === 'string') {
          return new StringIterator(object);
        } else if (Array.isArray(object)) {
          return new ArrayIterator(object, kind || KIND_VALUE);
        } else {
          return object[ITERATOR_SYMBOL]();
        }
      };
    }();
  } else {
    return function (object) {
      return object[ITERATOR_SYMBOL]();
    };
  }
}();

babelHelpers.extends(toIterator, {
  KIND_KEY: KIND_KEY,
  KIND_VALUE: KIND_VALUE,
  KIND_KEY_VAL: KIND_KEY_VAL,
  ITERATOR_SYMBOL: ITERATOR_SYMBOL
});

module.exports = toIterator;
}, 218, null, "toIterator");
__d(/* Set */function(global, require, module, exports) {

'use strict';

var Map = require(214  ); // 214 = Map

var _shouldPolyfillES6Collection = require(215                           ); // 215 = _shouldPolyfillES6Collection
var toIterator = require(218         ); // 218 = toIterator

module.exports = function (global) {
  if (!_shouldPolyfillES6Collection('Set')) {
    return global.Set;
  }

  var Set = function () {
    function Set(iterable) {
      babelHelpers.classCallCheck(this, Set);

      if (this == null || typeof this !== 'object' && typeof this !== 'function') {
        throw new TypeError('Wrong set object type.');
      }

      initSet(this);

      if (iterable != null) {
        var it = toIterator(iterable);
        var next;
        while (!(next = it.next()).done) {
          this.add(next.value);
        }
      }
    }

    babelHelpers.createClass(Set, [{
      key: 'add',
      value: function add(value) {
        this._map.set(value, value);
        this.size = this._map.size;
        return this;
      }
    }, {
      key: 'clear',
      value: function clear() {
        initSet(this);
      }
    }, {
      key: 'delete',
      value: function _delete(value) {
        var ret = this._map.delete(value);
        this.size = this._map.size;
        return ret;
      }
    }, {
      key: 'entries',
      value: function entries() {
        return this._map.entries();
      }
    }, {
      key: 'forEach',
      value: function forEach(callback) {
        var thisArg = arguments[1];
        var it = this._map.keys();
        var next;
        while (!(next = it.next()).done) {
          callback.call(thisArg, next.value, next.value, this);
        }
      }
    }, {
      key: 'has',
      value: function has(value) {
        return this._map.has(value);
      }
    }, {
      key: 'values',
      value: function values() {
        return this._map.values();
      }
    }]);
    return Set;
  }();

  Set.prototype[toIterator.ITERATOR_SYMBOL] = Set.prototype.values;

  Set.prototype.keys = Set.prototype.values;

  function initSet(set) {
    set._map = new Map();
    set.size = set._map.size;
  }

  return Set;
}(Function('return this')());
}, 219, null, "Set");
__d(/* setupDevtools */function(global, require, module, exports) {
'use strict';

var NativeModules = require(27             ); // 27 = NativeModules
var Platform = require(26        ); // 26 = Platform

function setupDevtools() {
  var messageListeners = [];
  var closeListeners = [];
  var hostname = 'localhost';
  if (Platform.OS === 'android' && NativeModules.AndroidConstants) {
    hostname = NativeModules.AndroidConstants.ServerHost.split(':')[0];
  }
  var port = window.__REACT_DEVTOOLS_PORT__ || 8097;
  var ws = new window.WebSocket('ws://' + hostname + ':' + port + '/devtools');

  var FOR_BACKEND = {
    resolveRNStyle: require(23            ), // 23 = flattenStyle
    wall: {
      listen: function listen(fn) {
        messageListeners.push(fn);
      },
      onClose: function onClose(fn) {
        closeListeners.push(fn);
      },
      send: function send(data) {
        ws.send(JSON.stringify(data));
      }
    }
  };
  ws.onclose = handleClose;
  ws.onerror = handleClose;
  ws.onopen = function () {
    tryToConnect();
  };

  var hasClosed = false;
  function handleClose() {
    if (!hasClosed) {
      hasClosed = true;
      setTimeout(setupDevtools, 2000);
      closeListeners.forEach(function (fn) {
        return fn();
      });
    }
  }

  function tryToConnect() {
    ws.send('attach:agent');
    var _interval = setInterval(function () {
      return ws.send('attach:agent');
    }, 500);
    ws.onmessage = function (evt) {
      if (evt.data.indexOf('eval:') === 0) {
        clearInterval(_interval);
        initialize(evt.data.slice('eval:'.length));
      }
    };
  }

  function initialize(text) {
    try {
      eval(text);
    } catch (e) {
      console.error('Failed to eval: ' + e.message);
      return;
    }

    var ReactNativeComponentTree = require(132                       ); // 132 = ReactNativeComponentTree
    window.__REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
      ComponentTree: {
        getClosestInstanceFromNode: function getClosestInstanceFromNode(node) {
          return ReactNativeComponentTree.getClosestInstanceFromNode(node);
        },
        getNodeFromInstance: function getNodeFromInstance(inst) {
          while (inst._renderedComponent) {
            inst = inst._renderedComponent;
          }
          if (inst) {
            return ReactNativeComponentTree.getNodeFromInstance(inst);
          } else {
            return null;
          }
        }
      },
      Mount: require(221               ), // 221 = ReactNativeMount
      Reconciler: require(146              ) // 146 = ReactReconciler
    });
    ws.onmessage = handleMessage;
  }

  function handleMessage(evt) {
    var data;
    try {
      data = JSON.parse(evt.data);
    } catch (e) {
      return console.error('failed to parse json: ' + evt.data);
    }

    if (data.$close || data.$error) {
      closeListeners.forEach(function (fn) {
        return fn();
      });
      window.__REACT_DEVTOOLS_GLOBAL_HOOK__.emit('shutdown');
      tryToConnect();
      return;
    }
    if (data.$open) {
      return;
    }
    messageListeners.forEach(function (fn) {
      try {
        fn(data);
      } catch (e) {
        console.log(data);
        throw e;
      }
    });
  }
}

module.exports = setupDevtools;
}, 220, null, "setupDevtools");
__d(/* ReactNativeMount */function(global, require, module, exports) {
'use strict';

var React = require(76     ); // 76 = React
var ReactInstrumentation = require(149                   ); // 149 = ReactInstrumentation
var ReactNativeContainerInfo = require(222                       ); // 222 = ReactNativeContainerInfo
var ReactNativeTagHandles = require(141                    ); // 141 = ReactNativeTagHandles
var ReactReconciler = require(146              ); // 146 = ReactReconciler
var ReactUpdateQueue = require(223               ); // 223 = ReactUpdateQueue
var ReactUpdates = require(142           ); // 142 = ReactUpdates
var UIManager = require(73         ); // 73 = UIManager

var emptyObject = require(89                    ); // 89 = fbjs/lib/emptyObject
var instantiateReactComponent = require(154                        ); // 154 = instantiateReactComponent
var shouldUpdateReactComponent = require(161                         ); // 161 = shouldUpdateReactComponent

var TopLevelWrapper = function TopLevelWrapper() {};
TopLevelWrapper.prototype.isReactComponent = {};
if (__DEV__) {
  TopLevelWrapper.displayName = 'TopLevelWrapper';
}
TopLevelWrapper.prototype.render = function () {
  return this.props.child;
};
TopLevelWrapper.isReactTopLevelWrapper = true;

function mountComponentIntoNode(componentInstance, containerTag, transaction) {
  var markup = ReactReconciler.mountComponent(componentInstance, transaction, null, ReactNativeContainerInfo(containerTag), emptyObject, 0);
  componentInstance._renderedComponent._topLevelWrapper = componentInstance;
  ReactNativeMount._mountImageIntoNode(markup, containerTag);
}

function batchedMountComponentIntoNode(componentInstance, containerTag) {
  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled();
  transaction.perform(mountComponentIntoNode, null, componentInstance, containerTag, transaction);
  ReactUpdates.ReactReconcileTransaction.release(transaction);
}

var ReactNativeMount = {
  _instancesByContainerID: {},

  findNodeHandle: require(74              ), // 74 = findNodeHandle

  renderComponent: function renderComponent(nextElement, containerTag, callback) {
    var nextWrappedElement = React.createElement(TopLevelWrapper, { child: nextElement });

    var topRootNodeID = containerTag;
    var prevComponent = ReactNativeMount._instancesByContainerID[topRootNodeID];
    if (prevComponent) {
      var prevWrappedElement = prevComponent._currentElement;
      var prevElement = prevWrappedElement.props.child;
      if (shouldUpdateReactComponent(prevElement, nextElement)) {
        ReactUpdateQueue.enqueueElementInternal(prevComponent, nextWrappedElement, emptyObject);
        if (callback) {
          ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
        }
        return prevComponent;
      } else {
        ReactNativeMount.unmountComponentAtNode(containerTag);
      }
    }

    if (!ReactNativeTagHandles.reactTagIsNativeTopRootID(containerTag)) {
      console.error('You cannot render into anything but a top root');
      return null;
    }

    ReactNativeTagHandles.assertRootTag(containerTag);

    var instance = instantiateReactComponent(nextWrappedElement, false);
    ReactNativeMount._instancesByContainerID[containerTag] = instance;

    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, instance, containerTag);
    var component = instance.getPublicInstance();
    if (callback) {
      callback.call(component);
    }
    return component;
  },

  _mountImageIntoNode: function _mountImageIntoNode(mountImage, containerID) {
    var childTag = mountImage;
    UIManager.setChildren(containerID, [childTag]);
  },

  unmountComponentAtNodeAndRemoveContainer: function unmountComponentAtNodeAndRemoveContainer(containerTag) {
    ReactNativeMount.unmountComponentAtNode(containerTag);

    UIManager.removeRootView(containerTag);
  },

  unmountComponentAtNode: function unmountComponentAtNode(containerTag) {
    if (!ReactNativeTagHandles.reactTagIsNativeTopRootID(containerTag)) {
      console.error('You cannot render into anything but a top root');
      return false;
    }

    var instance = ReactNativeMount._instancesByContainerID[containerTag];
    if (!instance) {
      return false;
    }
    if (__DEV__) {
      ReactInstrumentation.debugTool.onBeginFlush();
    }
    ReactNativeMount.unmountComponentFromNode(instance, containerTag);
    delete ReactNativeMount._instancesByContainerID[containerTag];
    if (__DEV__) {
      ReactInstrumentation.debugTool.onEndFlush();
    }
    return true;
  },

  unmountComponentFromNode: function unmountComponentFromNode(instance, containerID) {
    ReactReconciler.unmountComponent(instance);
    UIManager.removeSubviewsFromContainerWithID(containerID);
  }

};

module.exports = ReactNativeMount;
}, 221, null, "ReactNativeMount");
__d(/* ReactNativeContainerInfo */function(global, require, module, exports) {
'use strict';

function ReactNativeContainerInfo(tag) {
  var info = {
    _tag: tag
  };
  return info;
}

module.exports = ReactNativeContainerInfo;
}, 222, null, "ReactNativeContainerInfo");
__d(/* ReactUpdateQueue */function(global, require, module, exports) {

'use strict';

var ReactCurrentOwner = require(35                           ); // 35 = react/lib/ReactCurrentOwner
var ReactInstanceMap = require(75                ); // 75 = ReactInstanceMap
var ReactInstrumentation = require(149                   ); // 149 = ReactInstrumentation
var ReactUpdates = require(142           ); // 142 = ReactUpdates

var invariant = require(24                  ); // 24 = fbjs/lib/invariant
var warning = require(13                ); // 13 = fbjs/lib/warning

function enqueueUpdate(internalInstance) {
  ReactUpdates.enqueueUpdate(internalInstance);
}

function formatUnexpectedArgument(arg) {
  var type = typeof arg;
  if (type !== 'object') {
    return type;
  }
  var displayName = arg.constructor && arg.constructor.name || type;
  var keys = Object.keys(arg);
  if (keys.length > 0 && keys.length < 20) {
    return displayName + ' (keys: ' + keys.join(', ') + ')';
  }
  return displayName;
}

function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
  var internalInstance = ReactInstanceMap.get(publicInstance);
  if (!internalInstance) {
    if (__DEV__) {
      var ctor = publicInstance.constructor;

      warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, ctor && (ctor.displayName || ctor.name) || 'ReactClass');
    }
    return null;
  }

  if (__DEV__) {
    warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition (such as ' + 'within `render` or another component\'s constructor). Render methods ' + 'should be a pure function of props and state; constructor ' + 'side-effects are an anti-pattern, but can be moved to ' + '`componentWillMount`.', callerName);
  }

  return internalInstance;
}

var ReactUpdateQueue = {
  isMounted: function isMounted(publicInstance) {
    if (__DEV__) {
      var owner = ReactCurrentOwner.current;
      if (owner !== null) {
        warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component');
        owner._warnedAboutRefsInRender = true;
      }
    }
    var internalInstance = ReactInstanceMap.get(publicInstance);
    if (internalInstance) {
      return !!internalInstance._renderedComponent;
    } else {
      return false;
    }
  },

  enqueueCallback: function enqueueCallback(publicInstance, callback, callerName) {
    ReactUpdateQueue.validateCallback(callback, callerName);
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

    if (!internalInstance) {
      return null;
    }

    if (internalInstance._pendingCallbacks) {
      internalInstance._pendingCallbacks.push(callback);
    } else {
      internalInstance._pendingCallbacks = [callback];
    }

    enqueueUpdate(internalInstance);
  },

  enqueueCallbackInternal: function enqueueCallbackInternal(internalInstance, callback) {
    if (internalInstance._pendingCallbacks) {
      internalInstance._pendingCallbacks.push(callback);
    } else {
      internalInstance._pendingCallbacks = [callback];
    }
    enqueueUpdate(internalInstance);
  },

  enqueueForceUpdate: function enqueueForceUpdate(publicInstance) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');

    if (!internalInstance) {
      return;
    }

    internalInstance._pendingForceUpdate = true;

    enqueueUpdate(internalInstance);
  },

  enqueueReplaceState: function enqueueReplaceState(publicInstance, completeState) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');

    if (!internalInstance) {
      return;
    }

    internalInstance._pendingStateQueue = [completeState];
    internalInstance._pendingReplaceState = true;

    enqueueUpdate(internalInstance);
  },

  enqueueSetState: function enqueueSetState(publicInstance, partialState) {
    if (__DEV__) {
      ReactInstrumentation.debugTool.onSetState();
      warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().');
    }

    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');

    if (!internalInstance) {
      return;
    }

    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
    queue.push(partialState);

    enqueueUpdate(internalInstance);
  },

  enqueueElementInternal: function enqueueElementInternal(internalInstance, nextElement, nextContext) {
    internalInstance._pendingElement = nextElement;

    internalInstance._context = nextContext;
    enqueueUpdate(internalInstance);
  },

  validateCallback: function validateCallback(callback, callerName) {
    invariant(!callback || typeof callback === 'function', '%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, formatUnexpectedArgument(callback));
  }

};

module.exports = ReactUpdateQueue;
}, 223, null, "ReactUpdateQueue");
__d(/* RCTDebugComponentOwnership */function(global, require, module, exports) {

'use strict';

var BatchedBridge = require(28             ); // 28 = BatchedBridge

var RCTDebugComponentOwnership = {
  getOwnerHierarchy: function getOwnerHierarchy(requestID, tag) {
    throw new Error('This seems to be unused. Will disable until it is needed again.');
  }
};

BatchedBridge.registerCallableModule('RCTDebugComponentOwnership', RCTDebugComponentOwnership);

module.exports = RCTDebugComponentOwnership;
}, 224, null, "RCTDebugComponentOwnership");
__d(/* JSInspector */function(global, require, module, exports) {
'use strict';

var JSInspector = {
  registerAgent: function registerAgent(type) {
    if (global.__registerInspectorAgent) {
      global.__registerInspectorAgent(type);
    }
  },
  getTimestamp: function getTimestamp() {
    return global.__inspectorTimestamp();
  }
};

module.exports = JSInspector;
}, 225, null, "JSInspector");
__d(/* NetworkAgent */function(global, require, module, exports) {
'use strict';

var InspectorAgent = require(227             ); // 227 = InspectorAgent
var JSInspector = require(225          ); // 225 = JSInspector
var Map = require(214  ); // 214 = Map
var XMLHttpRequest = require(209             ); // 209 = XMLHttpRequest

var Interceptor = function () {
  function Interceptor(agent) {
    babelHelpers.classCallCheck(this, Interceptor);

    this._agent = agent;
    this._requests = new Map();
  }

  babelHelpers.createClass(Interceptor, [{
    key: 'getData',
    value: function getData(requestId) {
      return this._requests.get(requestId);
    }
  }, {
    key: 'requestSent',
    value: function requestSent(id, url, method, headers) {
      var requestId = String(id);
      this._requests.set(requestId, '');

      var request = {
        url: url,
        method: method,
        headers: headers,
        initialPriority: 'Medium'
      };
      var event = {
        requestId: requestId,
        documentURL: '',
        frameId: '1',
        loaderId: '1',
        request: request,
        timestamp: JSInspector.getTimestamp(),
        initiator: {
          type: 'other'
        },
        type: 'Other'
      };
      this._agent.sendEvent('requestWillBeSent', event);
    }
  }, {
    key: 'responseReceived',
    value: function responseReceived(id, url, status, headers) {
      var requestId = String(id);
      var response = {
        url: url,
        status: status,
        statusText: String(status),
        headers: headers,

        requestHeaders: {},
        mimeType: this._getMimeType(headers),
        connectionReused: false,
        connectionId: -1,
        encodedDataLength: 0,
        securityState: 'unknown'
      };

      var event = {
        requestId: requestId,
        frameId: '1',
        loaderId: '1',
        timestamp: JSInspector.getTimestamp(),
        type: 'Other',
        response: response
      };
      this._agent.sendEvent('responseReceived', event);
    }
  }, {
    key: 'dataReceived',
    value: function dataReceived(id, data) {
      var requestId = String(id);
      var existingData = this._requests.get(requestId) || '';
      this._requests.set(requestId, existingData.concat(data));
      var event = {
        requestId: requestId,
        timestamp: JSInspector.getTimestamp(),
        dataLength: data.length,
        encodedDataLength: data.length
      };
      this._agent.sendEvent('dataReceived', event);
    }
  }, {
    key: 'loadingFinished',
    value: function loadingFinished(id, encodedDataLength) {
      var event = {
        requestId: String(id),
        timestamp: JSInspector.getTimestamp(),
        encodedDataLength: encodedDataLength
      };
      this._agent.sendEvent('loadingFinished', event);
    }
  }, {
    key: 'loadingFailed',
    value: function loadingFailed(id, error) {
      var event = {
        requestId: String(id),
        timestamp: JSInspector.getTimestamp(),
        type: 'Other',
        errorText: error
      };
      this._agent.sendEvent('loadingFailed', event);
    }
  }, {
    key: '_getMimeType',
    value: function _getMimeType(headers) {
      var contentType = headers['Content-Type'] || '';
      return contentType.split(';')[0];
    }
  }]);
  return Interceptor;
}();

var NetworkAgent = function (_InspectorAgent) {
  babelHelpers.inherits(NetworkAgent, _InspectorAgent);

  function NetworkAgent() {
    babelHelpers.classCallCheck(this, NetworkAgent);
    return babelHelpers.possibleConstructorReturn(this, (NetworkAgent.__proto__ || Object.getPrototypeOf(NetworkAgent)).apply(this, arguments));
  }

  babelHelpers.createClass(NetworkAgent, [{
    key: 'enable',
    value: function enable(_ref) {
      var maxResourceBufferSize = _ref.maxResourceBufferSize,
          maxTotalBufferSize = _ref.maxTotalBufferSize;

      this._interceptor = new Interceptor(this);
      XMLHttpRequest.setInterceptor(this._interceptor);
    }
  }, {
    key: 'disable',
    value: function disable() {
      XMLHttpRequest.setInterceptor(null);
      this._interceptor = null;
    }
  }, {
    key: 'getResponseBody',
    value: function getResponseBody(_ref2) {
      var requestId = _ref2.requestId;

      return { body: this.interceptor().getData(requestId), base64Encoded: false };
    }
  }, {
    key: 'interceptor',
    value: function interceptor() {
      if (this._interceptor) {
        return this._interceptor;
      } else {
        throw Error('_interceptor can not be null');
      }
    }
  }]);
  return NetworkAgent;
}(InspectorAgent);

NetworkAgent.DOMAIN = 'Network';


module.exports = NetworkAgent;
}, 226, null, "NetworkAgent");
__d(/* InspectorAgent */function(global, require, module, exports) {
'use strict';

var InspectorAgent = function () {
  function InspectorAgent(eventSender) {
    babelHelpers.classCallCheck(this, InspectorAgent);

    this._eventSender = eventSender;
  }

  babelHelpers.createClass(InspectorAgent, [{
    key: 'sendEvent',
    value: function sendEvent(name, params) {
      this._eventSender(name, params);
    }
  }]);
  return InspectorAgent;
}();

module.exports = InspectorAgent;
}, 227, null, "InspectorAgent");
__d(/* RCTNativeAppEventEmitter */function(global, require, module, exports) {
'use strict';

var BatchedBridge = require(28             ); // 28 = BatchedBridge
var RCTDeviceEventEmitter = require(57                     ); // 57 = RCTDeviceEventEmitter

var RCTNativeAppEventEmitter = RCTDeviceEventEmitter;

BatchedBridge.registerCallableModule('RCTNativeAppEventEmitter', RCTNativeAppEventEmitter);

module.exports = RCTNativeAppEventEmitter;
}, 228, null, "RCTNativeAppEventEmitter");
__d(/* PerformanceLogger */function(global, require, module, exports) {
'use strict';

var BatchedBridge = require(28             ); // 28 = BatchedBridge
var performanceNow = global.nativePerformanceNow || require(40                       ); // 40 = fbjs/lib/performanceNow

var timespans = {};
var extras = {};

var PerformanceLogger = {
  addTimespan: function addTimespan(key, lengthInMs, description) {
    if (timespans[key]) {
      if (__DEV__) {
        console.log('PerformanceLogger: Attempting to add a timespan that already exists ', key);
      }
      return;
    }

    timespans[key] = {
      description: description,
      totalTime: lengthInMs
    };
  },
  startTimespan: function startTimespan(key, description) {
    if (timespans[key]) {
      if (__DEV__) {
        console.log('PerformanceLogger: Attempting to start a timespan that already exists ', key);
      }
      return;
    }

    timespans[key] = {
      description: description,
      startTime: performanceNow()
    };
  },
  stopTimespan: function stopTimespan(key) {
    if (!timespans[key] || !timespans[key].startTime) {
      if (__DEV__) {
        console.log('PerformanceLogger: Attempting to end a timespan that has not started ', key);
      }
      return;
    }
    if (timespans[key].endTime) {
      if (__DEV__) {
        console.log('PerformanceLogger: Attempting to end a timespan that has already ended ', key);
      }
      return;
    }

    timespans[key].endTime = performanceNow();
    timespans[key].totalTime = timespans[key].endTime - timespans[key].startTime;
  },
  clear: function clear() {
    timespans = {};
    extras = {};
  },
  clearExceptTimespans: function clearExceptTimespans(keys) {
    timespans = Object.keys(timespans).reduce(function (previous, key) {
      if (keys.indexOf(key) !== -1) {
        previous[key] = timespans[key];
      }
      return previous;
    }, {});
    extras = {};
  },
  getTimespans: function getTimespans() {
    return timespans;
  },
  hasTimespan: function hasTimespan(key) {
    return !!timespans[key];
  },
  logTimespans: function logTimespans() {
    for (var key in timespans) {
      if (timespans[key].totalTime) {
        console.log(key + ': ' + timespans[key].totalTime + 'ms');
      }
    }
  },
  addTimespans: function addTimespans(newTimespans, labels) {
    for (var i = 0, l = newTimespans.length; i < l; i += 2) {
      var label = labels[i / 2];
      PerformanceLogger.addTimespan(label, newTimespans[i + 1] - newTimespans[i], label);
    }
  },
  setExtra: function setExtra(key, value) {
    if (extras[key]) {
      if (__DEV__) {
        console.log('PerformanceLogger: Attempting to set an extra that already exists ', key);
      }
      return;
    }
    extras[key] = value;
  },
  getExtras: function getExtras() {
    return extras;
  }
};

BatchedBridge.registerCallableModule('PerformanceLogger', PerformanceLogger);

module.exports = PerformanceLogger;
}, 229, null, "PerformanceLogger");
__d(/* RCTEventEmitter */function(global, require, module, exports) {
'use strict';

var BatchedBridge = require(28             ); // 28 = BatchedBridge

var RCTEventEmitter = {
  register: function register(eventEmitter) {
    BatchedBridge.registerCallableModule('RCTEventEmitter', eventEmitter);
  }
};

module.exports = RCTEventEmitter;
}, 230, null, "RCTEventEmitter");
__d(/* ReactDefaultBatchingStrategy */function(global, require, module, exports) {

'use strict';

var ReactUpdates = require(142           ); // 142 = ReactUpdates
var Transaction = require(150          ); // 150 = Transaction

var emptyFunction = require(14                      ); // 14 = fbjs/lib/emptyFunction

var RESET_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: function close() {
    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
  }
};

var FLUSH_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
};

var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

function ReactDefaultBatchingStrategyTransaction() {
  this.reinitializeTransaction();
}

babelHelpers.extends(ReactDefaultBatchingStrategyTransaction.prototype, Transaction, {
  getTransactionWrappers: function getTransactionWrappers() {
    return TRANSACTION_WRAPPERS;
  }
});

var transaction = new ReactDefaultBatchingStrategyTransaction();

var ReactDefaultBatchingStrategy = {
  isBatchingUpdates: false,

  batchedUpdates: function batchedUpdates(callback, a, b, c, d, e) {
    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

    if (alreadyBatchingUpdates) {
      return callback(a, b, c, d, e);
    } else {
      return transaction.perform(callback, null, a, b, c, d, e);
    }
  }
};

module.exports = ReactDefaultBatchingStrategy;
}, 231, null, "ReactDefaultBatchingStrategy");
__d(/* ReactNativeBridgeEventPlugin */function(global, require, module, exports) {
'use strict';

var EventPropagators = require(233               ); // 233 = EventPropagators
var SyntheticEvent = require(234             ); // 234 = SyntheticEvent
var UIManager = require(73         ); // 73 = UIManager

var warning = require(13                ); // 13 = fbjs/lib/warning

var customBubblingEventTypes = UIManager.customBubblingEventTypes;
var customDirectEventTypes = UIManager.customDirectEventTypes;

var allTypesByEventName = {};

for (var bubblingTypeName in customBubblingEventTypes) {
  allTypesByEventName[bubblingTypeName] = customBubblingEventTypes[bubblingTypeName];
}

for (var directTypeName in customDirectEventTypes) {
  warning(!customBubblingEventTypes[directTypeName], 'Event cannot be both direct and bubbling: %s', directTypeName);
  allTypesByEventName[directTypeName] = customDirectEventTypes[directTypeName];
}

var ReactNativeBridgeEventPlugin = {

  eventTypes: babelHelpers.extends({}, customBubblingEventTypes, customDirectEventTypes),

  extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var bubbleDispatchConfig = customBubblingEventTypes[topLevelType];
    var directDispatchConfig = customDirectEventTypes[topLevelType];
    var event = SyntheticEvent.getPooled(bubbleDispatchConfig || directDispatchConfig, targetInst, nativeEvent, nativeEventTarget);
    if (bubbleDispatchConfig) {
      EventPropagators.accumulateTwoPhaseDispatches(event);
    } else if (directDispatchConfig) {
      EventPropagators.accumulateDirectDispatches(event);
    } else {
      return null;
    }
    return event;
  }
};

module.exports = ReactNativeBridgeEventPlugin;
}, 232, null, "ReactNativeBridgeEventPlugin");
__d(/* EventPropagators */function(global, require, module, exports) {

'use strict';

var EventPluginHub = require(134             ); // 134 = EventPluginHub
var EventPluginUtils = require(136               ); // 136 = EventPluginUtils

var accumulateInto = require(138             ); // 138 = accumulateInto
var forEachAccumulated = require(139                 ); // 139 = forEachAccumulated
var warning = require(13                ); // 13 = fbjs/lib/warning

var getListener = EventPluginHub.getListener;

function listenerAtPhase(inst, event, propagationPhase) {
  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
  return getListener(inst, registrationName);
}

function accumulateDirectionalDispatches(inst, phase, event) {
  if (__DEV__) {
    warning(inst, 'Dispatching inst must not be null');
  }
  var listener = listenerAtPhase(inst, event, phase);
  if (listener) {
    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
  }
}

function accumulateTwoPhaseDispatchesSingle(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    EventPluginUtils.traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
  }
}

function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    var targetInst = event._targetInst;
    var parentInst = targetInst ? EventPluginUtils.getParentInstance(targetInst) : null;
    EventPluginUtils.traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
  }
}

function accumulateDispatches(inst, ignoredDirection, event) {
  if (event && event.dispatchConfig.registrationName) {
    var registrationName = event.dispatchConfig.registrationName;
    var listener = getListener(inst, registrationName);
    if (listener) {
      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
    }
  }
}

function accumulateDirectDispatchesSingle(event) {
  if (event && event.dispatchConfig.registrationName) {
    accumulateDispatches(event._targetInst, null, event);
  }
}

function accumulateTwoPhaseDispatches(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
}

function accumulateTwoPhaseDispatchesSkipTarget(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
}

function accumulateEnterLeaveDispatches(leave, enter, from, to) {
  EventPluginUtils.traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
}

function accumulateDirectDispatches(events) {
  forEachAccumulated(events, accumulateDirectDispatchesSingle);
}

var EventPropagators = {
  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
  accumulateDirectDispatches: accumulateDirectDispatches,
  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
};

module.exports = EventPropagators;
}, 233, null, "EventPropagators");
__d(/* SyntheticEvent */function(global, require, module, exports) {

'use strict';

var PooledClass = require(144          ); // 144 = PooledClass

var emptyFunction = require(14                      ); // 14 = fbjs/lib/emptyFunction
var warning = require(13                ); // 13 = fbjs/lib/warning

var didWarnForAddedNewProperty = false;
var isProxySupported = typeof Proxy === 'function';

var shouldBeReleasedProperties = ['dispatchConfig', '_targetInst', 'nativeEvent', 'isDefaultPrevented', 'isPropagationStopped', '_dispatchListeners', '_dispatchInstances'];

var EventInterface = {
  type: null,
  target: null,

  currentTarget: emptyFunction.thatReturnsNull,
  eventPhase: null,
  bubbles: null,
  cancelable: null,
  timeStamp: function timeStamp(event) {
    return event.timeStamp || Date.now();
  },
  defaultPrevented: null,
  isTrusted: null
};

function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
  if (__DEV__) {
    delete this.nativeEvent;
    delete this.preventDefault;
    delete this.stopPropagation;
  }

  this.dispatchConfig = dispatchConfig;
  this._targetInst = targetInst;
  this.nativeEvent = nativeEvent;

  var Interface = this.constructor.Interface;
  for (var propName in Interface) {
    if (!Interface.hasOwnProperty(propName)) {
      continue;
    }
    if (__DEV__) {
      delete this[propName];
    }
    var normalize = Interface[propName];
    if (normalize) {
      this[propName] = normalize(nativeEvent);
    } else {
      if (propName === 'target') {
        this.target = nativeEventTarget;
      } else {
        this[propName] = nativeEvent[propName];
      }
    }
  }

  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
  if (defaultPrevented) {
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  } else {
    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
  }
  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
  return this;
}

babelHelpers.extends(SyntheticEvent.prototype, {

  preventDefault: function preventDefault() {
    this.defaultPrevented = true;
    var event = this.nativeEvent;
    if (!event) {
      return;
    }

    if (event.preventDefault) {
      event.preventDefault();
    } else if (typeof event.returnValue !== 'unknown') {
      event.returnValue = false;
    }
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  },

  stopPropagation: function stopPropagation() {
    var event = this.nativeEvent;
    if (!event) {
      return;
    }

    if (event.stopPropagation) {
      event.stopPropagation();
    } else if (typeof event.cancelBubble !== 'unknown') {
      event.cancelBubble = true;
    }

    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
  },

  persist: function persist() {
    this.isPersistent = emptyFunction.thatReturnsTrue;
  },

  isPersistent: emptyFunction.thatReturnsFalse,

  destructor: function destructor() {
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
      if (__DEV__) {
        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
      } else {
        this[propName] = null;
      }
    }
    for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
      this[shouldBeReleasedProperties[i]] = null;
    }
    if (__DEV__) {
      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', emptyFunction));
      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', emptyFunction));
    }
  }

});

SyntheticEvent.Interface = EventInterface;

if (__DEV__) {
  if (isProxySupported) {
    SyntheticEvent = new Proxy(SyntheticEvent, {
      construct: function construct(target, args) {
        return this.apply(target, Object.create(target.prototype), args);
      },
      apply: function apply(constructor, that, args) {
        return new Proxy(constructor.apply(that, args), {
          set: function set(target, prop, value) {
            if (prop !== 'isPersistent' && !target.constructor.Interface.hasOwnProperty(prop) && shouldBeReleasedProperties.indexOf(prop) === -1) {
              warning(didWarnForAddedNewProperty || target.isPersistent(), 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re adding a new property in the synthetic event object. ' + 'The property is never released. See ' + 'https://fb.me/react-event-pooling for more information.');
              didWarnForAddedNewProperty = true;
            }
            target[prop] = value;
            return true;
          }
        });
      }
    });
  }
}

SyntheticEvent.augmentClass = function (Class, Interface) {
  var Super = this;

  var E = function E() {};
  E.prototype = Super.prototype;
  var prototype = new E();

  babelHelpers.extends(prototype, Class.prototype);
  Class.prototype = prototype;
  Class.prototype.constructor = Class;

  Class.Interface = babelHelpers.extends({}, Super.Interface, Interface);
  Class.augmentClass = Super.augmentClass;

  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
};

PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);

module.exports = SyntheticEvent;

function getPooledWarningPropertyDefinition(propName, getVal) {
  var isFunction = typeof getVal === 'function';
  return {
    configurable: true,
    set: set,
    get: get
  };

  function set(val) {
    var action = isFunction ? 'setting the method' : 'setting the property';
    warn(action, 'This is effectively a no-op');
    return val;
  }

  function get() {
    var action = isFunction ? 'accessing the method' : 'accessing the property';
    var result = isFunction ? 'This is a no-op function' : 'This is set to null';
    warn(action, result);
    return getVal;
  }

  function warn(action, result) {
    var warningCondition = false;
    warning(warningCondition, 'This synthetic event is reused for performance reasons. If you\'re seeing this, ' + 'you\'re %s `%s` on a released/nullified synthetic event. %s. ' + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result);
  }
}
}, 234, null, "SyntheticEvent");
__d(/* ReactNativeComponentEnvironment */function(global, require, module, exports) {
'use strict';

var ReactNativeDOMIDOperations = require(236                         ); // 236 = ReactNativeDOMIDOperations
var ReactNativeReconcileTransaction = require(237                              ); // 237 = ReactNativeReconcileTransaction

var ReactNativeComponentEnvironment = {

  processChildrenUpdates: ReactNativeDOMIDOperations.dangerouslyProcessChildrenUpdates,

  replaceNodeWithMarkup: ReactNativeDOMIDOperations.dangerouslyReplaceNodeWithMarkupByID,

  clearNode: function clearNode() {},

  ReactReconcileTransaction: ReactNativeReconcileTransaction
};

module.exports = ReactNativeComponentEnvironment;
}, 235, null, "ReactNativeComponentEnvironment");
__d(/* ReactNativeDOMIDOperations */function(global, require, module, exports) {
'use strict';

var ReactNativeComponentTree = require(132                       ); // 132 = ReactNativeComponentTree
var UIManager = require(73         ); // 73 = UIManager

var dangerouslyProcessChildrenUpdates = function dangerouslyProcessChildrenUpdates(inst, childrenUpdates) {
  if (!childrenUpdates.length) {
    return;
  }

  var containerTag = ReactNativeComponentTree.getNodeFromInstance(inst);

  var moveFromIndices;
  var moveToIndices;
  var addChildTags;
  var addAtIndices;
  var removeAtIndices;

  for (var i = 0; i < childrenUpdates.length; i++) {
    var update = childrenUpdates[i];
    if (update.type === 'MOVE_EXISTING') {
      (moveFromIndices || (moveFromIndices = [])).push(update.fromIndex);
      (moveToIndices || (moveToIndices = [])).push(update.toIndex);
    } else if (update.type === 'REMOVE_NODE') {
      (removeAtIndices || (removeAtIndices = [])).push(update.fromIndex);
    } else if (update.type === 'INSERT_MARKUP') {
      var mountImage = update.content;
      var tag = mountImage;
      (addAtIndices || (addAtIndices = [])).push(update.toIndex);
      (addChildTags || (addChildTags = [])).push(tag);
    }
  }

  UIManager.manageChildren(containerTag, moveFromIndices, moveToIndices, addChildTags, addAtIndices, removeAtIndices);
};

var ReactNativeDOMIDOperations = {
  dangerouslyProcessChildrenUpdates: dangerouslyProcessChildrenUpdates,

  dangerouslyReplaceNodeWithMarkupByID: function dangerouslyReplaceNodeWithMarkupByID(id, mountImage) {
    var oldTag = id;
    UIManager.replaceExistingNonRootView(oldTag, mountImage);
  }
};

module.exports = ReactNativeDOMIDOperations;
}, 236, null, "ReactNativeDOMIDOperations");
__d(/* ReactNativeReconcileTransaction */function(global, require, module, exports) {
'use strict';

var CallbackQueue = require(143            ); // 143 = CallbackQueue
var PooledClass = require(144          ); // 144 = PooledClass
var Transaction = require(150          ); // 150 = Transaction
var ReactInstrumentation = require(149                   ); // 149 = ReactInstrumentation
var ReactUpdateQueue = require(223               ); // 223 = ReactUpdateQueue

var ON_DOM_READY_QUEUEING = {
  initialize: function initialize() {
    this.reactMountReady.reset();
  },

  close: function close() {
    this.reactMountReady.notifyAll();
  }
};

var TRANSACTION_WRAPPERS = [ON_DOM_READY_QUEUEING];

if (__DEV__) {
  TRANSACTION_WRAPPERS.push({
    initialize: ReactInstrumentation.debugTool.onBeginFlush,
    close: ReactInstrumentation.debugTool.onEndFlush
  });
}

function ReactNativeReconcileTransaction() {
  this.reinitializeTransaction();
  this.reactMountReady = CallbackQueue.getPooled(null);
}

var Mixin = {
  getTransactionWrappers: function getTransactionWrappers() {
    return TRANSACTION_WRAPPERS;
  },

  getReactMountReady: function getReactMountReady() {
    return this.reactMountReady;
  },

  getUpdateQueue: function getUpdateQueue() {
    return ReactUpdateQueue;
  },

  checkpoint: function checkpoint() {
    return this.reactMountReady.checkpoint();
  },

  rollback: function rollback(checkpoint) {
    this.reactMountReady.rollback(checkpoint);
  },

  destructor: function destructor() {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;
  }
};

babelHelpers.extends(ReactNativeReconcileTransaction.prototype, Transaction, ReactNativeReconcileTransaction, Mixin);

PooledClass.addPoolingTo(ReactNativeReconcileTransaction);

module.exports = ReactNativeReconcileTransaction;
}, 237, null, "ReactNativeReconcileTransaction");
__d(/* ReactNativeEventPluginOrder */function(global, require, module, exports) {
'use strict';

var ReactNativeEventPluginOrder = ['ResponderEventPlugin', 'ReactNativeBridgeEventPlugin'];

module.exports = ReactNativeEventPluginOrder;
}, 238, null, "ReactNativeEventPluginOrder");
__d(/* ReactNativeGlobalResponderHandler */function(global, require, module, exports) {
'use strict';

var UIManager = require(73         ); // 73 = UIManager

var ReactNativeGlobalResponderHandler = {
  onChange: function onChange(from, to, blockNativeResponder) {
    if (to !== null) {
      UIManager.setJSResponder(to._rootNodeID, blockNativeResponder);
    } else {
      UIManager.clearJSResponder();
    }
  }
};

module.exports = ReactNativeGlobalResponderHandler;
}, 239, null, "ReactNativeGlobalResponderHandler");
__d(/* ReactNativeTextComponent */function(global, require, module, exports) {

'use strict';

var ReactNativeComponentTree = require(132                       ); // 132 = ReactNativeComponentTree
var ReactNativeTagHandles = require(141                    ); // 141 = ReactNativeTagHandles
var UIManager = require(73         ); // 73 = UIManager

var invariant = require(24                  ); // 24 = fbjs/lib/invariant

var ReactNativeTextComponent = function ReactNativeTextComponent(text) {
  this._currentElement = text;
  this._stringText = '' + text;
  this._hostParent = null;
  this._rootNodeID = 0;
};

babelHelpers.extends(ReactNativeTextComponent.prototype, {

  mountComponent: function mountComponent(transaction, hostParent, hostContainerInfo, context) {
    invariant(context.isInAParentText, 'RawText "%s" must be wrapped in an explicit <Text> component.', this._stringText);
    this._hostParent = hostParent;
    var tag = ReactNativeTagHandles.allocateTag();
    this._rootNodeID = tag;
    var nativeTopRootTag = hostContainerInfo._tag;
    UIManager.createView(tag, 'RCTRawText', nativeTopRootTag, { text: this._stringText });

    ReactNativeComponentTree.precacheNode(this, tag);

    return tag;
  },

  getHostNode: function getHostNode() {
    return this._rootNodeID;
  },

  receiveComponent: function receiveComponent(nextText, transaction, context) {
    if (nextText !== this._currentElement) {
      this._currentElement = nextText;
      var nextStringText = '' + nextText;
      if (nextStringText !== this._stringText) {
        this._stringText = nextStringText;
        UIManager.updateView(this._rootNodeID, 'RCTRawText', { text: this._stringText });
      }
    }
  },

  unmountComponent: function unmountComponent() {
    ReactNativeComponentTree.uncacheNode(this);
    this._currentElement = null;
    this._stringText = null;
    this._rootNodeID = 0;
  }

});

module.exports = ReactNativeTextComponent;
}, 240, null, "ReactNativeTextComponent");
__d(/* ReactNativeTreeTraversal */function(global, require, module, exports) {

'use strict';

function getLowestCommonAncestor(instA, instB) {
  var depthA = 0;
  for (var tempA = instA; tempA; tempA = tempA._hostParent) {
    depthA++;
  }
  var depthB = 0;
  for (var tempB = instB; tempB; tempB = tempB._hostParent) {
    depthB++;
  }

  while (depthA - depthB > 0) {
    instA = instA._hostParent;
    depthA--;
  }

  while (depthB - depthA > 0) {
    instB = instB._hostParent;
    depthB--;
  }

  var depth = depthA;
  while (depth--) {
    if (instA === instB) {
      return instA;
    }
    instA = instA._hostParent;
    instB = instB._hostParent;
  }
  return null;
}

function isAncestor(instA, instB) {
  while (instB) {
    if (instB === instA) {
      return true;
    }
    instB = instB._hostParent;
  }
  return false;
}

function getParentInstance(inst) {
  return inst._hostParent;
}

function traverseTwoPhase(inst, fn, arg) {
  var path = [];
  while (inst) {
    path.push(inst);
    inst = inst._hostParent;
  }
  var i;
  for (i = path.length; i-- > 0;) {
    fn(path[i], 'captured', arg);
  }
  for (i = 0; i < path.length; i++) {
    fn(path[i], 'bubbled', arg);
  }
}

function traverseEnterLeave(from, to, fn, argFrom, argTo) {
  var common = from && to ? getLowestCommonAncestor(from, to) : null;
  var pathFrom = [];
  while (from && from !== common) {
    pathFrom.push(from);
    from = from._hostParent;
  }
  var pathTo = [];
  while (to && to !== common) {
    pathTo.push(to);
    to = to._hostParent;
  }
  var i;
  for (i = 0; i < pathFrom.length; i++) {
    fn(pathFrom[i], 'bubbled', argFrom);
  }
  for (i = pathTo.length; i-- > 0;) {
    fn(pathTo[i], 'captured', argTo);
  }
}

module.exports = {
  isAncestor: isAncestor,
  getLowestCommonAncestor: getLowestCommonAncestor,
  getParentInstance: getParentInstance,
  traverseTwoPhase: traverseTwoPhase,
  traverseEnterLeave: traverseEnterLeave
};
}, 241, null, "ReactNativeTreeTraversal");
__d(/* ReactSimpleEmptyComponent */function(global, require, module, exports) {

'use strict';

var ReactReconciler = require(146              ); // 146 = ReactReconciler

var ReactSimpleEmptyComponent = function ReactSimpleEmptyComponent(placeholderElement, instantiate) {
  this._currentElement = null;
  this._renderedComponent = instantiate(placeholderElement);
};
babelHelpers.extends(ReactSimpleEmptyComponent.prototype, {
  mountComponent: function mountComponent(transaction, hostParent, hostContainerInfo, context, parentDebugID) {
    return ReactReconciler.mountComponent(this._renderedComponent, transaction, hostParent, hostContainerInfo, context, parentDebugID);
  },
  receiveComponent: function receiveComponent() {},
  getHostNode: function getHostNode() {
    return ReactReconciler.getHostNode(this._renderedComponent);
  },
  unmountComponent: function unmountComponent() {
    ReactReconciler.unmountComponent(this._renderedComponent);
    this._renderedComponent = null;
  }
});

module.exports = ReactSimpleEmptyComponent;
}, 242, null, "ReactSimpleEmptyComponent");
__d(/* ResponderEventPlugin */function(global, require, module, exports) {

'use strict';

var EventPluginUtils = require(136               ); // 136 = EventPluginUtils
var EventPropagators = require(233               ); // 233 = EventPropagators
var ResponderSyntheticEvent = require(244                      ); // 244 = ResponderSyntheticEvent
var ResponderTouchHistoryStore = require(245                         ); // 245 = ResponderTouchHistoryStore

var accumulate = require(246         ); // 246 = accumulate

var isStartish = EventPluginUtils.isStartish;
var isMoveish = EventPluginUtils.isMoveish;
var isEndish = EventPluginUtils.isEndish;
var executeDirectDispatch = EventPluginUtils.executeDirectDispatch;
var hasDispatches = EventPluginUtils.hasDispatches;
var executeDispatchesInOrderStopAtTrue = EventPluginUtils.executeDispatchesInOrderStopAtTrue;

var responderInst = null;

var trackedTouchCount = 0;

var previousActiveTouches = 0;

var changeResponder = function changeResponder(nextResponderInst, blockHostResponder) {
  var oldResponderInst = responderInst;
  responderInst = nextResponderInst;
  if (ResponderEventPlugin.GlobalResponderHandler !== null) {
    ResponderEventPlugin.GlobalResponderHandler.onChange(oldResponderInst, nextResponderInst, blockHostResponder);
  }
};

var eventTypes = {
  startShouldSetResponder: {
    phasedRegistrationNames: {
      bubbled: 'onStartShouldSetResponder',
      captured: 'onStartShouldSetResponderCapture'
    }
  },

  scrollShouldSetResponder: {
    phasedRegistrationNames: {
      bubbled: 'onScrollShouldSetResponder',
      captured: 'onScrollShouldSetResponderCapture'
    }
  },

  selectionChangeShouldSetResponder: {
    phasedRegistrationNames: {
      bubbled: 'onSelectionChangeShouldSetResponder',
      captured: 'onSelectionChangeShouldSetResponderCapture'
    }
  },

  moveShouldSetResponder: {
    phasedRegistrationNames: {
      bubbled: 'onMoveShouldSetResponder',
      captured: 'onMoveShouldSetResponderCapture'
    }
  },

  responderStart: { registrationName: 'onResponderStart' },
  responderMove: { registrationName: 'onResponderMove' },
  responderEnd: { registrationName: 'onResponderEnd' },
  responderRelease: { registrationName: 'onResponderRelease' },
  responderTerminationRequest: {
    registrationName: 'onResponderTerminationRequest'
  },
  responderGrant: { registrationName: 'onResponderGrant' },
  responderReject: { registrationName: 'onResponderReject' },
  responderTerminate: { registrationName: 'onResponderTerminate' }
};

function setResponderAndExtractTransfer(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var shouldSetEventType = isStartish(topLevelType) ? eventTypes.startShouldSetResponder : isMoveish(topLevelType) ? eventTypes.moveShouldSetResponder : topLevelType === 'topSelectionChange' ? eventTypes.selectionChangeShouldSetResponder : eventTypes.scrollShouldSetResponder;

  var bubbleShouldSetFrom = !responderInst ? targetInst : EventPluginUtils.getLowestCommonAncestor(responderInst, targetInst);

  var skipOverBubbleShouldSetFrom = bubbleShouldSetFrom === responderInst;
  var shouldSetEvent = ResponderSyntheticEvent.getPooled(shouldSetEventType, bubbleShouldSetFrom, nativeEvent, nativeEventTarget);
  shouldSetEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
  if (skipOverBubbleShouldSetFrom) {
    EventPropagators.accumulateTwoPhaseDispatchesSkipTarget(shouldSetEvent);
  } else {
    EventPropagators.accumulateTwoPhaseDispatches(shouldSetEvent);
  }
  var wantsResponderInst = executeDispatchesInOrderStopAtTrue(shouldSetEvent);
  if (!shouldSetEvent.isPersistent()) {
    shouldSetEvent.constructor.release(shouldSetEvent);
  }

  if (!wantsResponderInst || wantsResponderInst === responderInst) {
    return null;
  }
  var extracted;
  var grantEvent = ResponderSyntheticEvent.getPooled(eventTypes.responderGrant, wantsResponderInst, nativeEvent, nativeEventTarget);
  grantEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;

  EventPropagators.accumulateDirectDispatches(grantEvent);
  var blockHostResponder = executeDirectDispatch(grantEvent) === true;
  if (responderInst) {

    var terminationRequestEvent = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminationRequest, responderInst, nativeEvent, nativeEventTarget);
    terminationRequestEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
    EventPropagators.accumulateDirectDispatches(terminationRequestEvent);
    var shouldSwitch = !hasDispatches(terminationRequestEvent) || executeDirectDispatch(terminationRequestEvent);
    if (!terminationRequestEvent.isPersistent()) {
      terminationRequestEvent.constructor.release(terminationRequestEvent);
    }

    if (shouldSwitch) {
      var terminateEvent = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminate, responderInst, nativeEvent, nativeEventTarget);
      terminateEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
      EventPropagators.accumulateDirectDispatches(terminateEvent);
      extracted = accumulate(extracted, [grantEvent, terminateEvent]);
      changeResponder(wantsResponderInst, blockHostResponder);
    } else {
      var rejectEvent = ResponderSyntheticEvent.getPooled(eventTypes.responderReject, wantsResponderInst, nativeEvent, nativeEventTarget);
      rejectEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
      EventPropagators.accumulateDirectDispatches(rejectEvent);
      extracted = accumulate(extracted, rejectEvent);
    }
  } else {
    extracted = accumulate(extracted, grantEvent);
    changeResponder(wantsResponderInst, blockHostResponder);
  }
  return extracted;
}

function canTriggerTransfer(topLevelType, topLevelInst, nativeEvent) {
  return topLevelInst && (topLevelType === 'topScroll' && !nativeEvent.responderIgnoreScroll || trackedTouchCount > 0 && topLevelType === 'topSelectionChange' || isStartish(topLevelType) || isMoveish(topLevelType));
}

function noResponderTouches(nativeEvent) {
  var touches = nativeEvent.touches;
  if (!touches || touches.length === 0) {
    return true;
  }
  for (var i = 0; i < touches.length; i++) {
    var activeTouch = touches[i];
    var target = activeTouch.target;
    if (target !== null && target !== undefined && target !== 0) {
      var targetInst = EventPluginUtils.getInstanceFromNode(target);
      if (EventPluginUtils.isAncestor(responderInst, targetInst)) {
        return false;
      }
    }
  }
  return true;
}

var ResponderEventPlugin = {
  _getResponderID: function _getResponderID() {
    return responderInst ? responderInst._rootNodeID : null;
  },

  eventTypes: eventTypes,

  extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    if (isStartish(topLevelType)) {
      trackedTouchCount += 1;
    } else if (isEndish(topLevelType)) {
      if (trackedTouchCount >= 0) {
        trackedTouchCount -= 1;
      } else {
        console.error('Ended a touch event which was not counted in `trackedTouchCount`.');
        return null;
      }
    }

    ResponderTouchHistoryStore.recordTouchTrack(topLevelType, nativeEvent);

    var extracted = canTriggerTransfer(topLevelType, targetInst, nativeEvent) ? setResponderAndExtractTransfer(topLevelType, targetInst, nativeEvent, nativeEventTarget) : null;

    var isResponderTouchStart = responderInst && isStartish(topLevelType);
    var isResponderTouchMove = responderInst && isMoveish(topLevelType);
    var isResponderTouchEnd = responderInst && isEndish(topLevelType);
    var incrementalTouch = isResponderTouchStart ? eventTypes.responderStart : isResponderTouchMove ? eventTypes.responderMove : isResponderTouchEnd ? eventTypes.responderEnd : null;

    if (incrementalTouch) {
      var gesture = ResponderSyntheticEvent.getPooled(incrementalTouch, responderInst, nativeEvent, nativeEventTarget);
      gesture.touchHistory = ResponderTouchHistoryStore.touchHistory;
      EventPropagators.accumulateDirectDispatches(gesture);
      extracted = accumulate(extracted, gesture);
    }

    var isResponderTerminate = responderInst && topLevelType === 'topTouchCancel';
    var isResponderRelease = responderInst && !isResponderTerminate && isEndish(topLevelType) && noResponderTouches(nativeEvent);
    var finalTouch = isResponderTerminate ? eventTypes.responderTerminate : isResponderRelease ? eventTypes.responderRelease : null;
    if (finalTouch) {
      var finalEvent = ResponderSyntheticEvent.getPooled(finalTouch, responderInst, nativeEvent, nativeEventTarget);
      finalEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
      EventPropagators.accumulateDirectDispatches(finalEvent);
      extracted = accumulate(extracted, finalEvent);
      changeResponder(null);
    }

    var numberActiveTouches = ResponderTouchHistoryStore.touchHistory.numberActiveTouches;
    if (ResponderEventPlugin.GlobalInteractionHandler && numberActiveTouches !== previousActiveTouches) {
      ResponderEventPlugin.GlobalInteractionHandler.onChange(numberActiveTouches);
    }
    previousActiveTouches = numberActiveTouches;

    return extracted;
  },

  GlobalResponderHandler: null,
  GlobalInteractionHandler: null,

  injection: {
    injectGlobalResponderHandler: function injectGlobalResponderHandler(GlobalResponderHandler) {
      ResponderEventPlugin.GlobalResponderHandler = GlobalResponderHandler;
    },

    injectGlobalInteractionHandler: function injectGlobalInteractionHandler(GlobalInteractionHandler) {
      ResponderEventPlugin.GlobalInteractionHandler = GlobalInteractionHandler;
    }
  }
};

module.exports = ResponderEventPlugin;
}, 243, null, "ResponderEventPlugin");
__d(/* ResponderSyntheticEvent */function(global, require, module, exports) {

'use strict';

var SyntheticEvent = require(234             ); // 234 = SyntheticEvent

var ResponderEventInterface = {
  touchHistory: function touchHistory(nativeEvent) {
    return null;
  }
};

function ResponderSyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(ResponderSyntheticEvent, ResponderEventInterface);

module.exports = ResponderSyntheticEvent;
}, 244, null, "ResponderSyntheticEvent");
__d(/* ResponderTouchHistoryStore */function(global, require, module, exports) {

'use strict';

var EventPluginUtils = require(136               ); // 136 = EventPluginUtils

var invariant = require(24                  ); // 24 = fbjs/lib/invariant
var warning = require(13                ); // 13 = fbjs/lib/warning

var isEndish = EventPluginUtils.isEndish,
    isMoveish = EventPluginUtils.isMoveish,
    isStartish = EventPluginUtils.isStartish;


var MAX_TOUCH_BANK = 20;
var touchBank = [];
var touchHistory = {
  touchBank: touchBank,
  numberActiveTouches: 0,

  indexOfSingleActiveTouch: -1,
  mostRecentTimeStamp: 0
};

function timestampForTouch(touch) {
  return touch.timeStamp || touch.timestamp;
}

function createTouchRecord(touch) {
  return {
    touchActive: true,
    startPageX: touch.pageX,
    startPageY: touch.pageY,
    startTimeStamp: timestampForTouch(touch),
    currentPageX: touch.pageX,
    currentPageY: touch.pageY,
    currentTimeStamp: timestampForTouch(touch),
    previousPageX: touch.pageX,
    previousPageY: touch.pageY,
    previousTimeStamp: timestampForTouch(touch)
  };
}

function resetTouchRecord(touchRecord, touch) {
  touchRecord.touchActive = true;
  touchRecord.startPageX = touch.pageX;
  touchRecord.startPageY = touch.pageY;
  touchRecord.startTimeStamp = timestampForTouch(touch);
  touchRecord.currentPageX = touch.pageX;
  touchRecord.currentPageY = touch.pageY;
  touchRecord.currentTimeStamp = timestampForTouch(touch);
  touchRecord.previousPageX = touch.pageX;
  touchRecord.previousPageY = touch.pageY;
  touchRecord.previousTimeStamp = timestampForTouch(touch);
}

function getTouchIdentifier(_ref) {
  var identifier = _ref.identifier;

  invariant(identifier != null, 'Touch object is missing identifier.');
  warning(identifier <= MAX_TOUCH_BANK, 'Touch identifier %s is greater than maximum supported %s which causes ' + 'performance issues backfilling array locations for all of the indices.', identifier, MAX_TOUCH_BANK);
  return identifier;
}

function recordTouchStart(touch) {
  var identifier = getTouchIdentifier(touch);
  var touchRecord = touchBank[identifier];
  if (touchRecord) {
    resetTouchRecord(touchRecord, touch);
  } else {
    touchBank[identifier] = createTouchRecord(touch);
  }
  touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
}

function recordTouchMove(touch) {
  var touchRecord = touchBank[getTouchIdentifier(touch)];
  if (touchRecord) {
    touchRecord.touchActive = true;
    touchRecord.previousPageX = touchRecord.currentPageX;
    touchRecord.previousPageY = touchRecord.currentPageY;
    touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;
    touchRecord.currentPageX = touch.pageX;
    touchRecord.currentPageY = touch.pageY;
    touchRecord.currentTimeStamp = timestampForTouch(touch);
    touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
  } else {
    console.error('Cannot record touch move without a touch start.\n' + 'Touch Move: %s\n', 'Touch Bank: %s', printTouch(touch), printTouchBank());
  }
}

function recordTouchEnd(touch) {
  var touchRecord = touchBank[getTouchIdentifier(touch)];
  if (touchRecord) {
    touchRecord.touchActive = false;
    touchRecord.previousPageX = touchRecord.currentPageX;
    touchRecord.previousPageY = touchRecord.currentPageY;
    touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;
    touchRecord.currentPageX = touch.pageX;
    touchRecord.currentPageY = touch.pageY;
    touchRecord.currentTimeStamp = timestampForTouch(touch);
    touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
  } else {
    console.error('Cannot record touch end without a touch start.\n' + 'Touch End: %s\n', 'Touch Bank: %s', printTouch(touch), printTouchBank());
  }
}

function printTouch(touch) {
  return JSON.stringify({
    identifier: touch.identifier,
    pageX: touch.pageX,
    pageY: touch.pageY,
    timestamp: timestampForTouch(touch)
  });
}

function printTouchBank() {
  var printed = JSON.stringify(touchBank.slice(0, MAX_TOUCH_BANK));
  if (touchBank.length > MAX_TOUCH_BANK) {
    printed += ' (original size: ' + touchBank.length + ')';
  }
  return printed;
}

var ResponderTouchHistoryStore = {
  recordTouchTrack: function recordTouchTrack(topLevelType, nativeEvent) {
    if (isMoveish(topLevelType)) {
      nativeEvent.changedTouches.forEach(recordTouchMove);
    } else if (isStartish(topLevelType)) {
      nativeEvent.changedTouches.forEach(recordTouchStart);
      touchHistory.numberActiveTouches = nativeEvent.touches.length;
      if (touchHistory.numberActiveTouches === 1) {
        touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier;
      }
    } else if (isEndish(topLevelType)) {
      nativeEvent.changedTouches.forEach(recordTouchEnd);
      touchHistory.numberActiveTouches = nativeEvent.touches.length;
      if (touchHistory.numberActiveTouches === 1) {
        for (var i = 0; i < touchBank.length; i++) {
          var touchTrackToCheck = touchBank[i];
          if (touchTrackToCheck != null && touchTrackToCheck.touchActive) {
            touchHistory.indexOfSingleActiveTouch = i;
            break;
          }
        }
        if (__DEV__) {
          var activeRecord = touchBank[touchHistory.indexOfSingleActiveTouch];
          warning(activeRecord != null && activeRecord.touchActive, 'Cannot find single active touch.');
        }
      }
    }
  },


  touchHistory: touchHistory
};

module.exports = ResponderTouchHistoryStore;
}, 245, null, "ResponderTouchHistoryStore");
__d(/* accumulate */function(global, require, module, exports) {

'use strict';

var invariant = require(24                  ); // 24 = fbjs/lib/invariant

function accumulate(current, next) {
  invariant(next != null, 'accumulate(...): Accumulated items must be not be null or undefined.');

  if (current == null) {
    return next;
  }

  if (Array.isArray(current)) {
    return current.concat(next);
  }

  if (Array.isArray(next)) {
    return [current].concat(next);
  }

  return [current, next];
}

module.exports = accumulate;
}, 246, null, "accumulate");
__d(/* TouchableWithoutFeedback */function(global, require, module, exports) {
'use strict';

var EdgeInsetsPropType = require(120                 ); // 120 = EdgeInsetsPropType
var React = require(76     ); // 76 = React
var TimerMixin = require(248                ); // 248 = react-timer-mixin
var Touchable = require(184        ); // 184 = Touchable
var View = require(119   ); // 119 = View

var ensurePositiveDelayProps = require(249                       ); // 249 = ensurePositiveDelayProps
var warning = require(13                ); // 13 = fbjs/lib/warning

var PRESS_RETENTION_OFFSET = { top: 20, left: 20, right: 20, bottom: 30 };

var TouchableWithoutFeedback = React.createClass({
  displayName: 'TouchableWithoutFeedback',

  mixins: [TimerMixin, Touchable.Mixin],

  propTypes: {
    accessible: React.PropTypes.bool,
    accessibilityComponentType: React.PropTypes.oneOf(View.AccessibilityComponentType),
    accessibilityTraits: React.PropTypes.oneOfType([React.PropTypes.oneOf(View.AccessibilityTraits), React.PropTypes.arrayOf(React.PropTypes.oneOf(View.AccessibilityTraits))]),

    disabled: React.PropTypes.bool,

    onPress: React.PropTypes.func,
    onPressIn: React.PropTypes.func,
    onPressOut: React.PropTypes.func,

    onLayout: React.PropTypes.func,

    onLongPress: React.PropTypes.func,

    delayPressIn: React.PropTypes.number,

    delayPressOut: React.PropTypes.number,

    delayLongPress: React.PropTypes.number,

    pressRetentionOffset: EdgeInsetsPropType,

    hitSlop: EdgeInsetsPropType
  },

  getInitialState: function getInitialState() {
    return this.touchableGetInitialState();
  },

  componentDidMount: function componentDidMount() {
    ensurePositiveDelayProps(this.props);
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    ensurePositiveDelayProps(nextProps);
  },

  touchableHandlePress: function touchableHandlePress(e) {
    this.props.onPress && this.props.onPress(e);
  },

  touchableHandleActivePressIn: function touchableHandleActivePressIn(e) {
    this.props.onPressIn && this.props.onPressIn(e);
  },

  touchableHandleActivePressOut: function touchableHandleActivePressOut(e) {
    this.props.onPressOut && this.props.onPressOut(e);
  },

  touchableHandleLongPress: function touchableHandleLongPress(e) {
    this.props.onLongPress && this.props.onLongPress(e);
  },

  touchableGetPressRectOffset: function touchableGetPressRectOffset() {
    return this.props.pressRetentionOffset || PRESS_RETENTION_OFFSET;
  },

  touchableGetHitSlop: function touchableGetHitSlop() {
    return this.props.hitSlop;
  },

  touchableGetHighlightDelayMS: function touchableGetHighlightDelayMS() {
    return this.props.delayPressIn || 0;
  },

  touchableGetLongPressDelayMS: function touchableGetLongPressDelayMS() {
    return this.props.delayLongPress === 0 ? 0 : this.props.delayLongPress || 500;
  },

  touchableGetPressOutDelayMS: function touchableGetPressOutDelayMS() {
    return this.props.delayPressOut || 0;
  },

  render: function render() {
    var child = React.Children.only(this.props.children);
    var children = child.props.children;
    warning(!child.type || child.type.displayName !== 'Text', 'TouchableWithoutFeedback does not work well with Text children. Wrap children in a View instead. See ' + (child._owner && child._owner.getName && child._owner.getName() || '<unknown>'));
    if (Touchable.TOUCH_TARGET_DEBUG && child.type && child.type.displayName === 'View') {
      children = React.Children.toArray(children);
      children.push(Touchable.renderDebugView({ color: 'red', hitSlop: this.props.hitSlop }));
    }
    var style = Touchable.TOUCH_TARGET_DEBUG && child.type && child.type.displayName === 'Text' ? [child.props.style, { color: 'red' }] : child.props.style;
    return React.cloneElement(child, {
      accessible: this.props.accessible !== false,
      accessibilityLabel: this.props.accessibilityLabel,
      accessibilityComponentType: this.props.accessibilityComponentType,
      accessibilityTraits: this.props.accessibilityTraits,
      testID: this.props.testID,
      onLayout: this.props.onLayout,
      hitSlop: this.props.hitSlop,
      onStartShouldSetResponder: this.touchableHandleStartShouldSetResponder,
      onResponderTerminationRequest: this.touchableHandleResponderTerminationRequest,
      onResponderGrant: this.touchableHandleResponderGrant,
      onResponderMove: this.touchableHandleResponderMove,
      onResponderRelease: this.touchableHandleResponderRelease,
      onResponderTerminate: this.touchableHandleResponderTerminate,
      style: style,
      children: children
    });
  }
});

module.exports = TouchableWithoutFeedback;
}, 247, null, "TouchableWithoutFeedback");
__d(/* react-timer-mixin/TimerMixin.js */function(global, require, module, exports) {
'use strict';

var GLOBAL = typeof window === 'undefined' ? global : window;

var setter = function setter(_setter, _clearer, array) {
  return function (callback, delta) {
    var id = _setter(function () {
      _clearer.call(this, id);
      callback.apply(this, arguments);
    }.bind(this), delta);

    if (!this[array]) {
      this[array] = [id];
    } else {
      this[array].push(id);
    }
    return id;
  };
};

var clearer = function clearer(_clearer, array) {
  return function (id) {
    if (this[array]) {
      var index = this[array].indexOf(id);
      if (index !== -1) {
        this[array].splice(index, 1);
      }
    }
    _clearer(id);
  };
};

var _timeouts = 'TimerMixin_timeouts';
var _clearTimeout = clearer(GLOBAL.clearTimeout, _timeouts);
var _setTimeout = setter(GLOBAL.setTimeout, _clearTimeout, _timeouts);

var _intervals = 'TimerMixin_intervals';
var _clearInterval = clearer(GLOBAL.clearInterval, _intervals);
var _setInterval = setter(GLOBAL.setInterval, function () {}, _intervals);

var _immediates = 'TimerMixin_immediates';
var _clearImmediate = clearer(GLOBAL.clearImmediate, _immediates);
var _setImmediate = setter(GLOBAL.setImmediate, _clearImmediate, _immediates);

var _rafs = 'TimerMixin_rafs';
var _cancelAnimationFrame = clearer(GLOBAL.cancelAnimationFrame, _rafs);
var _requestAnimationFrame = setter(GLOBAL.requestAnimationFrame, _cancelAnimationFrame, _rafs);

var TimerMixin = {
  componentWillUnmount: function componentWillUnmount() {
    this[_timeouts] && this[_timeouts].forEach(function (id) {
      GLOBAL.clearTimeout(id);
    });
    this[_timeouts] = null;
    this[_intervals] && this[_intervals].forEach(function (id) {
      GLOBAL.clearInterval(id);
    });
    this[_intervals] = null;
    this[_immediates] && this[_immediates].forEach(function (id) {
      GLOBAL.clearImmediate(id);
    });
    this[_immediates] = null;
    this[_rafs] && this[_rafs].forEach(function (id) {
      GLOBAL.cancelAnimationFrame(id);
    });
    this[_rafs] = null;
  },

  setTimeout: _setTimeout,
  clearTimeout: _clearTimeout,

  setInterval: _setInterval,
  clearInterval: _clearInterval,

  setImmediate: _setImmediate,
  clearImmediate: _clearImmediate,

  requestAnimationFrame: _requestAnimationFrame,
  cancelAnimationFrame: _cancelAnimationFrame
};

module.exports = TimerMixin;
}, 248, null, "react-timer-mixin/TimerMixin.js");
__d(/* ensurePositiveDelayProps */function(global, require, module, exports) {
'use strict';

var invariant = require(24                  ); // 24 = fbjs/lib/invariant

var ensurePositiveDelayProps = function ensurePositiveDelayProps(props) {
  invariant(!(props.delayPressIn < 0 || props.delayPressOut < 0 || props.delayLongPress < 0), 'Touchable components cannot have negative delay properties');
};

module.exports = ensurePositiveDelayProps;
}, 249, null, "ensurePositiveDelayProps");
__d(/* TouchableOpacity */function(global, require, module, exports) {
'use strict';

var Animated = require(251       ); // 251 = Animated
var Easing = require(261     ); // 261 = Easing
var NativeMethodsMixin = require(19                  ); // 19 = NativeMethodsMixin
var React = require(76     ); // 76 = React
var TimerMixin = require(248                ); // 248 = react-timer-mixin
var Touchable = require(184        ); // 184 = Touchable
var TouchableWithoutFeedback = require(247                       ); // 247 = TouchableWithoutFeedback

var ensurePositiveDelayProps = require(249                       ); // 249 = ensurePositiveDelayProps
var flattenStyle = require(23            ); // 23 = flattenStyle

var PRESS_RETENTION_OFFSET = { top: 20, left: 20, right: 20, bottom: 30 };

var TouchableOpacity = React.createClass({
  displayName: 'TouchableOpacity',

  mixins: [TimerMixin, Touchable.Mixin, NativeMethodsMixin],

  propTypes: babelHelpers.extends({}, TouchableWithoutFeedback.propTypes, {
    activeOpacity: React.PropTypes.number,
    focusedOpacity: React.PropTypes.number,

    tvParallaxProperties: React.PropTypes.object
  }),

  getDefaultProps: function getDefaultProps() {
    return {
      activeOpacity: 0.2,
      focusedOpacity: 0.7
    };
  },

  getInitialState: function getInitialState() {
    return babelHelpers.extends({}, this.touchableGetInitialState(), {
      anim: new Animated.Value(1)
    });
  },

  componentDidMount: function componentDidMount() {
    ensurePositiveDelayProps(this.props);
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    ensurePositiveDelayProps(nextProps);
  },

  setOpacityTo: function setOpacityTo(value, duration) {
    Animated.timing(this.state.anim, {
      toValue: value,
      duration: duration,
      easing: Easing.inOut(Easing.quad),
      useNativeDriver: true
    }).start();
  },

  touchableHandleActivePressIn: function touchableHandleActivePressIn(e) {
    if (e.dispatchConfig.registrationName === 'onResponderGrant') {
      this._opacityActive(0);
    } else {
      this._opacityActive(150);
    }
    this.props.onPressIn && this.props.onPressIn(e);
  },

  touchableHandleActivePressOut: function touchableHandleActivePressOut(e) {
    this._opacityInactive(250);
    this.props.onPressOut && this.props.onPressOut(e);
  },

  touchableHandlePress: function touchableHandlePress(e) {
    this.props.onPress && this.props.onPress(e);
  },

  touchableHandleLongPress: function touchableHandleLongPress(e) {
    this.props.onLongPress && this.props.onLongPress(e);
  },

  touchableGetPressRectOffset: function touchableGetPressRectOffset() {
    return this.props.pressRetentionOffset || PRESS_RETENTION_OFFSET;
  },

  touchableGetHitSlop: function touchableGetHitSlop() {
    return this.props.hitSlop;
  },

  touchableGetHighlightDelayMS: function touchableGetHighlightDelayMS() {
    return this.props.delayPressIn || 0;
  },

  touchableGetLongPressDelayMS: function touchableGetLongPressDelayMS() {
    return this.props.delayLongPress === 0 ? 0 : this.props.delayLongPress || 500;
  },

  touchableGetPressOutDelayMS: function touchableGetPressOutDelayMS() {
    return this.props.delayPressOut;
  },

  _opacityActive: function _opacityActive(duration) {
    this.setOpacityTo(this.props.activeOpacity, duration);
  },

  _opacityInactive: function _opacityInactive(duration) {
    var childStyle = flattenStyle(this.props.style) || {};
    this.setOpacityTo(childStyle.opacity === undefined ? 1 : childStyle.opacity, duration);
  },

  _opacityFocused: function _opacityFocused() {
    this.setOpacityTo(this.props.focusedOpacity);
  },

  render: function render() {
    return React.createElement(
      Animated.View,
      {
        accessible: this.props.accessible !== false,
        accessibilityLabel: this.props.accessibilityLabel,
        accessibilityComponentType: this.props.accessibilityComponentType,
        accessibilityTraits: this.props.accessibilityTraits,
        style: [this.props.style, { opacity: this.state.anim }],
        testID: this.props.testID,
        onLayout: this.props.onLayout,
        isTVSelectable: true,
        tvParallaxProperties: this.props.tvParallaxProperties,
        hitSlop: this.props.hitSlop,
        onStartShouldSetResponder: this.touchableHandleStartShouldSetResponder,
        onResponderTerminationRequest: this.touchableHandleResponderTerminationRequest,
        onResponderGrant: this.touchableHandleResponderGrant,
        onResponderMove: this.touchableHandleResponderMove,
        onResponderRelease: this.touchableHandleResponderRelease,
        onResponderTerminate: this.touchableHandleResponderTerminate },
      this.props.children,
      Touchable.renderDebugView({ color: 'cyan', hitSlop: this.props.hitSlop })
    );
  }
});

module.exports = TouchableOpacity;
}, 250, null, "TouchableOpacity");
__d(/* Animated */function(global, require, module, exports) {
'use strict';

var AnimatedImplementation = require(252                     ); // 252 = AnimatedImplementation
var Image = require(263    ); // 263 = Image
var Text = require(183   ); // 183 = Text
var View = require(119   ); // 119 = View
var ScrollView = require(265         ); // 265 = ScrollView

module.exports = babelHelpers.extends({}, AnimatedImplementation, {
  View: AnimatedImplementation.createAnimatedComponent(View),
  Text: AnimatedImplementation.createAnimatedComponent(Text),
  Image: AnimatedImplementation.createAnimatedComponent(Image),
  ScrollView: AnimatedImplementation.createAnimatedComponent(ScrollView)
});
}, 251, null, "Animated");
__d(/* AnimatedImplementation */function(global, require, module, exports) {
'use strict';

var InteractionManager = require(253                 ); // 253 = InteractionManager
var Interpolation = require(256            ); // 256 = Interpolation
var NativeAnimatedHelper = require(257                   ); // 257 = NativeAnimatedHelper
var React = require(76     ); // 76 = React
var Set = require(219  ); // 219 = Set
var SpringConfig = require(258           ); // 258 = SpringConfig
var ViewStylePropTypes = require(112                 ); // 112 = ViewStylePropTypes

var findNodeHandle = require(74              ); // 74 = findNodeHandle
var flattenStyle = require(23            ); // 23 = flattenStyle
var invariant = require(24                  ); // 24 = fbjs/lib/invariant
var requestAnimationFrame = require(259                             ); // 259 = fbjs/lib/requestAnimationFrame

var NativeAnimatedAPI = NativeAnimatedHelper.API;

var warnedMissingNativeAnimated = false;

function shouldUseNativeDriver(config) {
  if (config.useNativeDriver && !NativeAnimatedHelper.isNativeAnimatedAvailable()) {
    if (!warnedMissingNativeAnimated) {
      console.warn('Animated: `useNativeDriver` is not supported because the native ' + 'animated module is missing. Falling back to JS-based animation. To ' + 'resolve this, add `RCTAnimation` module to this app, or remove ' + '`useNativeDriver`. ' + 'More info: https://github.com/facebook/react-native/issues/11094#issuecomment-263240420');
      warnedMissingNativeAnimated = true;
    }
    return false;
  }

  return config.useNativeDriver || false;
}

var Animated = function () {
  function Animated() {
    babelHelpers.classCallCheck(this, Animated);
  }

  babelHelpers.createClass(Animated, [{
    key: '__attach',
    value: function __attach() {}
  }, {
    key: '__detach',
    value: function __detach() {
      if (this.__isNative && this.__nativeTag != null) {
        NativeAnimatedAPI.dropAnimatedNode(this.__nativeTag);
        this.__nativeTag = undefined;
      }
    }
  }, {
    key: '__getValue',
    value: function __getValue() {}
  }, {
    key: '__getAnimatedValue',
    value: function __getAnimatedValue() {
      return this.__getValue();
    }
  }, {
    key: '__addChild',
    value: function __addChild(child) {}
  }, {
    key: '__removeChild',
    value: function __removeChild(child) {}
  }, {
    key: '__getChildren',
    value: function __getChildren() {
      return [];
    }
  }, {
    key: '__makeNative',
    value: function __makeNative() {
      if (!this.__isNative) {
        throw new Error('This node cannot be made a "native" animated node');
      }
    }
  }, {
    key: '__getNativeTag',
    value: function __getNativeTag() {
      NativeAnimatedHelper.assertNativeAnimatedModule();
      invariant(this.__isNative, 'Attempt to get native tag from node not marked as "native"');
      if (this.__nativeTag == null) {
        var nativeTag = NativeAnimatedHelper.generateNewNodeTag();
        NativeAnimatedAPI.createAnimatedNode(nativeTag, this.__getNativeConfig());
        this.__nativeTag = nativeTag;
      }
      return this.__nativeTag;
    }
  }, {
    key: '__getNativeConfig',
    value: function __getNativeConfig() {
      throw new Error('This JS animated node type cannot be used as native animated node');
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return this.__getValue();
    }
  }]);
  return Animated;
}();

var Animation = function () {
  function Animation() {
    babelHelpers.classCallCheck(this, Animation);
  }

  babelHelpers.createClass(Animation, [{
    key: 'start',
    value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {}
  }, {
    key: 'stop',
    value: function stop() {
      if (this.__nativeId) {
        NativeAnimatedAPI.stopAnimation(this.__nativeId);
      }
    }
  }, {
    key: '__getNativeAnimationConfig',
    value: function __getNativeAnimationConfig() {
      throw new Error('This animation type cannot be offloaded to native');
    }
  }, {
    key: '__debouncedOnEnd',
    value: function __debouncedOnEnd(result) {
      var onEnd = this.__onEnd;
      this.__onEnd = null;
      onEnd && onEnd(result);
    }
  }, {
    key: '__startNativeAnimation',
    value: function __startNativeAnimation(animatedValue) {
      animatedValue.__makeNative();
      this.__nativeId = NativeAnimatedHelper.generateNewAnimationId();
      NativeAnimatedAPI.startAnimatingNode(this.__nativeId, animatedValue.__getNativeTag(), this.__getNativeAnimationConfig(), this.__debouncedOnEnd.bind(this));
    }
  }]);
  return Animation;
}();

var AnimatedWithChildren = function (_Animated) {
  babelHelpers.inherits(AnimatedWithChildren, _Animated);

  function AnimatedWithChildren() {
    babelHelpers.classCallCheck(this, AnimatedWithChildren);

    var _this = babelHelpers.possibleConstructorReturn(this, (AnimatedWithChildren.__proto__ || Object.getPrototypeOf(AnimatedWithChildren)).call(this));

    _this._children = [];
    return _this;
  }

  babelHelpers.createClass(AnimatedWithChildren, [{
    key: '__makeNative',
    value: function __makeNative() {
      if (!this.__isNative) {
        this.__isNative = true;
        for (var _iterator = this._children, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
          var _ref;

          if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref = _iterator[_i++];
          } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref = _i.value;
          }

          var child = _ref;

          child.__makeNative();
          NativeAnimatedAPI.connectAnimatedNodes(this.__getNativeTag(), child.__getNativeTag());
        }
      }
    }
  }, {
    key: '__addChild',
    value: function __addChild(child) {
      if (this._children.length === 0) {
        this.__attach();
      }
      this._children.push(child);
      if (this.__isNative) {
        child.__makeNative();
        NativeAnimatedAPI.connectAnimatedNodes(this.__getNativeTag(), child.__getNativeTag());
      }
    }
  }, {
    key: '__removeChild',
    value: function __removeChild(child) {
      var index = this._children.indexOf(child);
      if (index === -1) {
        console.warn('Trying to remove a child that doesn\'t exist');
        return;
      }
      if (this.__isNative && child.__isNative) {
        NativeAnimatedAPI.disconnectAnimatedNodes(this.__getNativeTag(), child.__getNativeTag());
      }
      this._children.splice(index, 1);
      if (this._children.length === 0) {
        this.__detach();
      }
    }
  }, {
    key: '__getChildren',
    value: function __getChildren() {
      return this._children;
    }
  }]);
  return AnimatedWithChildren;
}(Animated);

function _flush(rootNode) {
  var animatedStyles = new Set();
  function findAnimatedStyles(node) {
    if (typeof node.update === 'function') {
      animatedStyles.add(node);
    } else {
      node.__getChildren().forEach(findAnimatedStyles);
    }
  }
  findAnimatedStyles(rootNode);

  animatedStyles.forEach(function (animatedStyle) {
    return animatedStyle.update();
  });
}

var _easeInOut = void 0;
function easeInOut() {
  if (!_easeInOut) {
    var Easing = require(261     ); // 261 = Easing
    _easeInOut = Easing.inOut(Easing.ease);
  }
  return _easeInOut;
}

var TimingAnimation = function (_Animation) {
  babelHelpers.inherits(TimingAnimation, _Animation);

  function TimingAnimation(config) {
    babelHelpers.classCallCheck(this, TimingAnimation);

    var _this2 = babelHelpers.possibleConstructorReturn(this, (TimingAnimation.__proto__ || Object.getPrototypeOf(TimingAnimation)).call(this));

    _this2._toValue = config.toValue;
    _this2._easing = config.easing !== undefined ? config.easing : easeInOut();
    _this2._duration = config.duration !== undefined ? config.duration : 500;
    _this2._delay = config.delay !== undefined ? config.delay : 0;
    _this2.__isInteraction = config.isInteraction !== undefined ? config.isInteraction : true;
    _this2._useNativeDriver = shouldUseNativeDriver(config);
    return _this2;
  }

  babelHelpers.createClass(TimingAnimation, [{
    key: '__getNativeAnimationConfig',
    value: function __getNativeAnimationConfig() {
      var frameDuration = 1000.0 / 60.0;
      var frames = [];
      for (var dt = 0.0; dt < this._duration; dt += frameDuration) {
        frames.push(this._easing(dt / this._duration));
      }
      frames.push(this._easing(1));
      return {
        type: 'frames',
        frames: frames,
        toValue: this._toValue,
        delay: this._delay
      };
    }
  }, {
    key: 'start',
    value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
      var _this3 = this;

      this.__active = true;
      this._fromValue = fromValue;
      this._onUpdate = onUpdate;
      this.__onEnd = onEnd;

      var start = function start() {
        if (_this3._duration === 0 && !_this3._useNativeDriver) {
          _this3._onUpdate(_this3._toValue);
          _this3.__debouncedOnEnd({ finished: true });
        } else {
          _this3._startTime = Date.now();
          if (_this3._useNativeDriver) {
            _this3.__startNativeAnimation(animatedValue);
          } else {
            _this3._animationFrame = requestAnimationFrame(_this3.onUpdate.bind(_this3));
          }
        }
      };
      if (this._delay) {
        this._timeout = setTimeout(start, this._delay);
      } else {
        start();
      }
    }
  }, {
    key: 'onUpdate',
    value: function onUpdate() {
      var now = Date.now();
      if (now >= this._startTime + this._duration) {
        if (this._duration === 0) {
          this._onUpdate(this._toValue);
        } else {
          this._onUpdate(this._fromValue + this._easing(1) * (this._toValue - this._fromValue));
        }
        this.__debouncedOnEnd({ finished: true });
        return;
      }

      this._onUpdate(this._fromValue + this._easing((now - this._startTime) / this._duration) * (this._toValue - this._fromValue));
      if (this.__active) {
        this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
      }
    }
  }, {
    key: 'stop',
    value: function stop() {
      babelHelpers.get(TimingAnimation.prototype.__proto__ || Object.getPrototypeOf(TimingAnimation.prototype), 'stop', this).call(this);
      this.__active = false;
      clearTimeout(this._timeout);
      global.cancelAnimationFrame(this._animationFrame);
      this.__debouncedOnEnd({ finished: false });
    }
  }]);
  return TimingAnimation;
}(Animation);

var DecayAnimation = function (_Animation2) {
  babelHelpers.inherits(DecayAnimation, _Animation2);

  function DecayAnimation(config) {
    babelHelpers.classCallCheck(this, DecayAnimation);

    var _this4 = babelHelpers.possibleConstructorReturn(this, (DecayAnimation.__proto__ || Object.getPrototypeOf(DecayAnimation)).call(this));

    _this4._deceleration = config.deceleration !== undefined ? config.deceleration : 0.998;
    _this4._velocity = config.velocity;
    _this4._useNativeDriver = shouldUseNativeDriver(config);
    _this4.__isInteraction = config.isInteraction !== undefined ? config.isInteraction : true;
    return _this4;
  }

  babelHelpers.createClass(DecayAnimation, [{
    key: '__getNativeAnimationConfig',
    value: function __getNativeAnimationConfig() {
      return {
        type: 'decay',
        deceleration: this._deceleration,
        velocity: this._velocity
      };
    }
  }, {
    key: 'start',
    value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
      this.__active = true;
      this._lastValue = fromValue;
      this._fromValue = fromValue;
      this._onUpdate = onUpdate;
      this.__onEnd = onEnd;
      this._startTime = Date.now();
      if (this._useNativeDriver) {
        this.__startNativeAnimation(animatedValue);
      } else {
        this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
      }
    }
  }, {
    key: 'onUpdate',
    value: function onUpdate() {
      var now = Date.now();

      var value = this._fromValue + this._velocity / (1 - this._deceleration) * (1 - Math.exp(-(1 - this._deceleration) * (now - this._startTime)));

      this._onUpdate(value);

      if (Math.abs(this._lastValue - value) < 0.1) {
        this.__debouncedOnEnd({ finished: true });
        return;
      }

      this._lastValue = value;
      if (this.__active) {
        this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
      }
    }
  }, {
    key: 'stop',
    value: function stop() {
      babelHelpers.get(DecayAnimation.prototype.__proto__ || Object.getPrototypeOf(DecayAnimation.prototype), 'stop', this).call(this);
      this.__active = false;
      global.cancelAnimationFrame(this._animationFrame);
      this.__debouncedOnEnd({ finished: false });
    }
  }]);
  return DecayAnimation;
}(Animation);

function withDefault(value, defaultValue) {
  if (value === undefined || value === null) {
    return defaultValue;
  }
  return value;
}

var SpringAnimation = function (_Animation3) {
  babelHelpers.inherits(SpringAnimation, _Animation3);

  function SpringAnimation(config) {
    babelHelpers.classCallCheck(this, SpringAnimation);

    var _this5 = babelHelpers.possibleConstructorReturn(this, (SpringAnimation.__proto__ || Object.getPrototypeOf(SpringAnimation)).call(this));

    _this5._overshootClamping = withDefault(config.overshootClamping, false);
    _this5._restDisplacementThreshold = withDefault(config.restDisplacementThreshold, 0.001);
    _this5._restSpeedThreshold = withDefault(config.restSpeedThreshold, 0.001);
    _this5._initialVelocity = config.velocity;
    _this5._lastVelocity = withDefault(config.velocity, 0);
    _this5._toValue = config.toValue;
    _this5._useNativeDriver = shouldUseNativeDriver(config);
    _this5.__isInteraction = config.isInteraction !== undefined ? config.isInteraction : true;

    var springConfig;
    if (config.bounciness !== undefined || config.speed !== undefined) {
      invariant(config.tension === undefined && config.friction === undefined, 'You can only define bounciness/speed or tension/friction but not both');
      springConfig = SpringConfig.fromBouncinessAndSpeed(withDefault(config.bounciness, 8), withDefault(config.speed, 12));
    } else {
      springConfig = SpringConfig.fromOrigamiTensionAndFriction(withDefault(config.tension, 40), withDefault(config.friction, 7));
    }
    _this5._tension = springConfig.tension;
    _this5._friction = springConfig.friction;
    return _this5;
  }

  babelHelpers.createClass(SpringAnimation, [{
    key: '__getNativeAnimationConfig',
    value: function __getNativeAnimationConfig() {
      return {
        type: 'spring',
        overshootClamping: this._overshootClamping,
        restDisplacementThreshold: this._restDisplacementThreshold,
        restSpeedThreshold: this._restSpeedThreshold,
        tension: this._tension,
        friction: this._friction,
        initialVelocity: withDefault(this._initialVelocity, this._lastVelocity),
        toValue: this._toValue
      };
    }
  }, {
    key: 'start',
    value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
      this.__active = true;
      this._startPosition = fromValue;
      this._lastPosition = this._startPosition;

      this._onUpdate = onUpdate;
      this.__onEnd = onEnd;
      this._lastTime = Date.now();

      if (previousAnimation instanceof SpringAnimation) {
        var internalState = previousAnimation.getInternalState();
        this._lastPosition = internalState.lastPosition;
        this._lastVelocity = internalState.lastVelocity;
        this._lastTime = internalState.lastTime;
      }
      if (this._initialVelocity !== undefined && this._initialVelocity !== null) {
        this._lastVelocity = this._initialVelocity;
      }
      if (this._useNativeDriver) {
        this.__startNativeAnimation(animatedValue);
      } else {
        this.onUpdate();
      }
    }
  }, {
    key: 'getInternalState',
    value: function getInternalState() {
      return {
        lastPosition: this._lastPosition,
        lastVelocity: this._lastVelocity,
        lastTime: this._lastTime
      };
    }
  }, {
    key: 'onUpdate',
    value: function onUpdate() {
      var position = this._lastPosition;
      var velocity = this._lastVelocity;

      var tempPosition = this._lastPosition;
      var tempVelocity = this._lastVelocity;

      var MAX_STEPS = 64;
      var now = Date.now();
      if (now > this._lastTime + MAX_STEPS) {
        now = this._lastTime + MAX_STEPS;
      }

      var TIMESTEP_MSEC = 1;
      var numSteps = Math.floor((now - this._lastTime) / TIMESTEP_MSEC);

      for (var i = 0; i < numSteps; ++i) {
        var step = TIMESTEP_MSEC / 1000;

        var aVelocity = velocity;
        var aAcceleration = this._tension * (this._toValue - tempPosition) - this._friction * tempVelocity;
        var tempPosition = position + aVelocity * step / 2;
        var tempVelocity = velocity + aAcceleration * step / 2;

        var bVelocity = tempVelocity;
        var bAcceleration = this._tension * (this._toValue - tempPosition) - this._friction * tempVelocity;
        tempPosition = position + bVelocity * step / 2;
        tempVelocity = velocity + bAcceleration * step / 2;

        var cVelocity = tempVelocity;
        var cAcceleration = this._tension * (this._toValue - tempPosition) - this._friction * tempVelocity;
        tempPosition = position + cVelocity * step / 2;
        tempVelocity = velocity + cAcceleration * step / 2;

        var dVelocity = tempVelocity;
        var dAcceleration = this._tension * (this._toValue - tempPosition) - this._friction * tempVelocity;
        tempPosition = position + cVelocity * step / 2;
        tempVelocity = velocity + cAcceleration * step / 2;

        var dxdt = (aVelocity + 2 * (bVelocity + cVelocity) + dVelocity) / 6;
        var dvdt = (aAcceleration + 2 * (bAcceleration + cAcceleration) + dAcceleration) / 6;

        position += dxdt * step;
        velocity += dvdt * step;
      }

      this._lastTime = now;
      this._lastPosition = position;
      this._lastVelocity = velocity;

      this._onUpdate(position);
      if (!this.__active) {
        return;
      }

      var isOvershooting = false;
      if (this._overshootClamping && this._tension !== 0) {
        if (this._startPosition < this._toValue) {
          isOvershooting = position > this._toValue;
        } else {
          isOvershooting = position < this._toValue;
        }
      }
      var isVelocity = Math.abs(velocity) <= this._restSpeedThreshold;
      var isDisplacement = true;
      if (this._tension !== 0) {
        isDisplacement = Math.abs(this._toValue - position) <= this._restDisplacementThreshold;
      }

      if (isOvershooting || isVelocity && isDisplacement) {
        if (this._tension !== 0) {
          this._onUpdate(this._toValue);
        }

        this.__debouncedOnEnd({ finished: true });
        return;
      }
      this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
    }
  }, {
    key: 'stop',
    value: function stop() {
      babelHelpers.get(SpringAnimation.prototype.__proto__ || Object.getPrototypeOf(SpringAnimation.prototype), 'stop', this).call(this);
      this.__active = false;
      global.cancelAnimationFrame(this._animationFrame);
      this.__debouncedOnEnd({ finished: false });
    }
  }]);
  return SpringAnimation;
}(Animation);

var _uniqueId = 1;

var AnimatedValue = function (_AnimatedWithChildren) {
  babelHelpers.inherits(AnimatedValue, _AnimatedWithChildren);

  function AnimatedValue(value) {
    babelHelpers.classCallCheck(this, AnimatedValue);

    var _this6 = babelHelpers.possibleConstructorReturn(this, (AnimatedValue.__proto__ || Object.getPrototypeOf(AnimatedValue)).call(this));

    _this6._value = value;
    _this6._offset = 0;
    _this6._animation = null;
    _this6._listeners = {};
    return _this6;
  }

  babelHelpers.createClass(AnimatedValue, [{
    key: '__detach',
    value: function __detach() {
      this.stopAnimation();
      babelHelpers.get(AnimatedValue.prototype.__proto__ || Object.getPrototypeOf(AnimatedValue.prototype), '__detach', this).call(this);
    }
  }, {
    key: '__getValue',
    value: function __getValue() {
      return this._value + this._offset;
    }
  }, {
    key: '__makeNative',
    value: function __makeNative() {
      babelHelpers.get(AnimatedValue.prototype.__proto__ || Object.getPrototypeOf(AnimatedValue.prototype), '__makeNative', this).call(this);

      if (Object.keys(this._listeners).length) {
        this._startListeningToNativeValueUpdates();
      }
    }
  }, {
    key: 'setValue',
    value: function setValue(value) {
      if (this._animation) {
        this._animation.stop();
        this._animation = null;
      }
      this._updateValue(value, !this.__isNative);
      if (this.__isNative) {
        NativeAnimatedAPI.setAnimatedNodeValue(this.__getNativeTag(), value);
      }
    }
  }, {
    key: 'setOffset',
    value: function setOffset(offset) {
      this._offset = offset;
      if (this.__isNative) {
        NativeAnimatedAPI.setAnimatedNodeOffset(this.__getNativeTag(), offset);
      }
    }
  }, {
    key: 'flattenOffset',
    value: function flattenOffset() {
      this._value += this._offset;
      this._offset = 0;
      if (this.__isNative) {
        NativeAnimatedAPI.flattenAnimatedNodeOffset(this.__getNativeTag());
      }
    }
  }, {
    key: 'extractOffset',
    value: function extractOffset() {
      this._offset += this._value;
      this._value = 0;
      if (this.__isNative) {
        NativeAnimatedAPI.extractAnimatedNodeOffset(this.__getNativeTag());
      }
    }
  }, {
    key: 'addListener',
    value: function addListener(callback) {
      var id = String(_uniqueId++);
      this._listeners[id] = callback;
      if (this.__isNative) {
        this._startListeningToNativeValueUpdates();
      }
      return id;
    }
  }, {
    key: 'removeListener',
    value: function removeListener(id) {
      delete this._listeners[id];
      if (this.__isNative && Object.keys(this._listeners).length === 0) {
        this._stopListeningForNativeValueUpdates();
      }
    }
  }, {
    key: 'removeAllListeners',
    value: function removeAllListeners() {
      this._listeners = {};
      if (this.__isNative) {
        this._stopListeningForNativeValueUpdates();
      }
    }
  }, {
    key: '_startListeningToNativeValueUpdates',
    value: function _startListeningToNativeValueUpdates() {
      var _this7 = this;

      if (this.__nativeAnimatedValueListener) {
        return;
      }

      NativeAnimatedAPI.startListeningToAnimatedNodeValue(this.__getNativeTag());
      this.__nativeAnimatedValueListener = NativeAnimatedHelper.nativeEventEmitter.addListener('onAnimatedValueUpdate', function (data) {
        if (data.tag !== _this7.__getNativeTag()) {
          return;
        }
        _this7._updateValue(data.value, false);
      });
    }
  }, {
    key: '_stopListeningForNativeValueUpdates',
    value: function _stopListeningForNativeValueUpdates() {
      if (!this.__nativeAnimatedValueListener) {
        return;
      }

      this.__nativeAnimatedValueListener.remove();
      this.__nativeAnimatedValueListener = null;
      NativeAnimatedAPI.stopListeningToAnimatedNodeValue(this.__getNativeTag());
    }
  }, {
    key: 'stopAnimation',
    value: function stopAnimation(callback) {
      this.stopTracking();
      this._animation && this._animation.stop();
      this._animation = null;
      callback && callback(this.__getValue());
    }
  }, {
    key: 'interpolate',
    value: function interpolate(config) {
      return new AnimatedInterpolation(this, config);
    }
  }, {
    key: 'animate',
    value: function animate(animation, callback) {
      var _this8 = this;

      var handle = null;
      if (animation.__isInteraction) {
        handle = InteractionManager.createInteractionHandle();
      }
      var previousAnimation = this._animation;
      this._animation && this._animation.stop();
      this._animation = animation;
      animation.start(this._value, function (value) {
        _this8._updateValue(value, true);
      }, function (result) {
        _this8._animation = null;
        if (handle !== null) {
          InteractionManager.clearInteractionHandle(handle);
        }
        callback && callback(result);
      }, previousAnimation, this);
    }
  }, {
    key: 'stopTracking',
    value: function stopTracking() {
      this._tracking && this._tracking.__detach();
      this._tracking = null;
    }
  }, {
    key: 'track',
    value: function track(tracking) {
      this.stopTracking();
      this._tracking = tracking;
    }
  }, {
    key: '_updateValue',
    value: function _updateValue(value, flush) {
      this._value = value;
      if (flush) {
        _flush(this);
      }
      for (var key in this._listeners) {
        this._listeners[key]({ value: this.__getValue() });
      }
    }
  }, {
    key: '__getNativeConfig',
    value: function __getNativeConfig() {
      return {
        type: 'value',
        value: this._value,
        offset: this._offset
      };
    }
  }]);
  return AnimatedValue;
}(AnimatedWithChildren);

var AnimatedValueXY = function (_AnimatedWithChildren2) {
  babelHelpers.inherits(AnimatedValueXY, _AnimatedWithChildren2);

  function AnimatedValueXY(valueIn) {
    babelHelpers.classCallCheck(this, AnimatedValueXY);

    var _this9 = babelHelpers.possibleConstructorReturn(this, (AnimatedValueXY.__proto__ || Object.getPrototypeOf(AnimatedValueXY)).call(this));

    var value = valueIn || { x: 0, y: 0 };
    if (typeof value.x === 'number' && typeof value.y === 'number') {
      _this9.x = new AnimatedValue(value.x);
      _this9.y = new AnimatedValue(value.y);
    } else {
      invariant(value.x instanceof AnimatedValue && value.y instanceof AnimatedValue, 'AnimatedValueXY must be initalized with an object of numbers or ' + 'AnimatedValues.');
      _this9.x = value.x;
      _this9.y = value.y;
    }
    _this9._listeners = {};
    return _this9;
  }

  babelHelpers.createClass(AnimatedValueXY, [{
    key: 'setValue',
    value: function setValue(value) {
      this.x.setValue(value.x);
      this.y.setValue(value.y);
    }
  }, {
    key: 'setOffset',
    value: function setOffset(offset) {
      this.x.setOffset(offset.x);
      this.y.setOffset(offset.y);
    }
  }, {
    key: 'flattenOffset',
    value: function flattenOffset() {
      this.x.flattenOffset();
      this.y.flattenOffset();
    }
  }, {
    key: '__getValue',
    value: function __getValue() {
      return {
        x: this.x.__getValue(),
        y: this.y.__getValue()
      };
    }
  }, {
    key: 'stopAnimation',
    value: function stopAnimation(callback) {
      this.x.stopAnimation();
      this.y.stopAnimation();
      callback && callback(this.__getValue());
    }
  }, {
    key: 'addListener',
    value: function addListener(callback) {
      var _this10 = this;

      var id = String(_uniqueId++);
      var jointCallback = function jointCallback(_ref2) {
        var number = _ref2.value;

        callback(_this10.__getValue());
      };
      this._listeners[id] = {
        x: this.x.addListener(jointCallback),
        y: this.y.addListener(jointCallback)
      };
      return id;
    }
  }, {
    key: 'removeListener',
    value: function removeListener(id) {
      this.x.removeListener(this._listeners[id].x);
      this.y.removeListener(this._listeners[id].y);
      delete this._listeners[id];
    }
  }, {
    key: 'removeAllListeners',
    value: function removeAllListeners() {
      this.x.removeAllListeners();
      this.y.removeAllListeners();
      this._listeners = {};
    }
  }, {
    key: 'getLayout',
    value: function getLayout() {
      return {
        left: this.x,
        top: this.y
      };
    }
  }, {
    key: 'getTranslateTransform',
    value: function getTranslateTransform() {
      return [{ translateX: this.x }, { translateY: this.y }];
    }
  }]);
  return AnimatedValueXY;
}(AnimatedWithChildren);

var AnimatedInterpolation = function (_AnimatedWithChildren3) {
  babelHelpers.inherits(AnimatedInterpolation, _AnimatedWithChildren3);

  function AnimatedInterpolation(parent, config) {
    babelHelpers.classCallCheck(this, AnimatedInterpolation);

    var _this11 = babelHelpers.possibleConstructorReturn(this, (AnimatedInterpolation.__proto__ || Object.getPrototypeOf(AnimatedInterpolation)).call(this));

    _this11._parent = parent;
    _this11._config = config;
    _this11._interpolation = Interpolation.create(config);
    return _this11;
  }

  babelHelpers.createClass(AnimatedInterpolation, [{
    key: '__getValue',
    value: function __getValue() {
      var parentValue = this._parent.__getValue();
      invariant(typeof parentValue === 'number', 'Cannot interpolate an input which is not a number.');

      return this._interpolation(parentValue);
    }
  }, {
    key: 'interpolate',
    value: function interpolate(config) {
      return new AnimatedInterpolation(this, config);
    }
  }, {
    key: '__attach',
    value: function __attach() {
      this._parent.__addChild(this);
    }
  }, {
    key: '__detach',
    value: function __detach() {
      this._parent.__removeChild(this);
      babelHelpers.get(AnimatedInterpolation.prototype.__proto__ || Object.getPrototypeOf(AnimatedInterpolation.prototype), '__detach', this).call(this);
    }
  }, {
    key: '__transformDataType',
    value: function __transformDataType(range) {
      return range.map(function (value) {
        if (typeof value !== 'string') {
          return value;
        }
        if (/deg$/.test(value)) {
          var degrees = parseFloat(value, 10) || 0;
          var radians = degrees * Math.PI / 180.0;
          return radians;
        } else {
          return parseFloat(value, 10) || 0;
        }
      });
    }
  }, {
    key: '__getNativeConfig',
    value: function __getNativeConfig() {
      if (__DEV__) {
        NativeAnimatedHelper.validateInterpolation(this._config);
      }

      return {
        inputRange: this._config.inputRange,

        outputRange: this.__transformDataType(this._config.outputRange),
        extrapolateLeft: this._config.extrapolateLeft || this._config.extrapolate || 'extend',
        extrapolateRight: this._config.extrapolateRight || this._config.extrapolate || 'extend',
        type: 'interpolation'
      };
    }
  }]);
  return AnimatedInterpolation;
}(AnimatedWithChildren);

var AnimatedAddition = function (_AnimatedWithChildren4) {
  babelHelpers.inherits(AnimatedAddition, _AnimatedWithChildren4);

  function AnimatedAddition(a, b) {
    babelHelpers.classCallCheck(this, AnimatedAddition);

    var _this12 = babelHelpers.possibleConstructorReturn(this, (AnimatedAddition.__proto__ || Object.getPrototypeOf(AnimatedAddition)).call(this));

    _this12._a = typeof a === 'number' ? new AnimatedValue(a) : a;
    _this12._b = typeof b === 'number' ? new AnimatedValue(b) : b;
    return _this12;
  }

  babelHelpers.createClass(AnimatedAddition, [{
    key: '__makeNative',
    value: function __makeNative() {
      this._a.__makeNative();
      this._b.__makeNative();
      babelHelpers.get(AnimatedAddition.prototype.__proto__ || Object.getPrototypeOf(AnimatedAddition.prototype), '__makeNative', this).call(this);
    }
  }, {
    key: '__getValue',
    value: function __getValue() {
      return this._a.__getValue() + this._b.__getValue();
    }
  }, {
    key: 'interpolate',
    value: function interpolate(config) {
      return new AnimatedInterpolation(this, config);
    }
  }, {
    key: '__attach',
    value: function __attach() {
      this._a.__addChild(this);
      this._b.__addChild(this);
    }
  }, {
    key: '__detach',
    value: function __detach() {
      this._a.__removeChild(this);
      this._b.__removeChild(this);
      babelHelpers.get(AnimatedAddition.prototype.__proto__ || Object.getPrototypeOf(AnimatedAddition.prototype), '__detach', this).call(this);
    }
  }, {
    key: '__getNativeConfig',
    value: function __getNativeConfig() {
      return {
        type: 'addition',
        input: [this._a.__getNativeTag(), this._b.__getNativeTag()]
      };
    }
  }]);
  return AnimatedAddition;
}(AnimatedWithChildren);

var AnimatedDivision = function (_AnimatedWithChildren5) {
  babelHelpers.inherits(AnimatedDivision, _AnimatedWithChildren5);

  function AnimatedDivision(a, b) {
    babelHelpers.classCallCheck(this, AnimatedDivision);

    var _this13 = babelHelpers.possibleConstructorReturn(this, (AnimatedDivision.__proto__ || Object.getPrototypeOf(AnimatedDivision)).call(this));

    _this13._a = typeof a === 'number' ? new AnimatedValue(a) : a;
    _this13._b = typeof b === 'number' ? new AnimatedValue(b) : b;
    return _this13;
  }

  babelHelpers.createClass(AnimatedDivision, [{
    key: '__makeNative',
    value: function __makeNative() {
      babelHelpers.get(AnimatedDivision.prototype.__proto__ || Object.getPrototypeOf(AnimatedDivision.prototype), '__makeNative', this).call(this);
      this._a.__makeNative();
      this._b.__makeNative();
    }
  }, {
    key: '__getValue',
    value: function __getValue() {
      var a = this._a.__getValue();
      var b = this._b.__getValue();
      if (b === 0) {
        console.error('Detected division by zero in AnimatedDivision');
      }
      return a / b;
    }
  }, {
    key: 'interpolate',
    value: function interpolate(config) {
      return new AnimatedInterpolation(this, config);
    }
  }, {
    key: '__attach',
    value: function __attach() {
      this._a.__addChild(this);
      this._b.__addChild(this);
    }
  }, {
    key: '__detach',
    value: function __detach() {
      this._a.__removeChild(this);
      this._b.__removeChild(this);
      babelHelpers.get(AnimatedDivision.prototype.__proto__ || Object.getPrototypeOf(AnimatedDivision.prototype), '__detach', this).call(this);
    }
  }, {
    key: '__getNativeConfig',
    value: function __getNativeConfig() {
      return {
        type: 'division',
        input: [this._a.__getNativeTag(), this._b.__getNativeTag()]
      };
    }
  }]);
  return AnimatedDivision;
}(AnimatedWithChildren);

var AnimatedMultiplication = function (_AnimatedWithChildren6) {
  babelHelpers.inherits(AnimatedMultiplication, _AnimatedWithChildren6);

  function AnimatedMultiplication(a, b) {
    babelHelpers.classCallCheck(this, AnimatedMultiplication);

    var _this14 = babelHelpers.possibleConstructorReturn(this, (AnimatedMultiplication.__proto__ || Object.getPrototypeOf(AnimatedMultiplication)).call(this));

    _this14._a = typeof a === 'number' ? new AnimatedValue(a) : a;
    _this14._b = typeof b === 'number' ? new AnimatedValue(b) : b;
    return _this14;
  }

  babelHelpers.createClass(AnimatedMultiplication, [{
    key: '__makeNative',
    value: function __makeNative() {
      babelHelpers.get(AnimatedMultiplication.prototype.__proto__ || Object.getPrototypeOf(AnimatedMultiplication.prototype), '__makeNative', this).call(this);
      this._a.__makeNative();
      this._b.__makeNative();
    }
  }, {
    key: '__getValue',
    value: function __getValue() {
      return this._a.__getValue() * this._b.__getValue();
    }
  }, {
    key: 'interpolate',
    value: function interpolate(config) {
      return new AnimatedInterpolation(this, config);
    }
  }, {
    key: '__attach',
    value: function __attach() {
      this._a.__addChild(this);
      this._b.__addChild(this);
    }
  }, {
    key: '__detach',
    value: function __detach() {
      this._a.__removeChild(this);
      this._b.__removeChild(this);
      babelHelpers.get(AnimatedMultiplication.prototype.__proto__ || Object.getPrototypeOf(AnimatedMultiplication.prototype), '__detach', this).call(this);
    }
  }, {
    key: '__getNativeConfig',
    value: function __getNativeConfig() {
      return {
        type: 'multiplication',
        input: [this._a.__getNativeTag(), this._b.__getNativeTag()]
      };
    }
  }]);
  return AnimatedMultiplication;
}(AnimatedWithChildren);

var AnimatedModulo = function (_AnimatedWithChildren7) {
  babelHelpers.inherits(AnimatedModulo, _AnimatedWithChildren7);

  function AnimatedModulo(a, modulus) {
    babelHelpers.classCallCheck(this, AnimatedModulo);

    var _this15 = babelHelpers.possibleConstructorReturn(this, (AnimatedModulo.__proto__ || Object.getPrototypeOf(AnimatedModulo)).call(this));

    _this15._a = a;
    _this15._modulus = modulus;
    return _this15;
  }

  babelHelpers.createClass(AnimatedModulo, [{
    key: '__makeNative',
    value: function __makeNative() {
      babelHelpers.get(AnimatedModulo.prototype.__proto__ || Object.getPrototypeOf(AnimatedModulo.prototype), '__makeNative', this).call(this);
      this._a.__makeNative();
    }
  }, {
    key: '__getValue',
    value: function __getValue() {
      return (this._a.__getValue() % this._modulus + this._modulus) % this._modulus;
    }
  }, {
    key: 'interpolate',
    value: function interpolate(config) {
      return new AnimatedInterpolation(this, config);
    }
  }, {
    key: '__attach',
    value: function __attach() {
      this._a.__addChild(this);
    }
  }, {
    key: '__detach',
    value: function __detach() {
      this._a.__removeChild(this);
    }
  }, {
    key: '__getNativeConfig',
    value: function __getNativeConfig() {
      return {
        type: 'modulus',
        input: this._a.__getNativeTag(),
        modulus: this._modulus
      };
    }
  }]);
  return AnimatedModulo;
}(AnimatedWithChildren);

var AnimatedDiffClamp = function (_AnimatedWithChildren8) {
  babelHelpers.inherits(AnimatedDiffClamp, _AnimatedWithChildren8);

  function AnimatedDiffClamp(a, min, max) {
    babelHelpers.classCallCheck(this, AnimatedDiffClamp);

    var _this16 = babelHelpers.possibleConstructorReturn(this, (AnimatedDiffClamp.__proto__ || Object.getPrototypeOf(AnimatedDiffClamp)).call(this));

    _this16._a = a;
    _this16._min = min;
    _this16._max = max;
    _this16._value = _this16._lastValue = _this16._a.__getValue();
    return _this16;
  }

  babelHelpers.createClass(AnimatedDiffClamp, [{
    key: '__makeNative',
    value: function __makeNative() {
      babelHelpers.get(AnimatedDiffClamp.prototype.__proto__ || Object.getPrototypeOf(AnimatedDiffClamp.prototype), '__makeNative', this).call(this);
      this._a.__makeNative();
    }
  }, {
    key: 'interpolate',
    value: function interpolate(config) {
      return new AnimatedInterpolation(this, config);
    }
  }, {
    key: '__getValue',
    value: function __getValue() {
      var value = this._a.__getValue();
      var diff = value - this._lastValue;
      this._lastValue = value;
      this._value = Math.min(Math.max(this._value + diff, this._min), this._max);
      return this._value;
    }
  }, {
    key: '__attach',
    value: function __attach() {
      this._a.__addChild(this);
    }
  }, {
    key: '__detach',
    value: function __detach() {
      this._a.__removeChild(this);
    }
  }, {
    key: '__getNativeConfig',
    value: function __getNativeConfig() {
      return {
        type: 'diffclamp',
        input: this._a.__getNativeTag(),
        min: this._min,
        max: this._max
      };
    }
  }]);
  return AnimatedDiffClamp;
}(AnimatedWithChildren);

var AnimatedTransform = function (_AnimatedWithChildren9) {
  babelHelpers.inherits(AnimatedTransform, _AnimatedWithChildren9);

  function AnimatedTransform(transforms) {
    babelHelpers.classCallCheck(this, AnimatedTransform);

    var _this17 = babelHelpers.possibleConstructorReturn(this, (AnimatedTransform.__proto__ || Object.getPrototypeOf(AnimatedTransform)).call(this));

    _this17._transforms = transforms;
    return _this17;
  }

  babelHelpers.createClass(AnimatedTransform, [{
    key: '__makeNative',
    value: function __makeNative() {
      babelHelpers.get(AnimatedTransform.prototype.__proto__ || Object.getPrototypeOf(AnimatedTransform.prototype), '__makeNative', this).call(this);
      this._transforms.forEach(function (transform) {
        for (var key in transform) {
          var value = transform[key];
          if (value instanceof Animated) {
            value.__makeNative();
          }
        }
      });
    }
  }, {
    key: '__getValue',
    value: function __getValue() {
      return this._transforms.map(function (transform) {
        var result = {};
        for (var key in transform) {
          var value = transform[key];
          if (value instanceof Animated) {
            result[key] = value.__getValue();
          } else {
            result[key] = value;
          }
        }
        return result;
      });
    }
  }, {
    key: '__getAnimatedValue',
    value: function __getAnimatedValue() {
      return this._transforms.map(function (transform) {
        var result = {};
        for (var key in transform) {
          var value = transform[key];
          if (value instanceof Animated) {
            result[key] = value.__getAnimatedValue();
          } else {
            result[key] = value;
          }
        }
        return result;
      });
    }
  }, {
    key: '__attach',
    value: function __attach() {
      var _this18 = this;

      this._transforms.forEach(function (transform) {
        for (var key in transform) {
          var value = transform[key];
          if (value instanceof Animated) {
            value.__addChild(_this18);
          }
        }
      });
    }
  }, {
    key: '__detach',
    value: function __detach() {
      var _this19 = this;

      this._transforms.forEach(function (transform) {
        for (var key in transform) {
          var value = transform[key];
          if (value instanceof Animated) {
            value.__removeChild(_this19);
          }
        }
      });
    }
  }, {
    key: '__getNativeConfig',
    value: function __getNativeConfig() {
      var transConfigs = [];

      this._transforms.forEach(function (transform) {
        for (var key in transform) {
          var value = transform[key];
          if (value instanceof Animated) {
            transConfigs.push({
              type: 'animated',
              property: key,
              nodeTag: value.__getNativeTag()
            });
          } else {
            transConfigs.push({
              type: 'static',
              property: key,
              value: value
            });
          }
        }
      });

      NativeAnimatedHelper.validateTransform(transConfigs);
      return {
        type: 'transform',
        transforms: transConfigs
      };
    }
  }]);
  return AnimatedTransform;
}(AnimatedWithChildren);

var AnimatedStyle = function (_AnimatedWithChildren10) {
  babelHelpers.inherits(AnimatedStyle, _AnimatedWithChildren10);

  function AnimatedStyle(style) {
    babelHelpers.classCallCheck(this, AnimatedStyle);

    var _this20 = babelHelpers.possibleConstructorReturn(this, (AnimatedStyle.__proto__ || Object.getPrototypeOf(AnimatedStyle)).call(this));

    style = flattenStyle(style) || {};
    if (style.transform) {
      style = babelHelpers.extends({}, style, {
        transform: new AnimatedTransform(style.transform)
      });
    }
    _this20._style = style;
    return _this20;
  }

  babelHelpers.createClass(AnimatedStyle, [{
    key: '__getValue',
    value: function __getValue() {
      var style = {};
      for (var key in this._style) {
        var value = this._style[key];
        if (value instanceof Animated) {
          if (!value.__isNative) {
            style[key] = value.__getValue();
          }
        } else {
          style[key] = value;
        }
      }
      return style;
    }
  }, {
    key: '__getAnimatedValue',
    value: function __getAnimatedValue() {
      var style = {};
      for (var key in this._style) {
        var value = this._style[key];
        if (value instanceof Animated) {
          style[key] = value.__getAnimatedValue();
        }
      }
      return style;
    }
  }, {
    key: '__attach',
    value: function __attach() {
      for (var key in this._style) {
        var value = this._style[key];
        if (value instanceof Animated) {
          value.__addChild(this);
        }
      }
    }
  }, {
    key: '__detach',
    value: function __detach() {
      for (var key in this._style) {
        var value = this._style[key];
        if (value instanceof Animated) {
          value.__removeChild(this);
        }
      }
    }
  }, {
    key: '__makeNative',
    value: function __makeNative() {
      babelHelpers.get(AnimatedStyle.prototype.__proto__ || Object.getPrototypeOf(AnimatedStyle.prototype), '__makeNative', this).call(this);
      for (var key in this._style) {
        var value = this._style[key];
        if (value instanceof Animated) {
          value.__makeNative();
        }
      }
    }
  }, {
    key: '__getNativeConfig',
    value: function __getNativeConfig() {
      var styleConfig = {};
      for (var styleKey in this._style) {
        if (this._style[styleKey] instanceof Animated) {
          styleConfig[styleKey] = this._style[styleKey].__getNativeTag();
        }
      }
      NativeAnimatedHelper.validateStyles(styleConfig);
      return {
        type: 'style',
        style: styleConfig
      };
    }
  }]);
  return AnimatedStyle;
}(AnimatedWithChildren);

var AnimatedProps = function (_Animated2) {
  babelHelpers.inherits(AnimatedProps, _Animated2);

  function AnimatedProps(props, callback) {
    babelHelpers.classCallCheck(this, AnimatedProps);

    var _this21 = babelHelpers.possibleConstructorReturn(this, (AnimatedProps.__proto__ || Object.getPrototypeOf(AnimatedProps)).call(this));

    if (props.style) {
      props = babelHelpers.extends({}, props, {
        style: new AnimatedStyle(props.style)
      });
    }
    _this21._props = props;
    _this21._callback = callback;
    _this21.__attach();
    return _this21;
  }

  babelHelpers.createClass(AnimatedProps, [{
    key: '__getValue',
    value: function __getValue() {
      var props = {};
      for (var key in this._props) {
        var value = this._props[key];
        if (value instanceof Animated) {
          if (!value.__isNative || value instanceof AnimatedStyle) {
            props[key] = value.__getValue();
          }
        } else if (value instanceof AnimatedEvent) {
          props[key] = value.__getHandler();
        } else {
          props[key] = value;
        }
      }
      return props;
    }
  }, {
    key: '__getAnimatedValue',
    value: function __getAnimatedValue() {
      var props = {};
      for (var key in this._props) {
        var value = this._props[key];
        if (value instanceof Animated) {
          props[key] = value.__getAnimatedValue();
        }
      }
      return props;
    }
  }, {
    key: '__attach',
    value: function __attach() {
      for (var key in this._props) {
        var value = this._props[key];
        if (value instanceof Animated) {
          value.__addChild(this);
        }
      }
    }
  }, {
    key: '__detach',
    value: function __detach() {
      if (this.__isNative && this._animatedView) {
        this.__disconnectAnimatedView();
      }
      for (var key in this._props) {
        var value = this._props[key];
        if (value instanceof Animated) {
          value.__removeChild(this);
        }
      }
      babelHelpers.get(AnimatedProps.prototype.__proto__ || Object.getPrototypeOf(AnimatedProps.prototype), '__detach', this).call(this);
    }
  }, {
    key: 'update',
    value: function update() {
      this._callback();
    }
  }, {
    key: '__makeNative',
    value: function __makeNative() {
      if (!this.__isNative) {
        this.__isNative = true;
        for (var key in this._props) {
          var value = this._props[key];
          if (value instanceof Animated) {
            value.__makeNative();
          }
        }
        if (this._animatedView) {
          this.__connectAnimatedView();
        }
      }
    }
  }, {
    key: 'setNativeView',
    value: function setNativeView(animatedView) {
      invariant(this._animatedView === undefined, 'Animated view already set.');
      this._animatedView = animatedView;
      if (this.__isNative) {
        this.__connectAnimatedView();
      }
    }
  }, {
    key: '__connectAnimatedView',
    value: function __connectAnimatedView() {
      invariant(this.__isNative, 'Expected node to be marked as "native"');
      var nativeViewTag = findNodeHandle(this._animatedView);
      invariant(nativeViewTag != null, 'Unable to locate attached view in the native tree');
      NativeAnimatedAPI.connectAnimatedNodeToView(this.__getNativeTag(), nativeViewTag);
    }
  }, {
    key: '__disconnectAnimatedView',
    value: function __disconnectAnimatedView() {
      invariant(this.__isNative, 'Expected node to be marked as "native"');
      var nativeViewTag = findNodeHandle(this._animatedView);
      invariant(nativeViewTag != null, 'Unable to locate attached view in the native tree');
      NativeAnimatedAPI.disconnectAnimatedNodeFromView(this.__getNativeTag(), nativeViewTag);
    }
  }, {
    key: '__getNativeConfig',
    value: function __getNativeConfig() {
      var propsConfig = {};
      for (var propKey in this._props) {
        var value = this._props[propKey];
        if (value instanceof Animated) {
          propsConfig[propKey] = value.__getNativeTag();
        }
      }
      return {
        type: 'props',
        props: propsConfig
      };
    }
  }]);
  return AnimatedProps;
}(Animated);

function createAnimatedComponent(Component) {
  var AnimatedComponent = function (_React$Component) {
    babelHelpers.inherits(AnimatedComponent, _React$Component);

    function AnimatedComponent(props) {
      babelHelpers.classCallCheck(this, AnimatedComponent);

      var _this22 = babelHelpers.possibleConstructorReturn(this, (AnimatedComponent.__proto__ || Object.getPrototypeOf(AnimatedComponent)).call(this, props));

      _this22._setComponentRef = _this22._setComponentRef.bind(_this22);
      return _this22;
    }

    babelHelpers.createClass(AnimatedComponent, [{
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        this._propsAnimated && this._propsAnimated.__detach();
        this._detachNativeEvents(this.props);
      }
    }, {
      key: 'setNativeProps',
      value: function setNativeProps(props) {
        this._component.setNativeProps(props);
      }
    }, {
      key: 'componentWillMount',
      value: function componentWillMount() {
        this._attachProps(this.props);
      }
    }, {
      key: 'componentDidMount',
      value: function componentDidMount() {
        this._propsAnimated.setNativeView(this._component);

        this._attachNativeEvents(this.props);
      }
    }, {
      key: '_attachNativeEvents',
      value: function _attachNativeEvents(newProps) {
        if (newProps !== this.props) {
          this._detachNativeEvents(this.props);
        }

        var ref = this._component.getScrollableNode ? this._component.getScrollableNode() : this._component;

        for (var _key in newProps) {
          var prop = newProps[_key];
          if (prop instanceof AnimatedEvent && prop.__isNative) {
            prop.__attach(ref, _key);
          }
        }
      }
    }, {
      key: '_detachNativeEvents',
      value: function _detachNativeEvents(props) {
        var ref = this._component.getScrollableNode ? this._component.getScrollableNode() : this._component;

        for (var _key2 in props) {
          var prop = props[_key2];
          if (prop instanceof AnimatedEvent && prop.__isNative) {
            prop.__detach(ref, _key2);
          }
        }
      }
    }, {
      key: '_attachProps',
      value: function _attachProps(nextProps) {
        var _this23 = this;

        var oldPropsAnimated = this._propsAnimated;

        var callback = function callback() {
          if (_this23._component.setNativeProps) {
            if (!_this23._propsAnimated.__isNative) {
              _this23._component.setNativeProps(_this23._propsAnimated.__getAnimatedValue());
            } else {
              throw new Error('Attempting to run JS driven animation on animated ' + 'node that has been moved to "native" earlier by starting an ' + 'animation with `useNativeDriver: true`');
            }
          } else {
            _this23.forceUpdate();
          }
        };

        this._propsAnimated = new AnimatedProps(nextProps, callback);

        if (this._component) {
          this._propsAnimated.setNativeView(this._component);
        }

        oldPropsAnimated && oldPropsAnimated.__detach();
      }
    }, {
      key: 'componentWillReceiveProps',
      value: function componentWillReceiveProps(nextProps) {
        this._attachProps(nextProps);
        this._attachNativeEvents(nextProps);
      }
    }, {
      key: 'render',
      value: function render() {
        return React.createElement(Component, babelHelpers.extends({}, this._propsAnimated.__getValue(), {
          ref: this._setComponentRef
        }));
      }
    }, {
      key: '_setComponentRef',
      value: function _setComponentRef(c) {
        this._component = c;
      }
    }, {
      key: 'getNode',
      value: function getNode() {
        return this._component;
      }
    }]);
    return AnimatedComponent;
  }(React.Component);

  AnimatedComponent.propTypes = {
    style: function style(props, propName, componentName) {
      if (!Component.propTypes) {
        return;
      }

      for (var key in ViewStylePropTypes) {
        if (!Component.propTypes[key] && props[key] !== undefined) {
          console.warn('You are setting the style `{ ' + key + ': ... }` as a prop. You ' + 'should nest it in a style object. ' + 'E.g. `{ style: { ' + key + ': ... } }`');
        }
      }
    }
  };

  return AnimatedComponent;
}

var AnimatedTracking = function (_Animated3) {
  babelHelpers.inherits(AnimatedTracking, _Animated3);

  function AnimatedTracking(value, parent, animationClass, animationConfig, callback) {
    babelHelpers.classCallCheck(this, AnimatedTracking);

    var _this24 = babelHelpers.possibleConstructorReturn(this, (AnimatedTracking.__proto__ || Object.getPrototypeOf(AnimatedTracking)).call(this));

    _this24._value = value;
    _this24._parent = parent;
    _this24._animationClass = animationClass;
    _this24._animationConfig = animationConfig;
    _this24._callback = callback;
    _this24.__attach();
    return _this24;
  }

  babelHelpers.createClass(AnimatedTracking, [{
    key: '__getValue',
    value: function __getValue() {
      return this._parent.__getValue();
    }
  }, {
    key: '__attach',
    value: function __attach() {
      this._parent.__addChild(this);
    }
  }, {
    key: '__detach',
    value: function __detach() {
      this._parent.__removeChild(this);
      babelHelpers.get(AnimatedTracking.prototype.__proto__ || Object.getPrototypeOf(AnimatedTracking.prototype), '__detach', this).call(this);
    }
  }, {
    key: 'update',
    value: function update() {
      this._value.animate(new this._animationClass(babelHelpers.extends({}, this._animationConfig, {
        toValue: this._animationConfig.toValue.__getValue()
      })), this._callback);
    }
  }]);
  return AnimatedTracking;
}(Animated);

var add = function add(a, b) {
  return new AnimatedAddition(a, b);
};

var divide = function divide(a, b) {
  return new AnimatedDivision(a, b);
};

var multiply = function multiply(a, b) {
  return new AnimatedMultiplication(a, b);
};

var modulo = function modulo(a, modulus) {
  return new AnimatedModulo(a, modulus);
};

var diffClamp = function diffClamp(a, min, max) {
  return new AnimatedDiffClamp(a, min, max);
};

var _combineCallbacks = function _combineCallbacks(callback, config) {
  if (callback && config.onComplete) {
    return function () {
      config.onComplete && config.onComplete.apply(config, arguments);
      callback && callback.apply(undefined, arguments);
    };
  } else {
    return callback || config.onComplete;
  }
};

var maybeVectorAnim = function maybeVectorAnim(value, config, anim) {
  if (value instanceof AnimatedValueXY) {
    var configX = babelHelpers.extends({}, config);
    var configY = babelHelpers.extends({}, config);
    for (var key in config) {
      var _config$key = config[key],
          x = _config$key.x,
          y = _config$key.y;

      if (x !== undefined && y !== undefined) {
        configX[key] = x;
        configY[key] = y;
      }
    }
    var aX = anim(value.x, configX);
    var aY = anim(value.y, configY);

    return parallel([aX, aY], { stopTogether: false });
  }
  return null;
};

var spring = function spring(value, config) {
  return maybeVectorAnim(value, config, spring) || {
    start: function start(callback) {
      callback = _combineCallbacks(callback, config);
      var singleValue = value;
      var singleConfig = config;
      singleValue.stopTracking();
      if (config.toValue instanceof Animated) {
        singleValue.track(new AnimatedTracking(singleValue, config.toValue, SpringAnimation, singleConfig, callback));
      } else {
        singleValue.animate(new SpringAnimation(singleConfig), callback);
      }
    },

    stop: function stop() {
      value.stopAnimation();
    }
  };
};

var timing = function timing(value, config) {
  return maybeVectorAnim(value, config, timing) || {
    start: function start(callback) {
      callback = _combineCallbacks(callback, config);
      var singleValue = value;
      var singleConfig = config;
      singleValue.stopTracking();
      if (config.toValue instanceof Animated) {
        singleValue.track(new AnimatedTracking(singleValue, config.toValue, TimingAnimation, singleConfig, callback));
      } else {
        singleValue.animate(new TimingAnimation(singleConfig), callback);
      }
    },

    stop: function stop() {
      value.stopAnimation();
    }
  };
};

var decay = function decay(value, config) {
  return maybeVectorAnim(value, config, decay) || {
    start: function start(callback) {
      callback = _combineCallbacks(callback, config);
      var singleValue = value;
      var singleConfig = config;
      singleValue.stopTracking();
      singleValue.animate(new DecayAnimation(singleConfig), callback);
    },

    stop: function stop() {
      value.stopAnimation();
    }
  };
};

var sequence = function sequence(animations) {
  var current = 0;
  return {
    start: function start(callback) {
      var onComplete = function onComplete(result) {
        if (!result.finished) {
          callback && callback(result);
          return;
        }

        current++;

        if (current === animations.length) {
          callback && callback(result);
          return;
        }

        animations[current].start(onComplete);
      };

      if (animations.length === 0) {
        callback && callback({ finished: true });
      } else {
        animations[current].start(onComplete);
      }
    },

    stop: function stop() {
      if (current < animations.length) {
        animations[current].stop();
      }
    }
  };
};

var parallel = function parallel(animations, config) {
  var doneCount = 0;

  var hasEnded = {};
  var stopTogether = !(config && config.stopTogether === false);

  var result = {
    start: function start(callback) {
      if (doneCount === animations.length) {
        callback && callback({ finished: true });
        return;
      }

      animations.forEach(function (animation, idx) {
        var cb = function cb(endResult) {
          hasEnded[idx] = true;
          doneCount++;
          if (doneCount === animations.length) {
            doneCount = 0;
            callback && callback(endResult);
            return;
          }

          if (!endResult.finished && stopTogether) {
            result.stop();
          }
        };

        if (!animation) {
          cb({ finished: true });
        } else {
          animation.start(cb);
        }
      });
    },

    stop: function stop() {
      animations.forEach(function (animation, idx) {
        !hasEnded[idx] && animation.stop();
        hasEnded[idx] = true;
      });
    }
  };

  return result;
};

var delay = function delay(time) {
  return timing(new AnimatedValue(0), { toValue: 0, delay: time, duration: 0 });
};

var stagger = function stagger(time, animations) {
  return parallel(animations.map(function (animation, i) {
    return sequence([delay(time * i), animation]);
  }));
};

var AnimatedEvent = function () {
  function AnimatedEvent(argMapping) {
    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    babelHelpers.classCallCheck(this, AnimatedEvent);

    this._argMapping = argMapping;
    this._listener = config.listener;
    this.__isNative = shouldUseNativeDriver(config);

    if (this.__isNative) {
      invariant(!this._listener, 'Listener is not supported for native driven events.');
    }

    if (__DEV__) {
      this._validateMapping();
    }
  }

  babelHelpers.createClass(AnimatedEvent, [{
    key: '__attach',
    value: function __attach(viewRef, eventName) {
      invariant(this.__isNative, 'Only native driven events need to be attached.');

      var eventMappings = [];

      var traverse = function traverse(value, path) {
        if (value instanceof AnimatedValue) {
          value.__makeNative();

          eventMappings.push({
            nativeEventPath: path,
            animatedValueTag: value.__getNativeTag()
          });
        } else if (typeof value === 'object') {
          for (var _key3 in value) {
            traverse(value[_key3], path.concat(_key3));
          }
        }
      };

      invariant(this._argMapping[0] && this._argMapping[0].nativeEvent, 'Native driven events only support animated values contained inside `nativeEvent`.');

      traverse(this._argMapping[0].nativeEvent, []);

      var viewTag = findNodeHandle(viewRef);

      eventMappings.forEach(function (mapping) {
        NativeAnimatedAPI.addAnimatedEventToView(viewTag, eventName, mapping);
      });
    }
  }, {
    key: '__detach',
    value: function __detach(viewTag, eventName) {
      invariant(this.__isNative, 'Only native driven events need to be detached.');

      NativeAnimatedAPI.removeAnimatedEventFromView(viewTag, eventName);
    }
  }, {
    key: '__getHandler',
    value: function __getHandler() {
      var _this25 = this;

      return function () {
        for (var _len = arguments.length, args = Array(_len), _key4 = 0; _key4 < _len; _key4++) {
          args[_key4] = arguments[_key4];
        }

        var traverse = function traverse(recMapping, recEvt, key) {
          if (typeof recEvt === 'number' && recMapping instanceof AnimatedValue) {
            recMapping.setValue(recEvt);
          } else if (typeof recMapping === 'object') {
            for (var mappingKey in recMapping) {
              traverse(recMapping[mappingKey], recEvt[mappingKey], mappingKey);
            }
          }
        };

        if (!_this25.__isNative) {
          _this25._argMapping.forEach(function (mapping, idx) {
            traverse(mapping, args[idx], 'arg' + idx);
          });
        }

        if (_this25._listener) {
          _this25._listener.apply(null, args);
        }
      };
    }
  }, {
    key: '_validateMapping',
    value: function _validateMapping() {
      var traverse = function traverse(recMapping, recEvt, key) {
        if (typeof recEvt === 'number') {
          invariant(recMapping instanceof AnimatedValue, 'Bad mapping of type ' + typeof recMapping + ' for key ' + key + ', event value must map to AnimatedValue');
          return;
        }
        invariant(typeof recMapping === 'object', 'Bad mapping of type ' + typeof recMapping + ' for key ' + key);
        invariant(typeof recEvt === 'object', 'Bad event of type ' + typeof recEvt + ' for key ' + key);
        for (var mappingKey in recMapping) {
          traverse(recMapping[mappingKey], recEvt[mappingKey], mappingKey);
        }
      };
    }
  }]);
  return AnimatedEvent;
}();

var event = function event(argMapping, config) {
  var animatedEvent = new AnimatedEvent(argMapping, config);
  if (animatedEvent.__isNative) {
    return animatedEvent;
  } else {
    return animatedEvent.__getHandler();
  }
};

module.exports = {
  Value: AnimatedValue,

  ValueXY: AnimatedValueXY,

  decay: decay,

  timing: timing,

  spring: spring,

  add: add,

  divide: divide,

  multiply: multiply,

  modulo: modulo,

  diffClamp: diffClamp,

  delay: delay,

  sequence: sequence,

  parallel: parallel,

  stagger: stagger,

  event: event,

  createAnimatedComponent: createAnimatedComponent,

  __PropsOnlyForTests: AnimatedProps
};
}, 252, null, "AnimatedImplementation");
__d(/* InteractionManager */function(global, require, module, exports) {
'use strict';

var BatchedBridge = require(28             ); // 28 = BatchedBridge
var EventEmitter = require(53            ); // 53 = EventEmitter
var Set = require(219  ); // 219 = Set
var TaskQueue = require(254        ); // 254 = TaskQueue

var infoLog = require(255      ); // 255 = infoLog
var invariant = require(24                  ); // 24 = fbjs/lib/invariant
var keyMirror = require(105                 ); // 105 = fbjs/lib/keyMirror

var _emitter = new EventEmitter();

var DEBUG_DELAY = 0;
var DEBUG = false;

var InteractionManager = {
  Events: keyMirror({
    interactionStart: true,
    interactionComplete: true
  }),

  runAfterInteractions: function runAfterInteractions(task) {
    var tasks = [];
    var promise = new Promise(function (resolve) {
      _scheduleUpdate();
      if (task) {
        tasks.push(task);
      }
      tasks.push({ run: resolve, name: 'resolve ' + (task && task.name || '?') });
      _taskQueue.enqueueTasks(tasks);
    });
    return {
      then: promise.then.bind(promise),
      done: function done() {
        if (promise.done) {
          return promise.done.apply(promise, arguments);
        } else {
          console.warn('Tried to call done when not supported by current Promise implementation.');
        }
      },
      cancel: function cancel() {
        _taskQueue.cancelTasks(tasks);
      }
    };
  },
  createInteractionHandle: function createInteractionHandle() {
    DEBUG && infoLog('create interaction handle');
    _scheduleUpdate();
    var handle = ++_inc;
    _addInteractionSet.add(handle);
    return handle;
  },
  clearInteractionHandle: function clearInteractionHandle(handle) {
    DEBUG && infoLog('clear interaction handle');
    invariant(!!handle, 'Must provide a handle to clear.');
    _scheduleUpdate();
    _addInteractionSet.delete(handle);
    _deleteInteractionSet.add(handle);
  },


  addListener: _emitter.addListener.bind(_emitter),

  setDeadline: function setDeadline(deadline) {
    _deadline = deadline;
  }
};

var _interactionSet = new Set();
var _addInteractionSet = new Set();
var _deleteInteractionSet = new Set();
var _taskQueue = new TaskQueue({ onMoreTasks: _scheduleUpdate });
var _nextUpdateHandle = 0;
var _inc = 0;
var _deadline = -1;

function _scheduleUpdate() {
  if (!_nextUpdateHandle) {
    if (_deadline > 0) {
      _nextUpdateHandle = setTimeout(_processUpdate, 0 + DEBUG_DELAY);
    } else {
      _nextUpdateHandle = setImmediate(_processUpdate);
    }
  }
}

function _processUpdate() {
  _nextUpdateHandle = 0;

  var interactionCount = _interactionSet.size;
  _addInteractionSet.forEach(function (handle) {
    return _interactionSet.add(handle);
  });
  _deleteInteractionSet.forEach(function (handle) {
    return _interactionSet.delete(handle);
  });
  var nextInteractionCount = _interactionSet.size;

  if (interactionCount !== 0 && nextInteractionCount === 0) {
    _emitter.emit(InteractionManager.Events.interactionComplete);
  } else if (interactionCount === 0 && nextInteractionCount !== 0) {
    _emitter.emit(InteractionManager.Events.interactionStart);
  }

  if (nextInteractionCount === 0) {
    while (_taskQueue.hasTasksToProcess()) {
      _taskQueue.processNext();
      if (_deadline > 0 && BatchedBridge.getEventLoopRunningTime() >= _deadline) {
        _scheduleUpdate();
        break;
      }
    }
  }
  _addInteractionSet.clear();
  _deleteInteractionSet.clear();
}

module.exports = InteractionManager;
}, 253, null, "InteractionManager");
__d(/* TaskQueue */function(global, require, module, exports) {
'use strict';

var infoLog = require(255      ); // 255 = infoLog
var invariant = require(24                  ); // 24 = fbjs/lib/invariant

var DEBUG = false;

var TaskQueue = function () {
  function TaskQueue(_ref) {
    var onMoreTasks = _ref.onMoreTasks;
    babelHelpers.classCallCheck(this, TaskQueue);

    this._onMoreTasks = onMoreTasks;
    this._queueStack = [{ tasks: [], popable: false }];
  }

  babelHelpers.createClass(TaskQueue, [{
    key: 'enqueue',
    value: function enqueue(task) {
      this._getCurrentQueue().push(task);
    }
  }, {
    key: 'enqueueTasks',
    value: function enqueueTasks(tasks) {
      var _this = this;

      tasks.forEach(function (task) {
        return _this.enqueue(task);
      });
    }
  }, {
    key: 'cancelTasks',
    value: function cancelTasks(tasksToCancel) {
      this._queueStack = this._queueStack.map(function (queue) {
        return babelHelpers.extends({}, queue, {
          tasks: queue.tasks.filter(function (task) {
            return tasksToCancel.indexOf(task) === -1;
          })
        });
      }).filter(function (queue, idx) {
        return queue.tasks.length > 0 || idx === 0;
      });
    }
  }, {
    key: 'hasTasksToProcess',
    value: function hasTasksToProcess() {
      return this._getCurrentQueue().length > 0;
    }
  }, {
    key: 'processNext',
    value: function processNext() {
      var queue = this._getCurrentQueue();
      if (queue.length) {
        var task = queue.shift();
        try {
          if (task.gen) {
            DEBUG && infoLog('genPromise for task ' + task.name);
            this._genPromise(task);
          } else if (task.run) {
            DEBUG && infoLog('run task ' + task.name);
            task.run();
          } else {
            invariant(typeof task === 'function', 'Expected Function, SimpleTask, or PromiseTask, but got:\n' + JSON.stringify(task, null, 2));
            DEBUG && infoLog('run anonymous task');
            task();
          }
        } catch (e) {
          e.message = 'TaskQueue: Error with task ' + (task.name || '') + ': ' + e.message;
          throw e;
        }
      }
    }
  }, {
    key: '_getCurrentQueue',
    value: function _getCurrentQueue() {
      var stackIdx = this._queueStack.length - 1;
      var queue = this._queueStack[stackIdx];
      if (queue.popable && queue.tasks.length === 0 && this._queueStack.length > 1) {
        this._queueStack.pop();
        DEBUG && infoLog('popped queue: ', { stackIdx: stackIdx, queueStackSize: this._queueStack.length });
        return this._getCurrentQueue();
      } else {
        return queue.tasks;
      }
    }
  }, {
    key: '_genPromise',
    value: function _genPromise(task) {
      var _this2 = this;

      this._queueStack.push({ tasks: [], popable: false });
      var stackIdx = this._queueStack.length - 1;
      DEBUG && infoLog('push new queue: ', { stackIdx: stackIdx });
      DEBUG && infoLog('exec gen task ' + task.name);
      task.gen().then(function () {
        DEBUG && infoLog('onThen for gen task ' + task.name, { stackIdx: stackIdx, queueStackSize: _this2._queueStack.length });
        _this2._queueStack[stackIdx].popable = true;
        _this2.hasTasksToProcess() && _this2._onMoreTasks();
      }).catch(function (ex) {
        ex.message = 'TaskQueue: Error resolving Promise in task ' + task.name + ': ' + ex.message;
        throw ex;
      }).done();
    }
  }]);
  return TaskQueue;
}();

module.exports = TaskQueue;
}, 254, null, "TaskQueue");
__d(/* infoLog */function(global, require, module, exports) {
'use strict';

function infoLog() {
  var _console;

  return (_console = console).log.apply(_console, arguments);
}

module.exports = infoLog;
}, 255, null, "infoLog");
__d(/* Interpolation */function(global, require, module, exports) {
'use strict';

var invariant = require(24                  ); // 24 = fbjs/lib/invariant
var normalizeColor = require(18              ); // 18 = normalizeColor

var linear = function linear(t) {
  return t;
};

var Interpolation = function () {
  function Interpolation() {
    babelHelpers.classCallCheck(this, Interpolation);
  }

  babelHelpers.createClass(Interpolation, null, [{
    key: 'create',
    value: function create(config) {

      if (config.outputRange && typeof config.outputRange[0] === 'string') {
        return createInterpolationFromStringOutputRange(config);
      }

      var outputRange = config.outputRange;
      checkInfiniteRange('outputRange', outputRange);

      var inputRange = config.inputRange;
      checkInfiniteRange('inputRange', inputRange);
      checkValidInputRange(inputRange);

      invariant(inputRange.length === outputRange.length, 'inputRange (' + inputRange.length + ') and outputRange (' + outputRange.length + ') must have the same length');

      var easing = config.easing || linear;

      var extrapolateLeft = 'extend';
      if (config.extrapolateLeft !== undefined) {
        extrapolateLeft = config.extrapolateLeft;
      } else if (config.extrapolate !== undefined) {
        extrapolateLeft = config.extrapolate;
      }

      var extrapolateRight = 'extend';
      if (config.extrapolateRight !== undefined) {
        extrapolateRight = config.extrapolateRight;
      } else if (config.extrapolate !== undefined) {
        extrapolateRight = config.extrapolate;
      }

      return function (input) {
        invariant(typeof input === 'number', 'Cannot interpolation an input which is not a number');

        var range = findRange(input, inputRange);
        return interpolate(input, inputRange[range], inputRange[range + 1], outputRange[range], outputRange[range + 1], easing, extrapolateLeft, extrapolateRight);
      };
    }
  }]);
  return Interpolation;
}();

function interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight) {
  var result = input;

  if (result < inputMin) {
    if (extrapolateLeft === 'identity') {
      return result;
    } else if (extrapolateLeft === 'clamp') {
      result = inputMin;
    } else if (extrapolateLeft === 'extend') {}
  }

  if (result > inputMax) {
    if (extrapolateRight === 'identity') {
      return result;
    } else if (extrapolateRight === 'clamp') {
      result = inputMax;
    } else if (extrapolateRight === 'extend') {}
  }

  if (outputMin === outputMax) {
    return outputMin;
  }

  if (inputMin === inputMax) {
    if (input <= inputMin) {
      return outputMin;
    }
    return outputMax;
  }

  if (inputMin === -Infinity) {
    result = -result;
  } else if (inputMax === Infinity) {
    result = result - inputMin;
  } else {
    result = (result - inputMin) / (inputMax - inputMin);
  }

  result = easing(result);

  if (outputMin === -Infinity) {
    result = -result;
  } else if (outputMax === Infinity) {
    result = result + outputMin;
  } else {
    result = result * (outputMax - outputMin) + outputMin;
  }

  return result;
}

function colorToRgba(input) {
  var int32Color = normalizeColor(input);
  if (int32Color === null) {
    return input;
  }

  int32Color = int32Color || 0;

  var r = (int32Color & 0xff000000) >>> 24;
  var g = (int32Color & 0x00ff0000) >>> 16;
  var b = (int32Color & 0x0000ff00) >>> 8;
  var a = (int32Color & 0x000000ff) / 255;

  return 'rgba(' + r + ', ' + g + ', ' + b + ', ' + a + ')';
}

var stringShapeRegex = /[0-9\.-]+/g;

function createInterpolationFromStringOutputRange(config) {
  var outputRange = config.outputRange;
  invariant(outputRange.length >= 2, 'Bad output range');
  outputRange = outputRange.map(colorToRgba);
  checkPattern(outputRange);

  var outputRanges = outputRange[0].match(stringShapeRegex).map(function () {
    return [];
  });
  outputRange.forEach(function (value) {
    value.match(stringShapeRegex).forEach(function (number, i) {
      outputRanges[i].push(+number);
    });
  });

  var interpolations = outputRange[0].match(stringShapeRegex).map(function (value, i) {
    return Interpolation.create(babelHelpers.extends({}, config, {
      outputRange: outputRanges[i]
    }));
  });

  var shouldRound = isRgbOrRgba(outputRange[0]);

  return function (input) {
    var i = 0;

    return outputRange[0].replace(stringShapeRegex, function () {
      var val = +interpolations[i++](input);
      var rounded = shouldRound && i < 4 ? Math.round(val) : Math.round(val * 1000) / 1000;
      return String(rounded);
    });
  };
}

function isRgbOrRgba(range) {
  return typeof range === 'string' && range.startsWith('rgb');
}

function checkPattern(arr) {
  var pattern = arr[0].replace(stringShapeRegex, '');
  for (var i = 1; i < arr.length; ++i) {
    invariant(pattern === arr[i].replace(stringShapeRegex, ''), 'invalid pattern ' + arr[0] + ' and ' + arr[i]);
  }
}

function findRange(input, inputRange) {
  for (var i = 1; i < inputRange.length - 1; ++i) {
    if (inputRange[i] >= input) {
      break;
    }
  }
  return i - 1;
}

function checkValidInputRange(arr) {
  invariant(arr.length >= 2, 'inputRange must have at least 2 elements');
  for (var i = 1; i < arr.length; ++i) {
    invariant(arr[i] >= arr[i - 1], 'inputRange must be monotonically increasing ' + arr);
  }
}

function checkInfiniteRange(name, arr) {
  invariant(arr.length >= 2, name + ' must have at least 2 elements');
  invariant(arr.length !== 2 || arr[0] !== -Infinity || arr[1] !== Infinity, name + 'cannot be ]-infinity;+infinity[ ' + arr);
}

module.exports = Interpolation;
}, 256, null, "Interpolation");
__d(/* NativeAnimatedHelper */function(global, require, module, exports) {
'use strict';

var NativeAnimatedModule = require(27             ).NativeAnimatedModule; // 27 = NativeModules
var NativeEventEmitter = require(52                  ); // 52 = NativeEventEmitter

var invariant = require(24                  ); // 24 = fbjs/lib/invariant

var __nativeAnimatedNodeTagCount = 1;
var __nativeAnimationIdCount = 1;

var nativeEventEmitter = void 0;

var API = {
  createAnimatedNode: function createAnimatedNode(tag, config) {
    assertNativeAnimatedModule();
    NativeAnimatedModule.createAnimatedNode(tag, config);
  },
  startListeningToAnimatedNodeValue: function startListeningToAnimatedNodeValue(tag) {
    assertNativeAnimatedModule();
    NativeAnimatedModule.startListeningToAnimatedNodeValue(tag);
  },
  stopListeningToAnimatedNodeValue: function stopListeningToAnimatedNodeValue(tag) {
    assertNativeAnimatedModule();
    NativeAnimatedModule.stopListeningToAnimatedNodeValue(tag);
  },
  connectAnimatedNodes: function connectAnimatedNodes(parentTag, childTag) {
    assertNativeAnimatedModule();
    NativeAnimatedModule.connectAnimatedNodes(parentTag, childTag);
  },
  disconnectAnimatedNodes: function disconnectAnimatedNodes(parentTag, childTag) {
    assertNativeAnimatedModule();
    NativeAnimatedModule.disconnectAnimatedNodes(parentTag, childTag);
  },
  startAnimatingNode: function startAnimatingNode(animationId, nodeTag, config, endCallback) {
    assertNativeAnimatedModule();
    NativeAnimatedModule.startAnimatingNode(animationId, nodeTag, config, endCallback);
  },
  stopAnimation: function stopAnimation(animationId) {
    assertNativeAnimatedModule();
    NativeAnimatedModule.stopAnimation(animationId);
  },
  setAnimatedNodeValue: function setAnimatedNodeValue(nodeTag, value) {
    assertNativeAnimatedModule();
    NativeAnimatedModule.setAnimatedNodeValue(nodeTag, value);
  },
  setAnimatedNodeOffset: function setAnimatedNodeOffset(nodeTag, offset) {
    assertNativeAnimatedModule();
    NativeAnimatedModule.setAnimatedNodeOffset(nodeTag, offset);
  },
  flattenAnimatedNodeOffset: function flattenAnimatedNodeOffset(nodeTag) {
    assertNativeAnimatedModule();
    NativeAnimatedModule.flattenAnimatedNodeOffset(nodeTag);
  },
  extractAnimatedNodeOffset: function extractAnimatedNodeOffset(nodeTag) {
    assertNativeAnimatedModule();
    NativeAnimatedModule.extractAnimatedNodeOffset(nodeTag);
  },
  connectAnimatedNodeToView: function connectAnimatedNodeToView(nodeTag, viewTag) {
    assertNativeAnimatedModule();
    NativeAnimatedModule.connectAnimatedNodeToView(nodeTag, viewTag);
  },
  disconnectAnimatedNodeFromView: function disconnectAnimatedNodeFromView(nodeTag, viewTag) {
    assertNativeAnimatedModule();
    NativeAnimatedModule.disconnectAnimatedNodeFromView(nodeTag, viewTag);
  },
  dropAnimatedNode: function dropAnimatedNode(tag) {
    assertNativeAnimatedModule();
    NativeAnimatedModule.dropAnimatedNode(tag);
  },
  addAnimatedEventToView: function addAnimatedEventToView(viewTag, eventName, eventMapping) {
    assertNativeAnimatedModule();
    NativeAnimatedModule.addAnimatedEventToView(viewTag, eventName, eventMapping);
  },
  removeAnimatedEventFromView: function removeAnimatedEventFromView(viewTag, eventName) {
    assertNativeAnimatedModule();
    NativeAnimatedModule.removeAnimatedEventFromView(viewTag, eventName);
  }
};

var STYLES_WHITELIST = {
  opacity: true,
  transform: true,

  scaleX: true,
  scaleY: true,
  translateX: true,
  translateY: true
};

var TRANSFORM_WHITELIST = {
  translateX: true,
  translateY: true,
  scale: true,
  scaleX: true,
  scaleY: true,
  rotate: true,
  rotateX: true,
  rotateY: true,
  perspective: true
};

function validateTransform(configs) {
  configs.forEach(function (config) {
    if (!TRANSFORM_WHITELIST.hasOwnProperty(config.property)) {
      throw new Error('Property \'' + config.property + '\' is not supported by native animated module');
    }
  });
}

function validateStyles(styles) {
  for (var key in styles) {
    if (!STYLES_WHITELIST.hasOwnProperty(key)) {
      throw new Error('Style property \'' + key + '\' is not supported by native animated module');
    }
  }
}

function validateInterpolation(config) {
  var SUPPORTED_INTERPOLATION_PARAMS = {
    inputRange: true,
    outputRange: true,
    extrapolate: true,
    extrapolateRight: true,
    extrapolateLeft: true
  };
  for (var key in config) {
    if (!SUPPORTED_INTERPOLATION_PARAMS.hasOwnProperty(key)) {
      throw new Error('Interpolation property \'' + key + '\' is not supported by native animated module');
    }
  }
}

function generateNewNodeTag() {
  return __nativeAnimatedNodeTagCount++;
}

function generateNewAnimationId() {
  return __nativeAnimationIdCount++;
}

function assertNativeAnimatedModule() {
  invariant(NativeAnimatedModule, 'Native animated module is not available');
}

function isNativeAnimatedAvailable() {
  return !!NativeAnimatedModule;
}

module.exports = {
  API: API,
  validateStyles: validateStyles,
  validateTransform: validateTransform,
  validateInterpolation: validateInterpolation,
  generateNewNodeTag: generateNewNodeTag,
  generateNewAnimationId: generateNewAnimationId,
  assertNativeAnimatedModule: assertNativeAnimatedModule,
  isNativeAnimatedAvailable: isNativeAnimatedAvailable,
  get nativeEventEmitter() {
    if (!nativeEventEmitter) {
      nativeEventEmitter = new NativeEventEmitter(NativeAnimatedModule);
    }
    return nativeEventEmitter;
  }
};
}, 257, null, "NativeAnimatedHelper");
__d(/* SpringConfig */function(global, require, module, exports) {

'use strict';

function tensionFromOrigamiValue(oValue) {
  return (oValue - 30) * 3.62 + 194;
}

function frictionFromOrigamiValue(oValue) {
  return (oValue - 8) * 3 + 25;
}

function fromOrigamiTensionAndFriction(tension, friction) {
  return {
    tension: tensionFromOrigamiValue(tension),
    friction: frictionFromOrigamiValue(friction)
  };
}

function fromBouncinessAndSpeed(bounciness, speed) {
  function normalize(value, startValue, endValue) {
    return (value - startValue) / (endValue - startValue);
  }

  function projectNormal(n, start, end) {
    return start + n * (end - start);
  }

  function linearInterpolation(t, start, end) {
    return t * end + (1 - t) * start;
  }

  function quadraticOutInterpolation(t, start, end) {
    return linearInterpolation(2 * t - t * t, start, end);
  }

  function b3Friction1(x) {
    return 0.0007 * Math.pow(x, 3) - 0.031 * Math.pow(x, 2) + 0.64 * x + 1.28;
  }

  function b3Friction2(x) {
    return 0.000044 * Math.pow(x, 3) - 0.006 * Math.pow(x, 2) + 0.36 * x + 2;
  }

  function b3Friction3(x) {
    return 0.00000045 * Math.pow(x, 3) - 0.000332 * Math.pow(x, 2) + 0.1078 * x + 5.84;
  }

  function b3Nobounce(tension) {
    if (tension <= 18) {
      return b3Friction1(tension);
    } else if (tension > 18 && tension <= 44) {
      return b3Friction2(tension);
    } else {
      return b3Friction3(tension);
    }
  }

  var b = normalize(bounciness / 1.7, 0, 20);
  b = projectNormal(b, 0, 0.8);
  var s = normalize(speed / 1.7, 0, 20);
  var bouncyTension = projectNormal(s, 0.5, 200);
  var bouncyFriction = quadraticOutInterpolation(b, b3Nobounce(bouncyTension), 0.01);

  return {
    tension: tensionFromOrigamiValue(bouncyTension),
    friction: frictionFromOrigamiValue(bouncyFriction)
  };
}

module.exports = {
  fromOrigamiTensionAndFriction: fromOrigamiTensionAndFriction,
  fromBouncinessAndSpeed: fromBouncinessAndSpeed
};
}, 258, null, "SpringConfig");
__d(/* fbjs/lib/requestAnimationFrame.js */function(global, require, module, exports) {'use strict';

var emptyFunction = require(14               ); // 14 = ./emptyFunction
var nativeRequestAnimationFrame = require(260                            ); // 260 = ./nativeRequestAnimationFrame

var lastTime = 0;

var requestAnimationFrame = nativeRequestAnimationFrame || function (callback) {
  var currTime = Date.now();
  var timeDelay = Math.max(0, 16 - (currTime - lastTime));
  lastTime = currTime + timeDelay;
  return global.setTimeout(function () {
    callback(Date.now());
  }, timeDelay);
};

requestAnimationFrame(emptyFunction);

module.exports = requestAnimationFrame;
}, 259, null, "fbjs/lib/requestAnimationFrame.js");
__d(/* fbjs/lib/nativeRequestAnimationFrame.js */function(global, require, module, exports) {"use strict";

var nativeRequestAnimationFrame = global.requestAnimationFrame || global.webkitRequestAnimationFrame || global.mozRequestAnimationFrame || global.oRequestAnimationFrame || global.msRequestAnimationFrame;

module.exports = nativeRequestAnimationFrame;
}, 260, null, "fbjs/lib/nativeRequestAnimationFrame.js");
__d(/* Easing */function(global, require, module, exports) {
'use strict';

var _ease = void 0;

var Easing = function () {
  function Easing() {
    babelHelpers.classCallCheck(this, Easing);
  }

  babelHelpers.createClass(Easing, null, [{
    key: 'step0',
    value: function step0(n) {
      return n > 0 ? 1 : 0;
    }
  }, {
    key: 'step1',
    value: function step1(n) {
      return n >= 1 ? 1 : 0;
    }
  }, {
    key: 'linear',
    value: function linear(t) {
      return t;
    }
  }, {
    key: 'ease',
    value: function ease(t) {
      if (!_ease) {
        _ease = Easing.bezier(0.42, 0, 1, 1);
      }
      return _ease(t);
    }
  }, {
    key: 'quad',
    value: function quad(t) {
      return t * t;
    }
  }, {
    key: 'cubic',
    value: function cubic(t) {
      return t * t * t;
    }
  }, {
    key: 'poly',
    value: function poly(n) {
      return function (t) {
        return Math.pow(t, n);
      };
    }
  }, {
    key: 'sin',
    value: function sin(t) {
      return 1 - Math.cos(t * Math.PI / 2);
    }
  }, {
    key: 'circle',
    value: function circle(t) {
      return 1 - Math.sqrt(1 - t * t);
    }
  }, {
    key: 'exp',
    value: function exp(t) {
      return Math.pow(2, 10 * (t - 1));
    }
  }, {
    key: 'elastic',
    value: function elastic() {
      var bounciness = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

      var p = bounciness * Math.PI;
      return function (t) {
        return 1 - Math.pow(Math.cos(t * Math.PI / 2), 3) * Math.cos(t * p);
      };
    }
  }, {
    key: 'back',
    value: function back(s) {
      if (s === undefined) {
        s = 1.70158;
      }
      return function (t) {
        return t * t * ((s + 1) * t - s);
      };
    }
  }, {
    key: 'bounce',
    value: function bounce(t) {
      if (t < 1 / 2.75) {
        return 7.5625 * t * t;
      }

      if (t < 2 / 2.75) {
        t -= 1.5 / 2.75;
        return 7.5625 * t * t + 0.75;
      }

      if (t < 2.5 / 2.75) {
        t -= 2.25 / 2.75;
        return 7.5625 * t * t + 0.9375;
      }

      t -= 2.625 / 2.75;
      return 7.5625 * t * t + 0.984375;
    }
  }, {
    key: 'bezier',
    value: function bezier(x1, y1, x2, y2) {
      var _bezier = require(262     ); // 262 = bezier
      return _bezier(x1, y1, x2, y2);
    }
  }, {
    key: 'in',
    value: function _in(easing) {
      return easing;
    }
  }, {
    key: 'out',
    value: function out(easing) {
      return function (t) {
        return 1 - easing(1 - t);
      };
    }
  }, {
    key: 'inOut',
    value: function inOut(easing) {
      return function (t) {
        if (t < 0.5) {
          return easing(t * 2) / 2;
        }
        return 1 - easing((1 - t) * 2) / 2;
      };
    }
  }]);
  return Easing;
}();

module.exports = Easing;
}, 261, null, "Easing");
__d(/* bezier */function(global, require, module, exports) {
'use strict';

var NEWTON_ITERATIONS = 4;
var NEWTON_MIN_SLOPE = 0.001;
var SUBDIVISION_PRECISION = 0.0000001;
var SUBDIVISION_MAX_ITERATIONS = 10;

var kSplineTableSize = 11;
var kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);

var float32ArraySupported = typeof Float32Array === 'function';

function A(aA1, aA2) {
  return 1.0 - 3.0 * aA2 + 3.0 * aA1;
}
function B(aA1, aA2) {
  return 3.0 * aA2 - 6.0 * aA1;
}
function C(aA1) {
  return 3.0 * aA1;
}

function calcBezier(aT, aA1, aA2) {
  return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;
}

function getSlope(aT, aA1, aA2) {
  return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);
}

function binarySubdivide(aX, aA, aB, mX1, mX2) {
  var currentX,
      currentT,
      i = 0;
  do {
    currentT = aA + (aB - aA) / 2.0;
    currentX = calcBezier(currentT, mX1, mX2) - aX;
    if (currentX > 0.0) {
      aB = currentT;
    } else {
      aA = currentT;
    }
  } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);
  return currentT;
}

function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {
  for (var i = 0; i < NEWTON_ITERATIONS; ++i) {
    var currentSlope = getSlope(aGuessT, mX1, mX2);
    if (currentSlope === 0.0) {
      return aGuessT;
    }
    var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
    aGuessT -= currentX / currentSlope;
  }
  return aGuessT;
}

module.exports = function bezier(mX1, mY1, mX2, mY2) {
  if (!(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)) {
    throw new Error('bezier x values must be in [0, 1] range');
  }

  var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);
  if (mX1 !== mY1 || mX2 !== mY2) {
    for (var i = 0; i < kSplineTableSize; ++i) {
      sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
    }
  }

  function getTForX(aX) {
    var intervalStart = 0.0;
    var currentSample = 1;
    var lastSample = kSplineTableSize - 1;

    for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {
      intervalStart += kSampleStepSize;
    }
    --currentSample;

    var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);
    var guessForT = intervalStart + dist * kSampleStepSize;

    var initialSlope = getSlope(guessForT, mX1, mX2);
    if (initialSlope >= NEWTON_MIN_SLOPE) {
      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
    } else if (initialSlope === 0.0) {
      return guessForT;
    } else {
      return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
    }
  }

  return function BezierEasing(x) {
    if (mX1 === mY1 && mX2 === mY2) {
      return x;
    }

    if (x === 0) {
      return 0;
    }
    if (x === 1) {
      return 1;
    }
    return calcBezier(getTForX(x), mY1, mY2);
  };
};
}, 262, null, "bezier");
__d(/* Image */function(global, require, module, exports) {
'use strict';

var NativeMethodsMixin = require(19                  ); // 19 = NativeMethodsMixin
var NativeModules = require(27             ); // 27 = NativeModules
var ImageResizeMode = require(104              ); // 104 = ImageResizeMode
var ImageStylePropTypes = require(103                  ); // 103 = ImageStylePropTypes
var ViewStylePropTypes = require(112                 ); // 112 = ViewStylePropTypes
var React = require(76     ); // 76 = React
var ReactNativeViewAttributes = require(125                        ); // 125 = ReactNativeViewAttributes
var StyleSheet = require(99          ); // 99 = StyleSheet
var StyleSheetPropType = require(126                 ); // 126 = StyleSheetPropType
var View = require(119   ); // 119 = View

var flattenStyle = require(23            ); // 23 = flattenStyle
var merge = require(122    ); // 122 = merge
var requireNativeComponent = require(128                     ); // 128 = requireNativeComponent
var resolveAssetSource = require(171                 ); // 171 = resolveAssetSource
var Set = require(219  ); // 219 = Set
var filterObject = require(264                    ); // 264 = fbjs/lib/filterObject

var PropTypes = React.PropTypes;
var ImageLoader = NativeModules.ImageLoader;


var _requestId = 1;
function generateRequestId() {
  return _requestId++;
}

var ImageViewAttributes = merge(ReactNativeViewAttributes.UIView, {
  src: true,
  loadingIndicatorSrc: true,
  resizeMethod: true,
  resizeMode: true,
  progressiveRenderingEnabled: true,
  fadeDuration: true,
  shouldNotifyLoadEvents: true
});

var ViewStyleKeys = new Set(Object.keys(ViewStylePropTypes));
var ImageSpecificStyleKeys = new Set(Object.keys(ImageStylePropTypes).filter(function (x) {
  return !ViewStyleKeys.has(x);
}));

var Image = React.createClass({
  displayName: 'Image',

  propTypes: babelHelpers.extends({}, View.propTypes, {
    style: StyleSheetPropType(ImageStylePropTypes),

    source: PropTypes.oneOfType([PropTypes.shape({
      uri: PropTypes.string
    }), PropTypes.number, PropTypes.arrayOf(PropTypes.shape({
      uri: PropTypes.string,
      width: PropTypes.number,
      height: PropTypes.number
    }))]),

    loadingIndicatorSource: PropTypes.oneOfType([PropTypes.shape({
      uri: PropTypes.string
    }), PropTypes.number]),
    progressiveRenderingEnabled: PropTypes.bool,
    fadeDuration: PropTypes.number,

    onLoadStart: PropTypes.func,

    onError: PropTypes.func,

    onLoad: PropTypes.func,

    onLoadEnd: PropTypes.func,

    testID: PropTypes.string,

    resizeMethod: PropTypes.oneOf(['auto', 'resize', 'scale']),

    resizeMode: PropTypes.oneOf(['cover', 'contain', 'stretch', 'center'])
  }),

  statics: {
    resizeMode: ImageResizeMode,

    getSize: function getSize(url, success, failure) {
      return ImageLoader.getSize(url).then(function (sizes) {
        success(sizes.width, sizes.height);
      }).catch(failure || function () {
        console.warn('Failed to get size for image: ' + url);
      });
    },
    prefetch: function prefetch(url, callback) {
      var requestId = generateRequestId();
      callback && callback(requestId);
      return ImageLoader.prefetchImage(url, requestId);
    },
    abortPrefetch: function abortPrefetch(requestId) {
      ImageLoader.abortRequest(requestId);
    },
    queryCache: function queryCache(urls) {
      return regeneratorRuntime.async(function queryCache$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return regeneratorRuntime.awrap(ImageLoader.queryCache(urls));

            case 2:
              return _context.abrupt('return', _context.sent);

            case 3:
            case 'end':
              return _context.stop();
          }
        }
      }, null, this);
    },

    resolveAssetSource: resolveAssetSource
  },

  mixins: [NativeMethodsMixin],

  viewConfig: {
    uiViewClassName: 'RCTView',
    validAttributes: ReactNativeViewAttributes.RCTView
  },

  _updateViewConfig: function _updateViewConfig(props) {
    if (props.children) {
      this.viewConfig = {
        uiViewClassName: 'RCTView',
        validAttributes: ReactNativeViewAttributes.RCTView
      };
    } else {
      this.viewConfig = {
        uiViewClassName: 'RCTImageView',
        validAttributes: ImageViewAttributes
      };
    }
  },

  componentWillMount: function componentWillMount() {
    this._updateViewConfig(this.props);
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    this._updateViewConfig(nextProps);
  },

  contextTypes: {
    isInAParentText: React.PropTypes.bool
  },

  render: function render() {
    var source = resolveAssetSource(this.props.source);
    var loadingIndicatorSource = resolveAssetSource(this.props.loadingIndicatorSource);

    if (source && source.uri === '') {
      console.warn('source.uri should not be an empty string');
    }

    if (this.props.src) {
      console.warn('The <Image> component requires a `source` property rather than `src`.');
    }

    if (source && (source.uri || Array.isArray(source))) {
      var style = void 0;
      var sources = void 0;
      if (source.uri) {
        var _width = source.width,
            _height = source.height;

        style = flattenStyle([{ width: _width, height: _height }, styles.base, this.props.style]);
        sources = [{ uri: source.uri }];
      } else {
        style = flattenStyle([styles.base, this.props.style]);
        sources = source;
      }

      var _props = this.props,
          onLoadStart = _props.onLoadStart,
          onLoad = _props.onLoad,
          onLoadEnd = _props.onLoadEnd,
          onError = _props.onError;

      var nativeProps = merge(this.props, {
        style: style,
        shouldNotifyLoadEvents: !!(onLoadStart || onLoad || onLoadEnd || onError),
        src: sources,
        loadingIndicatorSrc: loadingIndicatorSource ? loadingIndicatorSource.uri : null
      });

      if (nativeProps.children) {
        var containerStyle = filterObject(style, function (val, key) {
          return !ImageSpecificStyleKeys.has(key);
        });
        var imageStyle = filterObject(style, function (val, key) {
          return ImageSpecificStyleKeys.has(key);
        });
        var imageProps = merge(nativeProps, {
          style: [imageStyle, styles.absoluteImage],
          children: undefined
        });

        return React.createElement(
          View,
          { style: containerStyle },
          React.createElement(RKImage, imageProps),
          this.props.children
        );
      } else {
        if (this.context.isInAParentText) {
          return React.createElement(RCTTextInlineImage, nativeProps);
        } else {
          return React.createElement(RKImage, nativeProps);
        }
      }
    }
    return null;
  }
});

var styles = StyleSheet.create({
  base: {
    overflow: 'hidden'
  },
  absoluteImage: {
    left: 0,
    right: 0,
    top: 0,
    bottom: 0,
    position: 'absolute'
  }
});

var cfg = {
  nativeOnly: {
    src: true,
    loadingIndicatorSrc: true,
    shouldNotifyLoadEvents: true
  }
};
var RKImage = requireNativeComponent('RCTImageView', Image, cfg);
var RCTTextInlineImage = requireNativeComponent('RCTTextInlineImage', Image, cfg);

module.exports = Image;
}, 263, null, "Image");
__d(/* fbjs/lib/filterObject.js */function(global, require, module, exports) {

'use strict';

var hasOwnProperty = Object.prototype.hasOwnProperty;

function filterObject(object, callback, context) {
  if (!object) {
    return null;
  }
  var result = {};
  for (var name in object) {
    if (hasOwnProperty.call(object, name) && callback.call(context, object[name], name, object)) {
      result[name] = object[name];
    }
  }
  return result;
}

module.exports = filterObject;
}, 264, null, "fbjs/lib/filterObject.js");
__d(/* ScrollView */function(global, require, module, exports) {
'use strict';

var ColorPropType = require(16             ); // 16 = ColorPropType
var EdgeInsetsPropType = require(120                 ); // 120 = EdgeInsetsPropType
var Platform = require(26        ); // 26 = Platform
var PointPropType = require(266            ); // 266 = PointPropType
var React = require(76     ); // 76 = React
var ReactNative = require(191          ); // 191 = ReactNative
var ScrollResponder = require(267              ); // 267 = ScrollResponder
var StyleSheet = require(99          ); // 99 = StyleSheet
var StyleSheetPropType = require(126                 ); // 126 = StyleSheetPropType
var View = require(119   ); // 119 = View
var ViewStylePropTypes = require(112                 ); // 112 = ViewStylePropTypes

var dismissKeyboard = require(60               ); // 60 = dismissKeyboard
var flattenStyle = require(23            ); // 23 = flattenStyle
var invariant = require(24                  ); // 24 = fbjs/lib/invariant
var processDecelerationRate = require(269                      ); // 269 = processDecelerationRate
var PropTypes = React.PropTypes;
var requireNativeComponent = require(128                     ); // 128 = requireNativeComponent

var ScrollView = React.createClass({
  displayName: 'ScrollView',

  propTypes: babelHelpers.extends({}, View.propTypes, {
    automaticallyAdjustContentInsets: PropTypes.bool,

    contentInset: EdgeInsetsPropType,

    contentOffset: PointPropType,

    bounces: PropTypes.bool,

    bouncesZoom: PropTypes.bool,

    alwaysBounceHorizontal: PropTypes.bool,

    alwaysBounceVertical: PropTypes.bool,

    centerContent: PropTypes.bool,

    contentContainerStyle: StyleSheetPropType(ViewStylePropTypes),

    decelerationRate: PropTypes.oneOfType([PropTypes.oneOf(['fast', 'normal']), PropTypes.number]),

    horizontal: PropTypes.bool,

    indicatorStyle: PropTypes.oneOf(['default', 'black', 'white']),

    directionalLockEnabled: PropTypes.bool,

    canCancelContentTouches: PropTypes.bool,

    keyboardDismissMode: PropTypes.oneOf(['none', 'interactive', 'on-drag']),

    keyboardShouldPersistTaps: PropTypes.oneOf(['always', 'never', 'handled', false, true]),

    maximumZoomScale: PropTypes.number,

    minimumZoomScale: PropTypes.number,

    onScroll: PropTypes.func,

    onScrollAnimationEnd: PropTypes.func,

    onContentSizeChange: PropTypes.func,

    pagingEnabled: PropTypes.bool,

    scrollEnabled: PropTypes.bool,

    scrollEventThrottle: PropTypes.number,

    scrollIndicatorInsets: EdgeInsetsPropType,

    scrollsToTop: PropTypes.bool,

    showsHorizontalScrollIndicator: PropTypes.bool,

    showsVerticalScrollIndicator: PropTypes.bool,

    stickyHeaderIndices: PropTypes.arrayOf(PropTypes.number),
    style: StyleSheetPropType(ViewStylePropTypes),

    snapToInterval: PropTypes.number,

    snapToAlignment: PropTypes.oneOf(['start', 'center', 'end']),

    removeClippedSubviews: PropTypes.bool,

    zoomScale: PropTypes.number,

    refreshControl: PropTypes.element,

    endFillColor: ColorPropType,

    scrollPerfTag: PropTypes.string,

    overScrollMode: PropTypes.oneOf(['auto', 'always', 'never'])
  }),

  mixins: [ScrollResponder.Mixin],

  getInitialState: function getInitialState() {
    return this.scrollResponderMixinGetInitialState();
  },

  setNativeProps: function setNativeProps(props) {
    this._scrollViewRef && this._scrollViewRef.setNativeProps(props);
  },

  getScrollResponder: function getScrollResponder() {
    return this;
  },

  getScrollableNode: function getScrollableNode() {
    return ReactNative.findNodeHandle(this._scrollViewRef);
  },

  getInnerViewNode: function getInnerViewNode() {
    return ReactNative.findNodeHandle(this._innerViewRef);
  },

  scrollTo: function scrollTo(y, x, animated) {
    if (typeof y === 'number') {
      console.warn('`scrollTo(y, x, animated)` is deprecated. Use `scrollTo({x: 5, y: 5, animated: true})` instead.');
    } else {
      var _ref = y || {};

      x = _ref.x;
      y = _ref.y;
      animated = _ref.animated;
    }
    this.getScrollResponder().scrollResponderScrollTo({ x: x || 0, y: y || 0, animated: animated !== false });
  },

  scrollToEnd: function scrollToEnd(options) {
    var animated = (options && options.animated) !== false;
    this.getScrollResponder().scrollResponderScrollToEnd({
      animated: animated
    });
  },

  scrollWithoutAnimationTo: function scrollWithoutAnimationTo() {
    var y = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var x = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    console.warn('`scrollWithoutAnimationTo` is deprecated. Use `scrollTo` instead');
    this.scrollTo({ x: x, y: y, animated: false });
  },

  _handleScroll: function _handleScroll(e) {
    if (__DEV__) {
      if (this.props.onScroll && this.props.scrollEventThrottle == null && Platform.OS === 'ios') {
        console.log('You specified `onScroll` on a <ScrollView> but not ' + '`scrollEventThrottle`. You will only receive one event. ' + 'Using `16` you get all the events but be aware that it may ' + 'cause frame drops, use a bigger number if you don\'t need as ' + 'much precision.');
      }
    }
    if (Platform.OS === 'android') {
      if (this.props.keyboardDismissMode === 'on-drag') {
        dismissKeyboard();
      }
    }
    this.scrollResponderHandleScroll(e);
  },

  _handleContentOnLayout: function _handleContentOnLayout(e) {
    var _e$nativeEvent$layout = e.nativeEvent.layout,
        width = _e$nativeEvent$layout.width,
        height = _e$nativeEvent$layout.height;

    this.props.onContentSizeChange && this.props.onContentSizeChange(width, height);
  },

  _scrollViewRef: null,
  _setScrollViewRef: function _setScrollViewRef(ref) {
    this._scrollViewRef = ref;
  },

  _innerViewRef: null,
  _setInnerViewRef: function _setInnerViewRef(ref) {
    this._innerViewRef = ref;
  },

  render: function render() {
    var contentContainerStyle = [this.props.horizontal && styles.contentContainerHorizontal, this.props.contentContainerStyle];
    var style = void 0,
        childLayoutProps = void 0;
    if (__DEV__ && this.props.style) {
      style = flattenStyle(this.props.style);
      childLayoutProps = ['alignItems', 'justifyContent'].filter(function (prop) {
        return style && style[prop] !== undefined;
      });
      invariant(childLayoutProps.length === 0, 'ScrollView child layout (' + JSON.stringify(childLayoutProps) + ') must be applied through the contentContainerStyle prop.');
    }

    var contentSizeChangeProps = {};
    if (this.props.onContentSizeChange) {
      contentSizeChangeProps = {
        onLayout: this._handleContentOnLayout
      };
    }

    var contentContainer = React.createElement(
      View,
      babelHelpers.extends({}, contentSizeChangeProps, {
        ref: this._setInnerViewRef,
        style: contentContainerStyle,
        removeClippedSubviews: this.props.removeClippedSubviews,
        collapsable: false }),
      this.props.children
    );

    var alwaysBounceHorizontal = this.props.alwaysBounceHorizontal !== undefined ? this.props.alwaysBounceHorizontal : this.props.horizontal;

    var alwaysBounceVertical = this.props.alwaysBounceVertical !== undefined ? this.props.alwaysBounceVertical : !this.props.horizontal;

    var baseStyle = this.props.horizontal ? styles.baseHorizontal : styles.baseVertical;
    var props = babelHelpers.extends({}, this.props, {
      alwaysBounceHorizontal: alwaysBounceHorizontal,
      alwaysBounceVertical: alwaysBounceVertical,
      style: [baseStyle, this.props.style],

      onContentSizeChange: null,
      onTouchStart: this.scrollResponderHandleTouchStart,
      onTouchMove: this.scrollResponderHandleTouchMove,
      onTouchEnd: this.scrollResponderHandleTouchEnd,
      onScrollBeginDrag: this.scrollResponderHandleScrollBeginDrag,
      onScrollEndDrag: this.scrollResponderHandleScrollEndDrag,
      onMomentumScrollBegin: this.scrollResponderHandleMomentumScrollBegin,
      onMomentumScrollEnd: this.scrollResponderHandleMomentumScrollEnd,
      onStartShouldSetResponder: this.scrollResponderHandleStartShouldSetResponder,
      onStartShouldSetResponderCapture: this.scrollResponderHandleStartShouldSetResponderCapture,
      onScrollShouldSetResponder: this.scrollResponderHandleScrollShouldSetResponder,
      onScroll: this._handleScroll,
      onResponderGrant: this.scrollResponderHandleResponderGrant,
      onResponderTerminationRequest: this.scrollResponderHandleTerminationRequest,
      onResponderTerminate: this.scrollResponderHandleTerminate,
      onResponderRelease: this.scrollResponderHandleResponderRelease,
      onResponderReject: this.scrollResponderHandleResponderReject,
      sendMomentumEvents: this.props.onMomentumScrollBegin || this.props.onMomentumScrollEnd ? true : false
    });

    var decelerationRate = this.props.decelerationRate;

    if (decelerationRate) {
      props.decelerationRate = processDecelerationRate(decelerationRate);
    }

    var ScrollViewClass = void 0;
    if (Platform.OS === 'ios') {
      ScrollViewClass = RCTScrollView;
    } else if (Platform.OS === 'android') {
      if (this.props.horizontal) {
        ScrollViewClass = AndroidHorizontalScrollView;
      } else {
        ScrollViewClass = AndroidScrollView;
      }
    }
    invariant(ScrollViewClass !== undefined, 'ScrollViewClass must not be undefined');

    var refreshControl = this.props.refreshControl;
    if (refreshControl) {
      if (Platform.OS === 'ios') {
        return React.createElement(
          ScrollViewClass,
          babelHelpers.extends({}, props, { ref: this._setScrollViewRef }),
          refreshControl,
          contentContainer
        );
      } else if (Platform.OS === 'android') {

        return React.cloneElement(refreshControl, { style: props.style }, React.createElement(
          ScrollViewClass,
          babelHelpers.extends({}, props, { style: baseStyle, ref: this._setScrollViewRef }),
          contentContainer
        ));
      }
    }
    return React.createElement(
      ScrollViewClass,
      babelHelpers.extends({}, props, { ref: this._setScrollViewRef }),
      contentContainer
    );
  }
});

var styles = StyleSheet.create({
  baseVertical: {
    flexGrow: 1,
    flexShrink: 1,
    flexDirection: 'column',
    overflow: 'scroll'
  },
  baseHorizontal: {
    flexGrow: 1,
    flexShrink: 1,
    flexDirection: 'row',
    overflow: 'scroll'
  },
  contentContainerHorizontal: {
    flexDirection: 'row'
  }
});

var nativeOnlyProps = void 0,
    AndroidScrollView = void 0,
    AndroidHorizontalScrollView = void 0,
    RCTScrollView = void 0;
if (Platform.OS === 'android') {
  nativeOnlyProps = {
    nativeOnly: {
      sendMomentumEvents: true
    }
  };
  AndroidScrollView = requireNativeComponent('RCTScrollView', ScrollView, nativeOnlyProps);
  AndroidHorizontalScrollView = requireNativeComponent('AndroidHorizontalScrollView', ScrollView, nativeOnlyProps);
} else if (Platform.OS === 'ios') {
  nativeOnlyProps = {
    nativeOnly: {
      onMomentumScrollBegin: true,
      onMomentumScrollEnd: true,
      onScrollBeginDrag: true,
      onScrollEndDrag: true
    }
  };
  RCTScrollView = requireNativeComponent('RCTScrollView', ScrollView, nativeOnlyProps);
}

module.exports = ScrollView;
}, 265, null, "ScrollView");
__d(/* PointPropType */function(global, require, module, exports) {
'use strict';

var PropTypes = require(76     ).PropTypes; // 76 = React

var createStrictShapeTypeChecker = require(121                           ); // 121 = createStrictShapeTypeChecker

var PointPropType = createStrictShapeTypeChecker({
  x: PropTypes.number,
  y: PropTypes.number
});

module.exports = PointPropType;
}, 266, null, "PointPropType");
__d(/* ScrollResponder */function(global, require, module, exports) {
'use strict';

var Dimensions = require(101         ); // 101 = Dimensions
var Platform = require(26        ); // 26 = Platform
var Keyboard = require(59        ); // 59 = Keyboard
var ReactNative = require(191          ); // 191 = ReactNative
var Subscribable = require(268           ); // 268 = Subscribable
var TextInputState = require(25              ); // 25 = TextInputState
var UIManager = require(73         ); // 73 = UIManager
var warning = require(13                ); // 13 = fbjs/lib/warning

var _require = require(132                       ), // 132 = ReactNativeComponentTree
    getInstanceFromNode = _require.getInstanceFromNode;

var _require2 = require(27             ), // 27 = NativeModules
    ScrollViewManager = _require2.ScrollViewManager;

var invariant = require(24                  ); // 24 = fbjs/lib/invariant

var IS_ANIMATING_TOUCH_START_THRESHOLD_MS = 16;

function isTagInstanceOfTextInput(tag) {
  var instance = getInstanceFromNode(tag);
  return instance && instance.viewConfig && (instance.viewConfig.uiViewClassName === 'AndroidTextInput' || instance.viewConfig.uiViewClassName === 'RCTTextView' || instance.viewConfig.uiViewClassName === 'RCTTextField');
}

var ScrollResponderMixin = {
  mixins: [Subscribable.Mixin],
  scrollResponderMixinGetInitialState: function scrollResponderMixinGetInitialState() {
    return {
      isTouching: false,
      lastMomentumScrollBeginTime: 0,
      lastMomentumScrollEndTime: 0,

      observedScrollSinceBecomingResponder: false,
      becameResponderWhileAnimating: false
    };
  },

  scrollResponderHandleScrollShouldSetResponder: function scrollResponderHandleScrollShouldSetResponder() {
    return this.state.isTouching;
  },

  scrollResponderHandleStartShouldSetResponder: function scrollResponderHandleStartShouldSetResponder(e) {
    var currentlyFocusedTextInput = TextInputState.currentlyFocusedField();

    if (this.props.keyboardShouldPersistTaps === 'handled' && currentlyFocusedTextInput != null && e.target !== currentlyFocusedTextInput) {
      return true;
    }
    return false;
  },

  scrollResponderHandleStartShouldSetResponderCapture: function scrollResponderHandleStartShouldSetResponderCapture(e) {
    var currentlyFocusedTextInput = TextInputState.currentlyFocusedField();
    var keyboardShouldPersistTaps = this.props.keyboardShouldPersistTaps;

    var keyboardNeverPersistTaps = !keyboardShouldPersistTaps || keyboardShouldPersistTaps === 'never';
    if (keyboardNeverPersistTaps && currentlyFocusedTextInput != null && !isTagInstanceOfTextInput(e.target)) {
      return true;
    }
    return this.scrollResponderIsAnimating();
  },

  scrollResponderHandleResponderReject: function scrollResponderHandleResponderReject() {},

  scrollResponderHandleTerminationRequest: function scrollResponderHandleTerminationRequest() {
    return !this.state.observedScrollSinceBecomingResponder;
  },

  scrollResponderHandleTouchEnd: function scrollResponderHandleTouchEnd(e) {
    var nativeEvent = e.nativeEvent;
    this.state.isTouching = nativeEvent.touches.length !== 0;
    this.props.onTouchEnd && this.props.onTouchEnd(e);
  },

  scrollResponderHandleResponderRelease: function scrollResponderHandleResponderRelease(e) {
    this.props.onResponderRelease && this.props.onResponderRelease(e);

    var currentlyFocusedTextInput = TextInputState.currentlyFocusedField();
    if (this.props.keyboardShouldPersistTaps !== true && this.props.keyboardShouldPersistTaps !== 'always' && currentlyFocusedTextInput != null && e.target !== currentlyFocusedTextInput && !this.state.observedScrollSinceBecomingResponder && !this.state.becameResponderWhileAnimating) {
      this.props.onScrollResponderKeyboardDismissed && this.props.onScrollResponderKeyboardDismissed(e);
      TextInputState.blurTextInput(currentlyFocusedTextInput);
    }
  },

  scrollResponderHandleScroll: function scrollResponderHandleScroll(e) {
    this.state.observedScrollSinceBecomingResponder = true;
    this.props.onScroll && this.props.onScroll(e);
  },

  scrollResponderHandleResponderGrant: function scrollResponderHandleResponderGrant(e) {
    this.state.observedScrollSinceBecomingResponder = false;
    this.props.onResponderGrant && this.props.onResponderGrant(e);
    this.state.becameResponderWhileAnimating = this.scrollResponderIsAnimating();
  },

  scrollResponderHandleScrollBeginDrag: function scrollResponderHandleScrollBeginDrag(e) {
    this.props.onScrollBeginDrag && this.props.onScrollBeginDrag(e);
  },

  scrollResponderHandleScrollEndDrag: function scrollResponderHandleScrollEndDrag(e) {
    this.props.onScrollEndDrag && this.props.onScrollEndDrag(e);
  },

  scrollResponderHandleMomentumScrollBegin: function scrollResponderHandleMomentumScrollBegin(e) {
    this.state.lastMomentumScrollBeginTime = Date.now();
    this.props.onMomentumScrollBegin && this.props.onMomentumScrollBegin(e);
  },

  scrollResponderHandleMomentumScrollEnd: function scrollResponderHandleMomentumScrollEnd(e) {
    this.state.lastMomentumScrollEndTime = Date.now();
    this.props.onMomentumScrollEnd && this.props.onMomentumScrollEnd(e);
  },

  scrollResponderHandleTouchStart: function scrollResponderHandleTouchStart(e) {
    this.state.isTouching = true;
    this.props.onTouchStart && this.props.onTouchStart(e);
  },

  scrollResponderHandleTouchMove: function scrollResponderHandleTouchMove(e) {
    this.props.onTouchMove && this.props.onTouchMove(e);
  },

  scrollResponderIsAnimating: function scrollResponderIsAnimating() {
    var now = Date.now();
    var timeSinceLastMomentumScrollEnd = now - this.state.lastMomentumScrollEndTime;
    var isAnimating = timeSinceLastMomentumScrollEnd < IS_ANIMATING_TOUCH_START_THRESHOLD_MS || this.state.lastMomentumScrollEndTime < this.state.lastMomentumScrollBeginTime;
    return isAnimating;
  },

  scrollResponderGetScrollableNode: function scrollResponderGetScrollableNode() {
    return this.getScrollableNode ? this.getScrollableNode() : ReactNative.findNodeHandle(this);
  },

  scrollResponderScrollTo: function scrollResponderScrollTo(x, y, animated) {
    if (typeof x === 'number') {
      console.warn('`scrollResponderScrollTo(x, y, animated)` is deprecated. Use `scrollResponderScrollTo({x: 5, y: 5, animated: true})` instead.');
    } else {
      var _ref = x || {};

      x = _ref.x;
      y = _ref.y;
      animated = _ref.animated;
    }
    UIManager.dispatchViewManagerCommand(this.scrollResponderGetScrollableNode(), UIManager.RCTScrollView.Commands.scrollTo, [x || 0, y || 0, animated !== false]);
  },

  scrollResponderScrollToEnd: function scrollResponderScrollToEnd(options) {
    var animated = (options && options.animated) !== false;
    UIManager.dispatchViewManagerCommand(this.scrollResponderGetScrollableNode(), UIManager.RCTScrollView.Commands.scrollToEnd, [animated]);
  },

  scrollResponderScrollWithoutAnimationTo: function scrollResponderScrollWithoutAnimationTo(offsetX, offsetY) {
    console.warn('`scrollResponderScrollWithoutAnimationTo` is deprecated. Use `scrollResponderScrollTo` instead');
    this.scrollResponderScrollTo({ x: offsetX, y: offsetY, animated: false });
  },

  scrollResponderZoomTo: function scrollResponderZoomTo(rect, animated) {
    invariant(ScrollViewManager && ScrollViewManager.zoomToRect, 'zoomToRect is not implemented');
    if ('animated' in rect) {
      var animated = rect.animated,
          rect = babelHelpers.objectWithoutProperties(rect, ['animated']);
    } else if (typeof animated !== 'undefined') {
      console.warn('`scrollResponderZoomTo` `animated` argument is deprecated. Use `options.animated` instead');
    }
    ScrollViewManager.zoomToRect(this.scrollResponderGetScrollableNode(), rect, animated !== false);
  },

  scrollResponderScrollNativeHandleToKeyboard: function scrollResponderScrollNativeHandleToKeyboard(nodeHandle, additionalOffset, preventNegativeScrollOffset) {
    this.additionalScrollOffset = additionalOffset || 0;
    this.preventNegativeScrollOffset = !!preventNegativeScrollOffset;
    UIManager.measureLayout(nodeHandle, ReactNative.findNodeHandle(this.getInnerViewNode()), this.scrollResponderTextInputFocusError, this.scrollResponderInputMeasureAndScrollToKeyboard);
  },

  scrollResponderInputMeasureAndScrollToKeyboard: function scrollResponderInputMeasureAndScrollToKeyboard(left, top, width, height) {
    var keyboardScreenY = Dimensions.get('window').height;
    if (this.keyboardWillOpenTo) {
      keyboardScreenY = this.keyboardWillOpenTo.endCoordinates.screenY;
    }
    var scrollOffsetY = top - keyboardScreenY + height + this.additionalScrollOffset;

    if (this.preventNegativeScrollOffset) {
      scrollOffsetY = Math.max(0, scrollOffsetY);
    }
    this.scrollResponderScrollTo({ x: 0, y: scrollOffsetY, animated: true });

    this.additionalOffset = 0;
    this.preventNegativeScrollOffset = false;
  },

  scrollResponderTextInputFocusError: function scrollResponderTextInputFocusError(e) {
    console.error('Error measuring text field: ', e);
  },

  componentWillMount: function componentWillMount() {
    var keyboardShouldPersistTaps = this.props.keyboardShouldPersistTaps;

    warning(typeof keyboardShouldPersistTaps !== 'boolean', '\'keyboardShouldPersistTaps={' + keyboardShouldPersistTaps + '}\' is deprecated. ' + ('Use \'keyboardShouldPersistTaps="' + (keyboardShouldPersistTaps ? "always" : "never") + '"\' instead'));

    this.keyboardWillOpenTo = null;
    this.additionalScrollOffset = 0;
    this.addListenerOn(Keyboard, 'keyboardWillShow', this.scrollResponderKeyboardWillShow);
    this.addListenerOn(Keyboard, 'keyboardWillHide', this.scrollResponderKeyboardWillHide);
    this.addListenerOn(Keyboard, 'keyboardDidShow', this.scrollResponderKeyboardDidShow);
    this.addListenerOn(Keyboard, 'keyboardDidHide', this.scrollResponderKeyboardDidHide);
  },

  scrollResponderKeyboardWillShow: function scrollResponderKeyboardWillShow(e) {
    this.keyboardWillOpenTo = e;
    this.props.onKeyboardWillShow && this.props.onKeyboardWillShow(e);
  },

  scrollResponderKeyboardWillHide: function scrollResponderKeyboardWillHide(e) {
    this.keyboardWillOpenTo = null;
    this.props.onKeyboardWillHide && this.props.onKeyboardWillHide(e);
  },

  scrollResponderKeyboardDidShow: function scrollResponderKeyboardDidShow(e) {
    if (e) {
      this.keyboardWillOpenTo = e;
    }
    this.props.onKeyboardDidShow && this.props.onKeyboardDidShow(e);
  },

  scrollResponderKeyboardDidHide: function scrollResponderKeyboardDidHide(e) {
    this.keyboardWillOpenTo = null;
    this.props.onKeyboardDidHide && this.props.onKeyboardDidHide(e);
  }

};

var ScrollResponder = {
  Mixin: ScrollResponderMixin
};

module.exports = ScrollResponder;
}, 267, null, "ScrollResponder");
__d(/* Subscribable */function(global, require, module, exports) {
'use strict';

var Subscribable = {};

Subscribable.Mixin = {

  componentWillMount: function componentWillMount() {
    this._subscribableSubscriptions = [];
  },

  componentWillUnmount: function componentWillUnmount() {
    this._subscribableSubscriptions.forEach(function (subscription) {
      return subscription.remove();
    });
    this._subscribableSubscriptions = null;
  },

  addListenerOn: function addListenerOn(eventEmitter, eventType, listener, context) {
    this._subscribableSubscriptions.push(eventEmitter.addListener(eventType, listener, context));
  }
};

module.exports = Subscribable;
}, 268, null, "Subscribable");
__d(/* processDecelerationRate */function(global, require, module, exports) {
'use strict';

function processDecelerationRate(decelerationRate) {
  if (decelerationRate === 'normal') {
    decelerationRate = 0.998;
  } else if (decelerationRate === 'fast') {
    decelerationRate = 0.99;
  }
  return decelerationRate;
}

module.exports = processDecelerationRate;
}, 269, null, "processDecelerationRate");
__d(/* DatePickerIOS */function(global, require, module, exports) {

'use strict';

var React = require(76     ); // 76 = React
var StyleSheet = require(99          ); // 99 = StyleSheet
var Text = require(183   ); // 183 = Text
var View = require(119   ); // 119 = View

var DummyDatePickerIOS = function (_React$Component) {
  babelHelpers.inherits(DummyDatePickerIOS, _React$Component);

  function DummyDatePickerIOS() {
    babelHelpers.classCallCheck(this, DummyDatePickerIOS);
    return babelHelpers.possibleConstructorReturn(this, (DummyDatePickerIOS.__proto__ || Object.getPrototypeOf(DummyDatePickerIOS)).apply(this, arguments));
  }

  babelHelpers.createClass(DummyDatePickerIOS, [{
    key: 'render',
    value: function render() {
      return React.createElement(
        View,
        { style: [styles.dummyDatePickerIOS, this.props.style] },
        React.createElement(
          Text,
          { style: styles.datePickerText },
          'DatePickerIOS is not supported on this platform!'
        )
      );
    }
  }]);
  return DummyDatePickerIOS;
}(React.Component);

var styles = StyleSheet.create({
  dummyDatePickerIOS: {
    height: 100,
    width: 300,
    backgroundColor: '#ffbcbc',
    borderWidth: 1,
    borderColor: 'red',
    alignItems: 'center',
    justifyContent: 'center',
    margin: 10
  },
  datePickerText: {
    color: '#333333',
    margin: 20
  }
});

module.exports = DummyDatePickerIOS;
}, 270, null, "DatePickerIOS");
__d(/* DrawerLayoutAndroid */function(global, require, module, exports) {
'use strict';

var ColorPropType = require(16             ); // 16 = ColorPropType
var NativeMethodsMixin = require(19                  ); // 19 = NativeMethodsMixin
var Platform = require(26        ); // 26 = Platform
var React = require(76     ); // 76 = React
var ReactNative = require(191          ); // 191 = ReactNative
var StatusBar = require(272        ); // 272 = StatusBar
var StyleSheet = require(99          ); // 99 = StyleSheet
var UIManager = require(73         ); // 73 = UIManager
var View = require(119   ); // 119 = View

var DrawerConsts = UIManager.AndroidDrawerLayout.Constants;

var dismissKeyboard = require(60               ); // 60 = dismissKeyboard
var requireNativeComponent = require(128                     ); // 128 = requireNativeComponent

var ReactPropTypes = React.PropTypes;

var RK_DRAWER_REF = 'drawerlayout';
var INNERVIEW_REF = 'innerView';

var DRAWER_STATES = ['Idle', 'Dragging', 'Settling'];

var DrawerLayoutAndroid = React.createClass({
  displayName: 'DrawerLayoutAndroid',

  statics: {
    positions: DrawerConsts.DrawerPosition
  },

  propTypes: babelHelpers.extends({}, View.propTypes, {
    keyboardDismissMode: ReactPropTypes.oneOf(['none', 'on-drag']),

    drawerBackgroundColor: ColorPropType,

    drawerPosition: ReactPropTypes.oneOf([DrawerConsts.DrawerPosition.Left, DrawerConsts.DrawerPosition.Right]),

    drawerWidth: ReactPropTypes.number,

    drawerLockMode: ReactPropTypes.oneOf(['unlocked', 'locked-closed', 'locked-open']),

    onDrawerSlide: ReactPropTypes.func,

    onDrawerStateChanged: ReactPropTypes.func,

    onDrawerOpen: ReactPropTypes.func,

    onDrawerClose: ReactPropTypes.func,

    renderNavigationView: ReactPropTypes.func.isRequired,

    statusBarBackgroundColor: ColorPropType
  }),

  mixins: [NativeMethodsMixin],

  getDefaultProps: function getDefaultProps() {
    return {
      drawerBackgroundColor: 'white'
    };
  },

  getInitialState: function getInitialState() {
    return { statusBarBackgroundColor: undefined };
  },

  getInnerViewNode: function getInnerViewNode() {
    return this.refs[INNERVIEW_REF].getInnerViewNode();
  },

  componentDidMount: function componentDidMount() {
    this._updateStatusBarBackground();
  },

  componentDidReceiveProps: function componentDidReceiveProps() {
    this._updateStatusBarBackground();
  },

  render: function render() {
    var drawStatusBar = Platform.Version >= 21 && this.props.statusBarBackgroundColor;
    var drawerViewWrapper = React.createElement(
      View,
      {
        style: [styles.drawerSubview, { width: this.props.drawerWidth, backgroundColor: this.props.drawerBackgroundColor }],
        collapsable: false },
      this.props.renderNavigationView(),
      drawStatusBar && React.createElement(View, { style: styles.drawerStatusBar })
    );
    var childrenWrapper = React.createElement(
      View,
      { ref: INNERVIEW_REF, style: styles.mainSubview, collapsable: false },
      drawStatusBar && React.createElement(StatusBar, {
        translucent: true,
        backgroundColor: this.state.statusBarBackgroundColor
      }),
      drawStatusBar && React.createElement(View, { style: [styles.statusBar, { backgroundColor: this.props.statusBarBackgroundColor }] }),
      this.props.children
    );
    return React.createElement(
      AndroidDrawerLayout,
      babelHelpers.extends({}, this.props, {
        ref: RK_DRAWER_REF,
        drawerWidth: this.props.drawerWidth,
        drawerPosition: this.props.drawerPosition,
        drawerLockMode: this.props.drawerLockMode,
        style: [styles.base, this.props.style],
        onDrawerSlide: this._onDrawerSlide,
        onDrawerOpen: this._onDrawerOpen,
        onDrawerClose: this._onDrawerClose,
        onDrawerStateChanged: this._onDrawerStateChanged }),
      childrenWrapper,
      drawerViewWrapper
    );
  },

  _onDrawerSlide: function _onDrawerSlide(event) {
    if (this.props.onDrawerSlide) {
      this.props.onDrawerSlide(event);
    }
    if (this.props.keyboardDismissMode === 'on-drag') {
      dismissKeyboard();
    }
  },

  _onDrawerOpen: function _onDrawerOpen() {
    if (this.props.onDrawerOpen) {
      this.props.onDrawerOpen();
    }
  },

  _onDrawerClose: function _onDrawerClose() {
    if (this.props.onDrawerClose) {
      this.props.onDrawerClose();
    }
  },

  _onDrawerStateChanged: function _onDrawerStateChanged(event) {
    if (this.props.onDrawerStateChanged) {
      this.props.onDrawerStateChanged(DRAWER_STATES[event.nativeEvent.drawerState]);
    }
  },

  openDrawer: function openDrawer() {
    UIManager.dispatchViewManagerCommand(this._getDrawerLayoutHandle(), UIManager.AndroidDrawerLayout.Commands.openDrawer, null);
  },

  closeDrawer: function closeDrawer() {
    UIManager.dispatchViewManagerCommand(this._getDrawerLayoutHandle(), UIManager.AndroidDrawerLayout.Commands.closeDrawer, null);
  },

  _getDrawerLayoutHandle: function _getDrawerLayoutHandle() {
    return ReactNative.findNodeHandle(this.refs[RK_DRAWER_REF]);
  },

  _updateStatusBarBackground: function _updateStatusBarBackground() {
    var _this = this;

    if (Platform.Version >= 21 && this.props.statusBarBackgroundColor) {
      if (this.state.statusBarBackgroundColor !== 'transparent') {
        requestAnimationFrame(function () {
          _this.setState({ statusBarBackgroundColor: 'transparent' });
        });
      }
    } else {
      this.setState({ statusBarBackgroundColor: undefined });
    }
  }
});

var styles = StyleSheet.create({
  base: {
    flex: 1,
    elevation: 16
  },
  mainSubview: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0
  },
  drawerSubview: {
    position: 'absolute',
    top: 0,
    bottom: 0
  },
  statusBar: {
    height: StatusBar.currentHeight
  },
  drawerStatusBar: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    height: StatusBar.currentHeight,
    backgroundColor: 'rgba(0, 0, 0, 0.251)'
  }
});

var AndroidDrawerLayout = requireNativeComponent('AndroidDrawerLayout', DrawerLayoutAndroid);

module.exports = DrawerLayoutAndroid;
}, 271, null, "DrawerLayoutAndroid");
__d(/* StatusBar */function(global, require, module, exports) {
'use strict';

var React = require(76     ); // 76 = React
var ColorPropType = require(16             ); // 16 = ColorPropType
var Platform = require(26        ); // 26 = Platform

var processColor = require(114           ); // 114 = processColor

var StatusBarManager = require(27             ).StatusBarManager; // 27 = NativeModules

function mergePropsStack(propsStack, defaultValues) {
  return propsStack.reduce(function (prev, cur) {
    for (var prop in cur) {
      if (cur[prop] != null) {
        prev[prop] = cur[prop];
      }
    }
    return prev;
  }, babelHelpers.extends({}, defaultValues));
}

function createStackEntry(props) {
  return {
    backgroundColor: props.backgroundColor != null ? {
      value: props.backgroundColor,
      animated: props.animated
    } : null,
    barStyle: props.barStyle != null ? {
      value: props.barStyle,
      animated: props.animated
    } : null,
    translucent: props.translucent,
    hidden: props.hidden != null ? {
      value: props.hidden,
      animated: props.animated,
      transition: props.showHideTransition
    } : null,
    networkActivityIndicatorVisible: props.networkActivityIndicatorVisible
  };
}

var StatusBar = function (_React$Component) {
  babelHelpers.inherits(StatusBar, _React$Component);

  function StatusBar() {
    var _ref;

    var _temp, _this, _ret;

    babelHelpers.classCallCheck(this, StatusBar);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = StatusBar.__proto__ || Object.getPrototypeOf(StatusBar)).call.apply(_ref, [this].concat(args))), _this), _this._stackEntry = null, _this._updatePropsStack = function () {
      clearImmediate(StatusBar._updateImmediate);
      StatusBar._updateImmediate = setImmediate(function () {
        var oldProps = StatusBar._currentValues;
        var mergedProps = mergePropsStack(StatusBar._propsStack, StatusBar._defaultProps);

        if (Platform.OS === 'ios') {
          if (!oldProps || oldProps.barStyle.value !== mergedProps.barStyle.value) {
            StatusBarManager.setStyle(mergedProps.barStyle.value, mergedProps.barStyle.animated);
          }
          if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {
            StatusBarManager.setHidden(mergedProps.hidden.value, mergedProps.hidden.animated ? mergedProps.hidden.transition : 'none');
          }

          if (!oldProps || oldProps.networkActivityIndicatorVisible !== mergedProps.networkActivityIndicatorVisible) {
            StatusBarManager.setNetworkActivityIndicatorVisible(mergedProps.networkActivityIndicatorVisible);
          }
        } else if (Platform.OS === 'android') {
          if (!oldProps || oldProps.barStyle.value !== mergedProps.barStyle.value) {
            StatusBarManager.setStyle(mergedProps.barStyle.value);
          }
          if (!oldProps || oldProps.backgroundColor.value !== mergedProps.backgroundColor.value) {
            StatusBarManager.setColor(processColor(mergedProps.backgroundColor.value), mergedProps.backgroundColor.animated);
          }
          if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {
            StatusBarManager.setHidden(mergedProps.hidden.value);
          }
          if (!oldProps || oldProps.translucent !== mergedProps.translucent) {
            StatusBarManager.setTranslucent(mergedProps.translucent);
          }
        }

        StatusBar._currentValues = mergedProps;
      });
    }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
  }

  babelHelpers.createClass(StatusBar, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this._stackEntry = createStackEntry(this.props);
      StatusBar._propsStack.push(this._stackEntry);
      this._updatePropsStack();
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      var index = StatusBar._propsStack.indexOf(this._stackEntry);
      StatusBar._propsStack.splice(index, 1);

      this._updatePropsStack();
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      var index = StatusBar._propsStack.indexOf(this._stackEntry);
      this._stackEntry = createStackEntry(this.props);
      StatusBar._propsStack[index] = this._stackEntry;

      this._updatePropsStack();
    }
  }, {
    key: 'render',
    value: function render() {
      return null;
    }
  }], [{
    key: 'setHidden',
    value: function setHidden(hidden, animation) {
      animation = animation || 'none';
      StatusBar._defaultProps.hidden.value = hidden;
      if (Platform.OS === 'ios') {
        StatusBarManager.setHidden(hidden, animation);
      } else if (Platform.OS === 'android') {
        StatusBarManager.setHidden(hidden);
      }
    }
  }, {
    key: 'setBarStyle',
    value: function setBarStyle(style, animated) {
      animated = animated || false;
      StatusBar._defaultProps.barStyle.value = style;
      if (Platform.OS === 'ios') {
        StatusBarManager.setStyle(style, animated);
      } else if (Platform.OS === 'android') {
        StatusBarManager.setStyle(style);
      }
    }
  }, {
    key: 'setNetworkActivityIndicatorVisible',
    value: function setNetworkActivityIndicatorVisible(visible) {
      if (Platform.OS !== 'ios') {
        console.warn('`setNetworkActivityIndicatorVisible` is only available on iOS');
        return;
      }
      StatusBar._defaultProps.networkActivityIndicatorVisible = visible;
      StatusBarManager.setNetworkActivityIndicatorVisible(visible);
    }
  }, {
    key: 'setBackgroundColor',
    value: function setBackgroundColor(color, animated) {
      if (Platform.OS !== 'android') {
        console.warn('`setBackgroundColor` is only available on Android');
        return;
      }
      animated = animated || false;
      StatusBar._defaultProps.backgroundColor.value = color;
      StatusBarManager.setColor(processColor(color), animated);
    }
  }, {
    key: 'setTranslucent',
    value: function setTranslucent(translucent) {
      if (Platform.OS !== 'android') {
        console.warn('`setTranslucent` is only available on Android');
        return;
      }
      StatusBar._defaultProps.translucent = translucent;
      StatusBarManager.setTranslucent(translucent);
    }
  }]);
  return StatusBar;
}(React.Component);

StatusBar._propsStack = [];
StatusBar._defaultProps = createStackEntry({
  animated: false,
  showHideTransition: 'fade',
  backgroundColor: 'black',
  barStyle: 'default',
  translucent: false,
  hidden: false,
  networkActivityIndicatorVisible: false
});
StatusBar._updateImmediate = null;
StatusBar._currentValues = null;
StatusBar.currentHeight = StatusBarManager.HEIGHT;
StatusBar.propTypes = {
  hidden: React.PropTypes.bool,

  animated: React.PropTypes.bool,

  backgroundColor: ColorPropType,

  translucent: React.PropTypes.bool,

  barStyle: React.PropTypes.oneOf(['default', 'light-content', 'dark-content']),

  networkActivityIndicatorVisible: React.PropTypes.bool,

  showHideTransition: React.PropTypes.oneOf(['fade', 'slide'])
};
StatusBar.defaultProps = {
  animated: false,
  showHideTransition: 'fade'
};


module.exports = StatusBar;
}, 272, null, "StatusBar");
__d(/* ImageEditor */function(global, require, module, exports) {
'use strict';

var RCTImageEditingManager = require(27             ).ImageEditingManager; // 27 = NativeModules

var ImageEditor = function () {
  function ImageEditor() {
    babelHelpers.classCallCheck(this, ImageEditor);
  }

  babelHelpers.createClass(ImageEditor, null, [{
    key: 'cropImage',
    value: function cropImage(uri, cropData, success, failure) {
      RCTImageEditingManager.cropImage(uri, cropData, success, failure);
    }
  }]);
  return ImageEditor;
}();

module.exports = ImageEditor;
}, 273, null, "ImageEditor");
__d(/* ImageStore */function(global, require, module, exports) {
'use strict';

var RCTImageStoreManager = require(27             ).ImageStoreManager; // 27 = NativeModules

var ImageStore = function () {
  function ImageStore() {
    babelHelpers.classCallCheck(this, ImageStore);
  }

  babelHelpers.createClass(ImageStore, null, [{
    key: 'hasImageForTag',
    value: function hasImageForTag(uri, callback) {
      if (RCTImageStoreManager.hasImageForTag) {
        RCTImageStoreManager.hasImageForTag(uri, callback);
      } else {
        console.warn('hasImageForTag() not implemented');
      }
    }
  }, {
    key: 'removeImageForTag',
    value: function removeImageForTag(uri) {
      if (RCTImageStoreManager.removeImageForTag) {
        RCTImageStoreManager.removeImageForTag(uri);
      } else {
        console.warn('removeImageForTag() not implemented');
      }
    }
  }, {
    key: 'addImageFromBase64',
    value: function addImageFromBase64(base64ImageData, success, failure) {
      RCTImageStoreManager.addImageFromBase64(base64ImageData, success, failure);
    }
  }, {
    key: 'getBase64ForTag',
    value: function getBase64ForTag(uri, success, failure) {
      RCTImageStoreManager.getBase64ForTag(uri, success, failure);
    }
  }]);
  return ImageStore;
}();

module.exports = ImageStore;
}, 274, null, "ImageStore");
__d(/* KeyboardAvoidingView */function(global, require, module, exports) {
'use strict';

var Keyboard = require(59        ); // 59 = Keyboard
var LayoutAnimation = require(276              ); // 276 = LayoutAnimation
var Platform = require(26        ); // 26 = Platform
var React = require(76     ); // 76 = React
var TimerMixin = require(248                ); // 248 = react-timer-mixin
var View = require(119   ); // 119 = View

var PropTypes = React.PropTypes;

var viewRef = 'VIEW';

var KeyboardAvoidingView = React.createClass({
  displayName: 'KeyboardAvoidingView',

  mixins: [TimerMixin],

  propTypes: babelHelpers.extends({}, View.propTypes, {
    behavior: PropTypes.oneOf(['height', 'position', 'padding']),

    contentContainerStyle: View.propTypes.style,

    keyboardVerticalOffset: PropTypes.number.isRequired
  }),

  getDefaultProps: function getDefaultProps() {
    return {
      keyboardVerticalOffset: 0
    };
  },
  getInitialState: function getInitialState() {
    return {
      bottom: 0
    };
  },


  subscriptions: [],
  frame: null,

  relativeKeyboardHeight: function relativeKeyboardHeight(keyboardFrame) {
    var frame = this.frame;
    if (!frame || !keyboardFrame) {
      return 0;
    }

    var y1 = Math.max(frame.y, keyboardFrame.screenY - this.props.keyboardVerticalOffset);
    var y2 = Math.min(frame.y + frame.height, keyboardFrame.screenY + keyboardFrame.height - this.props.keyboardVerticalOffset);
    if (frame.y > keyboardFrame.screenY) {
      return frame.y + frame.height - keyboardFrame.screenY - this.props.keyboardVerticalOffset;
    }
    return Math.max(y2 - y1, 0);
  },
  onKeyboardChange: function onKeyboardChange(event) {
    if (!event) {
      this.setState({ bottom: 0 });
      return;
    }

    var duration = event.duration,
        easing = event.easing,
        endCoordinates = event.endCoordinates;

    var height = this.relativeKeyboardHeight(endCoordinates);

    if (duration && easing) {
      LayoutAnimation.configureNext({
        duration: duration,
        update: {
          duration: duration,
          type: LayoutAnimation.Types[easing] || 'keyboard'
        }
      });
    }
    this.setState({ bottom: height });
  },
  onLayout: function onLayout(event) {
    this.frame = event.nativeEvent.layout;
  },
  componentWillUpdate: function componentWillUpdate(nextProps, nextState, nextContext) {
    if (nextState.bottom === this.state.bottom && this.props.behavior === 'height' && nextProps.behavior === 'height') {
      nextState.bottom = 0;
    }
  },
  componentWillMount: function componentWillMount() {
    if (Platform.OS === 'ios') {
      this.subscriptions = [Keyboard.addListener('keyboardWillChangeFrame', this.onKeyboardChange)];
    } else {
      this.subscriptions = [Keyboard.addListener('keyboardDidHide', this.onKeyboardChange), Keyboard.addListener('keyboardDidShow', this.onKeyboardChange)];
    }
  },
  componentWillUnmount: function componentWillUnmount() {
    this.subscriptions.forEach(function (sub) {
      return sub.remove();
    });
  },
  render: function render() {
    var _props = this.props,
        behavior = _props.behavior,
        children = _props.children,
        style = _props.style,
        props = babelHelpers.objectWithoutProperties(_props, ['behavior', 'children', 'style']);


    switch (behavior) {
      case 'height':
        var heightStyle = void 0;
        if (this.frame) {
          heightStyle = { height: this.frame.height - this.state.bottom, flex: 0 };
        }
        return React.createElement(
          View,
          babelHelpers.extends({ ref: viewRef, style: [style, heightStyle], onLayout: this.onLayout }, props),
          children
        );

      case 'position':
        var positionStyle = { bottom: this.state.bottom };
        var contentContainerStyle = this.props.contentContainerStyle;


        return React.createElement(
          View,
          babelHelpers.extends({ ref: viewRef, style: style, onLayout: this.onLayout }, props),
          React.createElement(
            View,
            { style: [contentContainerStyle, positionStyle] },
            children
          )
        );

      case 'padding':
        var paddingStyle = { paddingBottom: this.state.bottom };
        return React.createElement(
          View,
          babelHelpers.extends({ ref: viewRef, style: [style, paddingStyle], onLayout: this.onLayout }, props),
          children
        );

      default:
        return React.createElement(
          View,
          babelHelpers.extends({ ref: viewRef, onLayout: this.onLayout, style: style }, props),
          children
        );
    }
  }
});

module.exports = KeyboardAvoidingView;
}, 275, null, "KeyboardAvoidingView");
__d(/* LayoutAnimation */function(global, require, module, exports) {
'use strict';

var _require = require(76     ), // 76 = React
    PropTypes = _require.PropTypes;

var UIManager = require(73         ); // 73 = UIManager

var createStrictShapeTypeChecker = require(121                           ); // 121 = createStrictShapeTypeChecker
var keyMirror = require(105                 ); // 105 = fbjs/lib/keyMirror

var TypesEnum = {
  spring: true,
  linear: true,
  easeInEaseOut: true,
  easeIn: true,
  easeOut: true,
  keyboard: true
};
var Types = keyMirror(TypesEnum);

var PropertiesEnum = {
  opacity: true,
  scaleXY: true
};
var Properties = keyMirror(PropertiesEnum);

var animChecker = createStrictShapeTypeChecker({
  duration: PropTypes.number,
  delay: PropTypes.number,
  springDamping: PropTypes.number,
  initialVelocity: PropTypes.number,
  type: PropTypes.oneOf(Object.keys(Types)).isRequired,
  property: PropTypes.oneOf(Object.keys(Properties))
});

var configChecker = createStrictShapeTypeChecker({
  duration: PropTypes.number.isRequired,
  create: animChecker,
  update: animChecker,
  delete: animChecker
});

function configureNext(config, onAnimationDidEnd) {
  configChecker({ config: config }, 'config', 'LayoutAnimation.configureNext');
  UIManager.configureNextLayoutAnimation(config, onAnimationDidEnd || function () {}, function () {});
}

function create(duration, type, creationProp) {
  return {
    duration: duration,
    create: {
      type: type,
      property: creationProp
    },
    update: {
      type: type
    },
    delete: {
      type: type,
      property: creationProp
    }
  };
}

var Presets = {
  easeInEaseOut: create(300, Types.easeInEaseOut, Properties.opacity),
  linear: create(500, Types.linear, Properties.opacity),
  spring: {
    duration: 700,
    create: {
      type: Types.linear,
      property: Properties.opacity
    },
    update: {
      type: Types.spring,
      springDamping: 0.4
    },
    delete: {
      type: Types.linear,
      property: Properties.opacity
    }
  }
};

var LayoutAnimation = {
  configureNext: configureNext,

  create: create,
  Types: Types,
  Properties: Properties,
  configChecker: configChecker,
  Presets: Presets,
  easeInEaseOut: configureNext.bind(null, Presets.easeInEaseOut),
  linear: configureNext.bind(null, Presets.linear),
  spring: configureNext.bind(null, Presets.spring)
};

module.exports = LayoutAnimation;
}, 276, null, "LayoutAnimation");
__d(/* ListView */function(global, require, module, exports) {
'use strict';

var ListViewDataSource = require(278                 ); // 278 = ListViewDataSource
var React = require(76     ); // 76 = React
var ReactNative = require(191          ); // 191 = ReactNative
var RCTScrollViewManager = require(27             ).ScrollViewManager; // 27 = NativeModules
var ScrollView = require(265         ); // 265 = ScrollView
var ScrollResponder = require(267              ); // 267 = ScrollResponder
var StaticRenderer = require(280             ); // 280 = StaticRenderer
var TimerMixin = require(248                ); // 248 = react-timer-mixin

var cloneReferencedElement = require(281                             ); // 281 = react-clone-referenced-element
var isEmpty = require(279      ); // 279 = isEmpty
var merge = require(122    ); // 122 = merge

var PropTypes = React.PropTypes;

var DEFAULT_PAGE_SIZE = 1;
var DEFAULT_INITIAL_ROWS = 10;
var DEFAULT_SCROLL_RENDER_AHEAD = 1000;
var DEFAULT_END_REACHED_THRESHOLD = 1000;
var DEFAULT_SCROLL_CALLBACK_THROTTLE = 50;

var ListView = React.createClass({
  displayName: 'ListView',

  _childFrames: [],
  _sentEndForContentLength: null,
  _scrollComponent: null,
  _prevRenderedRowsCount: 0,
  _visibleRows: {},
  scrollProperties: {},

  mixins: [ScrollResponder.Mixin, TimerMixin],

  statics: {
    DataSource: ListViewDataSource
  },

  propTypes: babelHelpers.extends({}, ScrollView.propTypes, {
    dataSource: PropTypes.instanceOf(ListViewDataSource).isRequired,

    renderSeparator: PropTypes.func,

    renderRow: PropTypes.func.isRequired,

    initialListSize: PropTypes.number.isRequired,

    onEndReached: PropTypes.func,

    onEndReachedThreshold: PropTypes.number.isRequired,

    pageSize: PropTypes.number.isRequired,

    renderFooter: PropTypes.func,
    renderHeader: PropTypes.func,

    renderSectionHeader: PropTypes.func,

    renderScrollComponent: React.PropTypes.func.isRequired,

    scrollRenderAheadDistance: React.PropTypes.number.isRequired,

    onChangeVisibleRows: React.PropTypes.func,

    removeClippedSubviews: React.PropTypes.bool,

    stickySectionHeadersEnabled: React.PropTypes.bool,

    stickyHeaderIndices: PropTypes.arrayOf(PropTypes.number).isRequired,

    enableEmptySections: PropTypes.bool
  }),

  getMetrics: function getMetrics() {
    return {
      contentLength: this.scrollProperties.contentLength,
      totalRows: this.props.enableEmptySections ? this.props.dataSource.getRowAndSectionCount() : this.props.dataSource.getRowCount(),
      renderedRows: this.state.curRenderedRowsCount,
      visibleRows: Object.keys(this._visibleRows).length
    };
  },

  getScrollResponder: function getScrollResponder() {
    if (this._scrollComponent && this._scrollComponent.getScrollResponder) {
      return this._scrollComponent.getScrollResponder();
    }
  },

  getScrollableNode: function getScrollableNode() {
    if (this._scrollComponent && this._scrollComponent.getScrollableNode) {
      return this._scrollComponent.getScrollableNode();
    } else {
      return ReactNative.findNodeHandle(this._scrollComponent);
    }
  },

  scrollTo: function scrollTo() {
    if (this._scrollComponent && this._scrollComponent.scrollTo) {
      var _scrollComponent;

      (_scrollComponent = this._scrollComponent).scrollTo.apply(_scrollComponent, arguments);
    }
  },

  scrollToEnd: function scrollToEnd(options) {
    if (this._scrollComponent) {
      if (this._scrollComponent.scrollToEnd) {
        this._scrollComponent.scrollToEnd(options);
      } else {
        console.warn('The scroll component used by the ListView does not support ' + 'scrollToEnd. Check the renderScrollComponent prop of your ListView.');
      }
    }
  },

  setNativeProps: function setNativeProps(props) {
    if (this._scrollComponent) {
      this._scrollComponent.setNativeProps(props);
    }
  },

  getDefaultProps: function getDefaultProps() {
    return {
      initialListSize: DEFAULT_INITIAL_ROWS,
      pageSize: DEFAULT_PAGE_SIZE,
      renderScrollComponent: function renderScrollComponent(props) {
        return React.createElement(ScrollView, props);
      },
      scrollRenderAheadDistance: DEFAULT_SCROLL_RENDER_AHEAD,
      onEndReachedThreshold: DEFAULT_END_REACHED_THRESHOLD,
      stickySectionHeadersEnabled: true,
      stickyHeaderIndices: []
    };
  },

  getInitialState: function getInitialState() {
    return {
      curRenderedRowsCount: this.props.initialListSize,
      highlightedRow: {}
    };
  },

  getInnerViewNode: function getInnerViewNode() {
    return this._scrollComponent.getInnerViewNode();
  },

  componentWillMount: function componentWillMount() {
    this.scrollProperties = {
      visibleLength: null,
      contentLength: null,
      offset: 0
    };
    this._childFrames = [];
    this._visibleRows = {};
    this._prevRenderedRowsCount = 0;
    this._sentEndForContentLength = null;
  },

  componentDidMount: function componentDidMount() {
    var _this = this;

    this.requestAnimationFrame(function () {
      _this._measureAndUpdateScrollProps();
    });
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    var _this2 = this;

    if (this.props.dataSource !== nextProps.dataSource || this.props.initialListSize !== nextProps.initialListSize) {
      this.setState(function (state, props) {
        _this2._prevRenderedRowsCount = 0;
        return {
          curRenderedRowsCount: Math.min(Math.max(state.curRenderedRowsCount, props.initialListSize), props.enableEmptySections ? props.dataSource.getRowAndSectionCount() : props.dataSource.getRowCount())
        };
      }, function () {
        return _this2._renderMoreRowsIfNeeded();
      });
    }
  },

  componentDidUpdate: function componentDidUpdate() {
    var _this3 = this;

    this.requestAnimationFrame(function () {
      _this3._measureAndUpdateScrollProps();
    });
  },

  _onRowHighlighted: function _onRowHighlighted(sectionID, rowID) {
    this.setState({ highlightedRow: { sectionID: sectionID, rowID: rowID } });
  },

  render: function render() {
    var bodyComponents = [];

    var dataSource = this.props.dataSource;
    var allRowIDs = dataSource.rowIdentities;
    var rowCount = 0;
    var stickySectionHeaderIndices = [];

    var header = this.props.renderHeader && this.props.renderHeader();
    var footer = this.props.renderFooter && this.props.renderFooter();
    var totalIndex = header ? 1 : 0;

    for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {
      var sectionID = dataSource.sectionIdentities[sectionIdx];
      var rowIDs = allRowIDs[sectionIdx];
      if (rowIDs.length === 0) {
        if (this.props.enableEmptySections === undefined) {
          var warning = require(13                ); // 13 = fbjs/lib/warning
          warning(false, 'In next release empty section headers will be rendered.' + ' In this release you can use \'enableEmptySections\' flag to render empty section headers.');
          continue;
        } else {
          var invariant = require(24                  ); // 24 = fbjs/lib/invariant
          invariant(this.props.enableEmptySections, 'In next release \'enableEmptySections\' flag will be deprecated, empty section headers will always be rendered.' + ' If empty section headers are not desirable their indices should be excluded from sectionIDs object.' + ' In this release \'enableEmptySections\' may only have value \'true\' to allow empty section headers rendering.');
        }
      }

      if (this.props.renderSectionHeader) {
        var shouldUpdateHeader = rowCount >= this._prevRenderedRowsCount && dataSource.sectionHeaderShouldUpdate(sectionIdx);
        bodyComponents.push(React.createElement(StaticRenderer, {
          key: 's_' + sectionID,
          shouldUpdate: !!shouldUpdateHeader,
          render: this.props.renderSectionHeader.bind(null, dataSource.getSectionHeaderData(sectionIdx), sectionID)
        }));
        if (this.props.stickySectionHeadersEnabled) {
          stickySectionHeaderIndices.push(totalIndex++);
        }
      }

      for (var rowIdx = 0; rowIdx < rowIDs.length; rowIdx++) {
        var rowID = rowIDs[rowIdx];
        var comboID = sectionID + '_' + rowID;
        var shouldUpdateRow = rowCount >= this._prevRenderedRowsCount && dataSource.rowShouldUpdate(sectionIdx, rowIdx);
        var row = React.createElement(StaticRenderer, {
          key: 'r_' + comboID,
          shouldUpdate: !!shouldUpdateRow,
          render: this.props.renderRow.bind(null, dataSource.getRowData(sectionIdx, rowIdx), sectionID, rowID, this._onRowHighlighted)
        });
        bodyComponents.push(row);
        totalIndex++;

        if (this.props.renderSeparator && (rowIdx !== rowIDs.length - 1 || sectionIdx === allRowIDs.length - 1)) {
          var adjacentRowHighlighted = this.state.highlightedRow.sectionID === sectionID && (this.state.highlightedRow.rowID === rowID || this.state.highlightedRow.rowID === rowIDs[rowIdx + 1]);
          var separator = this.props.renderSeparator(sectionID, rowID, adjacentRowHighlighted);
          if (separator) {
            bodyComponents.push(separator);
            totalIndex++;
          }
        }
        if (++rowCount === this.state.curRenderedRowsCount) {
          break;
        }
      }
      if (rowCount >= this.state.curRenderedRowsCount) {
        break;
      }
    }

    var _props = this.props,
        renderScrollComponent = _props.renderScrollComponent,
        props = babelHelpers.objectWithoutProperties(_props, ['renderScrollComponent']);

    if (!props.scrollEventThrottle) {
      props.scrollEventThrottle = DEFAULT_SCROLL_CALLBACK_THROTTLE;
    }
    if (props.removeClippedSubviews === undefined) {
      props.removeClippedSubviews = true;
    }
    babelHelpers.extends(props, {
      onScroll: this._onScroll,
      stickyHeaderIndices: this.props.stickyHeaderIndices.concat(stickySectionHeaderIndices),

      onKeyboardWillShow: undefined,
      onKeyboardWillHide: undefined,
      onKeyboardDidShow: undefined,
      onKeyboardDidHide: undefined
    });

    return cloneReferencedElement(renderScrollComponent(props), {
      ref: this._setScrollComponentRef,
      onContentSizeChange: this._onContentSizeChange,
      onLayout: this._onLayout
    }, header, bodyComponents, footer);
  },

  _measureAndUpdateScrollProps: function _measureAndUpdateScrollProps() {
    var scrollComponent = this.getScrollResponder();
    if (!scrollComponent || !scrollComponent.getInnerViewNode) {
      return;
    }

    RCTScrollViewManager && RCTScrollViewManager.calculateChildFrames && RCTScrollViewManager.calculateChildFrames(ReactNative.findNodeHandle(scrollComponent), this._updateVisibleRows);
  },

  _setScrollComponentRef: function _setScrollComponentRef(scrollComponent) {
    this._scrollComponent = scrollComponent;
  },

  _onContentSizeChange: function _onContentSizeChange(width, height) {
    var contentLength = !this.props.horizontal ? height : width;
    if (contentLength !== this.scrollProperties.contentLength) {
      this.scrollProperties.contentLength = contentLength;
      this._updateVisibleRows();
      this._renderMoreRowsIfNeeded();
    }
    this.props.onContentSizeChange && this.props.onContentSizeChange(width, height);
  },

  _onLayout: function _onLayout(event) {
    var _event$nativeEvent$la = event.nativeEvent.layout,
        width = _event$nativeEvent$la.width,
        height = _event$nativeEvent$la.height;

    var visibleLength = !this.props.horizontal ? height : width;
    if (visibleLength !== this.scrollProperties.visibleLength) {
      this.scrollProperties.visibleLength = visibleLength;
      this._updateVisibleRows();
      this._renderMoreRowsIfNeeded();
    }
    this.props.onLayout && this.props.onLayout(event);
  },

  _maybeCallOnEndReached: function _maybeCallOnEndReached(event) {
    if (this.props.onEndReached && this.scrollProperties.contentLength !== this._sentEndForContentLength && this._getDistanceFromEnd(this.scrollProperties) < this.props.onEndReachedThreshold && this.state.curRenderedRowsCount === (this.props.enableEmptySections ? this.props.dataSource.getRowAndSectionCount() : this.props.dataSource.getRowCount())) {
      this._sentEndForContentLength = this.scrollProperties.contentLength;
      this.props.onEndReached(event);
      return true;
    }
    return false;
  },

  _renderMoreRowsIfNeeded: function _renderMoreRowsIfNeeded() {
    if (this.scrollProperties.contentLength === null || this.scrollProperties.visibleLength === null || this.state.curRenderedRowsCount === (this.props.enableEmptySections ? this.props.dataSource.getRowAndSectionCount() : this.props.dataSource.getRowCount())) {
      this._maybeCallOnEndReached();
      return;
    }

    var distanceFromEnd = this._getDistanceFromEnd(this.scrollProperties);
    if (distanceFromEnd < this.props.scrollRenderAheadDistance) {
      this._pageInNewRows();
    }
  },

  _pageInNewRows: function _pageInNewRows() {
    var _this4 = this;

    this.setState(function (state, props) {
      var rowsToRender = Math.min(state.curRenderedRowsCount + props.pageSize, props.enableEmptySections ? props.dataSource.getRowAndSectionCount() : props.dataSource.getRowCount());
      _this4._prevRenderedRowsCount = state.curRenderedRowsCount;
      return {
        curRenderedRowsCount: rowsToRender
      };
    }, function () {
      _this4._measureAndUpdateScrollProps();
      _this4._prevRenderedRowsCount = _this4.state.curRenderedRowsCount;
    });
  },

  _getDistanceFromEnd: function _getDistanceFromEnd(scrollProperties) {
    return scrollProperties.contentLength - scrollProperties.visibleLength - scrollProperties.offset;
  },

  _updateVisibleRows: function _updateVisibleRows(updatedFrames) {
    var _this5 = this;

    if (!this.props.onChangeVisibleRows) {
      return;
    }
    if (updatedFrames) {
      updatedFrames.forEach(function (newFrame) {
        _this5._childFrames[newFrame.index] = merge(newFrame);
      });
    }
    var isVertical = !this.props.horizontal;
    var dataSource = this.props.dataSource;
    var visibleMin = this.scrollProperties.offset;
    var visibleMax = visibleMin + this.scrollProperties.visibleLength;
    var allRowIDs = dataSource.rowIdentities;

    var header = this.props.renderHeader && this.props.renderHeader();
    var totalIndex = header ? 1 : 0;
    var visibilityChanged = false;
    var changedRows = {};
    for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {
      var rowIDs = allRowIDs[sectionIdx];
      if (rowIDs.length === 0) {
        continue;
      }
      var sectionID = dataSource.sectionIdentities[sectionIdx];
      if (this.props.renderSectionHeader) {
        totalIndex++;
      }
      var visibleSection = this._visibleRows[sectionID];
      if (!visibleSection) {
        visibleSection = {};
      }
      for (var rowIdx = 0; rowIdx < rowIDs.length; rowIdx++) {
        var rowID = rowIDs[rowIdx];
        var frame = this._childFrames[totalIndex];
        totalIndex++;
        if (this.props.renderSeparator && (rowIdx !== rowIDs.length - 1 || sectionIdx === allRowIDs.length - 1)) {
          totalIndex++;
        }
        if (!frame) {
          break;
        }
        var rowVisible = visibleSection[rowID];
        var min = isVertical ? frame.y : frame.x;
        var max = min + (isVertical ? frame.height : frame.width);
        if (!min && !max || min === max) {
          break;
        }
        if (min > visibleMax || max < visibleMin) {
          if (rowVisible) {
            visibilityChanged = true;
            delete visibleSection[rowID];
            if (!changedRows[sectionID]) {
              changedRows[sectionID] = {};
            }
            changedRows[sectionID][rowID] = false;
          }
        } else if (!rowVisible) {
          visibilityChanged = true;
          visibleSection[rowID] = true;
          if (!changedRows[sectionID]) {
            changedRows[sectionID] = {};
          }
          changedRows[sectionID][rowID] = true;
        }
      }
      if (!isEmpty(visibleSection)) {
        this._visibleRows[sectionID] = visibleSection;
      } else if (this._visibleRows[sectionID]) {
        delete this._visibleRows[sectionID];
      }
    }
    visibilityChanged && this.props.onChangeVisibleRows(this._visibleRows, changedRows);
  },

  _onScroll: function _onScroll(e) {
    var isVertical = !this.props.horizontal;
    this.scrollProperties.visibleLength = e.nativeEvent.layoutMeasurement[isVertical ? 'height' : 'width'];
    this.scrollProperties.contentLength = e.nativeEvent.contentSize[isVertical ? 'height' : 'width'];
    this.scrollProperties.offset = e.nativeEvent.contentOffset[isVertical ? 'y' : 'x'];
    this._updateVisibleRows(e.nativeEvent.updatedChildFrames);
    if (!this._maybeCallOnEndReached(e)) {
      this._renderMoreRowsIfNeeded();
    }

    if (this.props.onEndReached && this._getDistanceFromEnd(this.scrollProperties) > this.props.onEndReachedThreshold) {
      this._sentEndForContentLength = null;
    }

    this.props.onScroll && this.props.onScroll(e);
  }
});

module.exports = ListView;
}, 277, null, "ListView");
__d(/* ListViewDataSource */function(global, require, module, exports) {
'use strict';

var invariant = require(24                  ); // 24 = fbjs/lib/invariant
var isEmpty = require(279      ); // 279 = isEmpty
var warning = require(13                ); // 13 = fbjs/lib/warning

function defaultGetRowData(dataBlob, sectionID, rowID) {
  return dataBlob[sectionID][rowID];
}

function defaultGetSectionHeaderData(dataBlob, sectionID) {
  return dataBlob[sectionID];
}

var ListViewDataSource = function () {
  function ListViewDataSource(params) {
    babelHelpers.classCallCheck(this, ListViewDataSource);

    invariant(params && typeof params.rowHasChanged === 'function', 'Must provide a rowHasChanged function.');
    this._rowHasChanged = params.rowHasChanged;
    this._getRowData = params.getRowData || defaultGetRowData;
    this._sectionHeaderHasChanged = params.sectionHeaderHasChanged;
    this._getSectionHeaderData = params.getSectionHeaderData || defaultGetSectionHeaderData;

    this._dataBlob = null;
    this._dirtyRows = [];
    this._dirtySections = [];
    this._cachedRowCount = 0;

    this.rowIdentities = [];
    this.sectionIdentities = [];
  }

  babelHelpers.createClass(ListViewDataSource, [{
    key: 'cloneWithRows',
    value: function cloneWithRows(dataBlob, rowIdentities) {
      var rowIds = rowIdentities ? [rowIdentities] : null;
      if (!this._sectionHeaderHasChanged) {
        this._sectionHeaderHasChanged = function () {
          return false;
        };
      }
      return this.cloneWithRowsAndSections({ s1: dataBlob }, ['s1'], rowIds);
    }
  }, {
    key: 'cloneWithRowsAndSections',
    value: function cloneWithRowsAndSections(dataBlob, sectionIdentities, rowIdentities) {
      invariant(typeof this._sectionHeaderHasChanged === 'function', 'Must provide a sectionHeaderHasChanged function with section data.');
      invariant(!sectionIdentities || !rowIdentities || sectionIdentities.length === rowIdentities.length, 'row and section ids lengths must be the same');

      var newSource = new ListViewDataSource({
        getRowData: this._getRowData,
        getSectionHeaderData: this._getSectionHeaderData,
        rowHasChanged: this._rowHasChanged,
        sectionHeaderHasChanged: this._sectionHeaderHasChanged
      });
      newSource._dataBlob = dataBlob;
      if (sectionIdentities) {
        newSource.sectionIdentities = sectionIdentities;
      } else {
        newSource.sectionIdentities = Object.keys(dataBlob);
      }
      if (rowIdentities) {
        newSource.rowIdentities = rowIdentities;
      } else {
        newSource.rowIdentities = [];
        newSource.sectionIdentities.forEach(function (sectionID) {
          newSource.rowIdentities.push(Object.keys(dataBlob[sectionID]));
        });
      }
      newSource._cachedRowCount = countRows(newSource.rowIdentities);

      newSource._calculateDirtyArrays(this._dataBlob, this.sectionIdentities, this.rowIdentities);

      return newSource;
    }
  }, {
    key: 'getRowCount',
    value: function getRowCount() {
      return this._cachedRowCount;
    }
  }, {
    key: 'getRowAndSectionCount',
    value: function getRowAndSectionCount() {
      return this._cachedRowCount + this.sectionIdentities.length;
    }
  }, {
    key: 'rowShouldUpdate',
    value: function rowShouldUpdate(sectionIndex, rowIndex) {
      var needsUpdate = this._dirtyRows[sectionIndex][rowIndex];
      warning(needsUpdate !== undefined, 'missing dirtyBit for section, row: ' + sectionIndex + ', ' + rowIndex);
      return needsUpdate;
    }
  }, {
    key: 'getRowData',
    value: function getRowData(sectionIndex, rowIndex) {
      var sectionID = this.sectionIdentities[sectionIndex];
      var rowID = this.rowIdentities[sectionIndex][rowIndex];
      warning(sectionID !== undefined && rowID !== undefined, 'rendering invalid section, row: ' + sectionIndex + ', ' + rowIndex);
      return this._getRowData(this._dataBlob, sectionID, rowID);
    }
  }, {
    key: 'getRowIDForFlatIndex',
    value: function getRowIDForFlatIndex(index) {
      var accessIndex = index;
      for (var ii = 0; ii < this.sectionIdentities.length; ii++) {
        if (accessIndex >= this.rowIdentities[ii].length) {
          accessIndex -= this.rowIdentities[ii].length;
        } else {
          return this.rowIdentities[ii][accessIndex];
        }
      }
      return null;
    }
  }, {
    key: 'getSectionIDForFlatIndex',
    value: function getSectionIDForFlatIndex(index) {
      var accessIndex = index;
      for (var ii = 0; ii < this.sectionIdentities.length; ii++) {
        if (accessIndex >= this.rowIdentities[ii].length) {
          accessIndex -= this.rowIdentities[ii].length;
        } else {
          return this.sectionIdentities[ii];
        }
      }
      return null;
    }
  }, {
    key: 'getSectionLengths',
    value: function getSectionLengths() {
      var results = [];
      for (var ii = 0; ii < this.sectionIdentities.length; ii++) {
        results.push(this.rowIdentities[ii].length);
      }
      return results;
    }
  }, {
    key: 'sectionHeaderShouldUpdate',
    value: function sectionHeaderShouldUpdate(sectionIndex) {
      var needsUpdate = this._dirtySections[sectionIndex];
      warning(needsUpdate !== undefined, 'missing dirtyBit for section: ' + sectionIndex);
      return needsUpdate;
    }
  }, {
    key: 'getSectionHeaderData',
    value: function getSectionHeaderData(sectionIndex) {
      if (!this._getSectionHeaderData) {
        return null;
      }
      var sectionID = this.sectionIdentities[sectionIndex];
      warning(sectionID !== undefined, 'renderSection called on invalid section: ' + sectionIndex);
      return this._getSectionHeaderData(this._dataBlob, sectionID);
    }
  }, {
    key: '_calculateDirtyArrays',
    value: function _calculateDirtyArrays(prevDataBlob, prevSectionIDs, prevRowIDs) {
      var prevSectionsHash = keyedDictionaryFromArray(prevSectionIDs);
      var prevRowsHash = {};
      for (var ii = 0; ii < prevRowIDs.length; ii++) {
        var sectionID = prevSectionIDs[ii];
        warning(!prevRowsHash[sectionID], 'SectionID appears more than once: ' + sectionID);
        prevRowsHash[sectionID] = keyedDictionaryFromArray(prevRowIDs[ii]);
      }

      this._dirtySections = [];
      this._dirtyRows = [];

      var dirty;
      for (var sIndex = 0; sIndex < this.sectionIdentities.length; sIndex++) {
        var sectionID = this.sectionIdentities[sIndex];

        dirty = !prevSectionsHash[sectionID];
        var sectionHeaderHasChanged = this._sectionHeaderHasChanged;
        if (!dirty && sectionHeaderHasChanged) {
          dirty = sectionHeaderHasChanged(this._getSectionHeaderData(prevDataBlob, sectionID), this._getSectionHeaderData(this._dataBlob, sectionID));
        }
        this._dirtySections.push(!!dirty);

        this._dirtyRows[sIndex] = [];
        for (var rIndex = 0; rIndex < this.rowIdentities[sIndex].length; rIndex++) {
          var rowID = this.rowIdentities[sIndex][rIndex];

          dirty = !prevSectionsHash[sectionID] || !prevRowsHash[sectionID][rowID] || this._rowHasChanged(this._getRowData(prevDataBlob, sectionID, rowID), this._getRowData(this._dataBlob, sectionID, rowID));
          this._dirtyRows[sIndex].push(!!dirty);
        }
      }
    }
  }]);
  return ListViewDataSource;
}();

function countRows(allRowIDs) {
  var totalRows = 0;
  for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {
    var rowIDs = allRowIDs[sectionIdx];
    totalRows += rowIDs.length;
  }
  return totalRows;
}

function keyedDictionaryFromArray(arr) {
  if (isEmpty(arr)) {
    return {};
  }
  var result = {};
  for (var ii = 0; ii < arr.length; ii++) {
    var key = arr[ii];
    warning(!result[key], 'Value appears more than once in array: ' + key);
    result[key] = true;
  }
  return result;
}

module.exports = ListViewDataSource;
}, 278, null, "ListViewDataSource");
__d(/* isEmpty */function(global, require, module, exports) {
'use strict';

function isEmpty(obj) {
  if (Array.isArray(obj)) {
    return obj.length === 0;
  } else if (typeof obj === 'object') {
    for (var i in obj) {
      return false;
    }
    return true;
  } else {
    return !obj;
  }
}

module.exports = isEmpty;
}, 279, null, "isEmpty");
__d(/* StaticRenderer */function(global, require, module, exports) {
'use strict';

var React = require(76     ); // 76 = React

var StaticRenderer = function (_React$Component) {
  babelHelpers.inherits(StaticRenderer, _React$Component);

  function StaticRenderer() {
    babelHelpers.classCallCheck(this, StaticRenderer);
    return babelHelpers.possibleConstructorReturn(this, (StaticRenderer.__proto__ || Object.getPrototypeOf(StaticRenderer)).apply(this, arguments));
  }

  babelHelpers.createClass(StaticRenderer, [{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps) {
      return nextProps.shouldUpdate;
    }
  }, {
    key: 'render',
    value: function render() {
      return this.props.render();
    }
  }]);
  return StaticRenderer;
}(React.Component);

StaticRenderer.propTypes = {
  shouldUpdate: React.PropTypes.bool.isRequired,
  render: React.PropTypes.func.isRequired
};


module.exports = StaticRenderer;
}, 280, null, "StaticRenderer");
__d(/* react-clone-referenced-element/cloneReferencedElement.js */function(global, require, module, exports) {'use strict';

var React = require(282    ); // 282 = react

function cloneReferencedElement(element, config) {
  var cloneRef = config.ref;
  var originalRef = element.ref;

  for (var _len = arguments.length, children = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    children[_key - 2] = arguments[_key];
  }

  if (originalRef == null || cloneRef == null) {
    return React.cloneElement.apply(React, [element, config].concat(children));
  }

  if (typeof originalRef !== 'function') {
    if (__DEV__) {
      console.warn('Cloning an element with a ref that will be overwritten because it ' + 'is not a function. Use a composable callback-style ref instead. ' + 'Ignoring ref: ' + originalRef);
    }
    return React.cloneElement.apply(React, [element, config].concat(children));
  }

  return React.cloneElement.apply(React, [element, babelHelpers.extends({}, config, {
    ref: function ref(component) {
      cloneRef(component);
      originalRef(component);
    }
  })].concat(children));
}

module.exports = cloneReferencedElement;
}, 281, null, "react-clone-referenced-element/cloneReferencedElement.js");
__d(/* react/react.js */function(global, require, module, exports) {'use strict';

module.exports = require(77           ); // 77 = ./lib/React
}, 282, null, "react/react.js");
__d(/* MapView */function(global, require, module, exports) {
'use strict';

var ColorPropType = require(16             ); // 16 = ColorPropType
var EdgeInsetsPropType = require(120                 ); // 120 = EdgeInsetsPropType
var Image = require(263    ); // 263 = Image
var NativeMethodsMixin = require(19                  ); // 19 = NativeMethodsMixin
var React = require(76     ); // 76 = React
var StyleSheet = require(99          ); // 99 = StyleSheet
var View = require(119   ); // 119 = View

var deprecatedPropType = require(109                 ); // 109 = deprecatedPropType
var processColor = require(114           ); // 114 = processColor
var resolveAssetSource = require(171                 ); // 171 = resolveAssetSource
var requireNativeComponent = require(128                     ); // 128 = requireNativeComponent

var MapView = React.createClass({
  displayName: 'MapView',


  mixins: [NativeMethodsMixin],

  propTypes: babelHelpers.extends({}, View.propTypes, {
    style: View.propTypes.style,

    showsUserLocation: React.PropTypes.bool,

    followUserLocation: React.PropTypes.bool,

    showsPointsOfInterest: React.PropTypes.bool,

    showsCompass: React.PropTypes.bool,

    showsAnnotationCallouts: React.PropTypes.bool,

    zoomEnabled: React.PropTypes.bool,

    rotateEnabled: React.PropTypes.bool,

    pitchEnabled: React.PropTypes.bool,

    scrollEnabled: React.PropTypes.bool,

    mapType: React.PropTypes.oneOf(['standard', 'satellite', 'hybrid']),

    region: React.PropTypes.shape({
      latitude: React.PropTypes.number.isRequired,
      longitude: React.PropTypes.number.isRequired,

      latitudeDelta: React.PropTypes.number,
      longitudeDelta: React.PropTypes.number
    }),

    annotations: React.PropTypes.arrayOf(React.PropTypes.shape({
      latitude: React.PropTypes.number.isRequired,
      longitude: React.PropTypes.number.isRequired,

      animateDrop: React.PropTypes.bool,

      draggable: React.PropTypes.bool,

      onDragStateChange: React.PropTypes.func,

      onFocus: React.PropTypes.func,

      onBlur: React.PropTypes.func,

      title: React.PropTypes.string,
      subtitle: React.PropTypes.string,

      leftCalloutView: React.PropTypes.element,
      rightCalloutView: React.PropTypes.element,
      detailCalloutView: React.PropTypes.element,

      tintColor: ColorPropType,

      image: Image.propTypes.source,

      view: React.PropTypes.element,

      id: React.PropTypes.string,

      hasLeftCallout: deprecatedPropType(React.PropTypes.bool, 'Use `leftCalloutView` instead.'),
      hasRightCallout: deprecatedPropType(React.PropTypes.bool, 'Use `rightCalloutView` instead.'),
      onLeftCalloutPress: deprecatedPropType(React.PropTypes.func, 'Use `leftCalloutView` instead.'),
      onRightCalloutPress: deprecatedPropType(React.PropTypes.func, 'Use `rightCalloutView` instead.')
    })),

    overlays: React.PropTypes.arrayOf(React.PropTypes.shape({
      coordinates: React.PropTypes.arrayOf(React.PropTypes.shape({
        latitude: React.PropTypes.number.isRequired,
        longitude: React.PropTypes.number.isRequired
      })),

      lineWidth: React.PropTypes.number,
      strokeColor: ColorPropType,
      fillColor: ColorPropType,

      id: React.PropTypes.string
    })),

    maxDelta: React.PropTypes.number,

    minDelta: React.PropTypes.number,

    legalLabelInsets: EdgeInsetsPropType,

    onRegionChange: React.PropTypes.func,

    onRegionChangeComplete: React.PropTypes.func,

    onAnnotationPress: React.PropTypes.func,

    active: React.PropTypes.bool
  }),

  statics: {
    PinColors: {
      RED: '#ff3b30',
      GREEN: '#4cd964',
      PURPLE: '#c969e0'
    }
  },

  render: function render() {
    var _this = this;

    var children = [],
        _props = this.props,
        annotations = _props.annotations,
        overlays = _props.overlays,
        followUserLocation = _props.followUserLocation;
    annotations = annotations && annotations.map(function (annotation) {
      var id = annotation.id,
          image = annotation.image,
          tintColor = annotation.tintColor,
          view = annotation.view,
          leftCalloutView = annotation.leftCalloutView,
          rightCalloutView = annotation.rightCalloutView,
          detailCalloutView = annotation.detailCalloutView;


      if (!view && image && tintColor) {
        view = React.createElement(Image, {
          style: {
            tintColor: processColor(tintColor)
          },
          source: image
        });
        image = undefined;
      }
      if (view) {
        if (image) {
          console.warn('`image` and `view` both set on annotation. Image will be ignored.');
        }
        var viewIndex = children.length;
        children.push(React.cloneElement(view, {
          style: [styles.annotationView, view.props.style || {}]
        }));
      }
      if (leftCalloutView) {
        var leftCalloutViewIndex = children.length;
        children.push(React.cloneElement(leftCalloutView, {
          style: [styles.calloutView, leftCalloutView.props.style || {}]
        }));
      }
      if (rightCalloutView) {
        var rightCalloutViewIndex = children.length;
        children.push(React.cloneElement(rightCalloutView, {
          style: [styles.calloutView, rightCalloutView.props.style || {}]
        }));
      }
      if (detailCalloutView) {
        var detailCalloutViewIndex = children.length;
        children.push(React.cloneElement(detailCalloutView, {
          style: [styles.calloutView, detailCalloutView.props.style || {}]
        }));
      }

      var result = babelHelpers.extends({}, annotation, {
        tintColor: tintColor && processColor(tintColor),
        image: image,
        viewIndex: viewIndex,
        leftCalloutViewIndex: leftCalloutViewIndex,
        rightCalloutViewIndex: rightCalloutViewIndex,
        detailCalloutViewIndex: detailCalloutViewIndex,
        view: undefined,
        leftCalloutView: undefined,
        rightCalloutView: undefined,
        detailCalloutView: undefined
      });
      result.id = id || encodeURIComponent(JSON.stringify(result));
      result.image = image && resolveAssetSource(image);
      return result;
    });
    overlays = overlays && overlays.map(function (overlay) {
      var id = overlay.id,
          fillColor = overlay.fillColor,
          strokeColor = overlay.strokeColor;

      var result = babelHelpers.extends({}, overlay, {
        strokeColor: strokeColor && processColor(strokeColor),
        fillColor: fillColor && processColor(fillColor)
      });
      result.id = id || encodeURIComponent(JSON.stringify(result));
      return result;
    });

    var findByAnnotationId = function findByAnnotationId(annotationId) {
      if (!annotations) {
        return null;
      }
      for (var i = 0, l = annotations.length; i < l; i++) {
        if (annotations[i].id === annotationId) {
          return annotations[i];
        }
      }
      return null;
    };

    var onPress = void 0,
        onAnnotationDragStateChange = void 0,
        onAnnotationFocus = void 0,
        onAnnotationBlur = void 0;
    if (annotations) {
      onPress = function onPress(event) {
        if (event.nativeEvent.action === 'annotation-click') {
          _this.props.onAnnotationPress && _this.props.onAnnotationPress(event.nativeEvent.annotation);
        } else if (event.nativeEvent.action === 'callout-click') {
          var annotation = findByAnnotationId(event.nativeEvent.annotationId);
          if (annotation) {
            if (event.nativeEvent.side === 'left' && annotation.onLeftCalloutPress) {
              annotation.onLeftCalloutPress(event.nativeEvent);
            } else if (event.nativeEvent.side === 'right' && annotation.onRightCalloutPress) {
              annotation.onRightCalloutPress(event.nativeEvent);
            }
          }
        }
      };
      onAnnotationDragStateChange = function onAnnotationDragStateChange(event) {
        var annotation = findByAnnotationId(event.nativeEvent.annotationId);
        if (annotation) {
          annotation.onDragStateChange && annotation.onDragStateChange(event.nativeEvent);
        }
      };
      onAnnotationFocus = function onAnnotationFocus(event) {
        var annotation = findByAnnotationId(event.nativeEvent.annotationId);
        if (annotation && annotation.onFocus) {
          annotation.onFocus(event.nativeEvent);
        }
      };
      onAnnotationBlur = function onAnnotationBlur(event) {
        var annotation = findByAnnotationId(event.nativeEvent.annotationId);
        if (annotation && annotation.onBlur) {
          annotation.onBlur(event.nativeEvent);
        }
      };
    }

    if (this.props.onRegionChange || this.props.onRegionChangeComplete) {
      var onChange = function onChange(event) {
        if (event.nativeEvent.continuous) {
          _this.props.onRegionChange && _this.props.onRegionChange(event.nativeEvent.region);
        } else {
          _this.props.onRegionChangeComplete && _this.props.onRegionChangeComplete(event.nativeEvent.region);
        }
      };
    }

    if (followUserLocation === undefined) {
      followUserLocation = this.props.showUserLocation;
    }

    return React.createElement(RCTMap, babelHelpers.extends({}, this.props, {
      annotations: annotations,
      children: children,
      followUserLocation: followUserLocation,
      overlays: overlays,
      onPress: onPress,
      onChange: onChange,
      onAnnotationDragStateChange: onAnnotationDragStateChange,
      onAnnotationFocus: onAnnotationFocus,
      onAnnotationBlur: onAnnotationBlur
    }));
  }
});

var styles = StyleSheet.create({
  annotationView: {
    position: 'absolute',
    backgroundColor: 'transparent'
  },
  calloutView: {
    position: 'absolute',
    backgroundColor: 'white'
  }
});

var RCTMap = requireNativeComponent('RCTMap', MapView, {
  nativeOnly: {
    onAnnotationDragStateChange: true,
    onAnnotationFocus: true,
    onAnnotationBlur: true,
    onChange: true,
    onPress: true
  }
});

module.exports = MapView;
}, 283, null, "MapView");
__d(/* Modal */function(global, require, module, exports) {
'use strict';

var _container;

var AppContainer = require(285           ); // 285 = AppContainer
var I18nManager = require(306          ); // 306 = I18nManager
var Platform = require(26        ); // 26 = Platform
var React = require(76     ); // 76 = React
var StyleSheet = require(99          ); // 99 = StyleSheet
var View = require(119   ); // 119 = View

var deprecatedPropType = require(109                 ); // 109 = deprecatedPropType
var requireNativeComponent = require(128                     ); // 128 = requireNativeComponent
var RCTModalHostView = requireNativeComponent('RCTModalHostView', null);

var PropTypes = React.PropTypes;

var Modal = function (_React$Component) {
  babelHelpers.inherits(Modal, _React$Component);

  function Modal() {
    babelHelpers.classCallCheck(this, Modal);
    return babelHelpers.possibleConstructorReturn(this, (Modal.__proto__ || Object.getPrototypeOf(Modal)).apply(this, arguments));
  }

  babelHelpers.createClass(Modal, [{
    key: 'render',
    value: function render() {
      if (this.props.visible === false) {
        return null;
      }

      var containerStyles = {
        backgroundColor: this.props.transparent ? 'transparent' : 'white'
      };

      var animationType = this.props.animationType;
      if (!animationType) {
        animationType = 'none';
        if (this.props.animated) {
          animationType = 'slide';
        }
      }

      var innerChildren = __DEV__ ? React.createElement(
        AppContainer,
        { rootTag: this.context.rootTag },
        this.props.children
      ) : this.props.children;

      return React.createElement(
        RCTModalHostView,
        {
          animationType: animationType,
          transparent: this.props.transparent,
          hardwareAccelerated: this.props.hardwareAccelerated,
          onRequestClose: this.props.onRequestClose,
          onShow: this.props.onShow,
          style: styles.modal,
          onStartShouldSetResponder: this._shouldSetResponder,
          supportedOrientations: this.props.supportedOrientations,
          onOrientationChange: this.props.onOrientationChange
        },
        React.createElement(
          View,
          { style: [styles.container, containerStyles] },
          innerChildren
        )
      );
    }
  }, {
    key: '_shouldSetResponder',
    value: function _shouldSetResponder() {
      return true;
    }
  }]);
  return Modal;
}(React.Component);

Modal.propTypes = {
  animationType: PropTypes.oneOf(['none', 'slide', 'fade']),

  transparent: PropTypes.bool,

  hardwareAccelerated: PropTypes.bool,

  visible: PropTypes.bool,

  onRequestClose: Platform.OS === 'android' ? PropTypes.func.isRequired : PropTypes.func,

  onShow: PropTypes.func,
  animated: deprecatedPropType(PropTypes.bool, 'Use the `animationType` prop instead.'),

  supportedOrientations: PropTypes.arrayOf(PropTypes.oneOf(['portrait', 'portrait-upside-down', 'landscape', 'landscape-left', 'landscape-right'])),

  onOrientationChange: PropTypes.func
};
Modal.defaultProps = {
  visible: true,
  hardwareAccelerated: false
};
Modal.contextTypes = {
  rootTag: React.PropTypes.number
};


var side = I18nManager.isRTL ? 'right' : 'left';
var styles = StyleSheet.create({
  modal: {
    position: 'absolute'
  },
  container: (_container = {
    position: 'absolute'
  }, babelHelpers.defineProperty(_container, side, 0), babelHelpers.defineProperty(_container, 'top', 0), _container)
});

module.exports = Modal;
}, 284, null, "Modal");
__d(/* AppContainer */function(global, require, module, exports) {

'use strict';

var EmitterSubscription = require(54                   ); // 54 = EmitterSubscription
var RCTDeviceEventEmitter = require(57                     ); // 57 = RCTDeviceEventEmitter
var React = require(76     ); // 76 = React
var ReactNative = require(191          ); // 191 = ReactNative
var StyleSheet = require(99          ); // 99 = StyleSheet
var View = require(119   ); // 119 = View

var AppContainer = function (_React$Component) {
  babelHelpers.inherits(AppContainer, _React$Component);

  function AppContainer() {
    var _ref;

    var _temp, _this, _ret;

    babelHelpers.classCallCheck(this, AppContainer);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = AppContainer.__proto__ || Object.getPrototypeOf(AppContainer)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      inspector: null,
      mainKey: 1
    }, _this._subscription = null, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
  }

  babelHelpers.createClass(AppContainer, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return {
        rootTag: this.props.rootTag
      };
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      if (__DEV__) {
        this._subscription = RCTDeviceEventEmitter.addListener('toggleElementInspector', function () {
          var Inspector = require(286        ); // 286 = Inspector
          var inspector = _this2.state.inspector ? null : React.createElement(Inspector, {
            inspectedViewTag: ReactNative.findNodeHandle(_this2._mainRef),
            onRequestRerenderApp: function onRequestRerenderApp(updateInspectedViewTag) {
              _this2.setState(function (s) {
                return { mainKey: s.mainKey + 1 };
              }, function () {
                return updateInspectedViewTag(ReactNative.findNodeHandle(_this2._mainRef));
              });
            }
          });
          _this2.setState({ inspector: inspector });
        });
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this._subscription) {
        this._subscription.remove();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var yellowBox = null;
      if (__DEV__) {
        var YellowBox = require(305        ); // 305 = YellowBox
        yellowBox = React.createElement(YellowBox, null);
      }

      return React.createElement(
        View,
        { style: styles.appContainer, pointerEvents: 'box-none' },
        React.createElement(
          View,
          {
            collapsable: !this.state.inspector,
            key: this.state.mainKey,
            pointerEvents: 'box-none',
            style: styles.appContainer, ref: function ref(_ref2) {
              _this3._mainRef = _ref2;
            } },
          this.props.children
        ),
        yellowBox,
        this.state.inspector
      );
    }
  }]);
  return AppContainer;
}(React.Component);

AppContainer.childContextTypes = {
  rootTag: React.PropTypes.number
};


var styles = StyleSheet.create({
  appContainer: {
    flex: 1
  }
});

module.exports = AppContainer;
}, 285, null, "AppContainer");
__d(/* Inspector */function(global, require, module, exports) {

'use strict';

var Dimensions = require(101         ); // 101 = Dimensions
var InspectorOverlay = require(287               ); // 287 = InspectorOverlay
var InspectorPanel = require(292             ); // 292 = InspectorPanel
var InspectorUtils = require(288             ); // 288 = InspectorUtils
var Platform = require(26        ); // 26 = Platform
var React = require(76     ); // 76 = React
var StyleSheet = require(99          ); // 99 = StyleSheet
var Touchable = require(184        ); // 184 = Touchable
var UIManager = require(73         ); // 73 = UIManager
var View = require(119   ); // 119 = View

if (window.__REACT_DEVTOOLS_GLOBAL_HOOK__) {
  window.__REACT_DEVTOOLS_GLOBAL_HOOK__.resolveRNStyle = require(23            ); // 23 = flattenStyle
}

var Inspector = function (_React$Component) {
  babelHelpers.inherits(Inspector, _React$Component);

  function Inspector(props) {
    babelHelpers.classCallCheck(this, Inspector);

    var _this = babelHelpers.possibleConstructorReturn(this, (Inspector.__proto__ || Object.getPrototypeOf(Inspector)).call(this, props));

    _initialiseProps.call(_this);

    _this.state = {
      devtoolsAgent: null,
      hierarchy: null,
      panelPos: 'bottom',
      inspecting: true,
      perfing: false,
      inspected: null,
      selection: null,
      inspectedViewTag: _this.props.inspectedViewTag,
      networking: false
    };
    return _this;
  }

  babelHelpers.createClass(Inspector, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (window.__REACT_DEVTOOLS_GLOBAL_HOOK__) {
        this.attachToDevtools = this.attachToDevtools.bind(this);
        window.__REACT_DEVTOOLS_GLOBAL_HOOK__.on('react-devtools', this.attachToDevtools);

        if (window.__REACT_DEVTOOLS_GLOBAL_HOOK__.reactDevtoolsAgent) {
          this.attachToDevtools(window.__REACT_DEVTOOLS_GLOBAL_HOOK__.reactDevtoolsAgent);
        }
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this._subs) {
        this._subs.map(function (fn) {
          return fn();
        });
      }
      if (window.__REACT_DEVTOOLS_GLOBAL_HOOK__) {
        window.__REACT_DEVTOOLS_GLOBAL_HOOK__.off('react-devtools', this.attachToDevtools);
      }
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(newProps) {
      this.setState({ inspectedViewTag: newProps.inspectedViewTag });
    }
  }, {
    key: 'setSelection',
    value: function setSelection(i) {
      var _this2 = this;

      var instance = this.state.hierarchy[i];

      var publicInstance = instance['_instance'] || {};
      var source = instance['_currentElement'] && instance['_currentElement']['_source'];
      UIManager.measure(instance.getHostNode(), function (x, y, width, height, left, top) {
        _this2.setState({
          inspected: {
            frame: { left: left, top: top, width: width, height: height },
            style: publicInstance.props ? publicInstance.props.style : {},
            source: source
          },
          selection: i
        });
      });
    }
  }, {
    key: 'onTouchInstance',
    value: function onTouchInstance(touched, frame, pointerY) {
      var hierarchy = InspectorUtils.getOwnerHierarchy(touched);
      var instance = InspectorUtils.lastNotNativeInstance(hierarchy);

      if (this.state.devtoolsAgent) {
        this.state.devtoolsAgent.selectFromReactInstance(instance, true);
      }

      var publicInstance = instance['_instance'] || {};
      var props = publicInstance.props || {};
      var source = instance['_currentElement'] && instance['_currentElement']['_source'];
      this.setState({
        panelPos: pointerY > Dimensions.get('window').height / 2 ? 'top' : 'bottom',
        selection: hierarchy.indexOf(instance),
        hierarchy: hierarchy,
        inspected: {
          style: props.style || {},
          frame: frame,
          source: source
        }
      });
    }
  }, {
    key: 'setPerfing',
    value: function setPerfing(val) {
      this.setState({
        perfing: val,
        inspecting: false,
        inspected: null,
        networking: false
      });
    }
  }, {
    key: 'setInspecting',
    value: function setInspecting(val) {
      this.setState({
        inspecting: val,
        inspected: null
      });
    }
  }, {
    key: 'setTouchTargetting',
    value: function setTouchTargetting(val) {
      var _this3 = this;

      Touchable.TOUCH_TARGET_DEBUG = val;
      this.props.onRequestRerenderApp(function (inspectedViewTag) {
        _this3.setState({ inspectedViewTag: inspectedViewTag });
      });
    }
  }, {
    key: 'setNetworking',
    value: function setNetworking(val) {
      this.setState({
        networking: val,
        perfing: false,
        inspecting: false,
        inspected: null
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var panelContainerStyle = this.state.panelPos === 'bottom' ? { bottom: 0 } : { top: Platform.OS === 'ios' ? 20 : 0 };
      return React.createElement(
        View,
        { style: styles.container, pointerEvents: 'box-none' },
        this.state.inspecting && React.createElement(InspectorOverlay, {
          inspected: this.state.inspected,
          inspectedViewTag: this.state.inspectedViewTag,
          onTouchInstance: this.onTouchInstance.bind(this)
        }),
        React.createElement(
          View,
          { style: [styles.panelContainer, panelContainerStyle] },
          React.createElement(InspectorPanel, {
            devtoolsIsOpen: !!this.state.devtoolsAgent,
            inspecting: this.state.inspecting,
            perfing: this.state.perfing,
            setPerfing: this.setPerfing.bind(this),
            setInspecting: this.setInspecting.bind(this),
            inspected: this.state.inspected,
            hierarchy: this.state.hierarchy,
            selection: this.state.selection,
            setSelection: this.setSelection.bind(this),
            touchTargetting: Touchable.TOUCH_TARGET_DEBUG,
            setTouchTargetting: this.setTouchTargetting.bind(this),
            networking: this.state.networking,
            setNetworking: this.setNetworking.bind(this)
          })
        )
      );
    }
  }]);
  return Inspector;
}(React.Component);

var _initialiseProps = function _initialiseProps() {
  var _this4 = this;

  this.attachToDevtools = function (agent) {
    var _hideWait = null;
    var hlSub = agent.sub('highlight', function (_ref) {
      var node = _ref.node,
          name = _ref.name,
          props = _ref.props;

      clearTimeout(_hideWait);
      UIManager.measure(node, function (x, y, width, height, left, top) {
        _this4.setState({
          hierarchy: [],
          inspected: {
            frame: { left: left, top: top, width: width, height: height },
            style: props ? props.style : {}
          }
        });
      });
    });
    var hideSub = agent.sub('hideHighlight', function () {
      if (_this4.state.inspected === null) {
        return;
      }

      _hideWait = setTimeout(function () {
        _this4.setState({
          inspected: null
        });
      }, 100);
    });
    _this4._subs = [hlSub, hideSub];

    agent.on('shutdown', function () {
      _this4.setState({ devtoolsAgent: null });
      _this4._subs = null;
    });
    _this4.setState({
      devtoolsAgent: agent
    });
  };
};

var styles = StyleSheet.create({
  container: {
    position: 'absolute',
    backgroundColor: 'transparent',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0
  },
  panelContainer: {
    position: 'absolute',
    left: 0,
    right: 0
  }
});

module.exports = Inspector;
}, 286, null, "Inspector");
__d(/* InspectorOverlay */function(global, require, module, exports) {
'use strict';

var Dimensions = require(101         ); // 101 = Dimensions
var InspectorUtils = require(288             ); // 288 = InspectorUtils
var React = require(76     ); // 76 = React
var StyleSheet = require(99          ); // 99 = StyleSheet
var UIManager = require(73         ); // 73 = UIManager
var View = require(119   ); // 119 = View
var ElementBox = require(289         ); // 289 = ElementBox

var PropTypes = React.PropTypes;

var InspectorOverlay = function (_React$Component) {
  babelHelpers.inherits(InspectorOverlay, _React$Component);

  function InspectorOverlay() {
    var _ref;

    var _temp, _this, _ret;

    babelHelpers.classCallCheck(this, InspectorOverlay);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = InspectorOverlay.__proto__ || Object.getPrototypeOf(InspectorOverlay)).call.apply(_ref, [this].concat(args))), _this), _this.findViewForTouchEvent = function (e) {
      var _e$nativeEvent$touche = e.nativeEvent.touches[0],
          locationX = _e$nativeEvent$touche.locationX,
          locationY = _e$nativeEvent$touche.locationY;

      UIManager.findSubviewIn(_this.props.inspectedViewTag, [locationX, locationY], function (nativeViewTag, left, top, width, height) {
        var instance = InspectorUtils.findInstanceByNativeTag(nativeViewTag);
        if (!instance) {
          return;
        }
        _this.props.onTouchInstance(instance, { left: left, top: top, width: width, height: height }, locationY);
      });
    }, _this.shouldSetResponser = function (e) {
      _this.findViewForTouchEvent(e);
      return true;
    }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
  }

  babelHelpers.createClass(InspectorOverlay, [{
    key: 'render',
    value: function render() {
      var content = null;
      if (this.props.inspected) {
        content = React.createElement(ElementBox, { frame: this.props.inspected.frame, style: this.props.inspected.style });
      }

      return React.createElement(
        View,
        {
          onStartShouldSetResponder: this.shouldSetResponser,
          onResponderMove: this.findViewForTouchEvent,
          style: [styles.inspector, { height: Dimensions.get('window').height }] },
        content
      );
    }
  }]);
  return InspectorOverlay;
}(React.Component);

InspectorOverlay.propTypes = {
  inspected: PropTypes.shape({
    frame: PropTypes.object,
    style: PropTypes.any
  }),
  inspectedViewTag: PropTypes.number,
  onTouchInstance: PropTypes.func.isRequired
};


var styles = StyleSheet.create({
  inspector: {
    backgroundColor: 'transparent',
    position: 'absolute',
    left: 0,
    top: 0,
    right: 0
  }
});

module.exports = InspectorOverlay;
}, 287, null, "InspectorOverlay");
__d(/* InspectorUtils */function(global, require, module, exports) {
'use strict';

var ReactNativeComponentTree = require(132                       ); // 132 = ReactNativeComponentTree

function traverseOwnerTreeUp(hierarchy, instance) {
  if (instance) {
    hierarchy.unshift(instance);
    traverseOwnerTreeUp(hierarchy, instance._currentElement._owner);
  }
}

function findInstanceByNativeTag(nativeTag) {
  return ReactNativeComponentTree.getInstanceFromNode(nativeTag);
}

function getOwnerHierarchy(instance) {
  var hierarchy = [];
  traverseOwnerTreeUp(hierarchy, instance);
  return hierarchy;
}

function lastNotNativeInstance(hierarchy) {
  for (var i = hierarchy.length - 1; i > 1; i--) {
    var instance = hierarchy[i];
    if (!instance.viewConfig) {
      return instance;
    }
  }
  return hierarchy[0];
}

module.exports = { findInstanceByNativeTag: findInstanceByNativeTag, getOwnerHierarchy: getOwnerHierarchy, lastNotNativeInstance: lastNotNativeInstance };
}, 288, null, "InspectorUtils");
__d(/* ElementBox */function(global, require, module, exports) {
'use strict';

var React = require(76     ); // 76 = React
var View = require(119   ); // 119 = View
var StyleSheet = require(99          ); // 99 = StyleSheet
var BorderBox = require(290        ); // 290 = BorderBox
var resolveBoxStyle = require(291              ); // 291 = resolveBoxStyle

var flattenStyle = require(23            ); // 23 = flattenStyle

var ElementBox = function (_React$Component) {
  babelHelpers.inherits(ElementBox, _React$Component);

  function ElementBox() {
    babelHelpers.classCallCheck(this, ElementBox);
    return babelHelpers.possibleConstructorReturn(this, (ElementBox.__proto__ || Object.getPrototypeOf(ElementBox)).apply(this, arguments));
  }

  babelHelpers.createClass(ElementBox, [{
    key: 'render',
    value: function render() {
      var style = flattenStyle(this.props.style) || {};
      var margin = resolveBoxStyle('margin', style);
      var padding = resolveBoxStyle('padding', style);
      var frameStyle = this.props.frame;
      if (margin) {
        frameStyle = {
          top: frameStyle.top - margin.top,
          left: frameStyle.left - margin.left,
          height: frameStyle.height + margin.top + margin.bottom,
          width: frameStyle.width + margin.left + margin.right
        };
      }
      var contentStyle = {
        width: this.props.frame.width,
        height: this.props.frame.height
      };
      if (padding) {
        contentStyle = {
          width: contentStyle.width - padding.left - padding.right,
          height: contentStyle.height - padding.top - padding.bottom
        };
      }
      return React.createElement(
        View,
        { style: [styles.frame, frameStyle], pointerEvents: 'none' },
        React.createElement(
          BorderBox,
          { box: margin, style: styles.margin },
          React.createElement(
            BorderBox,
            { box: padding, style: styles.padding },
            React.createElement(View, { style: [styles.content, contentStyle] })
          )
        )
      );
    }
  }]);
  return ElementBox;
}(React.Component);

var styles = StyleSheet.create({
  frame: {
    position: 'absolute'
  },
  content: {
    backgroundColor: 'rgba(200, 230, 255, 0.8)'
  },
  padding: {
    borderColor: 'rgba(77, 255, 0, 0.3)'
  },
  margin: {
    borderColor: 'rgba(255, 132, 0, 0.3)'
  }
});

module.exports = ElementBox;
}, 289, null, "ElementBox");
__d(/* BorderBox */function(global, require, module, exports) {
'use strict';

var React = require(76     ); // 76 = React
var View = require(119   ); // 119 = View

var BorderBox = function (_React$Component) {
  babelHelpers.inherits(BorderBox, _React$Component);

  function BorderBox() {
    babelHelpers.classCallCheck(this, BorderBox);
    return babelHelpers.possibleConstructorReturn(this, (BorderBox.__proto__ || Object.getPrototypeOf(BorderBox)).apply(this, arguments));
  }

  babelHelpers.createClass(BorderBox, [{
    key: 'render',
    value: function render() {
      var box = this.props.box;
      if (!box) {
        return this.props.children;
      }
      var style = {
        borderTopWidth: box.top,
        borderBottomWidth: box.bottom,
        borderLeftWidth: box.left,
        borderRightWidth: box.right
      };
      return React.createElement(
        View,
        { style: [style, this.props.style] },
        this.props.children
      );
    }
  }]);
  return BorderBox;
}(React.Component);

module.exports = BorderBox;
}, 290, null, "BorderBox");
__d(/* resolveBoxStyle */function(global, require, module, exports) {
'use strict';

function resolveBoxStyle(prefix, style) {
  var res = {};
  var subs = ['top', 'left', 'bottom', 'right'];
  var set = false;
  subs.forEach(function (sub) {
    res[sub] = style[prefix] || 0;
  });
  if (style[prefix]) {
    set = true;
  }
  if (style[prefix + 'Vertical']) {
    res.top = res.bottom = style[prefix + 'Vertical'];
    set = true;
  }
  if (style[prefix + 'Horizontal']) {
    res.left = res.right = style[prefix + 'Horizontal'];
    set = true;
  }
  subs.forEach(function (sub) {
    var val = style[prefix + capFirst(sub)];
    if (val) {
      res[sub] = val;
      set = true;
    }
  });
  if (!set) {
    return;
  }
  return res;
}

function capFirst(text) {
  return text[0].toUpperCase() + text.slice(1);
}

module.exports = resolveBoxStyle;
}, 291, null, "resolveBoxStyle");
__d(/* InspectorPanel */function(global, require, module, exports) {
'use strict';

var ElementProperties = require(293                ); // 293 = ElementProperties
var NetworkOverlay = require(301             ); // 301 = NetworkOverlay
var PerformanceOverlay = require(304                 ); // 304 = PerformanceOverlay
var React = require(76     ); // 76 = React
var ScrollView = require(265         ); // 265 = ScrollView
var StyleSheet = require(99          ); // 99 = StyleSheet
var Text = require(183   ); // 183 = Text
var TouchableHighlight = require(296                 ); // 296 = TouchableHighlight
var View = require(119   ); // 119 = View

var PropTypes = React.PropTypes;

var InspectorPanel = function (_React$Component) {
  babelHelpers.inherits(InspectorPanel, _React$Component);

  function InspectorPanel() {
    babelHelpers.classCallCheck(this, InspectorPanel);
    return babelHelpers.possibleConstructorReturn(this, (InspectorPanel.__proto__ || Object.getPrototypeOf(InspectorPanel)).apply(this, arguments));
  }

  babelHelpers.createClass(InspectorPanel, [{
    key: 'renderWaiting',
    value: function renderWaiting() {
      if (this.props.inspecting) {
        return React.createElement(
          Text,
          { style: styles.waitingText },
          'Tap something to inspect it'
        );
      }
      return React.createElement(
        Text,
        { style: styles.waitingText },
        'Nothing is inspected'
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var contents = void 0;
      if (this.props.inspected) {
        contents = React.createElement(
          ScrollView,
          { style: styles.properties },
          React.createElement(ElementProperties, {
            style: this.props.inspected.style,
            frame: this.props.inspected.frame,
            source: this.props.inspected.source,
            hierarchy: this.props.hierarchy,
            selection: this.props.selection,
            setSelection: this.props.setSelection
          })
        );
      } else if (this.props.perfing) {
        contents = React.createElement(PerformanceOverlay, null);
      } else if (this.props.networking) {
        contents = React.createElement(NetworkOverlay, null);
      } else {
        contents = React.createElement(
          View,
          { style: styles.waiting },
          this.renderWaiting()
        );
      }
      return React.createElement(
        View,
        { style: styles.container },
        !this.props.devtoolsIsOpen && contents,
        React.createElement(
          View,
          { style: styles.buttonRow },
          React.createElement(Button, {
            title: 'Inspect',
            pressed: this.props.inspecting,
            onClick: this.props.setInspecting
          }),
          React.createElement(Button, { title: 'Perf',
            pressed: this.props.perfing,
            onClick: this.props.setPerfing
          }),
          React.createElement(Button, { title: 'Network',
            pressed: this.props.networking,
            onClick: this.props.setNetworking
          }),
          React.createElement(Button, { title: 'Touchables',
            pressed: this.props.touchTargetting,
            onClick: this.props.setTouchTargetting
          })
        )
      );
    }
  }]);
  return InspectorPanel;
}(React.Component);

InspectorPanel.propTypes = {
  devtoolsIsOpen: PropTypes.bool,
  inspecting: PropTypes.bool,
  setInspecting: PropTypes.func,
  inspected: PropTypes.object,
  perfing: PropTypes.bool,
  setPerfing: PropTypes.func,
  touchTargetting: PropTypes.bool,
  setTouchTargetting: PropTypes.func,
  networking: PropTypes.bool,
  setNetworking: PropTypes.func
};

var Button = function (_React$Component2) {
  babelHelpers.inherits(Button, _React$Component2);

  function Button() {
    babelHelpers.classCallCheck(this, Button);
    return babelHelpers.possibleConstructorReturn(this, (Button.__proto__ || Object.getPrototypeOf(Button)).apply(this, arguments));
  }

  babelHelpers.createClass(Button, [{
    key: 'render',
    value: function render() {
      var _this3 = this;

      return React.createElement(
        TouchableHighlight,
        { onPress: function onPress() {
            return _this3.props.onClick(!_this3.props.pressed);
          }, style: [styles.button, this.props.pressed && styles.buttonPressed] },
        React.createElement(
          Text,
          { style: styles.buttonText },
          this.props.title
        )
      );
    }
  }]);
  return Button;
}(React.Component);

var styles = StyleSheet.create({
  buttonRow: {
    flexDirection: 'row'
  },
  button: {
    backgroundColor: 'rgba(0, 0, 0, 0.3)',
    margin: 2,
    height: 30,
    justifyContent: 'center',
    alignItems: 'center'
  },
  buttonPressed: {
    backgroundColor: 'rgba(255, 255, 255, 0.3)'
  },
  buttonText: {
    textAlign: 'center',
    color: 'white',
    margin: 5
  },
  container: {
    backgroundColor: 'rgba(0, 0, 0, 0.7)'
  },
  properties: {
    height: 200
  },
  waiting: {
    height: 100
  },
  waitingText: {
    fontSize: 20,
    textAlign: 'center',
    marginVertical: 20,
    color: 'white'
  }
});

module.exports = InspectorPanel;
}, 292, null, "InspectorPanel");
__d(/* ElementProperties */function(global, require, module, exports) {
'use strict';

var BoxInspector = require(294           ); // 294 = BoxInspector
var React = require(76     ); // 76 = React
var StyleInspector = require(295             ); // 295 = StyleInspector
var StyleSheet = require(99          ); // 99 = StyleSheet
var Text = require(183   ); // 183 = Text
var TouchableHighlight = require(296                 ); // 296 = TouchableHighlight
var TouchableWithoutFeedback = require(247                       ); // 247 = TouchableWithoutFeedback
var View = require(119   ); // 119 = View

var flattenStyle = require(23            ); // 23 = flattenStyle
var mapWithSeparator = require(299               ); // 299 = mapWithSeparator
var openFileInEditor = require(300               ); // 300 = openFileInEditor

var PropTypes = React.PropTypes;

var ElementProperties = function (_React$Component) {
  babelHelpers.inherits(ElementProperties, _React$Component);

  function ElementProperties() {
    babelHelpers.classCallCheck(this, ElementProperties);
    return babelHelpers.possibleConstructorReturn(this, (ElementProperties.__proto__ || Object.getPrototypeOf(ElementProperties)).apply(this, arguments));
  }

  babelHelpers.createClass(ElementProperties, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var style = flattenStyle(this.props.style);

      var selection = this.props.selection;
      var openFileButton = void 0;
      var source = this.props.source;

      var _ref = source || {},
          fileName = _ref.fileName,
          lineNumber = _ref.lineNumber;

      if (fileName && lineNumber) {
        var parts = fileName.split('/');
        var fileNameShort = parts[parts.length - 1];
        openFileButton = React.createElement(
          TouchableHighlight,
          {
            style: styles.openButton,
            onPress: openFileInEditor.bind(null, fileName, lineNumber) },
          React.createElement(
            Text,
            { style: styles.openButtonTitle, numberOfLines: 1 },
            fileNameShort,
            ':',
            lineNumber
          )
        );
      }

      return React.createElement(
        TouchableWithoutFeedback,
        null,
        React.createElement(
          View,
          { style: styles.info },
          React.createElement(
            View,
            { style: styles.breadcrumb },
            mapWithSeparator(this.props.hierarchy, function (item, i) {
              return React.createElement(
                TouchableHighlight,
                {
                  key: 'item-' + i,
                  style: [styles.breadItem, i === selection && styles.selected],

                  onPress: function onPress() {
                    return _this2.props.setSelection(i);
                  } },
                React.createElement(
                  Text,
                  { style: styles.breadItemText },
                  getInstanceName(item)
                )
              );
            }, function (i) {
              return React.createElement(
                Text,
                { key: 'sep-' + i, style: styles.breadSep },
                '\u25B8'
              );
            })
          ),
          React.createElement(
            View,
            { style: styles.row },
            React.createElement(
              View,
              { style: styles.col },
              React.createElement(StyleInspector, { style: style }),
              openFileButton
            ),
            React.createElement(BoxInspector, { style: style, frame: this.props.frame })
          )
        )
      );
    }
  }]);
  return ElementProperties;
}(React.Component);

ElementProperties.propTypes = {
  hierarchy: PropTypes.array.isRequired,
  style: PropTypes.oneOfType([PropTypes.object, PropTypes.array, PropTypes.number]),
  source: PropTypes.shape({
    fileName: PropTypes.string,
    lineNumber: PropTypes.number
  })
};


function getInstanceName(instance) {
  if (instance.getName) {
    return instance.getName();
  }
  if (instance.constructor && instance.constructor.displayName) {
    return instance.constructor.displayName;
  }
  return 'Unknown';
}

var styles = StyleSheet.create({
  breadSep: {
    fontSize: 8,
    color: 'white'
  },
  breadcrumb: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    alignItems: 'flex-start',
    marginBottom: 5
  },
  selected: {
    borderColor: 'white',
    borderRadius: 5
  },
  breadItem: {
    borderWidth: 1,
    borderColor: 'transparent',
    marginHorizontal: 2
  },
  breadItemText: {
    fontSize: 10,
    color: 'white',
    marginHorizontal: 5
  },
  row: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between'
  },
  col: {
    flex: 1
  },
  info: {
    padding: 10
  },
  openButton: {
    padding: 10,
    backgroundColor: '#000',
    marginVertical: 5,
    marginRight: 5,
    borderRadius: 2
  },
  openButtonTitle: {
    color: 'white',
    fontSize: 8
  }
});

module.exports = ElementProperties;
}, 293, null, "ElementProperties");
__d(/* BoxInspector */function(global, require, module, exports) {
'use strict';

var React = require(76     ); // 76 = React
var StyleSheet = require(99          ); // 99 = StyleSheet
var Text = require(183   ); // 183 = Text
var View = require(119   ); // 119 = View
var resolveBoxStyle = require(291              ); // 291 = resolveBoxStyle

var blank = {
  top: 0,
  left: 0,
  right: 0,
  bottom: 0
};

var BoxInspector = function (_React$Component) {
  babelHelpers.inherits(BoxInspector, _React$Component);

  function BoxInspector() {
    babelHelpers.classCallCheck(this, BoxInspector);
    return babelHelpers.possibleConstructorReturn(this, (BoxInspector.__proto__ || Object.getPrototypeOf(BoxInspector)).apply(this, arguments));
  }

  babelHelpers.createClass(BoxInspector, [{
    key: 'render',
    value: function render() {
      var frame = this.props.frame;
      var style = this.props.style;
      var margin = style && resolveBoxStyle('margin', style) || blank;
      var padding = style && resolveBoxStyle('padding', style) || blank;
      return React.createElement(
        BoxContainer,
        { title: 'margin', titleStyle: styles.marginLabel, box: margin },
        React.createElement(
          BoxContainer,
          { title: 'padding', box: padding },
          React.createElement(
            View,
            null,
            React.createElement(
              Text,
              { style: styles.innerText },
              '(',
              frame.left,
              ', ',
              frame.top,
              ')'
            ),
            React.createElement(
              Text,
              { style: styles.innerText },
              frame.width,
              ' \xD7 ',
              frame.height
            )
          )
        )
      );
    }
  }]);
  return BoxInspector;
}(React.Component);

var BoxContainer = function (_React$Component2) {
  babelHelpers.inherits(BoxContainer, _React$Component2);

  function BoxContainer() {
    babelHelpers.classCallCheck(this, BoxContainer);
    return babelHelpers.possibleConstructorReturn(this, (BoxContainer.__proto__ || Object.getPrototypeOf(BoxContainer)).apply(this, arguments));
  }

  babelHelpers.createClass(BoxContainer, [{
    key: 'render',
    value: function render() {
      var box = this.props.box;
      return React.createElement(
        View,
        { style: styles.box },
        React.createElement(
          View,
          { style: styles.row },
          React.createElement(
            Text,
            { style: [this.props.titleStyle, styles.label] },
            this.props.title
          ),
          React.createElement(
            Text,
            { style: styles.boxText },
            box.top
          )
        ),
        React.createElement(
          View,
          { style: styles.row },
          React.createElement(
            Text,
            { style: styles.boxText },
            box.left
          ),
          this.props.children,
          React.createElement(
            Text,
            { style: styles.boxText },
            box.right
          )
        ),
        React.createElement(
          Text,
          { style: styles.boxText },
          box.bottom
        )
      );
    }
  }]);
  return BoxContainer;
}(React.Component);

var styles = StyleSheet.create({
  row: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-around'
  },
  marginLabel: {
    width: 60
  },
  label: {
    fontSize: 10,
    color: 'rgb(255,100,0)',
    marginLeft: 5,
    flex: 1,
    textAlign: 'left',
    top: -3
  },
  buffer: {
    fontSize: 10,
    color: 'yellow',
    flex: 1,
    textAlign: 'center'
  },
  innerText: {
    color: 'yellow',
    fontSize: 12,
    textAlign: 'center',
    width: 70
  },
  box: {
    borderWidth: 1,
    borderColor: 'grey'
  },
  boxText: {
    color: 'white',
    fontSize: 12,
    marginHorizontal: 3,
    marginVertical: 2,
    textAlign: 'center'
  }
});

module.exports = BoxInspector;
}, 294, null, "BoxInspector");
__d(/* StyleInspector */function(global, require, module, exports) {
'use strict';

var React = require(76     ); // 76 = React
var StyleSheet = require(99          ); // 99 = StyleSheet
var Text = require(183   ); // 183 = Text
var View = require(119   ); // 119 = View

var StyleInspector = function (_React$Component) {
  babelHelpers.inherits(StyleInspector, _React$Component);

  function StyleInspector() {
    babelHelpers.classCallCheck(this, StyleInspector);
    return babelHelpers.possibleConstructorReturn(this, (StyleInspector.__proto__ || Object.getPrototypeOf(StyleInspector)).apply(this, arguments));
  }

  babelHelpers.createClass(StyleInspector, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      if (!this.props.style) {
        return React.createElement(
          Text,
          { style: styles.noStyle },
          'No style'
        );
      }
      var names = Object.keys(this.props.style);
      return React.createElement(
        View,
        { style: styles.container },
        React.createElement(
          View,
          null,
          names.map(function (name) {
            return React.createElement(
              Text,
              { key: name, style: styles.attr },
              name,
              ':'
            );
          })
        ),
        React.createElement(
          View,
          null,
          names.map(function (name) {
            var value = typeof _this2.props.style[name] === 'object' ? JSON.stringify(_this2.props.style[name]) : _this2.props.style[name];
            return React.createElement(
              Text,
              { key: name, style: styles.value },
              value
            );
          })
        )
      );
    }
  }]);
  return StyleInspector;
}(React.Component);

var styles = StyleSheet.create({
  container: {
    flexDirection: 'row'
  },
  row: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-around'
  },
  attr: {
    fontSize: 10,
    color: '#ccc'
  },
  value: {
    fontSize: 10,
    color: 'white',
    marginLeft: 10
  },
  noStyle: {
    color: 'white',
    fontSize: 10
  }
});

module.exports = StyleInspector;
}, 295, null, "StyleInspector");
__d(/* TouchableHighlight */function(global, require, module, exports) {
'use strict';

var ColorPropType = require(16             ); // 16 = ColorPropType
var NativeMethodsMixin = require(19                  ); // 19 = NativeMethodsMixin
var React = require(76     ); // 76 = React
var ReactNativeViewAttributes = require(125                        ); // 125 = ReactNativeViewAttributes
var StyleSheet = require(99          ); // 99 = StyleSheet
var TimerMixin = require(248                ); // 248 = react-timer-mixin
var Touchable = require(184        ); // 184 = Touchable
var TouchableWithoutFeedback = require(247                       ); // 247 = TouchableWithoutFeedback
var View = require(119   ); // 119 = View

var ensureComponentIsNative = require(297                      ); // 297 = ensureComponentIsNative
var ensurePositiveDelayProps = require(249                       ); // 249 = ensurePositiveDelayProps
var keyOf = require(298             ); // 298 = fbjs/lib/keyOf
var merge = require(122    ); // 122 = merge

var DEFAULT_PROPS = {
  activeOpacity: 0.85,
  underlayColor: 'black'
};

var PRESS_RETENTION_OFFSET = { top: 20, left: 20, right: 20, bottom: 30 };

var TouchableHighlight = React.createClass({
  displayName: 'TouchableHighlight',

  propTypes: babelHelpers.extends({}, TouchableWithoutFeedback.propTypes, {
    activeOpacity: React.PropTypes.number,

    underlayColor: ColorPropType,
    style: View.propTypes.style,

    onShowUnderlay: React.PropTypes.func,

    onHideUnderlay: React.PropTypes.func,

    hasTVPreferredFocus: React.PropTypes.bool,

    tvParallaxProperties: React.PropTypes.object

  }),

  mixins: [NativeMethodsMixin, TimerMixin, Touchable.Mixin],

  getDefaultProps: function getDefaultProps() {
    return DEFAULT_PROPS;
  },

  _computeSyntheticState: function _computeSyntheticState(props) {
    return {
      activeProps: {
        style: {
          opacity: props.activeOpacity
        }
      },
      activeUnderlayProps: {
        style: {
          backgroundColor: props.underlayColor
        }
      },
      underlayStyle: [INACTIVE_UNDERLAY_PROPS.style, props.style],
      hasTVPreferredFocus: props.hasTVPreferredFocus
    };
  },

  getInitialState: function getInitialState() {
    return merge(this.touchableGetInitialState(), this._computeSyntheticState(this.props));
  },

  componentDidMount: function componentDidMount() {
    ensurePositiveDelayProps(this.props);
    ensureComponentIsNative(this.refs[CHILD_REF]);
  },

  componentDidUpdate: function componentDidUpdate() {
    ensureComponentIsNative(this.refs[CHILD_REF]);
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    ensurePositiveDelayProps(nextProps);
    if (nextProps.activeOpacity !== this.props.activeOpacity || nextProps.underlayColor !== this.props.underlayColor || nextProps.style !== this.props.style) {
      this.setState(this._computeSyntheticState(nextProps));
    }
  },

  viewConfig: {
    uiViewClassName: 'RCTView',
    validAttributes: ReactNativeViewAttributes.RCTView
  },

  touchableHandleActivePressIn: function touchableHandleActivePressIn(e) {
    this.clearTimeout(this._hideTimeout);
    this._hideTimeout = null;
    this._showUnderlay();
    this.props.onPressIn && this.props.onPressIn(e);
  },

  touchableHandleActivePressOut: function touchableHandleActivePressOut(e) {
    if (!this._hideTimeout) {
      this._hideUnderlay();
    }
    this.props.onPressOut && this.props.onPressOut(e);
  },

  touchableHandlePress: function touchableHandlePress(e) {
    this.clearTimeout(this._hideTimeout);
    this._showUnderlay();
    this._hideTimeout = this.setTimeout(this._hideUnderlay, this.props.delayPressOut || 100);
    this.props.onPress && this.props.onPress(e);
  },

  touchableHandleLongPress: function touchableHandleLongPress(e) {
    this.props.onLongPress && this.props.onLongPress(e);
  },

  touchableGetPressRectOffset: function touchableGetPressRectOffset() {
    return this.props.pressRetentionOffset || PRESS_RETENTION_OFFSET;
  },

  touchableGetHitSlop: function touchableGetHitSlop() {
    return this.props.hitSlop;
  },

  touchableGetHighlightDelayMS: function touchableGetHighlightDelayMS() {
    return this.props.delayPressIn;
  },

  touchableGetLongPressDelayMS: function touchableGetLongPressDelayMS() {
    return this.props.delayLongPress;
  },

  touchableGetPressOutDelayMS: function touchableGetPressOutDelayMS() {
    return this.props.delayPressOut;
  },

  _showUnderlay: function _showUnderlay() {
    if (!this.isMounted() || !this._hasPressHandler()) {
      return;
    }

    this.refs[UNDERLAY_REF].setNativeProps(this.state.activeUnderlayProps);
    this.refs[CHILD_REF].setNativeProps(this.state.activeProps);
    this.props.onShowUnderlay && this.props.onShowUnderlay();
  },

  _hideUnderlay: function _hideUnderlay() {
    this.clearTimeout(this._hideTimeout);
    this._hideTimeout = null;
    if (this._hasPressHandler() && this.refs[UNDERLAY_REF]) {
      this.refs[CHILD_REF].setNativeProps(INACTIVE_CHILD_PROPS);
      this.refs[UNDERLAY_REF].setNativeProps(babelHelpers.extends({}, INACTIVE_UNDERLAY_PROPS, {
        style: this.state.underlayStyle
      }));
      this.props.onHideUnderlay && this.props.onHideUnderlay();
    }
  },

  _hasPressHandler: function _hasPressHandler() {
    return !!(this.props.onPress || this.props.onPressIn || this.props.onPressOut || this.props.onLongPress);
  },

  render: function render() {
    return React.createElement(
      View,
      {
        accessible: this.props.accessible !== false,
        accessibilityLabel: this.props.accessibilityLabel,
        accessibilityComponentType: this.props.accessibilityComponentType,
        accessibilityTraits: this.props.accessibilityTraits,
        ref: UNDERLAY_REF,
        style: this.state.underlayStyle,
        onLayout: this.props.onLayout,
        hitSlop: this.props.hitSlop,
        isTVSelectable: true,
        tvParallaxProperties: this.props.tvParallaxProperties,
        hasTVPreferredFocus: this.state.hasTVPreferredFocus,
        onStartShouldSetResponder: this.touchableHandleStartShouldSetResponder,
        onResponderTerminationRequest: this.touchableHandleResponderTerminationRequest,
        onResponderGrant: this.touchableHandleResponderGrant,
        onResponderMove: this.touchableHandleResponderMove,
        onResponderRelease: this.touchableHandleResponderRelease,
        onResponderTerminate: this.touchableHandleResponderTerminate,
        testID: this.props.testID },
      React.cloneElement(React.Children.only(this.props.children), {
        ref: CHILD_REF
      }),
      Touchable.renderDebugView({ color: 'green', hitSlop: this.props.hitSlop })
    );
  }
});

var CHILD_REF = keyOf({ childRef: null });
var UNDERLAY_REF = keyOf({ underlayRef: null });
var INACTIVE_CHILD_PROPS = {
  style: StyleSheet.create({ x: { opacity: 1.0 } }).x
};
var INACTIVE_UNDERLAY_PROPS = {
  style: StyleSheet.create({ x: { backgroundColor: 'transparent' } }).x
};

module.exports = TouchableHighlight;
}, 296, null, "TouchableHighlight");
__d(/* ensureComponentIsNative */function(global, require, module, exports) {
'use strict';

var invariant = require(24                  ); // 24 = fbjs/lib/invariant

var ensureComponentIsNative = function ensureComponentIsNative(component) {
  invariant(component && typeof component.setNativeProps === 'function', 'Touchable child must either be native or forward setNativeProps to a ' + 'native component');
};

module.exports = ensureComponentIsNative;
}, 297, null, "ensureComponentIsNative");
__d(/* fbjs/lib/keyOf.js */function(global, require, module, exports) {"use strict";

var keyOf = function keyOf(oneKeyObj) {
  var key;
  for (key in oneKeyObj) {
    if (!oneKeyObj.hasOwnProperty(key)) {
      continue;
    }
    return key;
  }
  return null;
};

module.exports = keyOf;
}, 298, null, "fbjs/lib/keyOf.js");
__d(/* mapWithSeparator */function(global, require, module, exports) {
'use strict';

function mapWithSeparator(items, itemRenderer, spacerRenderer) {
  var mapped = [];
  if (items.length > 0) {
    mapped.push(itemRenderer(items[0], 0, items));
    for (var ii = 1; ii < items.length; ii++) {
      mapped.push(spacerRenderer(ii - 1), itemRenderer(items[ii], ii, items));
    }
  }
  return mapped;
}

module.exports = mapWithSeparator;
}, 299, null, "mapWithSeparator");
__d(/* openFileInEditor */function(global, require, module, exports) {
'use strict';

var getDevServer = require(196           ); // 196 = getDevServer

function openFileInEditor(file, lineNumber) {
  fetch(getDevServer().url + 'open-stack-frame', {
    method: 'POST',
    body: JSON.stringify({ file: file, lineNumber: lineNumber })
  });
}

module.exports = openFileInEditor;
}, 300, null, "openFileInEditor");
__d(/* NetworkOverlay */function(global, require, module, exports) {
'use strict';

var ListView = require(277       ); // 277 = ListView
var React = require(76     ); // 76 = React
var ScrollView = require(265         ); // 265 = ScrollView
var StyleSheet = require(99          ); // 99 = StyleSheet
var Text = require(183   ); // 183 = Text
var TouchableHighlight = require(296                 ); // 296 = TouchableHighlight
var View = require(119   ); // 119 = View
var WebSocketInterceptor = require(302                   ); // 302 = WebSocketInterceptor
var XHRInterceptor = require(303             ); // 303 = XHRInterceptor

var LISTVIEW_CELL_HEIGHT = 15;
var SEPARATOR_THICKNESS = 2;

var nextXHRId = 0;

var NetworkOverlay = function (_React$Component) {
  babelHelpers.inherits(NetworkOverlay, _React$Component);

  function NetworkOverlay(props) {
    babelHelpers.classCallCheck(this, NetworkOverlay);

    var _this = babelHelpers.possibleConstructorReturn(this, (NetworkOverlay.__proto__ || Object.getPrototypeOf(NetworkOverlay)).call(this, props));

    _this._requests = [];
    _this._detailViewItems = [];
    _this._listViewDataSource = new ListView.DataSource({ rowHasChanged: function rowHasChanged(r1, r2) {
        return r1 !== r2;
      } });
    _this.state = {
      dataSource: _this._listViewDataSource.cloneWithRows([]),
      newDetailInfo: false,
      detailRowID: null
    };
    _this._listViewHighlighted = false;
    _this._listViewHeight = 0;
    _this._captureRequestListView = _this._captureRequestListView.bind(_this);
    _this._captureDetailScrollView = _this._captureDetailScrollView.bind(_this);
    _this._listViewOnLayout = _this._listViewOnLayout.bind(_this);
    _this._renderRow = _this._renderRow.bind(_this);
    _this._renderScrollComponent = _this._renderScrollComponent.bind(_this);
    _this._closeButtonClicked = _this._closeButtonClicked.bind(_this);
    _this._socketIdMap = {};
    _this._xhrIdMap = {};
    return _this;
  }

  babelHelpers.createClass(NetworkOverlay, [{
    key: '_enableXHRInterception',
    value: function _enableXHRInterception() {
      var _this2 = this;

      if (XHRInterceptor.isInterceptorEnabled()) {
        return;
      }

      XHRInterceptor.setOpenCallback(function (method, url, xhr) {
        xhr._index = nextXHRId++;
        var xhrIndex = _this2._requests.length;
        _this2._xhrIdMap[xhr._index] = xhrIndex;

        var _xhr = {
          'type': 'XMLHttpRequest',
          'method': method,
          'url': url
        };
        _this2._requests.push(_xhr);
        _this2._detailViewItems.push([]);
        _this2._genDetailViewItem(xhrIndex);
        _this2.setState({ dataSource: _this2._listViewDataSource.cloneWithRows(_this2._requests) }, _this2._scrollToBottom());
      });

      XHRInterceptor.setRequestHeaderCallback(function (header, value, xhr) {
        var xhrIndex = _this2._getRequestIndexByXHRID(xhr._index);
        if (xhrIndex === -1) {
          return;
        }
        var networkInfo = _this2._requests[xhrIndex];
        if (!networkInfo.requestHeaders) {
          networkInfo.requestHeaders = {};
        }
        networkInfo.requestHeaders[header] = value;
        _this2._genDetailViewItem(xhrIndex);
      });

      XHRInterceptor.setSendCallback(function (data, xhr) {
        var xhrIndex = _this2._getRequestIndexByXHRID(xhr._index);
        if (xhrIndex === -1) {
          return;
        }
        _this2._requests[xhrIndex].dataSent = data;
        _this2._genDetailViewItem(xhrIndex);
      });

      XHRInterceptor.setHeaderReceivedCallback(function (type, size, responseHeaders, xhr) {
        var xhrIndex = _this2._getRequestIndexByXHRID(xhr._index);
        if (xhrIndex === -1) {
          return;
        }
        var networkInfo = _this2._requests[xhrIndex];
        networkInfo.responseContentType = type;
        networkInfo.responseSize = size;
        networkInfo.responseHeaders = responseHeaders;
        _this2._genDetailViewItem(xhrIndex);
      });

      XHRInterceptor.setResponseCallback(function (status, timeout, response, responseURL, responseType, xhr) {
        var xhrIndex = _this2._getRequestIndexByXHRID(xhr._index);
        if (xhrIndex === -1) {
          return;
        }
        var networkInfo = _this2._requests[xhrIndex];
        networkInfo.status = status;
        networkInfo.timeout = timeout;
        networkInfo.response = response;
        networkInfo.responseURL = responseURL;
        networkInfo.responseType = responseType;
        _this2._genDetailViewItem(xhrIndex);
      });

      XHRInterceptor.enableInterception();
    }
  }, {
    key: '_enableWebSocketInterception',
    value: function _enableWebSocketInterception() {
      var _this3 = this;

      if (WebSocketInterceptor.isInterceptorEnabled()) {
        return;
      }

      WebSocketInterceptor.setConnectCallback(function (url, protocols, options, socketId) {
        var socketIndex = _this3._requests.length;
        _this3._socketIdMap[socketId] = socketIndex;
        var _webSocket = {
          'type': 'WebSocket',
          'url': url,
          'protocols': protocols
        };
        _this3._requests.push(_webSocket);
        _this3._detailViewItems.push([]);
        _this3._genDetailViewItem(socketIndex);
        _this3.setState({ dataSource: _this3._listViewDataSource.cloneWithRows(_this3._requests) }, _this3._scrollToBottom());
      });

      WebSocketInterceptor.setCloseCallback(function (statusCode, closeReason, socketId) {
        var socketIndex = _this3._socketIdMap[socketId];
        if (socketIndex === undefined) {
          return;
        }
        if (statusCode !== null && closeReason !== null) {
          _this3._requests[socketIndex].status = statusCode;
          _this3._requests[socketIndex].closeReason = closeReason;
        }
        _this3._genDetailViewItem(socketIndex);
      });

      WebSocketInterceptor.setSendCallback(function (data, socketId) {
        var socketIndex = _this3._socketIdMap[socketId];
        if (socketIndex === undefined) {
          return;
        }
        if (!_this3._requests[socketIndex].messages) {
          _this3._requests[socketIndex].messages = '';
        }
        _this3._requests[socketIndex].messages += 'Sent: ' + JSON.stringify(data) + '\n';
        _this3._genDetailViewItem(socketIndex);
      });

      WebSocketInterceptor.setOnMessageCallback(function (socketId, message) {
        var socketIndex = _this3._socketIdMap[socketId];
        if (socketIndex === undefined) {
          return;
        }
        if (!_this3._requests[socketIndex].messages) {
          _this3._requests[socketIndex].messages = '';
        }
        _this3._requests[socketIndex].messages += 'Received: ' + JSON.stringify(message) + '\n';
        _this3._genDetailViewItem(socketIndex);
      });

      WebSocketInterceptor.setOnCloseCallback(function (socketId, message) {
        var socketIndex = _this3._socketIdMap[socketId];
        if (socketIndex === undefined) {
          return;
        }
        _this3._requests[socketIndex].serverClose = message;
        _this3._genDetailViewItem(socketIndex);
      });

      WebSocketInterceptor.setOnErrorCallback(function (socketId, message) {
        var socketIndex = _this3._socketIdMap[socketId];
        if (socketIndex === undefined) {
          return;
        }
        _this3._requests[socketIndex].serverError = message;
        _this3._genDetailViewItem(socketIndex);
      });

      WebSocketInterceptor.enableInterception();
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this._enableXHRInterception();
      this._enableWebSocketInterception();
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      XHRInterceptor.disableInterception();
      WebSocketInterceptor.disableInterception();
    }
  }, {
    key: '_renderRow',
    value: function _renderRow(rowData, sectionID, rowID, highlightRow) {
      var _this4 = this;

      var urlCellViewStyle = styles.urlEvenCellView;
      var methodCellViewStyle = styles.methodEvenCellView;
      if (rowID % 2 === 1) {
        urlCellViewStyle = styles.urlOddCellView;
        methodCellViewStyle = styles.methodOddCellView;
      }
      return React.createElement(
        TouchableHighlight,
        { onPress: function onPress() {
            _this4._pressRow(rowID);
            highlightRow(sectionID, rowID);
          } },
        React.createElement(
          View,
          null,
          React.createElement(
            View,
            { style: styles.tableRow },
            React.createElement(
              View,
              { style: urlCellViewStyle },
              React.createElement(
                Text,
                { style: styles.cellText, numberOfLines: 1 },
                rowData.url
              )
            ),
            React.createElement(
              View,
              { style: methodCellViewStyle },
              React.createElement(
                Text,
                { style: styles.cellText, numberOfLines: 1 },
                this._getTypeShortName(rowData.type)
              )
            )
          )
        )
      );
    }
  }, {
    key: '_renderSeperator',
    value: function _renderSeperator(sectionID, rowID, adjacentRowHighlighted) {
      return React.createElement(View, {
        key: sectionID + '-' + rowID,
        style: {
          height: adjacentRowHighlighted ? SEPARATOR_THICKNESS : 0,
          backgroundColor: adjacentRowHighlighted ? '#3B5998' : '#CCCCCC'
        }
      });
    }
  }, {
    key: '_scrollToBottom',
    value: function _scrollToBottom() {
      if (this._listView) {
        var scrollResponder = this._listView.getScrollResponder();
        if (scrollResponder) {
          var scrollY = Math.max(this._requests.length * LISTVIEW_CELL_HEIGHT + (this._listViewHighlighted ? 2 * SEPARATOR_THICKNESS : 0) - this._listViewHeight, 0);
          scrollResponder.scrollResponderScrollTo({
            x: 0,
            y: scrollY,
            animated: true
          });
        }
      }
    }
  }, {
    key: '_captureRequestListView',
    value: function _captureRequestListView(listRef) {
      this._listView = listRef;
    }
  }, {
    key: '_listViewOnLayout',
    value: function _listViewOnLayout(event) {
      var height = event.nativeEvent.layout.height;

      this._listViewHeight = height;
    }
  }, {
    key: '_pressRow',
    value: function _pressRow(rowID) {
      this._listViewHighlighted = true;
      this.setState({ detailRowID: rowID }, this._scrollToTop());
    }
  }, {
    key: '_scrollToTop',
    value: function _scrollToTop() {
      if (this._scrollView) {
        this._scrollView.scrollTo({
          y: 0,
          animated: false
        });
      }
    }
  }, {
    key: '_captureDetailScrollView',
    value: function _captureDetailScrollView(scrollRef) {
      this._scrollView = scrollRef;
    }
  }, {
    key: '_closeButtonClicked',
    value: function _closeButtonClicked() {
      this.setState({ detailRowID: null });
    }
  }, {
    key: '_getStringByValue',
    value: function _getStringByValue(value) {
      if (value === undefined) {
        return 'undefined';
      }
      if (typeof value === 'object') {
        return JSON.stringify(value);
      }
      if (typeof value === 'string' && value.length > 500) {
        return String(value).substr(0, 500).concat('\n***TRUNCATED TO 500 CHARACTERS***');
      }
      return value;
    }
  }, {
    key: '_getRequestIndexByXHRID',
    value: function _getRequestIndexByXHRID(index) {
      if (index === undefined) {
        return -1;
      }
      var xhrIndex = this._xhrIdMap[index];
      if (xhrIndex === undefined) {
        return -1;
      } else {
        return xhrIndex;
      }
    }
  }, {
    key: '_getTypeShortName',
    value: function _getTypeShortName(type) {
      if (type === 'XMLHttpRequest') {
        return 'XHR';
      } else if (type === 'WebSocket') {
        return 'WS';
      }

      return '';
    }
  }, {
    key: '_genDetailViewItem',
    value: function _genDetailViewItem(index) {
      this._detailViewItems[index] = [];
      var detailViewItem = this._detailViewItems[index];
      var requestItem = this._requests[index];
      for (var _key in requestItem) {
        detailViewItem.push(React.createElement(
          View,
          { style: styles.detailViewRow, key: _key },
          React.createElement(
            Text,
            { style: [styles.detailViewText, styles.detailKeyCellView] },
            _key
          ),
          React.createElement(
            Text,
            { style: [styles.detailViewText, styles.detailValueCellView] },
            this._getStringByValue(requestItem[_key])
          )
        ));
      }

      if (this.state.detailRowID != null && Number(this.state.detailRowID) === index) {
        this.setState({ newDetailInfo: true });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      return React.createElement(
        View,
        { style: styles.container },
        this.state.detailRowID != null && React.createElement(
          TouchableHighlight,
          {
            style: styles.closeButton,
            onPress: this._closeButtonClicked },
          React.createElement(
            View,
            null,
            React.createElement(
              Text,
              { style: styles.clostButtonText },
              'v'
            )
          )
        ),
        this.state.detailRowID != null && React.createElement(
          ScrollView,
          {
            style: styles.detailScrollView,
            ref: this._captureDetailScrollView },
          this._detailViewItems[this.state.detailRowID]
        ),
        React.createElement(
          View,
          { style: styles.listViewTitle },
          this._requests.length > 0 && React.createElement(
            View,
            { style: styles.tableRow },
            React.createElement(
              View,
              { style: styles.urlTitleCellView },
              React.createElement(
                Text,
                { style: styles.cellText, numberOfLines: 1 },
                'URL'
              )
            ),
            React.createElement(
              View,
              { style: styles.methodTitleCellView },
              React.createElement(
                Text,
                { style: styles.cellText, numberOfLines: 1 },
                'Type'
              )
            )
          )
        ),
        React.createElement(ListView, {
          style: styles.listView,
          ref: this._captureRequestListView,
          dataSource: this.state.dataSource,
          renderRow: this._renderRow,
          enableEmptySections: true,
          renderSeparator: this._renderSeperator,
          onLayout: this._listViewOnLayout
        })
      );
    }
  }]);
  return NetworkOverlay;
}(React.Component);

var styles = StyleSheet.create({
  container: {
    paddingTop: 10,
    paddingBottom: 10,
    paddingLeft: 5,
    paddingRight: 5
  },
  listViewTitle: {
    height: 20
  },
  listView: {
    flex: 1,
    height: 60
  },
  tableRow: {
    flexDirection: 'row',
    flex: 1
  },
  cellText: {
    color: 'white',
    fontSize: 12
  },
  methodTitleCellView: {
    height: 18,
    borderColor: '#DCD7CD',
    borderTopWidth: 1,
    borderBottomWidth: 1,
    borderRightWidth: 1,
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#444',
    flex: 1
  },
  urlTitleCellView: {
    height: 18,
    borderColor: '#DCD7CD',
    borderTopWidth: 1,
    borderBottomWidth: 1,
    borderLeftWidth: 1,
    borderRightWidth: 1,
    justifyContent: 'center',
    backgroundColor: '#444',
    flex: 5,
    paddingLeft: 3
  },
  methodOddCellView: {
    height: 15,
    borderColor: '#DCD7CD',
    borderRightWidth: 1,
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#000',
    flex: 1
  },
  urlOddCellView: {
    height: 15,
    borderColor: '#DCD7CD',
    borderLeftWidth: 1,
    borderRightWidth: 1,
    justifyContent: 'center',
    backgroundColor: '#000',
    flex: 5,
    paddingLeft: 3
  },
  methodEvenCellView: {
    height: 15,
    borderColor: '#DCD7CD',
    borderRightWidth: 1,
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#888',
    flex: 1
  },
  urlEvenCellView: {
    height: 15,
    borderColor: '#DCD7CD',
    borderLeftWidth: 1,
    borderRightWidth: 1,
    justifyContent: 'center',
    backgroundColor: '#888',
    flex: 5,
    paddingLeft: 3
  },
  detailScrollView: {
    flex: 1,
    height: 180,
    marginTop: 5,
    marginBottom: 5
  },
  detailKeyCellView: {
    flex: 1.3
  },
  detailValueCellView: {
    flex: 2
  },
  detailViewRow: {
    flexDirection: 'row',
    paddingHorizontal: 3
  },
  detailViewText: {
    color: 'white',
    fontSize: 11
  },
  clostButtonText: {
    color: 'white',
    fontSize: 10
  },
  closeButton: {
    marginTop: 5,
    backgroundColor: '#888',
    justifyContent: 'center',
    alignItems: 'center'
  }
});

module.exports = NetworkOverlay;
}, 301, null, "NetworkOverlay");
__d(/* WebSocketInterceptor */function(global, require, module, exports) {
'use strict';

var RCTWebSocketModule = require(27             ).WebSocketModule; // 27 = NativeModules
var NativeEventEmitter = require(52                  ); // 52 = NativeEventEmitter

var base64 = require(65         ); // 65 = base64-js

var originalRCTWebSocketConnect = RCTWebSocketModule.connect;
var originalRCTWebSocketSend = RCTWebSocketModule.send;
var originalRCTWebSocketSendBinary = RCTWebSocketModule.sendBinary;
var originalRCTWebSocketClose = RCTWebSocketModule.close;

var eventEmitter = void 0;
var subscriptions = void 0;

var closeCallback = void 0;
var sendCallback = void 0;
var connectCallback = void 0;
var onOpenCallback = void 0;
var onMessageCallback = void 0;
var onErrorCallback = void 0;
var onCloseCallback = void 0;

var _isInterceptorEnabled = false;

var WebSocketInterceptor = {
  setCloseCallback: function setCloseCallback(callback) {
    closeCallback = callback;
  },
  setSendCallback: function setSendCallback(callback) {
    sendCallback = callback;
  },
  setConnectCallback: function setConnectCallback(callback) {
    connectCallback = callback;
  },
  setOnOpenCallback: function setOnOpenCallback(callback) {
    onOpenCallback = callback;
  },
  setOnMessageCallback: function setOnMessageCallback(callback) {
    onMessageCallback = callback;
  },
  setOnErrorCallback: function setOnErrorCallback(callback) {
    onErrorCallback = callback;
  },
  setOnCloseCallback: function setOnCloseCallback(callback) {
    onCloseCallback = callback;
  },
  isInterceptorEnabled: function isInterceptorEnabled() {
    return _isInterceptorEnabled;
  },
  _unregisterEvents: function _unregisterEvents() {
    subscriptions.forEach(function (e) {
      return e.remove();
    });
    subscriptions = [];
  },
  _registerEvents: function _registerEvents() {
    subscriptions = [eventEmitter.addListener('websocketMessage', function (ev) {
      if (onMessageCallback) {
        onMessageCallback(ev.id, ev.type === 'binary' ? WebSocketInterceptor._arrayBufferToString(ev.data) : ev.data);
      }
    }), eventEmitter.addListener('websocketOpen', function (ev) {
      if (onOpenCallback) {
        onOpenCallback(ev.id);
      }
    }), eventEmitter.addListener('websocketClosed', function (ev) {
      if (onCloseCallback) {
        onCloseCallback(ev.id, { code: ev.code, reason: ev.reason });
      }
    }), eventEmitter.addListener('websocketFailed', function (ev) {
      if (onErrorCallback) {
        onErrorCallback(ev.id, { message: ev.message });
      }
    })];
  },
  enableInterception: function enableInterception() {
    if (_isInterceptorEnabled) {
      return;
    }
    eventEmitter = new NativeEventEmitter(RCTWebSocketModule);
    WebSocketInterceptor._registerEvents();

    RCTWebSocketModule.connect = function (url, protocols, options, socketId) {
      if (connectCallback) {
        connectCallback(url, protocols, options, socketId);
      }
      originalRCTWebSocketConnect.apply(this, arguments);
    };

    RCTWebSocketModule.send = function (data, socketId) {
      if (sendCallback) {
        sendCallback(data, socketId);
      }
      originalRCTWebSocketSend.apply(this, arguments);
    };

    RCTWebSocketModule.sendBinary = function (data, socketId) {
      if (sendCallback) {
        sendCallback(WebSocketInterceptor._arrayBufferToString(data), socketId);
      }
      originalRCTWebSocketSendBinary.apply(this, arguments);
    };

    RCTWebSocketModule.close = function () {
      if (closeCallback) {
        if (arguments.length === 3) {
          closeCallback(arguments[0], arguments[1], arguments[2]);
        } else {
          closeCallback(null, null, arguments[0]);
        }
      }
      originalRCTWebSocketClose.apply(this, arguments);
    };

    _isInterceptorEnabled = true;
  },
  _arrayBufferToString: function _arrayBufferToString(data) {
    var value = base64.toByteArray(data).buffer;
    if (value === undefined || value === null) {
      return '(no value)';
    }
    if (typeof ArrayBuffer !== 'undefined' && typeof Uint8Array !== 'undefined' && value instanceof ArrayBuffer) {
      return 'ArrayBuffer {' + String(Array.from(new Uint8Array(value))) + '}';
    }
    return value;
  },
  disableInterception: function disableInterception() {
    if (!_isInterceptorEnabled) {
      return;
    }
    _isInterceptorEnabled = false;
    RCTWebSocketModule.send = originalRCTWebSocketSend;
    RCTWebSocketModule.sendBinary = originalRCTWebSocketSendBinary;
    RCTWebSocketModule.close = originalRCTWebSocketClose;
    RCTWebSocketModule.connect = originalRCTWebSocketConnect;

    connectCallback = null;
    closeCallback = null;
    sendCallback = null;
    onOpenCallback = null;
    onMessageCallback = null;
    onCloseCallback = null;
    onErrorCallback = null;

    WebSocketInterceptor._unregisterEvents();
  }
};

module.exports = WebSocketInterceptor;
}, 302, null, "WebSocketInterceptor");
__d(/* XHRInterceptor */function(global, require, module, exports) {
'use strict';

var XMLHttpRequest = require(209             ); // 209 = XMLHttpRequest
var originalXHROpen = XMLHttpRequest.prototype.open;
var originalXHRSend = XMLHttpRequest.prototype.send;
var originalXHRSetRequestHeader = XMLHttpRequest.prototype.setRequestHeader;

var openCallback;
var sendCallback;
var requestHeaderCallback;
var headerReceivedCallback;
var responseCallback;

var _isInterceptorEnabled = false;

var XHRInterceptor = {
  setOpenCallback: function setOpenCallback(callback) {
    openCallback = callback;
  },
  setSendCallback: function setSendCallback(callback) {
    sendCallback = callback;
  },
  setHeaderReceivedCallback: function setHeaderReceivedCallback(callback) {
    headerReceivedCallback = callback;
  },
  setResponseCallback: function setResponseCallback(callback) {
    responseCallback = callback;
  },
  setRequestHeaderCallback: function setRequestHeaderCallback(callback) {
    requestHeaderCallback = callback;
  },
  isInterceptorEnabled: function isInterceptorEnabled() {
    return _isInterceptorEnabled;
  },
  enableInterception: function enableInterception() {
    if (_isInterceptorEnabled) {
      return;
    }

    XMLHttpRequest.prototype.open = function (method, url) {
      if (openCallback) {
        openCallback(method, url, this);
      }
      originalXHROpen.apply(this, arguments);
    };

    XMLHttpRequest.prototype.setRequestHeader = function (header, value) {
      if (requestHeaderCallback) {
        requestHeaderCallback(header, value, this);
      }
      originalXHRSetRequestHeader.apply(this, arguments);
    };

    XMLHttpRequest.prototype.send = function (data) {
      var _this = this;

      if (sendCallback) {
        sendCallback(data, this);
      }
      if (this.addEventListener) {
        this.addEventListener('readystatechange', function () {
          if (!_isInterceptorEnabled) {
            return;
          }
          if (_this.readyState === _this.HEADERS_RECEIVED) {
            var contentTypeString = _this.getResponseHeader('Content-Type');
            var contentLengthString = _this.getResponseHeader('Content-Length');
            var responseContentType = void 0,
                responseSize = void 0;
            if (contentTypeString) {
              responseContentType = contentTypeString.split(';')[0];
            }
            if (contentLengthString) {
              responseSize = parseInt(contentLengthString, 10);
            }
            if (headerReceivedCallback) {
              headerReceivedCallback(responseContentType, responseSize, _this.getAllResponseHeaders(), _this);
            }
          }
          if (_this.readyState === _this.DONE) {
            if (responseCallback) {
              responseCallback(_this.status, _this.timeout, _this.response, _this.responseURL, _this.responseType, _this);
            }
          }
        }, false);
      }
      originalXHRSend.apply(this, arguments);
    };
    _isInterceptorEnabled = true;
  },
  disableInterception: function disableInterception() {
    if (!_isInterceptorEnabled) {
      return;
    }
    _isInterceptorEnabled = false;
    XMLHttpRequest.prototype.send = originalXHRSend;
    XMLHttpRequest.prototype.open = originalXHROpen;
    XMLHttpRequest.prototype.setRequestHeader = originalXHRSetRequestHeader;
    responseCallback = null;
    openCallback = null;
    sendCallback = null;
    headerReceivedCallback = null;
    requestHeaderCallback = null;
  }
};

module.exports = XHRInterceptor;
}, 303, null, "XHRInterceptor");
__d(/* PerformanceOverlay */function(global, require, module, exports) {
'use strict';

var PerformanceLogger = require(229                ); // 229 = PerformanceLogger
var React = require(76     ); // 76 = React
var StyleSheet = require(99          ); // 99 = StyleSheet
var Text = require(183   ); // 183 = Text
var View = require(119   ); // 119 = View

var PerformanceOverlay = function (_React$Component) {
  babelHelpers.inherits(PerformanceOverlay, _React$Component);

  function PerformanceOverlay() {
    babelHelpers.classCallCheck(this, PerformanceOverlay);
    return babelHelpers.possibleConstructorReturn(this, (PerformanceOverlay.__proto__ || Object.getPrototypeOf(PerformanceOverlay)).apply(this, arguments));
  }

  babelHelpers.createClass(PerformanceOverlay, [{
    key: 'render',
    value: function render() {
      var perfLogs = PerformanceLogger.getTimespans();
      var items = [];

      for (var key in perfLogs) {
        if (perfLogs[key].totalTime) {
          var unit = key === 'BundleSize' ? 'b' : 'ms';
          items.push(React.createElement(
            View,
            { style: styles.row, key: key },
            React.createElement(
              Text,
              { style: [styles.text, styles.label] },
              key
            ),
            React.createElement(
              Text,
              { style: [styles.text, styles.totalTime] },
              perfLogs[key].totalTime + unit
            )
          ));
        }
      }

      return React.createElement(
        View,
        { style: styles.container },
        items
      );
    }
  }]);
  return PerformanceOverlay;
}(React.Component);

var styles = StyleSheet.create({
  container: {
    height: 100,
    paddingTop: 10
  },
  label: {
    flex: 1
  },
  row: {
    flexDirection: 'row',
    paddingHorizontal: 10
  },
  text: {
    color: 'white',
    fontSize: 12
  },
  totalTime: {
    paddingRight: 100
  }
});

module.exports = PerformanceOverlay;
}, 304, null, "PerformanceOverlay");
__d(/* YellowBox */function(global, require, module, exports) {

'use strict';

var EventEmitter = require(53            ); // 53 = EventEmitter
var Platform = require(26        ); // 26 = Platform
var React = require(76     ); // 76 = React
var StyleSheet = require(99          ); // 99 = StyleSheet

var infoLog = require(255      ); // 255 = infoLog
var openFileInEditor = require(300               ); // 300 = openFileInEditor
var parseErrorStack = require(43               ); // 43 = parseErrorStack
var symbolicateStackTrace = require(195                    ); // 195 = symbolicateStackTrace

var _warningEmitter = new EventEmitter();
var _warningMap = new Map();

if (__DEV__) {
  var _console = console,
      error = _console.error,
      warn = _console.warn;


  console.error = function () {
    error.apply(console, arguments);

    if (typeof arguments[0] === 'string' && arguments[0].startsWith('Warning: ')) {
      updateWarningMap.apply(null, arguments);
    }
  };

  console.warn = function () {
    warn.apply(console, arguments);

    if (typeof arguments[0] === 'string' && arguments[0].startsWith('(ADVICE)')) {
      return;
    }

    updateWarningMap.apply(null, arguments);
  };

  if (Platform.isTesting) {
    console.disableYellowBox = true;
  }
}

function sprintf(format) {
  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  var index = 0;
  return format.replace(/%s/g, function (match) {
    return args[index++];
  });
}

function updateWarningMap(format) {
  if (console.disableYellowBox) {
    return;
  }
  var stringifySafe = require(47             ); // 47 = stringifySafe

  format = String(format);
  var argCount = (format.match(/%s/g) || []).length;

  for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    args[_key2 - 1] = arguments[_key2];
  }

  var warning = [sprintf.apply(undefined, [format].concat(babelHelpers.toConsumableArray(args.slice(0, argCount))))].concat(babelHelpers.toConsumableArray(args.slice(argCount).map(stringifySafe))).join(' ');

  var warningInfo = _warningMap.get(warning);
  if (warningInfo) {
    warningInfo.count += 1;
  } else {
    var _error = new Error();
    _error.framesToPop = 2;

    _warningMap.set(warning, {
      count: 1,
      stacktrace: parseErrorStack(_error),
      symbolicated: false
    });
  }

  _warningEmitter.emit('warning', _warningMap);
}

function ensureSymbolicatedWarning(warning) {
  var prevWarningInfo = _warningMap.get(warning);
  if (!prevWarningInfo || prevWarningInfo.symbolicated) {
    return;
  }
  prevWarningInfo.symbolicated = true;

  symbolicateStackTrace(prevWarningInfo.stacktrace).then(function (stack) {
    var nextWarningInfo = _warningMap.get(warning);
    if (nextWarningInfo) {
      nextWarningInfo.stacktrace = stack;
      _warningEmitter.emit('warning', _warningMap);
    }
  }, function (error) {
    var nextWarningInfo = _warningMap.get(warning);
    if (nextWarningInfo) {
      infoLog('Failed to symbolicate warning, "%s":', warning, error);
      _warningEmitter.emit('warning', _warningMap);
    }
  });
}

function isWarningIgnored(warning) {
  return Array.isArray(console.ignoredYellowBox) && console.ignoredYellowBox.some(function (ignorePrefix) {
    return warning.startsWith(String(ignorePrefix));
  });
}

var WarningRow = function WarningRow(_ref) {
  var count = _ref.count,
      warning = _ref.warning,
      onPress = _ref.onPress;

  var Text = require(183   ); // 183 = Text
  var TouchableHighlight = require(296                 ); // 296 = TouchableHighlight
  var View = require(119   ); // 119 = View

  var countText = count > 1 ? React.createElement(
    Text,
    { style: styles.listRowCount },
    '(' + count + ') '
  ) : null;

  return React.createElement(
    View,
    { style: styles.listRow },
    React.createElement(
      TouchableHighlight,
      {
        activeOpacity: 0.5,
        onPress: onPress,
        style: styles.listRowContent,
        underlayColor: 'transparent' },
      React.createElement(
        Text,
        { style: styles.listRowText, numberOfLines: 2 },
        countText,
        warning
      )
    )
  );
};

var StackRow = function StackRow(_ref2) {
  var frame = _ref2.frame;

  var Text = require(183   ); // 183 = Text
  var TouchableHighlight = require(296                 ); // 296 = TouchableHighlight
  var file = frame.file,
      lineNumber = frame.lineNumber;

  var fileParts = file.split('/');
  var fileName = fileParts[fileParts.length - 1];

  return React.createElement(
    TouchableHighlight,
    {
      activeOpacity: 0.5,
      style: styles.openInEditorButton,
      underlayColor: 'transparent',
      onPress: openFileInEditor.bind(null, file, lineNumber) },
    React.createElement(
      Text,
      { style: styles.inspectorCountText },
      fileName,
      ':',
      lineNumber
    )
  );
};

var WarningInspector = function WarningInspector(_ref3) {
  var warningInfo = _ref3.warningInfo,
      warning = _ref3.warning,
      stacktraceVisible = _ref3.stacktraceVisible,
      onDismiss = _ref3.onDismiss,
      onDismissAll = _ref3.onDismissAll,
      onMinimize = _ref3.onMinimize,
      toggleStacktrace = _ref3.toggleStacktrace;

  var ScrollView = require(265         ); // 265 = ScrollView
  var Text = require(183   ); // 183 = Text
  var TouchableHighlight = require(296                 ); // 296 = TouchableHighlight
  var View = require(119   ); // 119 = View

  var _ref4 = warningInfo || {},
      count = _ref4.count,
      stacktrace = _ref4.stacktrace;

  var countSentence = 'Warning encountered ' + count + ' time' + (count - 1 ? 's' : '') + '.';

  var stacktraceList = void 0;
  if (stacktraceVisible && stacktrace) {
    stacktraceList = React.createElement(
      View,
      { style: styles.stacktraceList },
      stacktrace.map(function (frame, ii) {
        return React.createElement(StackRow, { frame: frame, key: ii });
      })
    );
  }

  return React.createElement(
    View,
    { style: styles.inspector },
    React.createElement(
      View,
      { style: styles.inspectorCount },
      React.createElement(
        Text,
        { style: styles.inspectorCountText },
        countSentence
      ),
      React.createElement(
        TouchableHighlight,
        { onPress: toggleStacktrace, underlayColor: 'transparent' },
        React.createElement(
          Text,
          { style: styles.inspectorButtonText },
          stacktraceVisible ? '▼' : '▶',
          ' Stacktrace'
        )
      )
    ),
    React.createElement(
      ScrollView,
      { style: styles.inspectorWarning },
      stacktraceList,
      React.createElement(
        Text,
        { style: styles.inspectorWarningText },
        warning
      )
    ),
    React.createElement(
      View,
      { style: styles.inspectorButtons },
      React.createElement(
        TouchableHighlight,
        {
          activeOpacity: 0.5,
          onPress: onMinimize,
          style: styles.inspectorButton,
          underlayColor: 'transparent' },
        React.createElement(
          Text,
          { style: styles.inspectorButtonText },
          'Minimize'
        )
      ),
      React.createElement(
        TouchableHighlight,
        {
          activeOpacity: 0.5,
          onPress: onDismiss,
          style: styles.inspectorButton,
          underlayColor: 'transparent' },
        React.createElement(
          Text,
          { style: styles.inspectorButtonText },
          'Dismiss'
        )
      ),
      React.createElement(
        TouchableHighlight,
        {
          activeOpacity: 0.5,
          onPress: onDismissAll,
          style: styles.inspectorButton,
          underlayColor: 'transparent' },
        React.createElement(
          Text,
          { style: styles.inspectorButtonText },
          'Dismiss All'
        )
      )
    )
  );
};

var YellowBox = function (_React$Component) {
  babelHelpers.inherits(YellowBox, _React$Component);

  function YellowBox(props, context) {
    babelHelpers.classCallCheck(this, YellowBox);

    var _this = babelHelpers.possibleConstructorReturn(this, (YellowBox.__proto__ || Object.getPrototypeOf(YellowBox)).call(this, props, context));

    _this.state = {
      inspecting: null,
      stacktraceVisible: false,
      warningMap: _warningMap
    };
    _this.dismissWarning = function (warning) {
      var _this$state = _this.state,
          inspecting = _this$state.inspecting,
          warningMap = _this$state.warningMap;

      if (warning) {
        warningMap.delete(warning);
      } else {
        warningMap.clear();
      }
      _this.setState({
        inspecting: warning && inspecting !== warning ? inspecting : null,
        warningMap: warningMap
      });
    };
    return _this;
  }

  babelHelpers.createClass(YellowBox, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      var scheduled = null;
      this._listener = _warningEmitter.addListener('warning', function (warningMap) {
        scheduled = scheduled || setImmediate(function () {
          scheduled = null;
          _this2.setState({
            warningMap: warningMap
          });
        });
      });
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      var inspecting = this.state.inspecting;

      if (inspecting != null) {
        ensureSymbolicatedWarning(inspecting);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this._listener) {
        this._listener.remove();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      if (console.disableYellowBox || this.state.warningMap.size === 0) {
        return null;
      }
      var ScrollView = require(265         ); // 265 = ScrollView
      var View = require(119   ); // 119 = View

      var _state = this.state,
          inspecting = _state.inspecting,
          stacktraceVisible = _state.stacktraceVisible;

      var inspector = inspecting !== null ? React.createElement(WarningInspector, {
        warningInfo: this.state.warningMap.get(inspecting),
        warning: inspecting,
        stacktraceVisible: stacktraceVisible,
        onDismiss: function onDismiss() {
          return _this3.dismissWarning(inspecting);
        },
        onDismissAll: function onDismissAll() {
          return _this3.dismissWarning(null);
        },
        onMinimize: function onMinimize() {
          return _this3.setState({ inspecting: null });
        },
        toggleStacktrace: function toggleStacktrace() {
          return _this3.setState({ stacktraceVisible: !stacktraceVisible });
        }
      }) : null;

      var rows = [];
      this.state.warningMap.forEach(function (warningInfo, warning) {
        if (!isWarningIgnored(warning)) {
          rows.push(React.createElement(WarningRow, {
            key: warning,
            count: warningInfo.count,
            warning: warning,
            onPress: function onPress() {
              return _this3.setState({ inspecting: warning });
            },
            onDismiss: function onDismiss() {
              return _this3.dismissWarning(warning);
            }
          }));
        }
      });

      var listStyle = [styles.list, { height: Math.min(rows.length, 4.4) * (rowGutter + rowHeight) }];
      return React.createElement(
        View,
        { style: inspector ? styles.fullScreen : listStyle },
        React.createElement(
          ScrollView,
          { style: listStyle, scrollsToTop: false },
          rows
        ),
        inspector
      );
    }
  }]);
  return YellowBox;
}(React.Component);

var backgroundColor = function backgroundColor(opacity) {
  return 'rgba(250, 186, 48, ' + opacity + ')';
};
var textColor = 'white';
var rowGutter = 1;
var rowHeight = 46;

var elevation = Platform.OS === 'android' ? Number.MAX_SAFE_INTEGER : undefined;

var styles = StyleSheet.create({
  fullScreen: {
    backgroundColor: 'transparent',
    position: 'absolute',
    left: 0,
    right: 0,
    top: 0,
    bottom: 0,
    elevation: elevation
  },
  inspector: {
    backgroundColor: backgroundColor(0.95),
    flex: 1,
    paddingTop: 5,
    elevation: elevation
  },
  inspectorButtons: {
    flexDirection: 'row'
  },
  inspectorButton: {
    flex: 1,
    paddingVertical: 22,
    backgroundColor: backgroundColor(1)
  },
  stacktraceList: {
    paddingBottom: 5
  },
  inspectorButtonText: {
    color: textColor,
    fontSize: 14,
    opacity: 0.8,
    textAlign: 'center'
  },
  openInEditorButton: {
    paddingTop: 5,
    paddingBottom: 5
  },
  inspectorCount: {
    padding: 15,
    paddingBottom: 0,
    flexDirection: 'row',
    justifyContent: 'space-between'
  },
  inspectorCountText: {
    color: textColor,
    fontSize: 14
  },
  inspectorWarning: {
    flex: 1,
    paddingHorizontal: 15
  },
  inspectorWarningText: {
    color: textColor,
    fontSize: 16,
    fontWeight: '600'
  },
  list: {
    backgroundColor: 'transparent',
    position: 'absolute',
    left: 0,
    right: 0,
    bottom: 0,
    elevation: elevation
  },
  listRow: {
    position: 'relative',
    backgroundColor: backgroundColor(0.95),
    flex: 1,
    height: rowHeight,
    marginTop: rowGutter
  },
  listRowContent: {
    flex: 1
  },
  listRowCount: {
    color: 'rgba(255, 255, 255, 0.5)'
  },
  listRowText: {
    color: textColor,
    position: 'absolute',
    left: 0,
    top: Platform.OS === 'android' ? 5 : 7,
    marginLeft: 15,
    marginRight: 15
  }
});

module.exports = YellowBox;
}, 305, null, "YellowBox");
__d(/* I18nManager */function(global, require, module, exports) {
'use strict';

var I18nManager = require(27             ).I18nManager || { // 27 = NativeModules
  isRTL: false,
  allowRTL: function allowRTL() {},
  forceRTL: function forceRTL() {}
};

module.exports = I18nManager;
}, 306, null, "I18nManager");
__d(/* Navigator */function(global, require, module, exports) {
'use strict';

var AnimationsDebugModule = require(27             ).AnimationsDebugModule; // 27 = NativeModules
var Dimensions = require(101         ); // 101 = Dimensions
var InteractionMixin = require(308               ); // 308 = InteractionMixin
var NavigationContext = require(309                ); // 309 = NavigationContext
var NavigatorBreadcrumbNavigationBar = require(314                               ); // 314 = NavigatorBreadcrumbNavigationBar
var NavigatorNavigationBar = require(319                     ); // 319 = NavigatorNavigationBar
var NavigatorSceneConfigs = require(320                    ); // 320 = NavigatorSceneConfigs
var PanResponder = require(321           ); // 321 = PanResponder
var React = require(76     ); // 76 = React
var StyleSheet = require(99          ); // 99 = StyleSheet
var Subscribable = require(268           ); // 268 = Subscribable
var TVEventHandler = require(187             ); // 187 = TVEventHandler
var TimerMixin = require(248                ); // 248 = react-timer-mixin
var View = require(119   ); // 119 = View

var clamp = require(323    ); // 323 = clamp
var flattenStyle = require(23            ); // 23 = flattenStyle
var invariant = require(24                  ); // 24 = fbjs/lib/invariant
var rebound = require(324      ); // 324 = rebound

var PropTypes = React.PropTypes;

var SCREEN_WIDTH = Dimensions.get('window').width;
var SCREEN_HEIGHT = Dimensions.get('window').height;
var SCENE_DISABLED_NATIVE_PROPS = {
  pointerEvents: 'none',
  style: {
    top: SCREEN_HEIGHT,
    bottom: -SCREEN_HEIGHT,
    opacity: 0
  }
};

var __uid = 0;
function getuid() {
  return __uid++;
}

function getRouteID(route) {
  if (route === null || typeof route !== 'object') {
    return String(route);
  }

  var key = '__navigatorRouteID';

  if (!route.hasOwnProperty(key)) {
    Object.defineProperty(route, key, {
      enumerable: false,
      configurable: false,
      writable: false,
      value: getuid()
    });
  }
  return route[key];
}

var styles = StyleSheet.create({
  container: {
    flex: 1,
    overflow: 'hidden'
  },
  defaultSceneStyle: {
    position: 'absolute',
    left: 0,
    right: 0,
    bottom: 0,
    top: 0,
    transform: [{ translateX: 0 }, { translateY: 0 }, { scaleX: 1 }, { scaleY: 1 }, { rotate: '0deg' }, { skewX: '0deg' }, { skewY: '0deg' }]
  },
  baseScene: {
    position: 'absolute',
    overflow: 'hidden',
    left: 0,
    right: 0,
    bottom: 0,
    top: 0
  },
  disabledScene: {
    top: SCREEN_HEIGHT,
    bottom: -SCREEN_HEIGHT
  },
  transitioner: {
    flex: 1,
    backgroundColor: 'transparent',
    overflow: 'hidden'
  }
});

var GESTURE_ACTIONS = ['pop', 'jumpBack', 'jumpForward'];

var Navigator = React.createClass({
  displayName: 'Navigator',


  propTypes: {
    configureScene: PropTypes.func,

    renderScene: PropTypes.func.isRequired,

    initialRoute: PropTypes.object,

    initialRouteStack: PropTypes.arrayOf(PropTypes.object),

    onWillFocus: PropTypes.func,

    onDidFocus: PropTypes.func,

    navigationBar: PropTypes.node,

    navigator: PropTypes.object,

    sceneStyle: View.propTypes.style
  },

  statics: {
    BreadcrumbNavigationBar: NavigatorBreadcrumbNavigationBar,
    NavigationBar: NavigatorNavigationBar,
    SceneConfigs: NavigatorSceneConfigs
  },

  mixins: [TimerMixin, InteractionMixin, Subscribable.Mixin],

  getDefaultProps: function getDefaultProps() {
    return {
      configureScene: function configureScene() {
        return NavigatorSceneConfigs.PushFromRight;
      },
      sceneStyle: styles.defaultSceneStyle
    };
  },

  getInitialState: function getInitialState() {
    var _this = this;

    this._navigationBarNavigator = this.props.navigationBarNavigator || this;

    this._renderedSceneMap = new Map();

    this._sceneRefs = [];

    var routeStack = this.props.initialRouteStack || [this.props.initialRoute];
    invariant(routeStack.length >= 1, 'Navigator requires props.initialRoute or props.initialRouteStack.');
    var initialRouteIndex = routeStack.length - 1;
    if (this.props.initialRoute) {
      initialRouteIndex = routeStack.indexOf(this.props.initialRoute);
      invariant(initialRouteIndex !== -1, 'initialRoute is not in initialRouteStack.');
    }
    return {
      sceneConfigStack: routeStack.map(function (route) {
        return _this.props.configureScene(route, routeStack);
      }),
      routeStack: routeStack,
      presentedIndex: initialRouteIndex,
      transitionFromIndex: null,
      activeGesture: null,
      pendingGestureProgress: null,
      transitionQueue: []
    };
  },

  componentWillMount: function componentWillMount() {
    var _this2 = this;

    this.__defineGetter__('navigationContext', this._getNavigationContext);

    this._subRouteFocus = [];
    this.parentNavigator = this.props.navigator;
    this._handlers = {};
    this.springSystem = new rebound.SpringSystem();
    this.spring = this.springSystem.createSpring();
    this.spring.setRestSpeedThreshold(0.05);
    this.spring.setCurrentValue(0).setAtRest();
    this.spring.addListener({
      onSpringEndStateChange: function onSpringEndStateChange() {
        if (!_this2._interactionHandle) {
          _this2._interactionHandle = _this2.createInteractionHandle();
        }
      },
      onSpringUpdate: function onSpringUpdate() {
        _this2._handleSpringUpdate();
      },
      onSpringAtRest: function onSpringAtRest() {
        _this2._completeTransition();
      }
    });
    this.panGesture = PanResponder.create({
      onMoveShouldSetPanResponder: this._handleMoveShouldSetPanResponder,
      onPanResponderRelease: this._handlePanResponderRelease,
      onPanResponderMove: this._handlePanResponderMove,
      onPanResponderTerminate: this._handlePanResponderTerminate
    });
    this._interactionHandle = null;
    this._emitWillFocus(this.state.routeStack[this.state.presentedIndex]);
  },

  componentDidMount: function componentDidMount() {
    this._handleSpringUpdate();
    this._emitDidFocus(this.state.routeStack[this.state.presentedIndex]);
    this._enableTVEventHandler();
  },

  componentWillUnmount: function componentWillUnmount() {
    if (this._navigationContext) {
      this._navigationContext.dispose();
      this._navigationContext = null;
    }

    this.spring.destroy();

    if (this._interactionHandle) {
      this.clearInteractionHandle(this._interactionHandle);
    }

    this._disableTVEventHandler();
  },

  immediatelyResetRouteStack: function immediatelyResetRouteStack(nextRouteStack) {
    var _this3 = this;

    var destIndex = nextRouteStack.length - 1;
    this._emitWillFocus(nextRouteStack[destIndex]);
    this.setState({
      routeStack: nextRouteStack,
      sceneConfigStack: nextRouteStack.map(function (route) {
        return _this3.props.configureScene(route, nextRouteStack);
      }),
      presentedIndex: destIndex,
      activeGesture: null,
      transitionFromIndex: null,
      transitionQueue: []
    }, function () {
      _this3._handleSpringUpdate();
      var navBar = _this3._navBar;
      if (navBar && navBar.immediatelyRefresh) {
        navBar.immediatelyRefresh();
      }
      _this3._emitDidFocus(_this3.state.routeStack[_this3.state.presentedIndex]);
    });
  },

  _transitionTo: function _transitionTo(destIndex, velocity, jumpSpringTo, cb) {
    if (this.state.presentedIndex === destIndex) {
      cb && cb();
      return;
    }

    if (this.state.transitionFromIndex !== null) {
      this.state.transitionQueue.push({
        destIndex: destIndex,
        velocity: velocity,
        cb: cb
      });
      return;
    }

    this.state.transitionFromIndex = this.state.presentedIndex;
    this.state.presentedIndex = destIndex;
    this.state.transitionCb = cb;
    this._onAnimationStart();
    if (AnimationsDebugModule) {
      AnimationsDebugModule.startRecordingFps();
    }
    var sceneConfig = this.state.sceneConfigStack[this.state.transitionFromIndex] || this.state.sceneConfigStack[this.state.presentedIndex];
    invariant(sceneConfig, 'Cannot configure scene at index ' + this.state.transitionFromIndex);
    if (jumpSpringTo != null) {
      this.spring.setCurrentValue(jumpSpringTo);
    }
    this.spring.setOvershootClampingEnabled(true);
    this.spring.getSpringConfig().friction = sceneConfig.springFriction;
    this.spring.getSpringConfig().tension = sceneConfig.springTension;
    this.spring.setVelocity(velocity || sceneConfig.defaultTransitionVelocity);
    this.spring.setEndValue(1);
  },

  _handleSpringUpdate: function _handleSpringUpdate() {
    if (!this.isMounted()) {
      return;
    }

    if (this.state.transitionFromIndex != null) {
      this._transitionBetween(this.state.transitionFromIndex, this.state.presentedIndex, this.spring.getCurrentValue());
    } else if (this.state.activeGesture != null) {
      var presentedToIndex = this.state.presentedIndex + this._deltaForGestureAction(this.state.activeGesture);
      this._transitionBetween(this.state.presentedIndex, presentedToIndex, this.spring.getCurrentValue());
    }
  },

  _completeTransition: function _completeTransition() {
    if (!this.isMounted()) {
      return;
    }

    if (this.spring.getCurrentValue() !== 1 && this.spring.getCurrentValue() !== 0) {
      if (this.state.pendingGestureProgress) {
        this.state.pendingGestureProgress = null;
      }
      return;
    }
    this._onAnimationEnd();
    var presentedIndex = this.state.presentedIndex;
    var didFocusRoute = this._subRouteFocus[presentedIndex] || this.state.routeStack[presentedIndex];

    if (AnimationsDebugModule) {
      AnimationsDebugModule.stopRecordingFps(Date.now());
    }
    this.state.transitionFromIndex = null;
    this.spring.setCurrentValue(0).setAtRest();
    this._hideScenes();
    if (this.state.transitionCb) {
      this.state.transitionCb();
      this.state.transitionCb = null;
    }

    this._emitDidFocus(didFocusRoute);

    if (this._interactionHandle) {
      this.clearInteractionHandle(this._interactionHandle);
      this._interactionHandle = null;
    }
    if (this.state.pendingGestureProgress) {
      var gestureToIndex = this.state.presentedIndex + this._deltaForGestureAction(this.state.activeGesture);
      this._enableScene(gestureToIndex);
      this.spring.setEndValue(this.state.pendingGestureProgress);
      return;
    }
    if (this.state.transitionQueue.length) {
      var queuedTransition = this.state.transitionQueue.shift();
      this._enableScene(queuedTransition.destIndex);
      this._emitWillFocus(this.state.routeStack[queuedTransition.destIndex]);
      this._transitionTo(queuedTransition.destIndex, queuedTransition.velocity, null, queuedTransition.cb);
    }
  },

  _emitDidFocus: function _emitDidFocus(route) {
    this.navigationContext.emit('didfocus', { route: route });

    if (this.props.onDidFocus) {
      this.props.onDidFocus(route);
    }
  },

  _emitWillFocus: function _emitWillFocus(route) {
    this.navigationContext.emit('willfocus', { route: route });

    var navBar = this._navBar;
    if (navBar && navBar.handleWillFocus) {
      navBar.handleWillFocus(route);
    }
    if (this.props.onWillFocus) {
      this.props.onWillFocus(route);
    }
  },

  _hideScenes: function _hideScenes() {
    var gesturingToIndex = null;
    if (this.state.activeGesture) {
      gesturingToIndex = this.state.presentedIndex + this._deltaForGestureAction(this.state.activeGesture);
    }
    for (var i = 0; i < this.state.routeStack.length; i++) {
      if (i === this.state.presentedIndex || i === this.state.transitionFromIndex || i === gesturingToIndex) {
        continue;
      }
      this._disableScene(i);
    }
  },

  _disableScene: function _disableScene(sceneIndex) {
    this._sceneRefs[sceneIndex] && this._sceneRefs[sceneIndex].setNativeProps(SCENE_DISABLED_NATIVE_PROPS);
  },

  _enableScene: function _enableScene(sceneIndex) {
    var sceneStyle = flattenStyle([styles.baseScene, this.props.sceneStyle]);

    var enabledSceneNativeProps = {
      pointerEvents: 'auto',
      style: {
        top: sceneStyle.top,
        bottom: sceneStyle.bottom
      }
    };
    if (sceneIndex !== this.state.transitionFromIndex && sceneIndex !== this.state.presentedIndex) {
      enabledSceneNativeProps.style.opacity = 0;
    }
    this._sceneRefs[sceneIndex] && this._sceneRefs[sceneIndex].setNativeProps(enabledSceneNativeProps);
  },

  _clearTransformations: function _clearTransformations(sceneIndex) {
    var defaultStyle = flattenStyle([styles.defaultSceneStyle]);
    this._sceneRefs[sceneIndex].setNativeProps({ style: defaultStyle });
  },

  _onAnimationStart: function _onAnimationStart() {
    var fromIndex = this.state.presentedIndex;
    var toIndex = this.state.presentedIndex;
    if (this.state.transitionFromIndex != null) {
      fromIndex = this.state.transitionFromIndex;
    } else if (this.state.activeGesture) {
      toIndex = this.state.presentedIndex + this._deltaForGestureAction(this.state.activeGesture);
    }
    this._setRenderSceneToHardwareTextureAndroid(fromIndex, true);
    this._setRenderSceneToHardwareTextureAndroid(toIndex, true);
    var navBar = this._navBar;
    if (navBar && navBar.onAnimationStart) {
      navBar.onAnimationStart(fromIndex, toIndex);
    }
  },

  _onAnimationEnd: function _onAnimationEnd() {
    var max = this.state.routeStack.length - 1;
    for (var index = 0; index <= max; index++) {
      this._setRenderSceneToHardwareTextureAndroid(index, false);
    }

    var navBar = this._navBar;
    if (navBar && navBar.onAnimationEnd) {
      navBar.onAnimationEnd();
    }
  },

  _setRenderSceneToHardwareTextureAndroid: function _setRenderSceneToHardwareTextureAndroid(sceneIndex, shouldRenderToHardwareTexture) {
    var viewAtIndex = this._sceneRefs[sceneIndex];
    if (viewAtIndex === null || viewAtIndex === undefined) {
      return;
    }
    viewAtIndex.setNativeProps({ renderToHardwareTextureAndroid: shouldRenderToHardwareTexture });
  },

  _handleTouchStart: function _handleTouchStart() {
    this._eligibleGestures = GESTURE_ACTIONS;
  },

  _handleMoveShouldSetPanResponder: function _handleMoveShouldSetPanResponder(e, gestureState) {
    var sceneConfig = this.state.sceneConfigStack[this.state.presentedIndex];
    if (!sceneConfig) {
      return false;
    }
    this._expectingGestureGrant = this._matchGestureAction(this._eligibleGestures, sceneConfig.gestures, gestureState);
    return !!this._expectingGestureGrant;
  },

  _doesGestureOverswipe: function _doesGestureOverswipe(gestureName) {
    var wouldOverswipeBack = this.state.presentedIndex <= 0 && (gestureName === 'pop' || gestureName === 'jumpBack');
    var wouldOverswipeForward = this.state.presentedIndex >= this.state.routeStack.length - 1 && gestureName === 'jumpForward';
    return wouldOverswipeForward || wouldOverswipeBack;
  },

  _deltaForGestureAction: function _deltaForGestureAction(gestureAction) {
    switch (gestureAction) {
      case 'pop':
      case 'jumpBack':
        return -1;
      case 'jumpForward':
        return 1;
      default:
        invariant(false, 'Unsupported gesture action ' + gestureAction);
        return;
    }
  },

  _handlePanResponderRelease: function _handlePanResponderRelease(e, gestureState) {
    var _this4 = this;

    var sceneConfig = this.state.sceneConfigStack[this.state.presentedIndex];
    var releaseGestureAction = this.state.activeGesture;
    if (!releaseGestureAction) {
      return;
    }
    var releaseGesture = sceneConfig.gestures[releaseGestureAction];
    var destIndex = this.state.presentedIndex + this._deltaForGestureAction(this.state.activeGesture);
    if (this.spring.getCurrentValue() === 0) {
      this.spring.setCurrentValue(0).setAtRest();
      this._completeTransition();
      return;
    }
    var isTravelVertical = releaseGesture.direction === 'top-to-bottom' || releaseGesture.direction === 'bottom-to-top';
    var isTravelInverted = releaseGesture.direction === 'right-to-left' || releaseGesture.direction === 'bottom-to-top';
    var velocity, gestureDistance;
    if (isTravelVertical) {
      velocity = isTravelInverted ? -gestureState.vy : gestureState.vy;
      gestureDistance = isTravelInverted ? -gestureState.dy : gestureState.dy;
    } else {
      velocity = isTravelInverted ? -gestureState.vx : gestureState.vx;
      gestureDistance = isTravelInverted ? -gestureState.dx : gestureState.dx;
    }
    var transitionVelocity = clamp(-10, velocity, 10);
    if (Math.abs(velocity) < releaseGesture.notMoving) {
      var hasGesturedEnoughToComplete = gestureDistance > releaseGesture.fullDistance * releaseGesture.stillCompletionRatio;
      transitionVelocity = hasGesturedEnoughToComplete ? releaseGesture.snapVelocity : -releaseGesture.snapVelocity;
    }
    if (transitionVelocity < 0 || this._doesGestureOverswipe(releaseGestureAction)) {
      if (this.state.transitionFromIndex == null) {
        var transitionBackToPresentedIndex = this.state.presentedIndex;

        this.state.presentedIndex = destIndex;
        this._transitionTo(transitionBackToPresentedIndex, -transitionVelocity, 1 - this.spring.getCurrentValue());
      }
    } else {
      this._emitWillFocus(this.state.routeStack[destIndex]);
      this._transitionTo(destIndex, transitionVelocity, null, function () {
        if (releaseGestureAction === 'pop') {
          _this4._cleanScenesPastIndex(destIndex);
        }
      });
    }
    this._detachGesture();
  },

  _handlePanResponderTerminate: function _handlePanResponderTerminate(e, gestureState) {
    if (this.state.activeGesture == null) {
      return;
    }
    var destIndex = this.state.presentedIndex + this._deltaForGestureAction(this.state.activeGesture);
    this._detachGesture();
    var transitionBackToPresentedIndex = this.state.presentedIndex;

    this.state.presentedIndex = destIndex;
    this._transitionTo(transitionBackToPresentedIndex, null, 1 - this.spring.getCurrentValue());
  },

  _attachGesture: function _attachGesture(gestureId) {
    this.state.activeGesture = gestureId;
    var gesturingToIndex = this.state.presentedIndex + this._deltaForGestureAction(this.state.activeGesture);
    this._enableScene(gesturingToIndex);
  },

  _detachGesture: function _detachGesture() {
    this.state.activeGesture = null;
    this.state.pendingGestureProgress = null;
    this._hideScenes();
  },

  _handlePanResponderMove: function _handlePanResponderMove(e, gestureState) {
    if (this._isMoveGestureAttached !== undefined) {
      invariant(this._expectingGestureGrant, 'Responder granted unexpectedly.');
      this._attachGesture(this._expectingGestureGrant);
      this._onAnimationStart();
      this._expectingGestureGrant = undefined;
    }

    var sceneConfig = this.state.sceneConfigStack[this.state.presentedIndex];
    if (this.state.activeGesture) {
      var gesture = sceneConfig.gestures[this.state.activeGesture];
      return this._moveAttachedGesture(gesture, gestureState);
    }
    var matchedGesture = this._matchGestureAction(GESTURE_ACTIONS, sceneConfig.gestures, gestureState);
    if (matchedGesture) {
      this._attachGesture(matchedGesture);
    }
  },

  _moveAttachedGesture: function _moveAttachedGesture(gesture, gestureState) {
    var isTravelVertical = gesture.direction === 'top-to-bottom' || gesture.direction === 'bottom-to-top';
    var isTravelInverted = gesture.direction === 'right-to-left' || gesture.direction === 'bottom-to-top';
    var distance = isTravelVertical ? gestureState.dy : gestureState.dx;
    distance = isTravelInverted ? -distance : distance;
    var gestureDetectMovement = gesture.gestureDetectMovement;
    var nextProgress = (distance - gestureDetectMovement) / (gesture.fullDistance - gestureDetectMovement);
    if (nextProgress < 0 && gesture.isDetachable) {
      var gesturingToIndex = this.state.presentedIndex + this._deltaForGestureAction(this.state.activeGesture);
      this._transitionBetween(this.state.presentedIndex, gesturingToIndex, 0);
      this._detachGesture();
      if (this.state.pendingGestureProgress != null) {
        this.spring.setCurrentValue(0);
      }
      return;
    }
    if (gesture.overswipe && this._doesGestureOverswipe(this.state.activeGesture)) {
      var frictionConstant = gesture.overswipe.frictionConstant;
      var frictionByDistance = gesture.overswipe.frictionByDistance;
      var frictionRatio = 1 / (frictionConstant + Math.abs(nextProgress) * frictionByDistance);
      nextProgress *= frictionRatio;
    }
    nextProgress = clamp(0, nextProgress, 1);
    if (this.state.transitionFromIndex != null) {
      this.state.pendingGestureProgress = nextProgress;
    } else if (this.state.pendingGestureProgress) {
      this.spring.setEndValue(nextProgress);
    } else {
      this.spring.setCurrentValue(nextProgress);
    }
  },

  _matchGestureAction: function _matchGestureAction(eligibleGestures, gestures, gestureState) {
    var _this5 = this;

    if (!gestures || !eligibleGestures || !eligibleGestures.some) {
      return null;
    }
    var matchedGesture = null;
    eligibleGestures.some(function (gestureName, gestureIndex) {
      var gesture = gestures[gestureName];
      if (!gesture) {
        return;
      }
      if (gesture.overswipe == null && _this5._doesGestureOverswipe(gestureName)) {
        return false;
      }
      var isTravelVertical = gesture.direction === 'top-to-bottom' || gesture.direction === 'bottom-to-top';
      var isTravelInverted = gesture.direction === 'right-to-left' || gesture.direction === 'bottom-to-top';
      var startedLoc = isTravelVertical ? gestureState.y0 : gestureState.x0;
      var currentLoc = isTravelVertical ? gestureState.moveY : gestureState.moveX;
      var travelDist = isTravelVertical ? gestureState.dy : gestureState.dx;
      var oppositeAxisTravelDist = isTravelVertical ? gestureState.dx : gestureState.dy;
      var edgeHitWidth = gesture.edgeHitWidth;
      if (isTravelInverted) {
        startedLoc = -startedLoc;
        currentLoc = -currentLoc;
        travelDist = -travelDist;
        oppositeAxisTravelDist = -oppositeAxisTravelDist;
        edgeHitWidth = isTravelVertical ? -(SCREEN_HEIGHT - edgeHitWidth) : -(SCREEN_WIDTH - edgeHitWidth);
      }
      if (startedLoc === 0) {
        startedLoc = currentLoc;
      }
      var moveStartedInRegion = gesture.edgeHitWidth == null || startedLoc < edgeHitWidth;
      if (!moveStartedInRegion) {
        return false;
      }
      var moveTravelledFarEnough = travelDist >= gesture.gestureDetectMovement;
      if (!moveTravelledFarEnough) {
        return false;
      }
      var directionIsCorrect = Math.abs(travelDist) > Math.abs(oppositeAxisTravelDist) * gesture.directionRatio;
      if (directionIsCorrect) {
        matchedGesture = gestureName;
        return true;
      } else {
        _this5._eligibleGestures = _this5._eligibleGestures.slice().splice(gestureIndex, 1);
      }
    });
    return matchedGesture || null;
  },

  _transitionSceneStyle: function _transitionSceneStyle(fromIndex, toIndex, progress, index) {
    var viewAtIndex = this._sceneRefs[index];
    if (viewAtIndex === null || viewAtIndex === undefined) {
      return;
    }

    var sceneConfigIndex = fromIndex < toIndex ? toIndex : fromIndex;
    var sceneConfig = this.state.sceneConfigStack[sceneConfigIndex];

    if (!sceneConfig) {
      sceneConfig = this.state.sceneConfigStack[sceneConfigIndex - 1];
    }
    var styleToUse = {};
    var useFn = index < fromIndex || index < toIndex ? sceneConfig.animationInterpolators.out : sceneConfig.animationInterpolators.into;
    var directionAdjustedProgress = fromIndex < toIndex ? progress : 1 - progress;
    var didChange = useFn(styleToUse, directionAdjustedProgress);
    if (didChange) {
      viewAtIndex.setNativeProps({ style: styleToUse });
    }
  },

  _transitionBetween: function _transitionBetween(fromIndex, toIndex, progress) {
    this._transitionSceneStyle(fromIndex, toIndex, progress, fromIndex);
    this._transitionSceneStyle(fromIndex, toIndex, progress, toIndex);
    var navBar = this._navBar;
    if (navBar && navBar.updateProgress && toIndex >= 0 && fromIndex >= 0) {
      navBar.updateProgress(progress, fromIndex, toIndex);
    }
  },

  _handleResponderTerminationRequest: function _handleResponderTerminationRequest() {
    return false;
  },

  _getDestIndexWithinBounds: function _getDestIndexWithinBounds(n) {
    var currentIndex = this.state.presentedIndex;
    var destIndex = currentIndex + n;
    invariant(destIndex >= 0, 'Cannot jump before the first route.');
    var maxIndex = this.state.routeStack.length - 1;
    invariant(maxIndex >= destIndex, 'Cannot jump past the last route.');
    return destIndex;
  },

  _jumpN: function _jumpN(n) {
    var destIndex = this._getDestIndexWithinBounds(n);
    this._enableScene(destIndex);
    this._emitWillFocus(this.state.routeStack[destIndex]);
    this._transitionTo(destIndex);
  },

  jumpTo: function jumpTo(route) {
    var destIndex = this.state.routeStack.indexOf(route);
    invariant(destIndex !== -1, 'Cannot jump to route that is not in the route stack');
    this._jumpN(destIndex - this.state.presentedIndex);
  },

  jumpForward: function jumpForward() {
    this._jumpN(1);
  },

  jumpBack: function jumpBack() {
    this._jumpN(-1);
  },

  push: function push(route) {
    var _this6 = this;

    invariant(!!route, 'Must supply route to push');
    var activeLength = this.state.presentedIndex + 1;
    var activeStack = this.state.routeStack.slice(0, activeLength);
    var activeAnimationConfigStack = this.state.sceneConfigStack.slice(0, activeLength);
    var nextStack = activeStack.concat([route]);
    var destIndex = nextStack.length - 1;
    var nextSceneConfig = this.props.configureScene(route, nextStack);
    var nextAnimationConfigStack = activeAnimationConfigStack.concat([nextSceneConfig]);
    this._emitWillFocus(nextStack[destIndex]);
    this.setState({
      routeStack: nextStack,
      sceneConfigStack: nextAnimationConfigStack
    }, function () {
      _this6._enableScene(destIndex);
      _this6._transitionTo(destIndex, nextSceneConfig.defaultTransitionVelocity);
    });
  },

  popN: function popN(n) {
    var _this7 = this;

    invariant(typeof n === 'number', 'Must supply a number to popN');
    n = parseInt(n, 10);
    if (n <= 0 || this.state.presentedIndex - n < 0) {
      return;
    }
    var popIndex = this.state.presentedIndex - n;
    var presentedRoute = this.state.routeStack[this.state.presentedIndex];
    var popSceneConfig = this.props.configureScene(presentedRoute);
    this._enableScene(popIndex);

    this._clearTransformations(popIndex);
    this._emitWillFocus(this.state.routeStack[popIndex]);
    this._transitionTo(popIndex, popSceneConfig.defaultTransitionVelocity, null, function () {
      _this7._cleanScenesPastIndex(popIndex);
    });
  },

  pop: function pop() {
    if (this.state.transitionQueue.length) {
      return;
    }

    this.popN(1);
  },

  replaceAtIndex: function replaceAtIndex(route, index, cb) {
    var _this8 = this;

    invariant(!!route, 'Must supply route to replace');
    if (index < 0) {
      index += this.state.routeStack.length;
    }

    if (this.state.routeStack.length <= index) {
      return;
    }

    var nextRouteStack = this.state.routeStack.slice();
    var nextAnimationModeStack = this.state.sceneConfigStack.slice();
    nextRouteStack[index] = route;
    nextAnimationModeStack[index] = this.props.configureScene(route, nextRouteStack);

    if (index === this.state.presentedIndex) {
      this._emitWillFocus(route);
    }
    this.setState({
      routeStack: nextRouteStack,
      sceneConfigStack: nextAnimationModeStack
    }, function () {
      if (index === _this8.state.presentedIndex) {
        _this8._emitDidFocus(route);
      }
      cb && cb();
    });
  },

  replace: function replace(route) {
    this.replaceAtIndex(route, this.state.presentedIndex);
  },

  replacePrevious: function replacePrevious(route) {
    this.replaceAtIndex(route, this.state.presentedIndex - 1);
  },

  popToTop: function popToTop() {
    this.popToRoute(this.state.routeStack[0]);
  },

  popToRoute: function popToRoute(route) {
    var indexOfRoute = this.state.routeStack.indexOf(route);
    invariant(indexOfRoute !== -1, 'Calling popToRoute for a route that doesn\'t exist!');
    var numToPop = this.state.presentedIndex - indexOfRoute;
    this.popN(numToPop);
  },

  replacePreviousAndPop: function replacePreviousAndPop(route) {
    if (this.state.routeStack.length < 2) {
      return;
    }
    this.replacePrevious(route);
    this.pop();
  },

  resetTo: function resetTo(route) {
    var _this9 = this;

    invariant(!!route, 'Must supply route to push');
    this.replaceAtIndex(route, 0, function () {
      _this9.popN(_this9.state.presentedIndex);
    });
  },

  getCurrentRoutes: function getCurrentRoutes() {
    return this.state.routeStack.slice();
  },

  _cleanScenesPastIndex: function _cleanScenesPastIndex(index) {
    var newStackLength = index + 1;

    if (newStackLength < this.state.routeStack.length) {
      this.setState({
        sceneConfigStack: this.state.sceneConfigStack.slice(0, newStackLength),
        routeStack: this.state.routeStack.slice(0, newStackLength)
      });
    }
  },

  _renderScene: function _renderScene(route, i) {
    var _this10 = this;

    var disabledSceneStyle = null;
    var disabledScenePointerEvents = 'auto';
    if (i !== this.state.presentedIndex) {
      disabledSceneStyle = styles.disabledScene;
      disabledScenePointerEvents = 'none';
    }
    return React.createElement(
      View,
      {
        collapsable: false,
        key: 'scene_' + getRouteID(route),
        ref: function ref(scene) {
          _this10._sceneRefs[i] = scene;
        },
        onStartShouldSetResponderCapture: function onStartShouldSetResponderCapture() {
          return _this10.state.transitionFromIndex != null;
        },
        pointerEvents: disabledScenePointerEvents,
        style: [styles.baseScene, this.props.sceneStyle, disabledSceneStyle] },
      this.props.renderScene(route, this)
    );
  },

  _renderNavigationBar: function _renderNavigationBar() {
    var _this11 = this;

    var navigationBar = this.props.navigationBar;

    if (!navigationBar) {
      return null;
    }
    return React.cloneElement(navigationBar, {
      ref: function ref(navBar) {
        _this11._navBar = navBar;
        if (navigationBar && typeof navigationBar.ref === 'function') {
          navigationBar.ref(navBar);
        }
      },
      navigator: this._navigationBarNavigator,
      navState: this.state
    });
  },

  _tvEventHandler: TVEventHandler,

  _enableTVEventHandler: function _enableTVEventHandler() {
    this._tvEventHandler = new TVEventHandler();
    this._tvEventHandler.enable(this, function (cmp, evt) {
      if (evt && evt.eventType === 'menu') {
        cmp.pop();
      }
    });
  },

  _disableTVEventHandler: function _disableTVEventHandler() {
    if (this._tvEventHandler) {
      this._tvEventHandler.disable();
      delete this._tvEventHandler;
    }
  },

  render: function render() {
    var _this12 = this;

    var newRenderedSceneMap = new Map();
    var scenes = this.state.routeStack.map(function (route, index) {
      var renderedScene;
      if (_this12._renderedSceneMap.has(route) && index !== _this12.state.presentedIndex) {
        renderedScene = _this12._renderedSceneMap.get(route);
      } else {
        renderedScene = _this12._renderScene(route, index);
      }
      newRenderedSceneMap.set(route, renderedScene);
      return renderedScene;
    });
    this._renderedSceneMap = newRenderedSceneMap;
    return React.createElement(
      View,
      { style: [styles.container, this.props.style] },
      React.createElement(
        View,
        babelHelpers.extends({
          style: styles.transitioner
        }, this.panGesture.panHandlers, {
          onTouchStart: this._handleTouchStart,
          onResponderTerminationRequest: this._handleResponderTerminationRequest }),
        scenes
      ),
      this._renderNavigationBar()
    );
  },

  _getNavigationContext: function _getNavigationContext() {
    if (!this._navigationContext) {
      this._navigationContext = new NavigationContext();
    }
    return this._navigationContext;
  }
});

module.exports = Navigator;
}, 307, null, "Navigator");
__d(/* InteractionMixin */function(global, require, module, exports) {
'use strict';

var InteractionManager = require(253                 ); // 253 = InteractionManager

var InteractionMixin = {
  componentWillUnmount: function componentWillUnmount() {
    while (this._interactionMixinHandles.length) {
      InteractionManager.clearInteractionHandle(this._interactionMixinHandles.pop());
    }
  },

  _interactionMixinHandles: [],

  createInteractionHandle: function createInteractionHandle() {
    var handle = InteractionManager.createInteractionHandle();
    this._interactionMixinHandles.push(handle);
    return handle;
  },

  clearInteractionHandle: function clearInteractionHandle(clearHandle) {
    InteractionManager.clearInteractionHandle(clearHandle);
    this._interactionMixinHandles = this._interactionMixinHandles.filter(function (handle) {
      return handle !== clearHandle;
    });
  },

  runAfterInteractions: function runAfterInteractions(callback) {
    InteractionManager.runAfterInteractions(callback);
  }
};

module.exports = InteractionMixin;
}, 308, null, "InteractionMixin");
__d(/* NavigationContext */function(global, require, module, exports) {
'use strict';

var NavigationEvent = require(310              ); // 310 = NavigationEvent
var NavigationEventEmitter = require(311                     ); // 311 = NavigationEventEmitter
var NavigationTreeNode = require(312                 ); // 312 = NavigationTreeNode

var Set = require(219  ); // 219 = Set

var emptyFunction = require(14                      ); // 14 = fbjs/lib/emptyFunction
var invariant = require(24                  ); // 24 = fbjs/lib/invariant

var AT_TARGET = NavigationEvent.AT_TARGET,
    BUBBLING_PHASE = NavigationEvent.BUBBLING_PHASE,
    CAPTURING_PHASE = NavigationEvent.CAPTURING_PHASE;

var LegacyEventTypes = new Set(['willfocus', 'didfocus']);

var NavigationContext = function () {
  function NavigationContext() {
    babelHelpers.classCallCheck(this, NavigationContext);

    this._bubbleEventEmitter = new NavigationEventEmitter(this);
    this._captureEventEmitter = new NavigationEventEmitter(this);
    this._currentRoute = null;

    this.__node = new NavigationTreeNode(this);

    this._emitCounter = 0;
    this._emitQueue = [];

    this.addListener('willfocus', this._onFocus);
    this.addListener('didfocus', this._onFocus);
  }

  babelHelpers.createClass(NavigationContext, [{
    key: 'appendChild',
    value: function appendChild(childContext) {
      this.__node.appendChild(childContext.__node);
    }
  }, {
    key: 'addListener',
    value: function addListener(eventType, listener, useCapture) {
      if (LegacyEventTypes.has(eventType)) {
        useCapture = false;
      }

      var emitter = useCapture ? this._captureEventEmitter : this._bubbleEventEmitter;

      if (emitter) {
        return emitter.addListener(eventType, listener, this);
      } else {
        return { remove: emptyFunction };
      }
    }
  }, {
    key: 'emit',
    value: function emit(eventType, data, didEmitCallback) {
      var _this = this;

      if (this._emitCounter > 0) {
        var args = Array.prototype.slice.call(arguments);
        this._emitQueue.push(args);
        return;
      }

      this._emitCounter++;

      if (LegacyEventTypes.has(eventType)) {
        this.__emit(eventType, data, null, {
          defaultPrevented: false,
          eventPhase: AT_TARGET,
          propagationStopped: true,
          target: this
        });
      } else {
        var targets = [this];
        var parentTarget = this.parent;
        while (parentTarget) {
          targets.unshift(parentTarget);
          parentTarget = parentTarget.parent;
        }

        var propagationStopped = false;
        var defaultPrevented = false;
        var callback = function callback(event) {
          propagationStopped = propagationStopped || event.isPropagationStopped();
          defaultPrevented = defaultPrevented || event.defaultPrevented;
        };

        targets.some(function (currentTarget) {
          if (propagationStopped) {
            return true;
          }

          var extraInfo = {
            defaultPrevented: defaultPrevented,
            eventPhase: CAPTURING_PHASE,
            propagationStopped: propagationStopped,
            target: _this
          };

          currentTarget.__emit(eventType, data, callback, extraInfo);
        }, this);

        targets.reverse().some(function (currentTarget) {
          if (propagationStopped) {
            return true;
          }
          var extraInfo = {
            defaultPrevented: defaultPrevented,
            eventPhase: BUBBLING_PHASE,
            propagationStopped: propagationStopped,
            target: _this
          };
          currentTarget.__emit(eventType, data, callback, extraInfo);
        }, this);
      }

      if (didEmitCallback) {
        var event = NavigationEvent.pool(eventType, this, data);
        propagationStopped && event.stopPropagation();
        defaultPrevented && event.preventDefault();
        didEmitCallback.call(this, event);
        event.dispose();
      }

      this._emitCounter--;
      while (this._emitQueue.length) {
        var args = this._emitQueue.shift();
        this.emit.apply(this, args);
      }
    }
  }, {
    key: 'dispose',
    value: function dispose() {
      this._bubbleEventEmitter && this._bubbleEventEmitter.removeAllListeners();
      this._captureEventEmitter && this._captureEventEmitter.removeAllListeners();
      this._bubbleEventEmitter = null;
      this._captureEventEmitter = null;
      this._currentRoute = null;
    }
  }, {
    key: '__emit',
    value: function __emit(eventType, data, didEmitCallback, extraInfo) {
      var emitter;
      switch (extraInfo.eventPhase) {
        case CAPTURING_PHASE:
          emitter = this._captureEventEmitter;
          break;

        case AT_TARGET:
          emitter = this._bubbleEventEmitter;
          break;

        case BUBBLING_PHASE:
          emitter = this._bubbleEventEmitter;
          break;

        default:
          invariant(false, 'invalid event phase %s', extraInfo.eventPhase);
      }

      if (extraInfo.target === this) {
        extraInfo.eventPhase = AT_TARGET;
      }

      if (emitter) {
        emitter.emit(eventType, data, didEmitCallback, extraInfo);
      }
    }
  }, {
    key: '_onFocus',
    value: function _onFocus(event) {
      invariant(event.data && event.data.hasOwnProperty('route'), 'event type "%s" should provide route', event.type);

      this._currentRoute = event.data.route;
    }
  }, {
    key: 'parent',
    get: function get() {
      var parent = this.__node.getParent();
      return parent ? parent.getValue() : null;
    }
  }, {
    key: 'top',
    get: function get() {
      var result = null;
      var parentNode = this.__node.getParent();
      while (parentNode) {
        result = parentNode.getValue();
        parentNode = parentNode.getParent();
      }
      return result;
    }
  }, {
    key: 'currentRoute',
    get: function get() {
      return this._currentRoute;
    }
  }]);
  return NavigationContext;
}();

module.exports = NavigationContext;
}, 309, null, "NavigationContext");
__d(/* NavigationEvent */function(global, require, module, exports) {
'use strict';

var invariant = require(24                  ); // 24 = fbjs/lib/invariant

var NavigationEventPool = function () {
  function NavigationEventPool() {
    babelHelpers.classCallCheck(this, NavigationEventPool);

    this._list = [];
  }

  babelHelpers.createClass(NavigationEventPool, [{
    key: 'get',
    value: function get(type, currentTarget, data) {
      var event = void 0;
      if (this._list.length > 0) {
        event = this._list.pop();
        event.constructor.call(event, type, currentTarget, data);
      } else {
        event = new NavigationEvent(type, currentTarget, data);
      }
      return event;
    }
  }, {
    key: 'put',
    value: function put(event) {
      this._list.push(event);
    }
  }]);
  return NavigationEventPool;
}();

var _navigationEventPool = new NavigationEventPool();

var NavigationEvent = function () {
  babelHelpers.createClass(NavigationEvent, null, [{
    key: 'pool',
    value: function pool(type, currentTarget, data) {
      return _navigationEventPool.get(type, currentTarget, data);
    }
  }]);

  function NavigationEvent(type, currentTarget, data) {
    babelHelpers.classCallCheck(this, NavigationEvent);

    this.target = currentTarget;
    this.eventPhase = NavigationEvent.NONE;

    this._type = type;
    this._currentTarget = currentTarget;
    this._data = data;
    this._defaultPrevented = false;
    this._disposed = false;
    this._propagationStopped = false;
  }

  babelHelpers.createClass(NavigationEvent, [{
    key: 'preventDefault',
    value: function preventDefault() {
      this._defaultPrevented = true;
    }
  }, {
    key: 'stopPropagation',
    value: function stopPropagation() {
      this._propagationStopped = true;
    }
  }, {
    key: 'stop',
    value: function stop() {
      this.preventDefault();
      this.stopPropagation();
    }
  }, {
    key: 'isPropagationStopped',
    value: function isPropagationStopped() {
      return this._propagationStopped;
    }
  }, {
    key: 'dispose',
    value: function dispose() {
      invariant(!this._disposed, 'NavigationEvent is already disposed');
      this._disposed = true;

      this.target = null;
      this.eventPhase = NavigationEvent.NONE;
      this._type = '';
      this._currentTarget = null;
      this._data = null;
      this._defaultPrevented = false;

      _navigationEventPool.put(this);
    }
  }, {
    key: 'type',
    get: function get() {
      return this._type;
    }
  }, {
    key: 'currentTarget',
    get: function get() {
      return this._currentTarget;
    }
  }, {
    key: 'data',
    get: function get() {
      return this._data;
    }
  }, {
    key: 'defaultPrevented',
    get: function get() {
      return this._defaultPrevented;
    }
  }]);
  return NavigationEvent;
}();

NavigationEvent.NONE = 0;

NavigationEvent.CAPTURING_PHASE = 1;

NavigationEvent.AT_TARGET = 2;

NavigationEvent.BUBBLING_PHASE = 3;

module.exports = NavigationEvent;
}, 310, null, "NavigationEvent");
__d(/* NavigationEventEmitter */function(global, require, module, exports) {
'use strict';

var EventEmitter = require(53            ); // 53 = EventEmitter
var NavigationEvent = require(310              ); // 310 = NavigationEvent

var NavigationEventEmitter = function (_EventEmitter) {
  babelHelpers.inherits(NavigationEventEmitter, _EventEmitter);

  function NavigationEventEmitter(target) {
    babelHelpers.classCallCheck(this, NavigationEventEmitter);

    var _this = babelHelpers.possibleConstructorReturn(this, (NavigationEventEmitter.__proto__ || Object.getPrototypeOf(NavigationEventEmitter)).call(this));

    _this._emitting = false;
    _this._emitQueue = [];
    _this._target = target;
    return _this;
  }

  babelHelpers.createClass(NavigationEventEmitter, [{
    key: 'emit',
    value: function emit(eventType, data, didEmitCallback, extraInfo) {
      if (this._emitting) {
        var args = Array.prototype.slice.call(arguments);
        this._emitQueue.push(args);
        return;
      }

      this._emitting = true;

      var event = NavigationEvent.pool(eventType, this._target, data);

      if (extraInfo) {
        if (extraInfo.target) {
          event.target = extraInfo.target;
        }

        if (extraInfo.eventPhase) {
          event.eventPhase = extraInfo.eventPhase;
        }

        if (extraInfo.defaultPrevented) {
          event.preventDefault();
        }

        if (extraInfo.propagationStopped) {
          event.stopPropagation();
        }
      }

      babelHelpers.get(NavigationEventEmitter.prototype.__proto__ || Object.getPrototypeOf(NavigationEventEmitter.prototype), 'emit', this).call(this, String(eventType), event);

      if (typeof didEmitCallback === 'function') {
        didEmitCallback.call(this._target, event);
      }
      event.dispose();

      this._emitting = false;

      while (this._emitQueue.length) {
        var args = this._emitQueue.shift();
        this.emit.apply(this, args);
      }
    }
  }]);
  return NavigationEventEmitter;
}(EventEmitter);

module.exports = NavigationEventEmitter;
}, 311, null, "NavigationEventEmitter");
__d(/* NavigationTreeNode */function(global, require, module, exports) {

'use strict';

var invariant = require(24                  ); // 24 = fbjs/lib/invariant
var immutable = require(313        ); // 313 = immutable

var List = immutable.List;

var NavigationTreeNode = function () {
  function NavigationTreeNode(value) {
    babelHelpers.classCallCheck(this, NavigationTreeNode);

    this.__parent = null;
    this._children = new List();
    this._value = value;
  }

  babelHelpers.createClass(NavigationTreeNode, [{
    key: 'getValue',
    value: function getValue() {
      return this._value;
    }
  }, {
    key: 'getParent',
    value: function getParent() {
      return this.__parent;
    }
  }, {
    key: 'getChildrenCount',
    value: function getChildrenCount() {
      return this._children.size;
    }
  }, {
    key: 'getChildAt',
    value: function getChildAt(index) {
      return index > -1 && index < this._children.size ? this._children.get(index) : null;
    }
  }, {
    key: 'appendChild',
    value: function appendChild(child) {
      if (child.__parent) {
        child.__parent.removeChild(child);
      }
      child.__parent = this;
      this._children = this._children.push(child);
    }
  }, {
    key: 'removeChild',
    value: function removeChild(child) {
      var index = this._children.indexOf(child);

      invariant(index > -1, 'The node to be removed is not a child of this node.');

      child.__parent = null;

      this._children = this._children.splice(index, 1);
    }
  }, {
    key: 'indexOf',
    value: function indexOf(child) {
      return this._children.indexOf(child);
    }
  }, {
    key: 'forEach',
    value: function forEach(callback, context) {
      this._children.forEach(callback, context);
    }
  }, {
    key: 'map',
    value: function map(callback, context) {
      return this._children.map(callback, context).toJS();
    }
  }, {
    key: 'some',
    value: function some(callback, context) {
      return this._children.some(callback, context);
    }
  }]);
  return NavigationTreeNode;
}();

module.exports = NavigationTreeNode;
}, 312, null, "NavigationTreeNode");
__d(/* immutable/dist/immutable.js */function(global, require, module, exports) {

(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.Immutable = factory();
})(this, function () {
  'use strict';
  var SLICE$0 = Array.prototype.slice;

  function createClass(ctor, superClass) {
    if (superClass) {
      ctor.prototype = Object.create(superClass.prototype);
    }
    ctor.prototype.constructor = ctor;
  }

  function Iterable(value) {
    return isIterable(value) ? value : Seq(value);
  }

  createClass(KeyedIterable, Iterable);
  function KeyedIterable(value) {
    return isKeyed(value) ? value : KeyedSeq(value);
  }

  createClass(IndexedIterable, Iterable);
  function IndexedIterable(value) {
    return isIndexed(value) ? value : IndexedSeq(value);
  }

  createClass(SetIterable, Iterable);
  function SetIterable(value) {
    return isIterable(value) && !isAssociative(value) ? value : SetSeq(value);
  }

  function isIterable(maybeIterable) {
    return !!(maybeIterable && maybeIterable[IS_ITERABLE_SENTINEL]);
  }

  function isKeyed(maybeKeyed) {
    return !!(maybeKeyed && maybeKeyed[IS_KEYED_SENTINEL]);
  }

  function isIndexed(maybeIndexed) {
    return !!(maybeIndexed && maybeIndexed[IS_INDEXED_SENTINEL]);
  }

  function isAssociative(maybeAssociative) {
    return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);
  }

  function isOrdered(maybeOrdered) {
    return !!(maybeOrdered && maybeOrdered[IS_ORDERED_SENTINEL]);
  }

  Iterable.isIterable = isIterable;
  Iterable.isKeyed = isKeyed;
  Iterable.isIndexed = isIndexed;
  Iterable.isAssociative = isAssociative;
  Iterable.isOrdered = isOrdered;

  Iterable.Keyed = KeyedIterable;
  Iterable.Indexed = IndexedIterable;
  Iterable.Set = SetIterable;

  var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';
  var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';
  var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';
  var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';

  var DELETE = 'delete';

  var SHIFT = 5;
  var SIZE = 1 << SHIFT;
  var MASK = SIZE - 1;

  var NOT_SET = {};

  var CHANGE_LENGTH = { value: false };
  var DID_ALTER = { value: false };

  function MakeRef(ref) {
    ref.value = false;
    return ref;
  }

  function SetRef(ref) {
    ref && (ref.value = true);
  }

  function OwnerID() {}

  function arrCopy(arr, offset) {
    offset = offset || 0;
    var len = Math.max(0, arr.length - offset);
    var newArr = new Array(len);
    for (var ii = 0; ii < len; ii++) {
      newArr[ii] = arr[ii + offset];
    }
    return newArr;
  }

  function ensureSize(iter) {
    if (iter.size === undefined) {
      iter.size = iter.__iterate(returnTrue);
    }
    return iter.size;
  }

  function wrapIndex(iter, index) {
    if (typeof index !== 'number') {
      var uint32Index = index >>> 0;
      if ('' + uint32Index !== index || uint32Index === 4294967295) {
        return NaN;
      }
      index = uint32Index;
    }
    return index < 0 ? ensureSize(iter) + index : index;
  }

  function returnTrue() {
    return true;
  }

  function wholeSlice(begin, end, size) {
    return (begin === 0 || size !== undefined && begin <= -size) && (end === undefined || size !== undefined && end >= size);
  }

  function resolveBegin(begin, size) {
    return resolveIndex(begin, size, 0);
  }

  function resolveEnd(end, size) {
    return resolveIndex(end, size, size);
  }

  function resolveIndex(index, size, defaultIndex) {
    return index === undefined ? defaultIndex : index < 0 ? Math.max(0, size + index) : size === undefined ? index : Math.min(size, index);
  }

  var ITERATE_KEYS = 0;
  var ITERATE_VALUES = 1;
  var ITERATE_ENTRIES = 2;

  var REAL_ITERATOR_SYMBOL = typeof Symbol === 'function' && (typeof Symbol === 'function' ? Symbol.iterator : '@@iterator');
  var FAUX_ITERATOR_SYMBOL = '@@iterator';

  var ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;

  function Iterator(next) {
    this.next = next;
  }

  Iterator.prototype.toString = function () {
    return '[Iterator]';
  };

  Iterator.KEYS = ITERATE_KEYS;
  Iterator.VALUES = ITERATE_VALUES;
  Iterator.ENTRIES = ITERATE_ENTRIES;

  Iterator.prototype.inspect = Iterator.prototype.toSource = function () {
    return this.toString();
  };
  Iterator.prototype[ITERATOR_SYMBOL] = function () {
    return this;
  };

  function iteratorValue(type, k, v, iteratorResult) {
    var value = type === 0 ? k : type === 1 ? v : [k, v];
    iteratorResult ? iteratorResult.value = value : iteratorResult = {
      value: value, done: false
    };
    return iteratorResult;
  }

  function iteratorDone() {
    return { value: undefined, done: true };
  }

  function hasIterator(maybeIterable) {
    return !!getIteratorFn(maybeIterable);
  }

  function isIterator(maybeIterator) {
    return maybeIterator && typeof maybeIterator.next === 'function';
  }

  function getIterator(iterable) {
    var iteratorFn = getIteratorFn(iterable);
    return iteratorFn && iteratorFn.call(iterable);
  }

  function getIteratorFn(iterable) {
    var iteratorFn = iterable && (REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL] || iterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }

  function isArrayLike(value) {
    return value && typeof value.length === 'number';
  }

  createClass(Seq, Iterable);
  function Seq(value) {
    return value === null || value === undefined ? emptySequence() : isIterable(value) ? value.toSeq() : seqFromValue(value);
  }

  Seq.of = function () {
    return Seq(arguments);
  };

  Seq.prototype.toSeq = function () {
    return this;
  };

  Seq.prototype.toString = function () {
    return this.__toString('Seq {', '}');
  };

  Seq.prototype.cacheResult = function () {
    if (!this._cache && this.__iterateUncached) {
      this._cache = this.entrySeq().toArray();
      this.size = this._cache.length;
    }
    return this;
  };

  Seq.prototype.__iterate = function (fn, reverse) {
    return seqIterate(this, fn, reverse, true);
  };

  Seq.prototype.__iterator = function (type, reverse) {
    return seqIterator(this, type, reverse, true);
  };

  createClass(KeyedSeq, Seq);
  function KeyedSeq(value) {
    return value === null || value === undefined ? emptySequence().toKeyedSeq() : isIterable(value) ? isKeyed(value) ? value.toSeq() : value.fromEntrySeq() : keyedSeqFromValue(value);
  }

  KeyedSeq.prototype.toKeyedSeq = function () {
    return this;
  };

  createClass(IndexedSeq, Seq);
  function IndexedSeq(value) {
    return value === null || value === undefined ? emptySequence() : !isIterable(value) ? indexedSeqFromValue(value) : isKeyed(value) ? value.entrySeq() : value.toIndexedSeq();
  }

  IndexedSeq.of = function () {
    return IndexedSeq(arguments);
  };

  IndexedSeq.prototype.toIndexedSeq = function () {
    return this;
  };

  IndexedSeq.prototype.toString = function () {
    return this.__toString('Seq [', ']');
  };

  IndexedSeq.prototype.__iterate = function (fn, reverse) {
    return seqIterate(this, fn, reverse, false);
  };

  IndexedSeq.prototype.__iterator = function (type, reverse) {
    return seqIterator(this, type, reverse, false);
  };

  createClass(SetSeq, Seq);
  function SetSeq(value) {
    return (value === null || value === undefined ? emptySequence() : !isIterable(value) ? indexedSeqFromValue(value) : isKeyed(value) ? value.entrySeq() : value).toSetSeq();
  }

  SetSeq.of = function () {
    return SetSeq(arguments);
  };

  SetSeq.prototype.toSetSeq = function () {
    return this;
  };

  Seq.isSeq = isSeq;
  Seq.Keyed = KeyedSeq;
  Seq.Set = SetSeq;
  Seq.Indexed = IndexedSeq;

  var IS_SEQ_SENTINEL = '@@__IMMUTABLE_SEQ__@@';

  Seq.prototype[IS_SEQ_SENTINEL] = true;

  createClass(ArraySeq, IndexedSeq);
  function ArraySeq(array) {
    this._array = array;
    this.size = array.length;
  }

  ArraySeq.prototype.get = function (index, notSetValue) {
    return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;
  };

  ArraySeq.prototype.__iterate = function (fn, reverse) {
    var array = this._array;
    var maxIndex = array.length - 1;
    for (var ii = 0; ii <= maxIndex; ii++) {
      if (fn(array[reverse ? maxIndex - ii : ii], ii, this) === false) {
        return ii + 1;
      }
    }
    return ii;
  };

  ArraySeq.prototype.__iterator = function (type, reverse) {
    var array = this._array;
    var maxIndex = array.length - 1;
    var ii = 0;
    return new Iterator(function () {
      return ii > maxIndex ? iteratorDone() : iteratorValue(type, ii, array[reverse ? maxIndex - ii++ : ii++]);
    });
  };

  createClass(ObjectSeq, KeyedSeq);
  function ObjectSeq(object) {
    var keys = Object.keys(object);
    this._object = object;
    this._keys = keys;
    this.size = keys.length;
  }

  ObjectSeq.prototype.get = function (key, notSetValue) {
    if (notSetValue !== undefined && !this.has(key)) {
      return notSetValue;
    }
    return this._object[key];
  };

  ObjectSeq.prototype.has = function (key) {
    return this._object.hasOwnProperty(key);
  };

  ObjectSeq.prototype.__iterate = function (fn, reverse) {
    var object = this._object;
    var keys = this._keys;
    var maxIndex = keys.length - 1;
    for (var ii = 0; ii <= maxIndex; ii++) {
      var key = keys[reverse ? maxIndex - ii : ii];
      if (fn(object[key], key, this) === false) {
        return ii + 1;
      }
    }
    return ii;
  };

  ObjectSeq.prototype.__iterator = function (type, reverse) {
    var object = this._object;
    var keys = this._keys;
    var maxIndex = keys.length - 1;
    var ii = 0;
    return new Iterator(function () {
      var key = keys[reverse ? maxIndex - ii : ii];
      return ii++ > maxIndex ? iteratorDone() : iteratorValue(type, key, object[key]);
    });
  };

  ObjectSeq.prototype[IS_ORDERED_SENTINEL] = true;

  createClass(IterableSeq, IndexedSeq);
  function IterableSeq(iterable) {
    this._iterable = iterable;
    this.size = iterable.length || iterable.size;
  }

  IterableSeq.prototype.__iterateUncached = function (fn, reverse) {
    if (reverse) {
      return this.cacheResult().__iterate(fn, reverse);
    }
    var iterable = this._iterable;
    var iterator = getIterator(iterable);
    var iterations = 0;
    if (isIterator(iterator)) {
      var step;
      while (!(step = iterator.next()).done) {
        if (fn(step.value, iterations++, this) === false) {
          break;
        }
      }
    }
    return iterations;
  };

  IterableSeq.prototype.__iteratorUncached = function (type, reverse) {
    if (reverse) {
      return this.cacheResult().__iterator(type, reverse);
    }
    var iterable = this._iterable;
    var iterator = getIterator(iterable);
    if (!isIterator(iterator)) {
      return new Iterator(iteratorDone);
    }
    var iterations = 0;
    return new Iterator(function () {
      var step = iterator.next();
      return step.done ? step : iteratorValue(type, iterations++, step.value);
    });
  };

  createClass(IteratorSeq, IndexedSeq);
  function IteratorSeq(iterator) {
    this._iterator = iterator;
    this._iteratorCache = [];
  }

  IteratorSeq.prototype.__iterateUncached = function (fn, reverse) {
    if (reverse) {
      return this.cacheResult().__iterate(fn, reverse);
    }
    var iterator = this._iterator;
    var cache = this._iteratorCache;
    var iterations = 0;
    while (iterations < cache.length) {
      if (fn(cache[iterations], iterations++, this) === false) {
        return iterations;
      }
    }
    var step;
    while (!(step = iterator.next()).done) {
      var val = step.value;
      cache[iterations] = val;
      if (fn(val, iterations++, this) === false) {
        break;
      }
    }
    return iterations;
  };

  IteratorSeq.prototype.__iteratorUncached = function (type, reverse) {
    if (reverse) {
      return this.cacheResult().__iterator(type, reverse);
    }
    var iterator = this._iterator;
    var cache = this._iteratorCache;
    var iterations = 0;
    return new Iterator(function () {
      if (iterations >= cache.length) {
        var step = iterator.next();
        if (step.done) {
          return step;
        }
        cache[iterations] = step.value;
      }
      return iteratorValue(type, iterations, cache[iterations++]);
    });
  };

  function isSeq(maybeSeq) {
    return !!(maybeSeq && maybeSeq[IS_SEQ_SENTINEL]);
  }

  var EMPTY_SEQ;

  function emptySequence() {
    return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));
  }

  function keyedSeqFromValue(value) {
    var seq = Array.isArray(value) ? new ArraySeq(value).fromEntrySeq() : isIterator(value) ? new IteratorSeq(value).fromEntrySeq() : hasIterator(value) ? new IterableSeq(value).fromEntrySeq() : typeof value === 'object' ? new ObjectSeq(value) : undefined;
    if (!seq) {
      throw new TypeError('Expected Array or iterable object of [k, v] entries, ' + 'or keyed object: ' + value);
    }
    return seq;
  }

  function indexedSeqFromValue(value) {
    var seq = maybeIndexedSeqFromValue(value);
    if (!seq) {
      throw new TypeError('Expected Array or iterable object of values: ' + value);
    }
    return seq;
  }

  function seqFromValue(value) {
    var seq = maybeIndexedSeqFromValue(value) || typeof value === 'object' && new ObjectSeq(value);
    if (!seq) {
      throw new TypeError('Expected Array or iterable object of values, or keyed object: ' + value);
    }
    return seq;
  }

  function maybeIndexedSeqFromValue(value) {
    return isArrayLike(value) ? new ArraySeq(value) : isIterator(value) ? new IteratorSeq(value) : hasIterator(value) ? new IterableSeq(value) : undefined;
  }

  function seqIterate(seq, fn, reverse, useKeys) {
    var cache = seq._cache;
    if (cache) {
      var maxIndex = cache.length - 1;
      for (var ii = 0; ii <= maxIndex; ii++) {
        var entry = cache[reverse ? maxIndex - ii : ii];
        if (fn(entry[1], useKeys ? entry[0] : ii, seq) === false) {
          return ii + 1;
        }
      }
      return ii;
    }
    return seq.__iterateUncached(fn, reverse);
  }

  function seqIterator(seq, type, reverse, useKeys) {
    var cache = seq._cache;
    if (cache) {
      var maxIndex = cache.length - 1;
      var ii = 0;
      return new Iterator(function () {
        var entry = cache[reverse ? maxIndex - ii : ii];
        return ii++ > maxIndex ? iteratorDone() : iteratorValue(type, useKeys ? entry[0] : ii - 1, entry[1]);
      });
    }
    return seq.__iteratorUncached(type, reverse);
  }

  function fromJS(json, converter) {
    return converter ? fromJSWith(converter, json, '', { '': json }) : fromJSDefault(json);
  }

  function fromJSWith(converter, json, key, parentJSON) {
    if (Array.isArray(json)) {
      return converter.call(parentJSON, key, IndexedSeq(json).map(function (v, k) {
        return fromJSWith(converter, v, k, json);
      }));
    }
    if (isPlainObj(json)) {
      return converter.call(parentJSON, key, KeyedSeq(json).map(function (v, k) {
        return fromJSWith(converter, v, k, json);
      }));
    }
    return json;
  }

  function fromJSDefault(json) {
    if (Array.isArray(json)) {
      return IndexedSeq(json).map(fromJSDefault).toList();
    }
    if (isPlainObj(json)) {
      return KeyedSeq(json).map(fromJSDefault).toMap();
    }
    return json;
  }

  function isPlainObj(value) {
    return value && (value.constructor === Object || value.constructor === undefined);
  }

  function is(valueA, valueB) {
    if (valueA === valueB || valueA !== valueA && valueB !== valueB) {
      return true;
    }
    if (!valueA || !valueB) {
      return false;
    }
    if (typeof valueA.valueOf === 'function' && typeof valueB.valueOf === 'function') {
      valueA = valueA.valueOf();
      valueB = valueB.valueOf();
      if (valueA === valueB || valueA !== valueA && valueB !== valueB) {
        return true;
      }
      if (!valueA || !valueB) {
        return false;
      }
    }
    if (typeof valueA.equals === 'function' && typeof valueB.equals === 'function' && valueA.equals(valueB)) {
      return true;
    }
    return false;
  }

  function deepEqual(a, b) {
    if (a === b) {
      return true;
    }

    if (!isIterable(b) || a.size !== undefined && b.size !== undefined && a.size !== b.size || a.__hash !== undefined && b.__hash !== undefined && a.__hash !== b.__hash || isKeyed(a) !== isKeyed(b) || isIndexed(a) !== isIndexed(b) || isOrdered(a) !== isOrdered(b)) {
      return false;
    }

    if (a.size === 0 && b.size === 0) {
      return true;
    }

    var notAssociative = !isAssociative(a);

    if (isOrdered(a)) {
      var entries = a.entries();
      return b.every(function (v, k) {
        var entry = entries.next().value;
        return entry && is(entry[1], v) && (notAssociative || is(entry[0], k));
      }) && entries.next().done;
    }

    var flipped = false;

    if (a.size === undefined) {
      if (b.size === undefined) {
        if (typeof a.cacheResult === 'function') {
          a.cacheResult();
        }
      } else {
        flipped = true;
        var _ = a;
        a = b;
        b = _;
      }
    }

    var allEqual = true;
    var bSize = b.__iterate(function (v, k) {
      if (notAssociative ? !a.has(v) : flipped ? !is(v, a.get(k, NOT_SET)) : !is(a.get(k, NOT_SET), v)) {
        allEqual = false;
        return false;
      }
    });

    return allEqual && a.size === bSize;
  }

  createClass(Repeat, IndexedSeq);

  function Repeat(value, times) {
    if (!(this instanceof Repeat)) {
      return new Repeat(value, times);
    }
    this._value = value;
    this.size = times === undefined ? Infinity : Math.max(0, times);
    if (this.size === 0) {
      if (EMPTY_REPEAT) {
        return EMPTY_REPEAT;
      }
      EMPTY_REPEAT = this;
    }
  }

  Repeat.prototype.toString = function () {
    if (this.size === 0) {
      return 'Repeat []';
    }
    return 'Repeat [ ' + this._value + ' ' + this.size + ' times ]';
  };

  Repeat.prototype.get = function (index, notSetValue) {
    return this.has(index) ? this._value : notSetValue;
  };

  Repeat.prototype.includes = function (searchValue) {
    return is(this._value, searchValue);
  };

  Repeat.prototype.slice = function (begin, end) {
    var size = this.size;
    return wholeSlice(begin, end, size) ? this : new Repeat(this._value, resolveEnd(end, size) - resolveBegin(begin, size));
  };

  Repeat.prototype.reverse = function () {
    return this;
  };

  Repeat.prototype.indexOf = function (searchValue) {
    if (is(this._value, searchValue)) {
      return 0;
    }
    return -1;
  };

  Repeat.prototype.lastIndexOf = function (searchValue) {
    if (is(this._value, searchValue)) {
      return this.size;
    }
    return -1;
  };

  Repeat.prototype.__iterate = function (fn, reverse) {
    for (var ii = 0; ii < this.size; ii++) {
      if (fn(this._value, ii, this) === false) {
        return ii + 1;
      }
    }
    return ii;
  };

  Repeat.prototype.__iterator = function (type, reverse) {
    var this$0 = this;
    var ii = 0;
    return new Iterator(function () {
      return ii < this$0.size ? iteratorValue(type, ii++, this$0._value) : iteratorDone();
    });
  };

  Repeat.prototype.equals = function (other) {
    return other instanceof Repeat ? is(this._value, other._value) : deepEqual(other);
  };

  var EMPTY_REPEAT;

  function invariant(condition, error) {
    if (!condition) throw new Error(error);
  }

  createClass(Range, IndexedSeq);

  function Range(start, end, step) {
    if (!(this instanceof Range)) {
      return new Range(start, end, step);
    }
    invariant(step !== 0, 'Cannot step a Range by 0');
    start = start || 0;
    if (end === undefined) {
      end = Infinity;
    }
    step = step === undefined ? 1 : Math.abs(step);
    if (end < start) {
      step = -step;
    }
    this._start = start;
    this._end = end;
    this._step = step;
    this.size = Math.max(0, Math.ceil((end - start) / step - 1) + 1);
    if (this.size === 0) {
      if (EMPTY_RANGE) {
        return EMPTY_RANGE;
      }
      EMPTY_RANGE = this;
    }
  }

  Range.prototype.toString = function () {
    if (this.size === 0) {
      return 'Range []';
    }
    return 'Range [ ' + this._start + '...' + this._end + (this._step > 1 ? ' by ' + this._step : '') + ' ]';
  };

  Range.prototype.get = function (index, notSetValue) {
    return this.has(index) ? this._start + wrapIndex(this, index) * this._step : notSetValue;
  };

  Range.prototype.includes = function (searchValue) {
    var possibleIndex = (searchValue - this._start) / this._step;
    return possibleIndex >= 0 && possibleIndex < this.size && possibleIndex === Math.floor(possibleIndex);
  };

  Range.prototype.slice = function (begin, end) {
    if (wholeSlice(begin, end, this.size)) {
      return this;
    }
    begin = resolveBegin(begin, this.size);
    end = resolveEnd(end, this.size);
    if (end <= begin) {
      return new Range(0, 0);
    }
    return new Range(this.get(begin, this._end), this.get(end, this._end), this._step);
  };

  Range.prototype.indexOf = function (searchValue) {
    var offsetValue = searchValue - this._start;
    if (offsetValue % this._step === 0) {
      var index = offsetValue / this._step;
      if (index >= 0 && index < this.size) {
        return index;
      }
    }
    return -1;
  };

  Range.prototype.lastIndexOf = function (searchValue) {
    return this.indexOf(searchValue);
  };

  Range.prototype.__iterate = function (fn, reverse) {
    var maxIndex = this.size - 1;
    var step = this._step;
    var value = reverse ? this._start + maxIndex * step : this._start;
    for (var ii = 0; ii <= maxIndex; ii++) {
      if (fn(value, ii, this) === false) {
        return ii + 1;
      }
      value += reverse ? -step : step;
    }
    return ii;
  };

  Range.prototype.__iterator = function (type, reverse) {
    var maxIndex = this.size - 1;
    var step = this._step;
    var value = reverse ? this._start + maxIndex * step : this._start;
    var ii = 0;
    return new Iterator(function () {
      var v = value;
      value += reverse ? -step : step;
      return ii > maxIndex ? iteratorDone() : iteratorValue(type, ii++, v);
    });
  };

  Range.prototype.equals = function (other) {
    return other instanceof Range ? this._start === other._start && this._end === other._end && this._step === other._step : deepEqual(this, other);
  };

  var EMPTY_RANGE;

  createClass(Collection, Iterable);
  function Collection() {
    throw TypeError('Abstract');
  }

  createClass(KeyedCollection, Collection);function KeyedCollection() {}

  createClass(IndexedCollection, Collection);function IndexedCollection() {}

  createClass(SetCollection, Collection);function SetCollection() {}

  Collection.Keyed = KeyedCollection;
  Collection.Indexed = IndexedCollection;
  Collection.Set = SetCollection;

  var imul = typeof Math.imul === 'function' && Math.imul(0xffffffff, 2) === -2 ? Math.imul : function imul(a, b) {
    a = a | 0;
    b = b | 0;
    var c = a & 0xffff;
    var d = b & 0xffff;

    return c * d + ((a >>> 16) * d + c * (b >>> 16) << 16 >>> 0) | 0;
  };

  function smi(i32) {
    return i32 >>> 1 & 0x40000000 | i32 & 0xBFFFFFFF;
  }

  function hash(o) {
    if (o === false || o === null || o === undefined) {
      return 0;
    }
    if (typeof o.valueOf === 'function') {
      o = o.valueOf();
      if (o === false || o === null || o === undefined) {
        return 0;
      }
    }
    if (o === true) {
      return 1;
    }
    var type = typeof o;
    if (type === 'number') {
      var h = o | 0;
      if (h !== o) {
        h ^= o * 0xFFFFFFFF;
      }
      while (o > 0xFFFFFFFF) {
        o /= 0xFFFFFFFF;
        h ^= o;
      }
      return smi(h);
    }
    if (type === 'string') {
      return o.length > STRING_HASH_CACHE_MIN_STRLEN ? cachedHashString(o) : hashString(o);
    }
    if (typeof o.hashCode === 'function') {
      return o.hashCode();
    }
    if (type === 'object') {
      return hashJSObj(o);
    }
    if (typeof o.toString === 'function') {
      return hashString(o.toString());
    }
    throw new Error('Value type ' + type + ' cannot be hashed.');
  }

  function cachedHashString(string) {
    var hash = stringHashCache[string];
    if (hash === undefined) {
      hash = hashString(string);
      if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {
        STRING_HASH_CACHE_SIZE = 0;
        stringHashCache = {};
      }
      STRING_HASH_CACHE_SIZE++;
      stringHashCache[string] = hash;
    }
    return hash;
  }

  function hashString(string) {
    var hash = 0;
    for (var ii = 0; ii < string.length; ii++) {
      hash = 31 * hash + string.charCodeAt(ii) | 0;
    }
    return smi(hash);
  }

  function hashJSObj(obj) {
    var hash;
    if (usingWeakMap) {
      hash = weakMap.get(obj);
      if (hash !== undefined) {
        return hash;
      }
    }

    hash = obj[UID_HASH_KEY];
    if (hash !== undefined) {
      return hash;
    }

    if (!canDefineProperty) {
      hash = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];
      if (hash !== undefined) {
        return hash;
      }

      hash = getIENodeHash(obj);
      if (hash !== undefined) {
        return hash;
      }
    }

    hash = ++objHashUID;
    if (objHashUID & 0x40000000) {
      objHashUID = 0;
    }

    if (usingWeakMap) {
      weakMap.set(obj, hash);
    } else if (isExtensible !== undefined && isExtensible(obj) === false) {
      throw new Error('Non-extensible objects are not allowed as keys.');
    } else if (canDefineProperty) {
      Object.defineProperty(obj, UID_HASH_KEY, {
        'enumerable': false,
        'configurable': false,
        'writable': false,
        'value': hash
      });
    } else if (obj.propertyIsEnumerable !== undefined && obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable) {
      obj.propertyIsEnumerable = function () {
        return this.constructor.prototype.propertyIsEnumerable.apply(this, arguments);
      };
      obj.propertyIsEnumerable[UID_HASH_KEY] = hash;
    } else if (obj.nodeType !== undefined) {
      obj[UID_HASH_KEY] = hash;
    } else {
      throw new Error('Unable to set a non-enumerable property on object.');
    }

    return hash;
  }

  var isExtensible = Object.isExtensible;

  var canDefineProperty = function () {
    try {
      Object.defineProperty({}, '@', {});
      return true;
    } catch (e) {
      return false;
    }
  }();

  function getIENodeHash(node) {
    if (node && node.nodeType > 0) {
      switch (node.nodeType) {
        case 1:
          return node.uniqueID;
        case 9:
          return node.documentElement && node.documentElement.uniqueID;
      }
    }
  }

  var usingWeakMap = typeof WeakMap === 'function';
  var weakMap;
  if (usingWeakMap) {
    weakMap = new WeakMap();
  }

  var objHashUID = 0;

  var UID_HASH_KEY = '__immutablehash__';
  if (typeof Symbol === 'function') {
    UID_HASH_KEY = Symbol(UID_HASH_KEY);
  }

  var STRING_HASH_CACHE_MIN_STRLEN = 16;
  var STRING_HASH_CACHE_MAX_SIZE = 255;
  var STRING_HASH_CACHE_SIZE = 0;
  var stringHashCache = {};

  function assertNotInfinite(size) {
    invariant(size !== Infinity, 'Cannot perform this action with an infinite size.');
  }

  createClass(Map, KeyedCollection);

  function Map(value) {
    return value === null || value === undefined ? emptyMap() : isMap(value) && !isOrdered(value) ? value : emptyMap().withMutations(function (map) {
      var iter = KeyedIterable(value);
      assertNotInfinite(iter.size);
      iter.forEach(function (v, k) {
        return map.set(k, v);
      });
    });
  }

  Map.prototype.toString = function () {
    return this.__toString('Map {', '}');
  };

  Map.prototype.get = function (k, notSetValue) {
    return this._root ? this._root.get(0, undefined, k, notSetValue) : notSetValue;
  };

  Map.prototype.set = function (k, v) {
    return updateMap(this, k, v);
  };

  Map.prototype.setIn = function (keyPath, v) {
    return this.updateIn(keyPath, NOT_SET, function () {
      return v;
    });
  };

  Map.prototype.remove = function (k) {
    return updateMap(this, k, NOT_SET);
  };

  Map.prototype.deleteIn = function (keyPath) {
    return this.updateIn(keyPath, function () {
      return NOT_SET;
    });
  };

  Map.prototype.update = function (k, notSetValue, updater) {
    return arguments.length === 1 ? k(this) : this.updateIn([k], notSetValue, updater);
  };

  Map.prototype.updateIn = function (keyPath, notSetValue, updater) {
    if (!updater) {
      updater = notSetValue;
      notSetValue = undefined;
    }
    var updatedValue = updateInDeepMap(this, forceIterator(keyPath), notSetValue, updater);
    return updatedValue === NOT_SET ? undefined : updatedValue;
  };

  Map.prototype.clear = function () {
    if (this.size === 0) {
      return this;
    }
    if (this.__ownerID) {
      this.size = 0;
      this._root = null;
      this.__hash = undefined;
      this.__altered = true;
      return this;
    }
    return emptyMap();
  };

  Map.prototype.merge = function () {
    return mergeIntoMapWith(this, undefined, arguments);
  };

  Map.prototype.mergeWith = function (merger) {
    var iters = SLICE$0.call(arguments, 1);
    return mergeIntoMapWith(this, merger, iters);
  };

  Map.prototype.mergeIn = function (keyPath) {
    var iters = SLICE$0.call(arguments, 1);
    return this.updateIn(keyPath, emptyMap(), function (m) {
      return typeof m.merge === 'function' ? m.merge.apply(m, iters) : iters[iters.length - 1];
    });
  };

  Map.prototype.mergeDeep = function () {
    return mergeIntoMapWith(this, deepMerger, arguments);
  };

  Map.prototype.mergeDeepWith = function (merger) {
    var iters = SLICE$0.call(arguments, 1);
    return mergeIntoMapWith(this, deepMergerWith(merger), iters);
  };

  Map.prototype.mergeDeepIn = function (keyPath) {
    var iters = SLICE$0.call(arguments, 1);
    return this.updateIn(keyPath, emptyMap(), function (m) {
      return typeof m.mergeDeep === 'function' ? m.mergeDeep.apply(m, iters) : iters[iters.length - 1];
    });
  };

  Map.prototype.sort = function (comparator) {
    return OrderedMap(sortFactory(this, comparator));
  };

  Map.prototype.sortBy = function (mapper, comparator) {
    return OrderedMap(sortFactory(this, comparator, mapper));
  };

  Map.prototype.withMutations = function (fn) {
    var mutable = this.asMutable();
    fn(mutable);
    return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;
  };

  Map.prototype.asMutable = function () {
    return this.__ownerID ? this : this.__ensureOwner(new OwnerID());
  };

  Map.prototype.asImmutable = function () {
    return this.__ensureOwner();
  };

  Map.prototype.wasAltered = function () {
    return this.__altered;
  };

  Map.prototype.__iterator = function (type, reverse) {
    return new MapIterator(this, type, reverse);
  };

  Map.prototype.__iterate = function (fn, reverse) {
    var this$0 = this;
    var iterations = 0;
    this._root && this._root.iterate(function (entry) {
      iterations++;
      return fn(entry[1], entry[0], this$0);
    }, reverse);
    return iterations;
  };

  Map.prototype.__ensureOwner = function (ownerID) {
    if (ownerID === this.__ownerID) {
      return this;
    }
    if (!ownerID) {
      this.__ownerID = ownerID;
      this.__altered = false;
      return this;
    }
    return makeMap(this.size, this._root, ownerID, this.__hash);
  };

  function isMap(maybeMap) {
    return !!(maybeMap && maybeMap[IS_MAP_SENTINEL]);
  }

  Map.isMap = isMap;

  var IS_MAP_SENTINEL = '@@__IMMUTABLE_MAP__@@';

  var MapPrototype = Map.prototype;
  MapPrototype[IS_MAP_SENTINEL] = true;
  MapPrototype[DELETE] = MapPrototype.remove;
  MapPrototype.removeIn = MapPrototype.deleteIn;

  function ArrayMapNode(ownerID, entries) {
    this.ownerID = ownerID;
    this.entries = entries;
  }

  ArrayMapNode.prototype.get = function (shift, keyHash, key, notSetValue) {
    var entries = this.entries;
    for (var ii = 0, len = entries.length; ii < len; ii++) {
      if (is(key, entries[ii][0])) {
        return entries[ii][1];
      }
    }
    return notSetValue;
  };

  ArrayMapNode.prototype.update = function (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
    var removed = value === NOT_SET;

    var entries = this.entries;
    var idx = 0;
    for (var len = entries.length; idx < len; idx++) {
      if (is(key, entries[idx][0])) {
        break;
      }
    }
    var exists = idx < len;

    if (exists ? entries[idx][1] === value : removed) {
      return this;
    }

    SetRef(didAlter);
    (removed || !exists) && SetRef(didChangeSize);

    if (removed && entries.length === 1) {
      return;
    }

    if (!exists && !removed && entries.length >= MAX_ARRAY_MAP_SIZE) {
      return createNodes(ownerID, entries, key, value);
    }

    var isEditable = ownerID && ownerID === this.ownerID;
    var newEntries = isEditable ? entries : arrCopy(entries);

    if (exists) {
      if (removed) {
        idx === len - 1 ? newEntries.pop() : newEntries[idx] = newEntries.pop();
      } else {
        newEntries[idx] = [key, value];
      }
    } else {
      newEntries.push([key, value]);
    }

    if (isEditable) {
      this.entries = newEntries;
      return this;
    }

    return new ArrayMapNode(ownerID, newEntries);
  };

  function BitmapIndexedNode(ownerID, bitmap, nodes) {
    this.ownerID = ownerID;
    this.bitmap = bitmap;
    this.nodes = nodes;
  }

  BitmapIndexedNode.prototype.get = function (shift, keyHash, key, notSetValue) {
    if (keyHash === undefined) {
      keyHash = hash(key);
    }
    var bit = 1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK);
    var bitmap = this.bitmap;
    return (bitmap & bit) === 0 ? notSetValue : this.nodes[popCount(bitmap & bit - 1)].get(shift + SHIFT, keyHash, key, notSetValue);
  };

  BitmapIndexedNode.prototype.update = function (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
    if (keyHash === undefined) {
      keyHash = hash(key);
    }
    var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
    var bit = 1 << keyHashFrag;
    var bitmap = this.bitmap;
    var exists = (bitmap & bit) !== 0;

    if (!exists && value === NOT_SET) {
      return this;
    }

    var idx = popCount(bitmap & bit - 1);
    var nodes = this.nodes;
    var node = exists ? nodes[idx] : undefined;
    var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);

    if (newNode === node) {
      return this;
    }

    if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {
      return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);
    }

    if (exists && !newNode && nodes.length === 2 && isLeafNode(nodes[idx ^ 1])) {
      return nodes[idx ^ 1];
    }

    if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {
      return newNode;
    }

    var isEditable = ownerID && ownerID === this.ownerID;
    var newBitmap = exists ? newNode ? bitmap : bitmap ^ bit : bitmap | bit;
    var newNodes = exists ? newNode ? setIn(nodes, idx, newNode, isEditable) : spliceOut(nodes, idx, isEditable) : spliceIn(nodes, idx, newNode, isEditable);

    if (isEditable) {
      this.bitmap = newBitmap;
      this.nodes = newNodes;
      return this;
    }

    return new BitmapIndexedNode(ownerID, newBitmap, newNodes);
  };

  function HashArrayMapNode(ownerID, count, nodes) {
    this.ownerID = ownerID;
    this.count = count;
    this.nodes = nodes;
  }

  HashArrayMapNode.prototype.get = function (shift, keyHash, key, notSetValue) {
    if (keyHash === undefined) {
      keyHash = hash(key);
    }
    var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
    var node = this.nodes[idx];
    return node ? node.get(shift + SHIFT, keyHash, key, notSetValue) : notSetValue;
  };

  HashArrayMapNode.prototype.update = function (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
    if (keyHash === undefined) {
      keyHash = hash(key);
    }
    var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
    var removed = value === NOT_SET;
    var nodes = this.nodes;
    var node = nodes[idx];

    if (removed && !node) {
      return this;
    }

    var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);
    if (newNode === node) {
      return this;
    }

    var newCount = this.count;
    if (!node) {
      newCount++;
    } else if (!newNode) {
      newCount--;
      if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {
        return packNodes(ownerID, nodes, newCount, idx);
      }
    }

    var isEditable = ownerID && ownerID === this.ownerID;
    var newNodes = setIn(nodes, idx, newNode, isEditable);

    if (isEditable) {
      this.count = newCount;
      this.nodes = newNodes;
      return this;
    }

    return new HashArrayMapNode(ownerID, newCount, newNodes);
  };

  function HashCollisionNode(ownerID, keyHash, entries) {
    this.ownerID = ownerID;
    this.keyHash = keyHash;
    this.entries = entries;
  }

  HashCollisionNode.prototype.get = function (shift, keyHash, key, notSetValue) {
    var entries = this.entries;
    for (var ii = 0, len = entries.length; ii < len; ii++) {
      if (is(key, entries[ii][0])) {
        return entries[ii][1];
      }
    }
    return notSetValue;
  };

  HashCollisionNode.prototype.update = function (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
    if (keyHash === undefined) {
      keyHash = hash(key);
    }

    var removed = value === NOT_SET;

    if (keyHash !== this.keyHash) {
      if (removed) {
        return this;
      }
      SetRef(didAlter);
      SetRef(didChangeSize);
      return mergeIntoNode(this, ownerID, shift, keyHash, [key, value]);
    }

    var entries = this.entries;
    var idx = 0;
    for (var len = entries.length; idx < len; idx++) {
      if (is(key, entries[idx][0])) {
        break;
      }
    }
    var exists = idx < len;

    if (exists ? entries[idx][1] === value : removed) {
      return this;
    }

    SetRef(didAlter);
    (removed || !exists) && SetRef(didChangeSize);

    if (removed && len === 2) {
      return new ValueNode(ownerID, this.keyHash, entries[idx ^ 1]);
    }

    var isEditable = ownerID && ownerID === this.ownerID;
    var newEntries = isEditable ? entries : arrCopy(entries);

    if (exists) {
      if (removed) {
        idx === len - 1 ? newEntries.pop() : newEntries[idx] = newEntries.pop();
      } else {
        newEntries[idx] = [key, value];
      }
    } else {
      newEntries.push([key, value]);
    }

    if (isEditable) {
      this.entries = newEntries;
      return this;
    }

    return new HashCollisionNode(ownerID, this.keyHash, newEntries);
  };

  function ValueNode(ownerID, keyHash, entry) {
    this.ownerID = ownerID;
    this.keyHash = keyHash;
    this.entry = entry;
  }

  ValueNode.prototype.get = function (shift, keyHash, key, notSetValue) {
    return is(key, this.entry[0]) ? this.entry[1] : notSetValue;
  };

  ValueNode.prototype.update = function (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
    var removed = value === NOT_SET;
    var keyMatch = is(key, this.entry[0]);
    if (keyMatch ? value === this.entry[1] : removed) {
      return this;
    }

    SetRef(didAlter);

    if (removed) {
      SetRef(didChangeSize);
      return;
    }

    if (keyMatch) {
      if (ownerID && ownerID === this.ownerID) {
        this.entry[1] = value;
        return this;
      }
      return new ValueNode(ownerID, this.keyHash, [key, value]);
    }

    SetRef(didChangeSize);
    return mergeIntoNode(this, ownerID, shift, hash(key), [key, value]);
  };

  ArrayMapNode.prototype.iterate = HashCollisionNode.prototype.iterate = function (fn, reverse) {
    var entries = this.entries;
    for (var ii = 0, maxIndex = entries.length - 1; ii <= maxIndex; ii++) {
      if (fn(entries[reverse ? maxIndex - ii : ii]) === false) {
        return false;
      }
    }
  };

  BitmapIndexedNode.prototype.iterate = HashArrayMapNode.prototype.iterate = function (fn, reverse) {
    var nodes = this.nodes;
    for (var ii = 0, maxIndex = nodes.length - 1; ii <= maxIndex; ii++) {
      var node = nodes[reverse ? maxIndex - ii : ii];
      if (node && node.iterate(fn, reverse) === false) {
        return false;
      }
    }
  };

  ValueNode.prototype.iterate = function (fn, reverse) {
    return fn(this.entry);
  };

  createClass(MapIterator, Iterator);

  function MapIterator(map, type, reverse) {
    this._type = type;
    this._reverse = reverse;
    this._stack = map._root && mapIteratorFrame(map._root);
  }

  MapIterator.prototype.next = function () {
    var type = this._type;
    var stack = this._stack;
    while (stack) {
      var node = stack.node;
      var index = stack.index++;
      var maxIndex;
      if (node.entry) {
        if (index === 0) {
          return mapIteratorValue(type, node.entry);
        }
      } else if (node.entries) {
        maxIndex = node.entries.length - 1;
        if (index <= maxIndex) {
          return mapIteratorValue(type, node.entries[this._reverse ? maxIndex - index : index]);
        }
      } else {
        maxIndex = node.nodes.length - 1;
        if (index <= maxIndex) {
          var subNode = node.nodes[this._reverse ? maxIndex - index : index];
          if (subNode) {
            if (subNode.entry) {
              return mapIteratorValue(type, subNode.entry);
            }
            stack = this._stack = mapIteratorFrame(subNode, stack);
          }
          continue;
        }
      }
      stack = this._stack = this._stack.__prev;
    }
    return iteratorDone();
  };

  function mapIteratorValue(type, entry) {
    return iteratorValue(type, entry[0], entry[1]);
  }

  function mapIteratorFrame(node, prev) {
    return {
      node: node,
      index: 0,
      __prev: prev
    };
  }

  function makeMap(size, root, ownerID, hash) {
    var map = Object.create(MapPrototype);
    map.size = size;
    map._root = root;
    map.__ownerID = ownerID;
    map.__hash = hash;
    map.__altered = false;
    return map;
  }

  var EMPTY_MAP;
  function emptyMap() {
    return EMPTY_MAP || (EMPTY_MAP = makeMap(0));
  }

  function updateMap(map, k, v) {
    var newRoot;
    var newSize;
    if (!map._root) {
      if (v === NOT_SET) {
        return map;
      }
      newSize = 1;
      newRoot = new ArrayMapNode(map.__ownerID, [[k, v]]);
    } else {
      var didChangeSize = MakeRef(CHANGE_LENGTH);
      var didAlter = MakeRef(DID_ALTER);
      newRoot = updateNode(map._root, map.__ownerID, 0, undefined, k, v, didChangeSize, didAlter);
      if (!didAlter.value) {
        return map;
      }
      newSize = map.size + (didChangeSize.value ? v === NOT_SET ? -1 : 1 : 0);
    }
    if (map.__ownerID) {
      map.size = newSize;
      map._root = newRoot;
      map.__hash = undefined;
      map.__altered = true;
      return map;
    }
    return newRoot ? makeMap(newSize, newRoot) : emptyMap();
  }

  function updateNode(node, ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
    if (!node) {
      if (value === NOT_SET) {
        return node;
      }
      SetRef(didAlter);
      SetRef(didChangeSize);
      return new ValueNode(ownerID, keyHash, [key, value]);
    }
    return node.update(ownerID, shift, keyHash, key, value, didChangeSize, didAlter);
  }

  function isLeafNode(node) {
    return node.constructor === ValueNode || node.constructor === HashCollisionNode;
  }

  function mergeIntoNode(node, ownerID, shift, keyHash, entry) {
    if (node.keyHash === keyHash) {
      return new HashCollisionNode(ownerID, keyHash, [node.entry, entry]);
    }

    var idx1 = (shift === 0 ? node.keyHash : node.keyHash >>> shift) & MASK;
    var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;

    var newNode;
    var nodes = idx1 === idx2 ? [mergeIntoNode(node, ownerID, shift + SHIFT, keyHash, entry)] : (newNode = new ValueNode(ownerID, keyHash, entry), idx1 < idx2 ? [node, newNode] : [newNode, node]);

    return new BitmapIndexedNode(ownerID, 1 << idx1 | 1 << idx2, nodes);
  }

  function createNodes(ownerID, entries, key, value) {
    if (!ownerID) {
      ownerID = new OwnerID();
    }
    var node = new ValueNode(ownerID, hash(key), [key, value]);
    for (var ii = 0; ii < entries.length; ii++) {
      var entry = entries[ii];
      node = node.update(ownerID, 0, undefined, entry[0], entry[1]);
    }
    return node;
  }

  function packNodes(ownerID, nodes, count, excluding) {
    var bitmap = 0;
    var packedII = 0;
    var packedNodes = new Array(count);
    for (var ii = 0, bit = 1, len = nodes.length; ii < len; ii++, bit <<= 1) {
      var node = nodes[ii];
      if (node !== undefined && ii !== excluding) {
        bitmap |= bit;
        packedNodes[packedII++] = node;
      }
    }
    return new BitmapIndexedNode(ownerID, bitmap, packedNodes);
  }

  function expandNodes(ownerID, nodes, bitmap, including, node) {
    var count = 0;
    var expandedNodes = new Array(SIZE);
    for (var ii = 0; bitmap !== 0; ii++, bitmap >>>= 1) {
      expandedNodes[ii] = bitmap & 1 ? nodes[count++] : undefined;
    }
    expandedNodes[including] = node;
    return new HashArrayMapNode(ownerID, count + 1, expandedNodes);
  }

  function mergeIntoMapWith(map, merger, iterables) {
    var iters = [];
    for (var ii = 0; ii < iterables.length; ii++) {
      var value = iterables[ii];
      var iter = KeyedIterable(value);
      if (!isIterable(value)) {
        iter = iter.map(function (v) {
          return fromJS(v);
        });
      }
      iters.push(iter);
    }
    return mergeIntoCollectionWith(map, merger, iters);
  }

  function deepMerger(existing, value, key) {
    return existing && existing.mergeDeep && isIterable(value) ? existing.mergeDeep(value) : is(existing, value) ? existing : value;
  }

  function deepMergerWith(merger) {
    return function (existing, value, key) {
      if (existing && existing.mergeDeepWith && isIterable(value)) {
        return existing.mergeDeepWith(merger, value);
      }
      var nextValue = merger(existing, value, key);
      return is(existing, nextValue) ? existing : nextValue;
    };
  }

  function mergeIntoCollectionWith(collection, merger, iters) {
    iters = iters.filter(function (x) {
      return x.size !== 0;
    });
    if (iters.length === 0) {
      return collection;
    }
    if (collection.size === 0 && !collection.__ownerID && iters.length === 1) {
      return collection.constructor(iters[0]);
    }
    return collection.withMutations(function (collection) {
      var mergeIntoMap = merger ? function (value, key) {
        collection.update(key, NOT_SET, function (existing) {
          return existing === NOT_SET ? value : merger(existing, value, key);
        });
      } : function (value, key) {
        collection.set(key, value);
      };
      for (var ii = 0; ii < iters.length; ii++) {
        iters[ii].forEach(mergeIntoMap);
      }
    });
  }

  function updateInDeepMap(existing, keyPathIter, notSetValue, updater) {
    var isNotSet = existing === NOT_SET;
    var step = keyPathIter.next();
    if (step.done) {
      var existingValue = isNotSet ? notSetValue : existing;
      var newValue = updater(existingValue);
      return newValue === existingValue ? existing : newValue;
    }
    invariant(isNotSet || existing && existing.set, 'invalid keyPath');
    var key = step.value;
    var nextExisting = isNotSet ? NOT_SET : existing.get(key, NOT_SET);
    var nextUpdated = updateInDeepMap(nextExisting, keyPathIter, notSetValue, updater);
    return nextUpdated === nextExisting ? existing : nextUpdated === NOT_SET ? existing.remove(key) : (isNotSet ? emptyMap() : existing).set(key, nextUpdated);
  }

  function popCount(x) {
    x = x - (x >> 1 & 0x55555555);
    x = (x & 0x33333333) + (x >> 2 & 0x33333333);
    x = x + (x >> 4) & 0x0f0f0f0f;
    x = x + (x >> 8);
    x = x + (x >> 16);
    return x & 0x7f;
  }

  function setIn(array, idx, val, canEdit) {
    var newArray = canEdit ? array : arrCopy(array);
    newArray[idx] = val;
    return newArray;
  }

  function spliceIn(array, idx, val, canEdit) {
    var newLen = array.length + 1;
    if (canEdit && idx + 1 === newLen) {
      array[idx] = val;
      return array;
    }
    var newArray = new Array(newLen);
    var after = 0;
    for (var ii = 0; ii < newLen; ii++) {
      if (ii === idx) {
        newArray[ii] = val;
        after = -1;
      } else {
        newArray[ii] = array[ii + after];
      }
    }
    return newArray;
  }

  function spliceOut(array, idx, canEdit) {
    var newLen = array.length - 1;
    if (canEdit && idx === newLen) {
      array.pop();
      return array;
    }
    var newArray = new Array(newLen);
    var after = 0;
    for (var ii = 0; ii < newLen; ii++) {
      if (ii === idx) {
        after = 1;
      }
      newArray[ii] = array[ii + after];
    }
    return newArray;
  }

  var MAX_ARRAY_MAP_SIZE = SIZE / 4;
  var MAX_BITMAP_INDEXED_SIZE = SIZE / 2;
  var MIN_HASH_ARRAY_MAP_SIZE = SIZE / 4;

  createClass(List, IndexedCollection);

  function List(value) {
    var empty = emptyList();
    if (value === null || value === undefined) {
      return empty;
    }
    if (isList(value)) {
      return value;
    }
    var iter = IndexedIterable(value);
    var size = iter.size;
    if (size === 0) {
      return empty;
    }
    assertNotInfinite(size);
    if (size > 0 && size < SIZE) {
      return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));
    }
    return empty.withMutations(function (list) {
      list.setSize(size);
      iter.forEach(function (v, i) {
        return list.set(i, v);
      });
    });
  }

  List.of = function () {
    return this(arguments);
  };

  List.prototype.toString = function () {
    return this.__toString('List [', ']');
  };

  List.prototype.get = function (index, notSetValue) {
    index = wrapIndex(this, index);
    if (index >= 0 && index < this.size) {
      index += this._origin;
      var node = listNodeFor(this, index);
      return node && node.array[index & MASK];
    }
    return notSetValue;
  };

  List.prototype.set = function (index, value) {
    return updateList(this, index, value);
  };

  List.prototype.remove = function (index) {
    return !this.has(index) ? this : index === 0 ? this.shift() : index === this.size - 1 ? this.pop() : this.splice(index, 1);
  };

  List.prototype.insert = function (index, value) {
    return this.splice(index, 0, value);
  };

  List.prototype.clear = function () {
    if (this.size === 0) {
      return this;
    }
    if (this.__ownerID) {
      this.size = this._origin = this._capacity = 0;
      this._level = SHIFT;
      this._root = this._tail = null;
      this.__hash = undefined;
      this.__altered = true;
      return this;
    }
    return emptyList();
  };

  List.prototype.push = function () {
    var values = arguments;
    var oldSize = this.size;
    return this.withMutations(function (list) {
      setListBounds(list, 0, oldSize + values.length);
      for (var ii = 0; ii < values.length; ii++) {
        list.set(oldSize + ii, values[ii]);
      }
    });
  };

  List.prototype.pop = function () {
    return setListBounds(this, 0, -1);
  };

  List.prototype.unshift = function () {
    var values = arguments;
    return this.withMutations(function (list) {
      setListBounds(list, -values.length);
      for (var ii = 0; ii < values.length; ii++) {
        list.set(ii, values[ii]);
      }
    });
  };

  List.prototype.shift = function () {
    return setListBounds(this, 1);
  };

  List.prototype.merge = function () {
    return mergeIntoListWith(this, undefined, arguments);
  };

  List.prototype.mergeWith = function (merger) {
    var iters = SLICE$0.call(arguments, 1);
    return mergeIntoListWith(this, merger, iters);
  };

  List.prototype.mergeDeep = function () {
    return mergeIntoListWith(this, deepMerger, arguments);
  };

  List.prototype.mergeDeepWith = function (merger) {
    var iters = SLICE$0.call(arguments, 1);
    return mergeIntoListWith(this, deepMergerWith(merger), iters);
  };

  List.prototype.setSize = function (size) {
    return setListBounds(this, 0, size);
  };

  List.prototype.slice = function (begin, end) {
    var size = this.size;
    if (wholeSlice(begin, end, size)) {
      return this;
    }
    return setListBounds(this, resolveBegin(begin, size), resolveEnd(end, size));
  };

  List.prototype.__iterator = function (type, reverse) {
    var index = 0;
    var values = iterateList(this, reverse);
    return new Iterator(function () {
      var value = values();
      return value === DONE ? iteratorDone() : iteratorValue(type, index++, value);
    });
  };

  List.prototype.__iterate = function (fn, reverse) {
    var index = 0;
    var values = iterateList(this, reverse);
    var value;
    while ((value = values()) !== DONE) {
      if (fn(value, index++, this) === false) {
        break;
      }
    }
    return index;
  };

  List.prototype.__ensureOwner = function (ownerID) {
    if (ownerID === this.__ownerID) {
      return this;
    }
    if (!ownerID) {
      this.__ownerID = ownerID;
      return this;
    }
    return makeList(this._origin, this._capacity, this._level, this._root, this._tail, ownerID, this.__hash);
  };

  function isList(maybeList) {
    return !!(maybeList && maybeList[IS_LIST_SENTINEL]);
  }

  List.isList = isList;

  var IS_LIST_SENTINEL = '@@__IMMUTABLE_LIST__@@';

  var ListPrototype = List.prototype;
  ListPrototype[IS_LIST_SENTINEL] = true;
  ListPrototype[DELETE] = ListPrototype.remove;
  ListPrototype.setIn = MapPrototype.setIn;
  ListPrototype.deleteIn = ListPrototype.removeIn = MapPrototype.removeIn;
  ListPrototype.update = MapPrototype.update;
  ListPrototype.updateIn = MapPrototype.updateIn;
  ListPrototype.mergeIn = MapPrototype.mergeIn;
  ListPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;
  ListPrototype.withMutations = MapPrototype.withMutations;
  ListPrototype.asMutable = MapPrototype.asMutable;
  ListPrototype.asImmutable = MapPrototype.asImmutable;
  ListPrototype.wasAltered = MapPrototype.wasAltered;

  function VNode(array, ownerID) {
    this.array = array;
    this.ownerID = ownerID;
  }

  VNode.prototype.removeBefore = function (ownerID, level, index) {
    if (index === level ? 1 << level : 0 || this.array.length === 0) {
      return this;
    }
    var originIndex = index >>> level & MASK;
    if (originIndex >= this.array.length) {
      return new VNode([], ownerID);
    }
    var removingFirst = originIndex === 0;
    var newChild;
    if (level > 0) {
      var oldChild = this.array[originIndex];
      newChild = oldChild && oldChild.removeBefore(ownerID, level - SHIFT, index);
      if (newChild === oldChild && removingFirst) {
        return this;
      }
    }
    if (removingFirst && !newChild) {
      return this;
    }
    var editable = editableVNode(this, ownerID);
    if (!removingFirst) {
      for (var ii = 0; ii < originIndex; ii++) {
        editable.array[ii] = undefined;
      }
    }
    if (newChild) {
      editable.array[originIndex] = newChild;
    }
    return editable;
  };

  VNode.prototype.removeAfter = function (ownerID, level, index) {
    if (index === (level ? 1 << level : 0) || this.array.length === 0) {
      return this;
    }
    var sizeIndex = index - 1 >>> level & MASK;
    if (sizeIndex >= this.array.length) {
      return this;
    }

    var newChild;
    if (level > 0) {
      var oldChild = this.array[sizeIndex];
      newChild = oldChild && oldChild.removeAfter(ownerID, level - SHIFT, index);
      if (newChild === oldChild && sizeIndex === this.array.length - 1) {
        return this;
      }
    }

    var editable = editableVNode(this, ownerID);
    editable.array.splice(sizeIndex + 1);
    if (newChild) {
      editable.array[sizeIndex] = newChild;
    }
    return editable;
  };

  var DONE = {};

  function iterateList(list, reverse) {
    var left = list._origin;
    var right = list._capacity;
    var tailPos = getTailOffset(right);
    var tail = list._tail;

    return iterateNodeOrLeaf(list._root, list._level, 0);

    function iterateNodeOrLeaf(node, level, offset) {
      return level === 0 ? iterateLeaf(node, offset) : iterateNode(node, level, offset);
    }

    function iterateLeaf(node, offset) {
      var array = offset === tailPos ? tail && tail.array : node && node.array;
      var from = offset > left ? 0 : left - offset;
      var to = right - offset;
      if (to > SIZE) {
        to = SIZE;
      }
      return function () {
        if (from === to) {
          return DONE;
        }
        var idx = reverse ? --to : from++;
        return array && array[idx];
      };
    }

    function iterateNode(node, level, offset) {
      var values;
      var array = node && node.array;
      var from = offset > left ? 0 : left - offset >> level;
      var to = (right - offset >> level) + 1;
      if (to > SIZE) {
        to = SIZE;
      }
      return function () {
        do {
          if (values) {
            var value = values();
            if (value !== DONE) {
              return value;
            }
            values = null;
          }
          if (from === to) {
            return DONE;
          }
          var idx = reverse ? --to : from++;
          values = iterateNodeOrLeaf(array && array[idx], level - SHIFT, offset + (idx << level));
        } while (true);
      };
    }
  }

  function makeList(origin, capacity, level, root, tail, ownerID, hash) {
    var list = Object.create(ListPrototype);
    list.size = capacity - origin;
    list._origin = origin;
    list._capacity = capacity;
    list._level = level;
    list._root = root;
    list._tail = tail;
    list.__ownerID = ownerID;
    list.__hash = hash;
    list.__altered = false;
    return list;
  }

  var EMPTY_LIST;
  function emptyList() {
    return EMPTY_LIST || (EMPTY_LIST = makeList(0, 0, SHIFT));
  }

  function updateList(list, index, value) {
    index = wrapIndex(list, index);

    if (index !== index) {
      return list;
    }

    if (index >= list.size || index < 0) {
      return list.withMutations(function (list) {
        index < 0 ? setListBounds(list, index).set(0, value) : setListBounds(list, 0, index + 1).set(index, value);
      });
    }

    index += list._origin;

    var newTail = list._tail;
    var newRoot = list._root;
    var didAlter = MakeRef(DID_ALTER);
    if (index >= getTailOffset(list._capacity)) {
      newTail = updateVNode(newTail, list.__ownerID, 0, index, value, didAlter);
    } else {
      newRoot = updateVNode(newRoot, list.__ownerID, list._level, index, value, didAlter);
    }

    if (!didAlter.value) {
      return list;
    }

    if (list.__ownerID) {
      list._root = newRoot;
      list._tail = newTail;
      list.__hash = undefined;
      list.__altered = true;
      return list;
    }
    return makeList(list._origin, list._capacity, list._level, newRoot, newTail);
  }

  function updateVNode(node, ownerID, level, index, value, didAlter) {
    var idx = index >>> level & MASK;
    var nodeHas = node && idx < node.array.length;
    if (!nodeHas && value === undefined) {
      return node;
    }

    var newNode;

    if (level > 0) {
      var lowerNode = node && node.array[idx];
      var newLowerNode = updateVNode(lowerNode, ownerID, level - SHIFT, index, value, didAlter);
      if (newLowerNode === lowerNode) {
        return node;
      }
      newNode = editableVNode(node, ownerID);
      newNode.array[idx] = newLowerNode;
      return newNode;
    }

    if (nodeHas && node.array[idx] === value) {
      return node;
    }

    SetRef(didAlter);

    newNode = editableVNode(node, ownerID);
    if (value === undefined && idx === newNode.array.length - 1) {
      newNode.array.pop();
    } else {
      newNode.array[idx] = value;
    }
    return newNode;
  }

  function editableVNode(node, ownerID) {
    if (ownerID && node && ownerID === node.ownerID) {
      return node;
    }
    return new VNode(node ? node.array.slice() : [], ownerID);
  }

  function listNodeFor(list, rawIndex) {
    if (rawIndex >= getTailOffset(list._capacity)) {
      return list._tail;
    }
    if (rawIndex < 1 << list._level + SHIFT) {
      var node = list._root;
      var level = list._level;
      while (node && level > 0) {
        node = node.array[rawIndex >>> level & MASK];
        level -= SHIFT;
      }
      return node;
    }
  }

  function setListBounds(list, begin, end) {
    if (begin !== undefined) {
      begin = begin | 0;
    }
    if (end !== undefined) {
      end = end | 0;
    }
    var owner = list.__ownerID || new OwnerID();
    var oldOrigin = list._origin;
    var oldCapacity = list._capacity;
    var newOrigin = oldOrigin + begin;
    var newCapacity = end === undefined ? oldCapacity : end < 0 ? oldCapacity + end : oldOrigin + end;
    if (newOrigin === oldOrigin && newCapacity === oldCapacity) {
      return list;
    }

    if (newOrigin >= newCapacity) {
      return list.clear();
    }

    var newLevel = list._level;
    var newRoot = list._root;

    var offsetShift = 0;
    while (newOrigin + offsetShift < 0) {
      newRoot = new VNode(newRoot && newRoot.array.length ? [undefined, newRoot] : [], owner);
      newLevel += SHIFT;
      offsetShift += 1 << newLevel;
    }
    if (offsetShift) {
      newOrigin += offsetShift;
      oldOrigin += offsetShift;
      newCapacity += offsetShift;
      oldCapacity += offsetShift;
    }

    var oldTailOffset = getTailOffset(oldCapacity);
    var newTailOffset = getTailOffset(newCapacity);

    while (newTailOffset >= 1 << newLevel + SHIFT) {
      newRoot = new VNode(newRoot && newRoot.array.length ? [newRoot] : [], owner);
      newLevel += SHIFT;
    }

    var oldTail = list._tail;
    var newTail = newTailOffset < oldTailOffset ? listNodeFor(list, newCapacity - 1) : newTailOffset > oldTailOffset ? new VNode([], owner) : oldTail;

    if (oldTail && newTailOffset > oldTailOffset && newOrigin < oldCapacity && oldTail.array.length) {
      newRoot = editableVNode(newRoot, owner);
      var node = newRoot;
      for (var level = newLevel; level > SHIFT; level -= SHIFT) {
        var idx = oldTailOffset >>> level & MASK;
        node = node.array[idx] = editableVNode(node.array[idx], owner);
      }
      node.array[oldTailOffset >>> SHIFT & MASK] = oldTail;
    }

    if (newCapacity < oldCapacity) {
      newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);
    }

    if (newOrigin >= newTailOffset) {
      newOrigin -= newTailOffset;
      newCapacity -= newTailOffset;
      newLevel = SHIFT;
      newRoot = null;
      newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);
    } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {
      offsetShift = 0;

      while (newRoot) {
        var beginIndex = newOrigin >>> newLevel & MASK;
        if (beginIndex !== newTailOffset >>> newLevel & MASK) {
          break;
        }
        if (beginIndex) {
          offsetShift += (1 << newLevel) * beginIndex;
        }
        newLevel -= SHIFT;
        newRoot = newRoot.array[beginIndex];
      }

      if (newRoot && newOrigin > oldOrigin) {
        newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);
      }
      if (newRoot && newTailOffset < oldTailOffset) {
        newRoot = newRoot.removeAfter(owner, newLevel, newTailOffset - offsetShift);
      }
      if (offsetShift) {
        newOrigin -= offsetShift;
        newCapacity -= offsetShift;
      }
    }

    if (list.__ownerID) {
      list.size = newCapacity - newOrigin;
      list._origin = newOrigin;
      list._capacity = newCapacity;
      list._level = newLevel;
      list._root = newRoot;
      list._tail = newTail;
      list.__hash = undefined;
      list.__altered = true;
      return list;
    }
    return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);
  }

  function mergeIntoListWith(list, merger, iterables) {
    var iters = [];
    var maxSize = 0;
    for (var ii = 0; ii < iterables.length; ii++) {
      var value = iterables[ii];
      var iter = IndexedIterable(value);
      if (iter.size > maxSize) {
        maxSize = iter.size;
      }
      if (!isIterable(value)) {
        iter = iter.map(function (v) {
          return fromJS(v);
        });
      }
      iters.push(iter);
    }
    if (maxSize > list.size) {
      list = list.setSize(maxSize);
    }
    return mergeIntoCollectionWith(list, merger, iters);
  }

  function getTailOffset(size) {
    return size < SIZE ? 0 : size - 1 >>> SHIFT << SHIFT;
  }

  createClass(OrderedMap, Map);

  function OrderedMap(value) {
    return value === null || value === undefined ? emptyOrderedMap() : isOrderedMap(value) ? value : emptyOrderedMap().withMutations(function (map) {
      var iter = KeyedIterable(value);
      assertNotInfinite(iter.size);
      iter.forEach(function (v, k) {
        return map.set(k, v);
      });
    });
  }

  OrderedMap.of = function () {
    return this(arguments);
  };

  OrderedMap.prototype.toString = function () {
    return this.__toString('OrderedMap {', '}');
  };

  OrderedMap.prototype.get = function (k, notSetValue) {
    var index = this._map.get(k);
    return index !== undefined ? this._list.get(index)[1] : notSetValue;
  };

  OrderedMap.prototype.clear = function () {
    if (this.size === 0) {
      return this;
    }
    if (this.__ownerID) {
      this.size = 0;
      this._map.clear();
      this._list.clear();
      return this;
    }
    return emptyOrderedMap();
  };

  OrderedMap.prototype.set = function (k, v) {
    return updateOrderedMap(this, k, v);
  };

  OrderedMap.prototype.remove = function (k) {
    return updateOrderedMap(this, k, NOT_SET);
  };

  OrderedMap.prototype.wasAltered = function () {
    return this._map.wasAltered() || this._list.wasAltered();
  };

  OrderedMap.prototype.__iterate = function (fn, reverse) {
    var this$0 = this;
    return this._list.__iterate(function (entry) {
      return entry && fn(entry[1], entry[0], this$0);
    }, reverse);
  };

  OrderedMap.prototype.__iterator = function (type, reverse) {
    return this._list.fromEntrySeq().__iterator(type, reverse);
  };

  OrderedMap.prototype.__ensureOwner = function (ownerID) {
    if (ownerID === this.__ownerID) {
      return this;
    }
    var newMap = this._map.__ensureOwner(ownerID);
    var newList = this._list.__ensureOwner(ownerID);
    if (!ownerID) {
      this.__ownerID = ownerID;
      this._map = newMap;
      this._list = newList;
      return this;
    }
    return makeOrderedMap(newMap, newList, ownerID, this.__hash);
  };

  function isOrderedMap(maybeOrderedMap) {
    return isMap(maybeOrderedMap) && isOrdered(maybeOrderedMap);
  }

  OrderedMap.isOrderedMap = isOrderedMap;

  OrderedMap.prototype[IS_ORDERED_SENTINEL] = true;
  OrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;

  function makeOrderedMap(map, list, ownerID, hash) {
    var omap = Object.create(OrderedMap.prototype);
    omap.size = map ? map.size : 0;
    omap._map = map;
    omap._list = list;
    omap.__ownerID = ownerID;
    omap.__hash = hash;
    return omap;
  }

  var EMPTY_ORDERED_MAP;
  function emptyOrderedMap() {
    return EMPTY_ORDERED_MAP || (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()));
  }

  function updateOrderedMap(omap, k, v) {
    var map = omap._map;
    var list = omap._list;
    var i = map.get(k);
    var has = i !== undefined;
    var newMap;
    var newList;
    if (v === NOT_SET) {
      if (!has) {
        return omap;
      }
      if (list.size >= SIZE && list.size >= map.size * 2) {
        newList = list.filter(function (entry, idx) {
          return entry !== undefined && i !== idx;
        });
        newMap = newList.toKeyedSeq().map(function (entry) {
          return entry[0];
        }).flip().toMap();
        if (omap.__ownerID) {
          newMap.__ownerID = newList.__ownerID = omap.__ownerID;
        }
      } else {
        newMap = map.remove(k);
        newList = i === list.size - 1 ? list.pop() : list.set(i, undefined);
      }
    } else {
      if (has) {
        if (v === list.get(i)[1]) {
          return omap;
        }
        newMap = map;
        newList = list.set(i, [k, v]);
      } else {
        newMap = map.set(k, list.size);
        newList = list.set(list.size, [k, v]);
      }
    }
    if (omap.__ownerID) {
      omap.size = newMap.size;
      omap._map = newMap;
      omap._list = newList;
      omap.__hash = undefined;
      return omap;
    }
    return makeOrderedMap(newMap, newList);
  }

  createClass(ToKeyedSequence, KeyedSeq);
  function ToKeyedSequence(indexed, useKeys) {
    this._iter = indexed;
    this._useKeys = useKeys;
    this.size = indexed.size;
  }

  ToKeyedSequence.prototype.get = function (key, notSetValue) {
    return this._iter.get(key, notSetValue);
  };

  ToKeyedSequence.prototype.has = function (key) {
    return this._iter.has(key);
  };

  ToKeyedSequence.prototype.valueSeq = function () {
    return this._iter.valueSeq();
  };

  ToKeyedSequence.prototype.reverse = function () {
    var this$0 = this;
    var reversedSequence = reverseFactory(this, true);
    if (!this._useKeys) {
      reversedSequence.valueSeq = function () {
        return this$0._iter.toSeq().reverse();
      };
    }
    return reversedSequence;
  };

  ToKeyedSequence.prototype.map = function (mapper, context) {
    var this$0 = this;
    var mappedSequence = mapFactory(this, mapper, context);
    if (!this._useKeys) {
      mappedSequence.valueSeq = function () {
        return this$0._iter.toSeq().map(mapper, context);
      };
    }
    return mappedSequence;
  };

  ToKeyedSequence.prototype.__iterate = function (fn, reverse) {
    var this$0 = this;
    var ii;
    return this._iter.__iterate(this._useKeys ? function (v, k) {
      return fn(v, k, this$0);
    } : (ii = reverse ? resolveSize(this) : 0, function (v) {
      return fn(v, reverse ? --ii : ii++, this$0);
    }), reverse);
  };

  ToKeyedSequence.prototype.__iterator = function (type, reverse) {
    if (this._useKeys) {
      return this._iter.__iterator(type, reverse);
    }
    var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
    var ii = reverse ? resolveSize(this) : 0;
    return new Iterator(function () {
      var step = iterator.next();
      return step.done ? step : iteratorValue(type, reverse ? --ii : ii++, step.value, step);
    });
  };

  ToKeyedSequence.prototype[IS_ORDERED_SENTINEL] = true;

  createClass(ToIndexedSequence, IndexedSeq);
  function ToIndexedSequence(iter) {
    this._iter = iter;
    this.size = iter.size;
  }

  ToIndexedSequence.prototype.includes = function (value) {
    return this._iter.includes(value);
  };

  ToIndexedSequence.prototype.__iterate = function (fn, reverse) {
    var this$0 = this;
    var iterations = 0;
    return this._iter.__iterate(function (v) {
      return fn(v, iterations++, this$0);
    }, reverse);
  };

  ToIndexedSequence.prototype.__iterator = function (type, reverse) {
    var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
    var iterations = 0;
    return new Iterator(function () {
      var step = iterator.next();
      return step.done ? step : iteratorValue(type, iterations++, step.value, step);
    });
  };

  createClass(ToSetSequence, SetSeq);
  function ToSetSequence(iter) {
    this._iter = iter;
    this.size = iter.size;
  }

  ToSetSequence.prototype.has = function (key) {
    return this._iter.includes(key);
  };

  ToSetSequence.prototype.__iterate = function (fn, reverse) {
    var this$0 = this;
    return this._iter.__iterate(function (v) {
      return fn(v, v, this$0);
    }, reverse);
  };

  ToSetSequence.prototype.__iterator = function (type, reverse) {
    var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
    return new Iterator(function () {
      var step = iterator.next();
      return step.done ? step : iteratorValue(type, step.value, step.value, step);
    });
  };

  createClass(FromEntriesSequence, KeyedSeq);
  function FromEntriesSequence(entries) {
    this._iter = entries;
    this.size = entries.size;
  }

  FromEntriesSequence.prototype.entrySeq = function () {
    return this._iter.toSeq();
  };

  FromEntriesSequence.prototype.__iterate = function (fn, reverse) {
    var this$0 = this;
    return this._iter.__iterate(function (entry) {
      if (entry) {
        validateEntry(entry);
        var indexedIterable = isIterable(entry);
        return fn(indexedIterable ? entry.get(1) : entry[1], indexedIterable ? entry.get(0) : entry[0], this$0);
      }
    }, reverse);
  };

  FromEntriesSequence.prototype.__iterator = function (type, reverse) {
    var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
    return new Iterator(function () {
      while (true) {
        var step = iterator.next();
        if (step.done) {
          return step;
        }
        var entry = step.value;

        if (entry) {
          validateEntry(entry);
          var indexedIterable = isIterable(entry);
          return iteratorValue(type, indexedIterable ? entry.get(0) : entry[0], indexedIterable ? entry.get(1) : entry[1], step);
        }
      }
    });
  };

  ToIndexedSequence.prototype.cacheResult = ToKeyedSequence.prototype.cacheResult = ToSetSequence.prototype.cacheResult = FromEntriesSequence.prototype.cacheResult = cacheResultThrough;

  function flipFactory(iterable) {
    var flipSequence = makeSequence(iterable);
    flipSequence._iter = iterable;
    flipSequence.size = iterable.size;
    flipSequence.flip = function () {
      return iterable;
    };
    flipSequence.reverse = function () {
      var reversedSequence = iterable.reverse.apply(this);
      reversedSequence.flip = function () {
        return iterable.reverse();
      };
      return reversedSequence;
    };
    flipSequence.has = function (key) {
      return iterable.includes(key);
    };
    flipSequence.includes = function (key) {
      return iterable.has(key);
    };
    flipSequence.cacheResult = cacheResultThrough;
    flipSequence.__iterateUncached = function (fn, reverse) {
      var this$0 = this;
      return iterable.__iterate(function (v, k) {
        return fn(k, v, this$0) !== false;
      }, reverse);
    };
    flipSequence.__iteratorUncached = function (type, reverse) {
      if (type === ITERATE_ENTRIES) {
        var iterator = iterable.__iterator(type, reverse);
        return new Iterator(function () {
          var step = iterator.next();
          if (!step.done) {
            var k = step.value[0];
            step.value[0] = step.value[1];
            step.value[1] = k;
          }
          return step;
        });
      }
      return iterable.__iterator(type === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES, reverse);
    };
    return flipSequence;
  }

  function mapFactory(iterable, mapper, context) {
    var mappedSequence = makeSequence(iterable);
    mappedSequence.size = iterable.size;
    mappedSequence.has = function (key) {
      return iterable.has(key);
    };
    mappedSequence.get = function (key, notSetValue) {
      var v = iterable.get(key, NOT_SET);
      return v === NOT_SET ? notSetValue : mapper.call(context, v, key, iterable);
    };
    mappedSequence.__iterateUncached = function (fn, reverse) {
      var this$0 = this;
      return iterable.__iterate(function (v, k, c) {
        return fn(mapper.call(context, v, k, c), k, this$0) !== false;
      }, reverse);
    };
    mappedSequence.__iteratorUncached = function (type, reverse) {
      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
      return new Iterator(function () {
        var step = iterator.next();
        if (step.done) {
          return step;
        }
        var entry = step.value;
        var key = entry[0];
        return iteratorValue(type, key, mapper.call(context, entry[1], key, iterable), step);
      });
    };
    return mappedSequence;
  }

  function reverseFactory(iterable, useKeys) {
    var reversedSequence = makeSequence(iterable);
    reversedSequence._iter = iterable;
    reversedSequence.size = iterable.size;
    reversedSequence.reverse = function () {
      return iterable;
    };
    if (iterable.flip) {
      reversedSequence.flip = function () {
        var flipSequence = flipFactory(iterable);
        flipSequence.reverse = function () {
          return iterable.flip();
        };
        return flipSequence;
      };
    }
    reversedSequence.get = function (key, notSetValue) {
      return iterable.get(useKeys ? key : -1 - key, notSetValue);
    };
    reversedSequence.has = function (key) {
      return iterable.has(useKeys ? key : -1 - key);
    };
    reversedSequence.includes = function (value) {
      return iterable.includes(value);
    };
    reversedSequence.cacheResult = cacheResultThrough;
    reversedSequence.__iterate = function (fn, reverse) {
      var this$0 = this;
      return iterable.__iterate(function (v, k) {
        return fn(v, k, this$0);
      }, !reverse);
    };
    reversedSequence.__iterator = function (type, reverse) {
      return iterable.__iterator(type, !reverse);
    };
    return reversedSequence;
  }

  function filterFactory(iterable, predicate, context, useKeys) {
    var filterSequence = makeSequence(iterable);
    if (useKeys) {
      filterSequence.has = function (key) {
        var v = iterable.get(key, NOT_SET);
        return v !== NOT_SET && !!predicate.call(context, v, key, iterable);
      };
      filterSequence.get = function (key, notSetValue) {
        var v = iterable.get(key, NOT_SET);
        return v !== NOT_SET && predicate.call(context, v, key, iterable) ? v : notSetValue;
      };
    }
    filterSequence.__iterateUncached = function (fn, reverse) {
      var this$0 = this;
      var iterations = 0;
      iterable.__iterate(function (v, k, c) {
        if (predicate.call(context, v, k, c)) {
          iterations++;
          return fn(v, useKeys ? k : iterations - 1, this$0);
        }
      }, reverse);
      return iterations;
    };
    filterSequence.__iteratorUncached = function (type, reverse) {
      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
      var iterations = 0;
      return new Iterator(function () {
        while (true) {
          var step = iterator.next();
          if (step.done) {
            return step;
          }
          var entry = step.value;
          var key = entry[0];
          var value = entry[1];
          if (predicate.call(context, value, key, iterable)) {
            return iteratorValue(type, useKeys ? key : iterations++, value, step);
          }
        }
      });
    };
    return filterSequence;
  }

  function countByFactory(iterable, grouper, context) {
    var groups = Map().asMutable();
    iterable.__iterate(function (v, k) {
      groups.update(grouper.call(context, v, k, iterable), 0, function (a) {
        return a + 1;
      });
    });
    return groups.asImmutable();
  }

  function groupByFactory(iterable, grouper, context) {
    var isKeyedIter = isKeyed(iterable);
    var groups = (isOrdered(iterable) ? OrderedMap() : Map()).asMutable();
    iterable.__iterate(function (v, k) {
      groups.update(grouper.call(context, v, k, iterable), function (a) {
        return a = a || [], a.push(isKeyedIter ? [k, v] : v), a;
      });
    });
    var coerce = iterableClass(iterable);
    return groups.map(function (arr) {
      return reify(iterable, coerce(arr));
    });
  }

  function sliceFactory(iterable, begin, end, useKeys) {
    var originalSize = iterable.size;

    if (begin !== undefined) {
      begin = begin | 0;
    }
    if (end !== undefined) {
      end = end | 0;
    }

    if (wholeSlice(begin, end, originalSize)) {
      return iterable;
    }

    var resolvedBegin = resolveBegin(begin, originalSize);
    var resolvedEnd = resolveEnd(end, originalSize);

    if (resolvedBegin !== resolvedBegin || resolvedEnd !== resolvedEnd) {
      return sliceFactory(iterable.toSeq().cacheResult(), begin, end, useKeys);
    }

    var resolvedSize = resolvedEnd - resolvedBegin;
    var sliceSize;
    if (resolvedSize === resolvedSize) {
      sliceSize = resolvedSize < 0 ? 0 : resolvedSize;
    }

    var sliceSeq = makeSequence(iterable);

    sliceSeq.size = sliceSize === 0 ? sliceSize : iterable.size && sliceSize || undefined;

    if (!useKeys && isSeq(iterable) && sliceSize >= 0) {
      sliceSeq.get = function (index, notSetValue) {
        index = wrapIndex(this, index);
        return index >= 0 && index < sliceSize ? iterable.get(index + resolvedBegin, notSetValue) : notSetValue;
      };
    }

    sliceSeq.__iterateUncached = function (fn, reverse) {
      var this$0 = this;
      if (sliceSize === 0) {
        return 0;
      }
      if (reverse) {
        return this.cacheResult().__iterate(fn, reverse);
      }
      var skipped = 0;
      var isSkipping = true;
      var iterations = 0;
      iterable.__iterate(function (v, k) {
        if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {
          iterations++;
          return fn(v, useKeys ? k : iterations - 1, this$0) !== false && iterations !== sliceSize;
        }
      });
      return iterations;
    };

    sliceSeq.__iteratorUncached = function (type, reverse) {
      if (sliceSize !== 0 && reverse) {
        return this.cacheResult().__iterator(type, reverse);
      }

      var iterator = sliceSize !== 0 && iterable.__iterator(type, reverse);
      var skipped = 0;
      var iterations = 0;
      return new Iterator(function () {
        while (skipped++ < resolvedBegin) {
          iterator.next();
        }
        if (++iterations > sliceSize) {
          return iteratorDone();
        }
        var step = iterator.next();
        if (useKeys || type === ITERATE_VALUES) {
          return step;
        } else if (type === ITERATE_KEYS) {
          return iteratorValue(type, iterations - 1, undefined, step);
        } else {
          return iteratorValue(type, iterations - 1, step.value[1], step);
        }
      });
    };

    return sliceSeq;
  }

  function takeWhileFactory(iterable, predicate, context) {
    var takeSequence = makeSequence(iterable);
    takeSequence.__iterateUncached = function (fn, reverse) {
      var this$0 = this;
      if (reverse) {
        return this.cacheResult().__iterate(fn, reverse);
      }
      var iterations = 0;
      iterable.__iterate(function (v, k, c) {
        return predicate.call(context, v, k, c) && ++iterations && fn(v, k, this$0);
      });
      return iterations;
    };
    takeSequence.__iteratorUncached = function (type, reverse) {
      var this$0 = this;
      if (reverse) {
        return this.cacheResult().__iterator(type, reverse);
      }
      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
      var iterating = true;
      return new Iterator(function () {
        if (!iterating) {
          return iteratorDone();
        }
        var step = iterator.next();
        if (step.done) {
          return step;
        }
        var entry = step.value;
        var k = entry[0];
        var v = entry[1];
        if (!predicate.call(context, v, k, this$0)) {
          iterating = false;
          return iteratorDone();
        }
        return type === ITERATE_ENTRIES ? step : iteratorValue(type, k, v, step);
      });
    };
    return takeSequence;
  }

  function skipWhileFactory(iterable, predicate, context, useKeys) {
    var skipSequence = makeSequence(iterable);
    skipSequence.__iterateUncached = function (fn, reverse) {
      var this$0 = this;
      if (reverse) {
        return this.cacheResult().__iterate(fn, reverse);
      }
      var isSkipping = true;
      var iterations = 0;
      iterable.__iterate(function (v, k, c) {
        if (!(isSkipping && (isSkipping = predicate.call(context, v, k, c)))) {
          iterations++;
          return fn(v, useKeys ? k : iterations - 1, this$0);
        }
      });
      return iterations;
    };
    skipSequence.__iteratorUncached = function (type, reverse) {
      var this$0 = this;
      if (reverse) {
        return this.cacheResult().__iterator(type, reverse);
      }
      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
      var skipping = true;
      var iterations = 0;
      return new Iterator(function () {
        var step, k, v;
        do {
          step = iterator.next();
          if (step.done) {
            if (useKeys || type === ITERATE_VALUES) {
              return step;
            } else if (type === ITERATE_KEYS) {
              return iteratorValue(type, iterations++, undefined, step);
            } else {
              return iteratorValue(type, iterations++, step.value[1], step);
            }
          }
          var entry = step.value;
          k = entry[0];
          v = entry[1];
          skipping && (skipping = predicate.call(context, v, k, this$0));
        } while (skipping);
        return type === ITERATE_ENTRIES ? step : iteratorValue(type, k, v, step);
      });
    };
    return skipSequence;
  }

  function concatFactory(iterable, values) {
    var isKeyedIterable = isKeyed(iterable);
    var iters = [iterable].concat(values).map(function (v) {
      if (!isIterable(v)) {
        v = isKeyedIterable ? keyedSeqFromValue(v) : indexedSeqFromValue(Array.isArray(v) ? v : [v]);
      } else if (isKeyedIterable) {
        v = KeyedIterable(v);
      }
      return v;
    }).filter(function (v) {
      return v.size !== 0;
    });

    if (iters.length === 0) {
      return iterable;
    }

    if (iters.length === 1) {
      var singleton = iters[0];
      if (singleton === iterable || isKeyedIterable && isKeyed(singleton) || isIndexed(iterable) && isIndexed(singleton)) {
        return singleton;
      }
    }

    var concatSeq = new ArraySeq(iters);
    if (isKeyedIterable) {
      concatSeq = concatSeq.toKeyedSeq();
    } else if (!isIndexed(iterable)) {
      concatSeq = concatSeq.toSetSeq();
    }
    concatSeq = concatSeq.flatten(true);
    concatSeq.size = iters.reduce(function (sum, seq) {
      if (sum !== undefined) {
        var size = seq.size;
        if (size !== undefined) {
          return sum + size;
        }
      }
    }, 0);
    return concatSeq;
  }

  function flattenFactory(iterable, depth, useKeys) {
    var flatSequence = makeSequence(iterable);
    flatSequence.__iterateUncached = function (fn, reverse) {
      var iterations = 0;
      var stopped = false;
      function flatDeep(iter, currentDepth) {
        var this$0 = this;
        iter.__iterate(function (v, k) {
          if ((!depth || currentDepth < depth) && isIterable(v)) {
            flatDeep(v, currentDepth + 1);
          } else if (fn(v, useKeys ? k : iterations++, this$0) === false) {
            stopped = true;
          }
          return !stopped;
        }, reverse);
      }
      flatDeep(iterable, 0);
      return iterations;
    };
    flatSequence.__iteratorUncached = function (type, reverse) {
      var iterator = iterable.__iterator(type, reverse);
      var stack = [];
      var iterations = 0;
      return new Iterator(function () {
        while (iterator) {
          var step = iterator.next();
          if (step.done !== false) {
            iterator = stack.pop();
            continue;
          }
          var v = step.value;
          if (type === ITERATE_ENTRIES) {
            v = v[1];
          }
          if ((!depth || stack.length < depth) && isIterable(v)) {
            stack.push(iterator);
            iterator = v.__iterator(type, reverse);
          } else {
            return useKeys ? step : iteratorValue(type, iterations++, v, step);
          }
        }
        return iteratorDone();
      });
    };
    return flatSequence;
  }

  function flatMapFactory(iterable, mapper, context) {
    var coerce = iterableClass(iterable);
    return iterable.toSeq().map(function (v, k) {
      return coerce(mapper.call(context, v, k, iterable));
    }).flatten(true);
  }

  function interposeFactory(iterable, separator) {
    var interposedSequence = makeSequence(iterable);
    interposedSequence.size = iterable.size && iterable.size * 2 - 1;
    interposedSequence.__iterateUncached = function (fn, reverse) {
      var this$0 = this;
      var iterations = 0;
      iterable.__iterate(function (v, k) {
        return (!iterations || fn(separator, iterations++, this$0) !== false) && fn(v, iterations++, this$0) !== false;
      }, reverse);
      return iterations;
    };
    interposedSequence.__iteratorUncached = function (type, reverse) {
      var iterator = iterable.__iterator(ITERATE_VALUES, reverse);
      var iterations = 0;
      var step;
      return new Iterator(function () {
        if (!step || iterations % 2) {
          step = iterator.next();
          if (step.done) {
            return step;
          }
        }
        return iterations % 2 ? iteratorValue(type, iterations++, separator) : iteratorValue(type, iterations++, step.value, step);
      });
    };
    return interposedSequence;
  }

  function sortFactory(iterable, comparator, mapper) {
    if (!comparator) {
      comparator = defaultComparator;
    }
    var isKeyedIterable = isKeyed(iterable);
    var index = 0;
    var entries = iterable.toSeq().map(function (v, k) {
      return [k, v, index++, mapper ? mapper(v, k, iterable) : v];
    }).toArray();
    entries.sort(function (a, b) {
      return comparator(a[3], b[3]) || a[2] - b[2];
    }).forEach(isKeyedIterable ? function (v, i) {
      entries[i].length = 2;
    } : function (v, i) {
      entries[i] = v[1];
    });
    return isKeyedIterable ? KeyedSeq(entries) : isIndexed(iterable) ? IndexedSeq(entries) : SetSeq(entries);
  }

  function maxFactory(iterable, comparator, mapper) {
    if (!comparator) {
      comparator = defaultComparator;
    }
    if (mapper) {
      var entry = iterable.toSeq().map(function (v, k) {
        return [v, mapper(v, k, iterable)];
      }).reduce(function (a, b) {
        return maxCompare(comparator, a[1], b[1]) ? b : a;
      });
      return entry && entry[0];
    } else {
      return iterable.reduce(function (a, b) {
        return maxCompare(comparator, a, b) ? b : a;
      });
    }
  }

  function maxCompare(comparator, a, b) {
    var comp = comparator(b, a);

    return comp === 0 && b !== a && (b === undefined || b === null || b !== b) || comp > 0;
  }

  function zipWithFactory(keyIter, zipper, iters) {
    var zipSequence = makeSequence(keyIter);
    zipSequence.size = new ArraySeq(iters).map(function (i) {
      return i.size;
    }).min();

    zipSequence.__iterate = function (fn, reverse) {
      var iterator = this.__iterator(ITERATE_VALUES, reverse);
      var step;
      var iterations = 0;
      while (!(step = iterator.next()).done) {
        if (fn(step.value, iterations++, this) === false) {
          break;
        }
      }
      return iterations;
    };
    zipSequence.__iteratorUncached = function (type, reverse) {
      var iterators = iters.map(function (i) {
        return i = Iterable(i), getIterator(reverse ? i.reverse() : i);
      });
      var iterations = 0;
      var isDone = false;
      return new Iterator(function () {
        var steps;
        if (!isDone) {
          steps = iterators.map(function (i) {
            return i.next();
          });
          isDone = steps.some(function (s) {
            return s.done;
          });
        }
        if (isDone) {
          return iteratorDone();
        }
        return iteratorValue(type, iterations++, zipper.apply(null, steps.map(function (s) {
          return s.value;
        })));
      });
    };
    return zipSequence;
  }

  function reify(iter, seq) {
    return isSeq(iter) ? seq : iter.constructor(seq);
  }

  function validateEntry(entry) {
    if (entry !== Object(entry)) {
      throw new TypeError('Expected [K, V] tuple: ' + entry);
    }
  }

  function resolveSize(iter) {
    assertNotInfinite(iter.size);
    return ensureSize(iter);
  }

  function iterableClass(iterable) {
    return isKeyed(iterable) ? KeyedIterable : isIndexed(iterable) ? IndexedIterable : SetIterable;
  }

  function makeSequence(iterable) {
    return Object.create((isKeyed(iterable) ? KeyedSeq : isIndexed(iterable) ? IndexedSeq : SetSeq).prototype);
  }

  function cacheResultThrough() {
    if (this._iter.cacheResult) {
      this._iter.cacheResult();
      this.size = this._iter.size;
      return this;
    } else {
      return Seq.prototype.cacheResult.call(this);
    }
  }

  function defaultComparator(a, b) {
    return a > b ? 1 : a < b ? -1 : 0;
  }

  function forceIterator(keyPath) {
    var iter = getIterator(keyPath);
    if (!iter) {
      if (!isArrayLike(keyPath)) {
        throw new TypeError('Expected iterable or array-like: ' + keyPath);
      }
      iter = getIterator(Iterable(keyPath));
    }
    return iter;
  }

  createClass(Record, KeyedCollection);

  function Record(defaultValues, name) {
    var hasInitialized;

    var RecordType = function Record(values) {
      if (values instanceof RecordType) {
        return values;
      }
      if (!(this instanceof RecordType)) {
        return new RecordType(values);
      }
      if (!hasInitialized) {
        hasInitialized = true;
        var keys = Object.keys(defaultValues);
        setProps(RecordTypePrototype, keys);
        RecordTypePrototype.size = keys.length;
        RecordTypePrototype._name = name;
        RecordTypePrototype._keys = keys;
        RecordTypePrototype._defaultValues = defaultValues;
      }
      this._map = Map(values);
    };

    var RecordTypePrototype = RecordType.prototype = Object.create(RecordPrototype);
    RecordTypePrototype.constructor = RecordType;

    return RecordType;
  }

  Record.prototype.toString = function () {
    return this.__toString(recordName(this) + ' {', '}');
  };

  Record.prototype.has = function (k) {
    return this._defaultValues.hasOwnProperty(k);
  };

  Record.prototype.get = function (k, notSetValue) {
    if (!this.has(k)) {
      return notSetValue;
    }
    var defaultVal = this._defaultValues[k];
    return this._map ? this._map.get(k, defaultVal) : defaultVal;
  };

  Record.prototype.clear = function () {
    if (this.__ownerID) {
      this._map && this._map.clear();
      return this;
    }
    var RecordType = this.constructor;
    return RecordType._empty || (RecordType._empty = makeRecord(this, emptyMap()));
  };

  Record.prototype.set = function (k, v) {
    if (!this.has(k)) {
      throw new Error('Cannot set unknown key "' + k + '" on ' + recordName(this));
    }
    var newMap = this._map && this._map.set(k, v);
    if (this.__ownerID || newMap === this._map) {
      return this;
    }
    return makeRecord(this, newMap);
  };

  Record.prototype.remove = function (k) {
    if (!this.has(k)) {
      return this;
    }
    var newMap = this._map && this._map.remove(k);
    if (this.__ownerID || newMap === this._map) {
      return this;
    }
    return makeRecord(this, newMap);
  };

  Record.prototype.wasAltered = function () {
    return this._map.wasAltered();
  };

  Record.prototype.__iterator = function (type, reverse) {
    var this$0 = this;
    return KeyedIterable(this._defaultValues).map(function (_, k) {
      return this$0.get(k);
    }).__iterator(type, reverse);
  };

  Record.prototype.__iterate = function (fn, reverse) {
    var this$0 = this;
    return KeyedIterable(this._defaultValues).map(function (_, k) {
      return this$0.get(k);
    }).__iterate(fn, reverse);
  };

  Record.prototype.__ensureOwner = function (ownerID) {
    if (ownerID === this.__ownerID) {
      return this;
    }
    var newMap = this._map && this._map.__ensureOwner(ownerID);
    if (!ownerID) {
      this.__ownerID = ownerID;
      this._map = newMap;
      return this;
    }
    return makeRecord(this, newMap, ownerID);
  };

  var RecordPrototype = Record.prototype;
  RecordPrototype[DELETE] = RecordPrototype.remove;
  RecordPrototype.deleteIn = RecordPrototype.removeIn = MapPrototype.removeIn;
  RecordPrototype.merge = MapPrototype.merge;
  RecordPrototype.mergeWith = MapPrototype.mergeWith;
  RecordPrototype.mergeIn = MapPrototype.mergeIn;
  RecordPrototype.mergeDeep = MapPrototype.mergeDeep;
  RecordPrototype.mergeDeepWith = MapPrototype.mergeDeepWith;
  RecordPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;
  RecordPrototype.setIn = MapPrototype.setIn;
  RecordPrototype.update = MapPrototype.update;
  RecordPrototype.updateIn = MapPrototype.updateIn;
  RecordPrototype.withMutations = MapPrototype.withMutations;
  RecordPrototype.asMutable = MapPrototype.asMutable;
  RecordPrototype.asImmutable = MapPrototype.asImmutable;

  function makeRecord(likeRecord, map, ownerID) {
    var record = Object.create(Object.getPrototypeOf(likeRecord));
    record._map = map;
    record.__ownerID = ownerID;
    return record;
  }

  function recordName(record) {
    return record._name || record.constructor.name || 'Record';
  }

  function setProps(prototype, names) {
    try {
      names.forEach(setProp.bind(undefined, prototype));
    } catch (error) {}
  }

  function setProp(prototype, name) {
    Object.defineProperty(prototype, name, {
      get: function get() {
        return this.get(name);
      },
      set: function set(value) {
        invariant(this.__ownerID, 'Cannot set on an immutable record.');
        this.set(name, value);
      }
    });
  }

  createClass(Set, SetCollection);

  function Set(value) {
    return value === null || value === undefined ? emptySet() : isSet(value) && !isOrdered(value) ? value : emptySet().withMutations(function (set) {
      var iter = SetIterable(value);
      assertNotInfinite(iter.size);
      iter.forEach(function (v) {
        return set.add(v);
      });
    });
  }

  Set.of = function () {
    return this(arguments);
  };

  Set.fromKeys = function (value) {
    return this(KeyedIterable(value).keySeq());
  };

  Set.prototype.toString = function () {
    return this.__toString('Set {', '}');
  };

  Set.prototype.has = function (value) {
    return this._map.has(value);
  };

  Set.prototype.add = function (value) {
    return updateSet(this, this._map.set(value, true));
  };

  Set.prototype.remove = function (value) {
    return updateSet(this, this._map.remove(value));
  };

  Set.prototype.clear = function () {
    return updateSet(this, this._map.clear());
  };

  Set.prototype.union = function () {
    var iters = SLICE$0.call(arguments, 0);
    iters = iters.filter(function (x) {
      return x.size !== 0;
    });
    if (iters.length === 0) {
      return this;
    }
    if (this.size === 0 && !this.__ownerID && iters.length === 1) {
      return this.constructor(iters[0]);
    }
    return this.withMutations(function (set) {
      for (var ii = 0; ii < iters.length; ii++) {
        SetIterable(iters[ii]).forEach(function (value) {
          return set.add(value);
        });
      }
    });
  };

  Set.prototype.intersect = function () {
    var iters = SLICE$0.call(arguments, 0);
    if (iters.length === 0) {
      return this;
    }
    iters = iters.map(function (iter) {
      return SetIterable(iter);
    });
    var originalSet = this;
    return this.withMutations(function (set) {
      originalSet.forEach(function (value) {
        if (!iters.every(function (iter) {
          return iter.includes(value);
        })) {
          set.remove(value);
        }
      });
    });
  };

  Set.prototype.subtract = function () {
    var iters = SLICE$0.call(arguments, 0);
    if (iters.length === 0) {
      return this;
    }
    iters = iters.map(function (iter) {
      return SetIterable(iter);
    });
    var originalSet = this;
    return this.withMutations(function (set) {
      originalSet.forEach(function (value) {
        if (iters.some(function (iter) {
          return iter.includes(value);
        })) {
          set.remove(value);
        }
      });
    });
  };

  Set.prototype.merge = function () {
    return this.union.apply(this, arguments);
  };

  Set.prototype.mergeWith = function (merger) {
    var iters = SLICE$0.call(arguments, 1);
    return this.union.apply(this, iters);
  };

  Set.prototype.sort = function (comparator) {
    return OrderedSet(sortFactory(this, comparator));
  };

  Set.prototype.sortBy = function (mapper, comparator) {
    return OrderedSet(sortFactory(this, comparator, mapper));
  };

  Set.prototype.wasAltered = function () {
    return this._map.wasAltered();
  };

  Set.prototype.__iterate = function (fn, reverse) {
    var this$0 = this;
    return this._map.__iterate(function (_, k) {
      return fn(k, k, this$0);
    }, reverse);
  };

  Set.prototype.__iterator = function (type, reverse) {
    return this._map.map(function (_, k) {
      return k;
    }).__iterator(type, reverse);
  };

  Set.prototype.__ensureOwner = function (ownerID) {
    if (ownerID === this.__ownerID) {
      return this;
    }
    var newMap = this._map.__ensureOwner(ownerID);
    if (!ownerID) {
      this.__ownerID = ownerID;
      this._map = newMap;
      return this;
    }
    return this.__make(newMap, ownerID);
  };

  function isSet(maybeSet) {
    return !!(maybeSet && maybeSet[IS_SET_SENTINEL]);
  }

  Set.isSet = isSet;

  var IS_SET_SENTINEL = '@@__IMMUTABLE_SET__@@';

  var SetPrototype = Set.prototype;
  SetPrototype[IS_SET_SENTINEL] = true;
  SetPrototype[DELETE] = SetPrototype.remove;
  SetPrototype.mergeDeep = SetPrototype.merge;
  SetPrototype.mergeDeepWith = SetPrototype.mergeWith;
  SetPrototype.withMutations = MapPrototype.withMutations;
  SetPrototype.asMutable = MapPrototype.asMutable;
  SetPrototype.asImmutable = MapPrototype.asImmutable;

  SetPrototype.__empty = emptySet;
  SetPrototype.__make = makeSet;

  function updateSet(set, newMap) {
    if (set.__ownerID) {
      set.size = newMap.size;
      set._map = newMap;
      return set;
    }
    return newMap === set._map ? set : newMap.size === 0 ? set.__empty() : set.__make(newMap);
  }

  function makeSet(map, ownerID) {
    var set = Object.create(SetPrototype);
    set.size = map ? map.size : 0;
    set._map = map;
    set.__ownerID = ownerID;
    return set;
  }

  var EMPTY_SET;
  function emptySet() {
    return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));
  }

  createClass(OrderedSet, Set);

  function OrderedSet(value) {
    return value === null || value === undefined ? emptyOrderedSet() : isOrderedSet(value) ? value : emptyOrderedSet().withMutations(function (set) {
      var iter = SetIterable(value);
      assertNotInfinite(iter.size);
      iter.forEach(function (v) {
        return set.add(v);
      });
    });
  }

  OrderedSet.of = function () {
    return this(arguments);
  };

  OrderedSet.fromKeys = function (value) {
    return this(KeyedIterable(value).keySeq());
  };

  OrderedSet.prototype.toString = function () {
    return this.__toString('OrderedSet {', '}');
  };

  function isOrderedSet(maybeOrderedSet) {
    return isSet(maybeOrderedSet) && isOrdered(maybeOrderedSet);
  }

  OrderedSet.isOrderedSet = isOrderedSet;

  var OrderedSetPrototype = OrderedSet.prototype;
  OrderedSetPrototype[IS_ORDERED_SENTINEL] = true;

  OrderedSetPrototype.__empty = emptyOrderedSet;
  OrderedSetPrototype.__make = makeOrderedSet;

  function makeOrderedSet(map, ownerID) {
    var set = Object.create(OrderedSetPrototype);
    set.size = map ? map.size : 0;
    set._map = map;
    set.__ownerID = ownerID;
    return set;
  }

  var EMPTY_ORDERED_SET;
  function emptyOrderedSet() {
    return EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()));
  }

  createClass(Stack, IndexedCollection);

  function Stack(value) {
    return value === null || value === undefined ? emptyStack() : isStack(value) ? value : emptyStack().unshiftAll(value);
  }

  Stack.of = function () {
    return this(arguments);
  };

  Stack.prototype.toString = function () {
    return this.__toString('Stack [', ']');
  };

  Stack.prototype.get = function (index, notSetValue) {
    var head = this._head;
    index = wrapIndex(this, index);
    while (head && index--) {
      head = head.next;
    }
    return head ? head.value : notSetValue;
  };

  Stack.prototype.peek = function () {
    return this._head && this._head.value;
  };

  Stack.prototype.push = function () {
    if (arguments.length === 0) {
      return this;
    }
    var newSize = this.size + arguments.length;
    var head = this._head;
    for (var ii = arguments.length - 1; ii >= 0; ii--) {
      head = {
        value: arguments[ii],
        next: head
      };
    }
    if (this.__ownerID) {
      this.size = newSize;
      this._head = head;
      this.__hash = undefined;
      this.__altered = true;
      return this;
    }
    return makeStack(newSize, head);
  };

  Stack.prototype.pushAll = function (iter) {
    iter = IndexedIterable(iter);
    if (iter.size === 0) {
      return this;
    }
    assertNotInfinite(iter.size);
    var newSize = this.size;
    var head = this._head;
    iter.reverse().forEach(function (value) {
      newSize++;
      head = {
        value: value,
        next: head
      };
    });
    if (this.__ownerID) {
      this.size = newSize;
      this._head = head;
      this.__hash = undefined;
      this.__altered = true;
      return this;
    }
    return makeStack(newSize, head);
  };

  Stack.prototype.pop = function () {
    return this.slice(1);
  };

  Stack.prototype.unshift = function () {
    return this.push.apply(this, arguments);
  };

  Stack.prototype.unshiftAll = function (iter) {
    return this.pushAll(iter);
  };

  Stack.prototype.shift = function () {
    return this.pop.apply(this, arguments);
  };

  Stack.prototype.clear = function () {
    if (this.size === 0) {
      return this;
    }
    if (this.__ownerID) {
      this.size = 0;
      this._head = undefined;
      this.__hash = undefined;
      this.__altered = true;
      return this;
    }
    return emptyStack();
  };

  Stack.prototype.slice = function (begin, end) {
    if (wholeSlice(begin, end, this.size)) {
      return this;
    }
    var resolvedBegin = resolveBegin(begin, this.size);
    var resolvedEnd = resolveEnd(end, this.size);
    if (resolvedEnd !== this.size) {
      return IndexedCollection.prototype.slice.call(this, begin, end);
    }
    var newSize = this.size - resolvedBegin;
    var head = this._head;
    while (resolvedBegin--) {
      head = head.next;
    }
    if (this.__ownerID) {
      this.size = newSize;
      this._head = head;
      this.__hash = undefined;
      this.__altered = true;
      return this;
    }
    return makeStack(newSize, head);
  };

  Stack.prototype.__ensureOwner = function (ownerID) {
    if (ownerID === this.__ownerID) {
      return this;
    }
    if (!ownerID) {
      this.__ownerID = ownerID;
      this.__altered = false;
      return this;
    }
    return makeStack(this.size, this._head, ownerID, this.__hash);
  };

  Stack.prototype.__iterate = function (fn, reverse) {
    if (reverse) {
      return this.reverse().__iterate(fn);
    }
    var iterations = 0;
    var node = this._head;
    while (node) {
      if (fn(node.value, iterations++, this) === false) {
        break;
      }
      node = node.next;
    }
    return iterations;
  };

  Stack.prototype.__iterator = function (type, reverse) {
    if (reverse) {
      return this.reverse().__iterator(type);
    }
    var iterations = 0;
    var node = this._head;
    return new Iterator(function () {
      if (node) {
        var value = node.value;
        node = node.next;
        return iteratorValue(type, iterations++, value);
      }
      return iteratorDone();
    });
  };

  function isStack(maybeStack) {
    return !!(maybeStack && maybeStack[IS_STACK_SENTINEL]);
  }

  Stack.isStack = isStack;

  var IS_STACK_SENTINEL = '@@__IMMUTABLE_STACK__@@';

  var StackPrototype = Stack.prototype;
  StackPrototype[IS_STACK_SENTINEL] = true;
  StackPrototype.withMutations = MapPrototype.withMutations;
  StackPrototype.asMutable = MapPrototype.asMutable;
  StackPrototype.asImmutable = MapPrototype.asImmutable;
  StackPrototype.wasAltered = MapPrototype.wasAltered;

  function makeStack(size, head, ownerID, hash) {
    var map = Object.create(StackPrototype);
    map.size = size;
    map._head = head;
    map.__ownerID = ownerID;
    map.__hash = hash;
    map.__altered = false;
    return map;
  }

  var EMPTY_STACK;
  function emptyStack() {
    return EMPTY_STACK || (EMPTY_STACK = makeStack(0));
  }

  function mixin(ctor, methods) {
    var keyCopier = function keyCopier(key) {
      ctor.prototype[key] = methods[key];
    };
    Object.keys(methods).forEach(keyCopier);
    Object.getOwnPropertySymbols && Object.getOwnPropertySymbols(methods).forEach(keyCopier);
    return ctor;
  }

  Iterable.Iterator = Iterator;

  mixin(Iterable, {

    toArray: function toArray() {
      assertNotInfinite(this.size);
      var array = new Array(this.size || 0);
      this.valueSeq().__iterate(function (v, i) {
        array[i] = v;
      });
      return array;
    },

    toIndexedSeq: function toIndexedSeq() {
      return new ToIndexedSequence(this);
    },

    toJS: function toJS() {
      return this.toSeq().map(function (value) {
        return value && typeof value.toJS === 'function' ? value.toJS() : value;
      }).__toJS();
    },

    toJSON: function toJSON() {
      return this.toSeq().map(function (value) {
        return value && typeof value.toJSON === 'function' ? value.toJSON() : value;
      }).__toJS();
    },

    toKeyedSeq: function toKeyedSeq() {
      return new ToKeyedSequence(this, true);
    },

    toMap: function toMap() {
      return Map(this.toKeyedSeq());
    },

    toObject: function toObject() {
      assertNotInfinite(this.size);
      var object = {};
      this.__iterate(function (v, k) {
        object[k] = v;
      });
      return object;
    },

    toOrderedMap: function toOrderedMap() {
      return OrderedMap(this.toKeyedSeq());
    },

    toOrderedSet: function toOrderedSet() {
      return OrderedSet(isKeyed(this) ? this.valueSeq() : this);
    },

    toSet: function toSet() {
      return Set(isKeyed(this) ? this.valueSeq() : this);
    },

    toSetSeq: function toSetSeq() {
      return new ToSetSequence(this);
    },

    toSeq: function toSeq() {
      return isIndexed(this) ? this.toIndexedSeq() : isKeyed(this) ? this.toKeyedSeq() : this.toSetSeq();
    },

    toStack: function toStack() {
      return Stack(isKeyed(this) ? this.valueSeq() : this);
    },

    toList: function toList() {
      return List(isKeyed(this) ? this.valueSeq() : this);
    },

    toString: function toString() {
      return '[Iterable]';
    },

    __toString: function __toString(head, tail) {
      if (this.size === 0) {
        return head + tail;
      }
      return head + ' ' + this.toSeq().map(this.__toStringMapper).join(', ') + ' ' + tail;
    },

    concat: function concat() {
      var values = SLICE$0.call(arguments, 0);
      return reify(this, concatFactory(this, values));
    },

    includes: function includes(searchValue) {
      return this.some(function (value) {
        return is(value, searchValue);
      });
    },

    entries: function entries() {
      return this.__iterator(ITERATE_ENTRIES);
    },

    every: function every(predicate, context) {
      assertNotInfinite(this.size);
      var returnValue = true;
      this.__iterate(function (v, k, c) {
        if (!predicate.call(context, v, k, c)) {
          returnValue = false;
          return false;
        }
      });
      return returnValue;
    },

    filter: function filter(predicate, context) {
      return reify(this, filterFactory(this, predicate, context, true));
    },

    find: function find(predicate, context, notSetValue) {
      var entry = this.findEntry(predicate, context);
      return entry ? entry[1] : notSetValue;
    },

    findEntry: function findEntry(predicate, context) {
      var found;
      this.__iterate(function (v, k, c) {
        if (predicate.call(context, v, k, c)) {
          found = [k, v];
          return false;
        }
      });
      return found;
    },

    findLastEntry: function findLastEntry(predicate, context) {
      return this.toSeq().reverse().findEntry(predicate, context);
    },

    forEach: function forEach(sideEffect, context) {
      assertNotInfinite(this.size);
      return this.__iterate(context ? sideEffect.bind(context) : sideEffect);
    },

    join: function join(separator) {
      assertNotInfinite(this.size);
      separator = separator !== undefined ? '' + separator : ',';
      var joined = '';
      var isFirst = true;
      this.__iterate(function (v) {
        isFirst ? isFirst = false : joined += separator;
        joined += v !== null && v !== undefined ? v.toString() : '';
      });
      return joined;
    },

    keys: function keys() {
      return this.__iterator(ITERATE_KEYS);
    },

    map: function map(mapper, context) {
      return reify(this, mapFactory(this, mapper, context));
    },

    reduce: function reduce(reducer, initialReduction, context) {
      assertNotInfinite(this.size);
      var reduction;
      var useFirst;
      if (arguments.length < 2) {
        useFirst = true;
      } else {
        reduction = initialReduction;
      }
      this.__iterate(function (v, k, c) {
        if (useFirst) {
          useFirst = false;
          reduction = v;
        } else {
          reduction = reducer.call(context, reduction, v, k, c);
        }
      });
      return reduction;
    },

    reduceRight: function reduceRight(reducer, initialReduction, context) {
      var reversed = this.toKeyedSeq().reverse();
      return reversed.reduce.apply(reversed, arguments);
    },

    reverse: function reverse() {
      return reify(this, reverseFactory(this, true));
    },

    slice: function slice(begin, end) {
      return reify(this, sliceFactory(this, begin, end, true));
    },

    some: function some(predicate, context) {
      return !this.every(not(predicate), context);
    },

    sort: function sort(comparator) {
      return reify(this, sortFactory(this, comparator));
    },

    values: function values() {
      return this.__iterator(ITERATE_VALUES);
    },

    butLast: function butLast() {
      return this.slice(0, -1);
    },

    isEmpty: function isEmpty() {
      return this.size !== undefined ? this.size === 0 : !this.some(function () {
        return true;
      });
    },

    count: function count(predicate, context) {
      return ensureSize(predicate ? this.toSeq().filter(predicate, context) : this);
    },

    countBy: function countBy(grouper, context) {
      return countByFactory(this, grouper, context);
    },

    equals: function equals(other) {
      return deepEqual(this, other);
    },

    entrySeq: function entrySeq() {
      var iterable = this;
      if (iterable._cache) {
        return new ArraySeq(iterable._cache);
      }
      var entriesSequence = iterable.toSeq().map(entryMapper).toIndexedSeq();
      entriesSequence.fromEntrySeq = function () {
        return iterable.toSeq();
      };
      return entriesSequence;
    },

    filterNot: function filterNot(predicate, context) {
      return this.filter(not(predicate), context);
    },

    findLast: function findLast(predicate, context, notSetValue) {
      return this.toKeyedSeq().reverse().find(predicate, context, notSetValue);
    },

    first: function first() {
      return this.find(returnTrue);
    },

    flatMap: function flatMap(mapper, context) {
      return reify(this, flatMapFactory(this, mapper, context));
    },

    flatten: function flatten(depth) {
      return reify(this, flattenFactory(this, depth, true));
    },

    fromEntrySeq: function fromEntrySeq() {
      return new FromEntriesSequence(this);
    },

    get: function get(searchKey, notSetValue) {
      return this.find(function (_, key) {
        return is(key, searchKey);
      }, undefined, notSetValue);
    },

    getIn: function getIn(searchKeyPath, notSetValue) {
      var nested = this;

      var iter = forceIterator(searchKeyPath);
      var step;
      while (!(step = iter.next()).done) {
        var key = step.value;
        nested = nested && nested.get ? nested.get(key, NOT_SET) : NOT_SET;
        if (nested === NOT_SET) {
          return notSetValue;
        }
      }
      return nested;
    },

    groupBy: function groupBy(grouper, context) {
      return groupByFactory(this, grouper, context);
    },

    has: function has(searchKey) {
      return this.get(searchKey, NOT_SET) !== NOT_SET;
    },

    hasIn: function hasIn(searchKeyPath) {
      return this.getIn(searchKeyPath, NOT_SET) !== NOT_SET;
    },

    isSubset: function isSubset(iter) {
      iter = typeof iter.includes === 'function' ? iter : Iterable(iter);
      return this.every(function (value) {
        return iter.includes(value);
      });
    },

    isSuperset: function isSuperset(iter) {
      iter = typeof iter.isSubset === 'function' ? iter : Iterable(iter);
      return iter.isSubset(this);
    },

    keySeq: function keySeq() {
      return this.toSeq().map(keyMapper).toIndexedSeq();
    },

    last: function last() {
      return this.toSeq().reverse().first();
    },

    max: function max(comparator) {
      return maxFactory(this, comparator);
    },

    maxBy: function maxBy(mapper, comparator) {
      return maxFactory(this, comparator, mapper);
    },

    min: function min(comparator) {
      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator);
    },

    minBy: function minBy(mapper, comparator) {
      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator, mapper);
    },

    rest: function rest() {
      return this.slice(1);
    },

    skip: function skip(amount) {
      return this.slice(Math.max(0, amount));
    },

    skipLast: function skipLast(amount) {
      return reify(this, this.toSeq().reverse().skip(amount).reverse());
    },

    skipWhile: function skipWhile(predicate, context) {
      return reify(this, skipWhileFactory(this, predicate, context, true));
    },

    skipUntil: function skipUntil(predicate, context) {
      return this.skipWhile(not(predicate), context);
    },

    sortBy: function sortBy(mapper, comparator) {
      return reify(this, sortFactory(this, comparator, mapper));
    },

    take: function take(amount) {
      return this.slice(0, Math.max(0, amount));
    },

    takeLast: function takeLast(amount) {
      return reify(this, this.toSeq().reverse().take(amount).reverse());
    },

    takeWhile: function takeWhile(predicate, context) {
      return reify(this, takeWhileFactory(this, predicate, context));
    },

    takeUntil: function takeUntil(predicate, context) {
      return this.takeWhile(not(predicate), context);
    },

    valueSeq: function valueSeq() {
      return this.toIndexedSeq();
    },

    hashCode: function hashCode() {
      return this.__hash || (this.__hash = hashIterable(this));
    }

  });

  var IterablePrototype = Iterable.prototype;
  IterablePrototype[IS_ITERABLE_SENTINEL] = true;
  IterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.values;
  IterablePrototype.__toJS = IterablePrototype.toArray;
  IterablePrototype.__toStringMapper = quoteString;
  IterablePrototype.inspect = IterablePrototype.toSource = function () {
    return this.toString();
  };
  IterablePrototype.chain = IterablePrototype.flatMap;
  IterablePrototype.contains = IterablePrototype.includes;

  (function () {
    try {
      Object.defineProperty(IterablePrototype, 'length', {
        get: function get() {
          if (!Iterable.noLengthWarning) {
            var stack;
            try {
              throw new Error();
            } catch (error) {
              stack = error.stack;
            }
            if (stack.indexOf('_wrapObject') === -1) {
              console && console.warn && console.warn('iterable.length has been deprecated, ' + 'use iterable.size or iterable.count(). ' + 'This warning will become a silent error in a future version. ' + stack);
              return this.size;
            }
          }
        }
      });
    } catch (e) {}
  })();

  mixin(KeyedIterable, {

    flip: function flip() {
      return reify(this, flipFactory(this));
    },

    findKey: function findKey(predicate, context) {
      var entry = this.findEntry(predicate, context);
      return entry && entry[0];
    },

    findLastKey: function findLastKey(predicate, context) {
      return this.toSeq().reverse().findKey(predicate, context);
    },

    keyOf: function keyOf(searchValue) {
      return this.findKey(function (value) {
        return is(value, searchValue);
      });
    },

    lastKeyOf: function lastKeyOf(searchValue) {
      return this.findLastKey(function (value) {
        return is(value, searchValue);
      });
    },

    mapEntries: function mapEntries(mapper, context) {
      var this$0 = this;
      var iterations = 0;
      return reify(this, this.toSeq().map(function (v, k) {
        return mapper.call(context, [k, v], iterations++, this$0);
      }).fromEntrySeq());
    },

    mapKeys: function mapKeys(mapper, context) {
      var this$0 = this;
      return reify(this, this.toSeq().flip().map(function (k, v) {
        return mapper.call(context, k, v, this$0);
      }).flip());
    }

  });

  var KeyedIterablePrototype = KeyedIterable.prototype;
  KeyedIterablePrototype[IS_KEYED_SENTINEL] = true;
  KeyedIterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.entries;
  KeyedIterablePrototype.__toJS = IterablePrototype.toObject;
  KeyedIterablePrototype.__toStringMapper = function (v, k) {
    return JSON.stringify(k) + ': ' + quoteString(v);
  };

  mixin(IndexedIterable, {

    toKeyedSeq: function toKeyedSeq() {
      return new ToKeyedSequence(this, false);
    },

    filter: function filter(predicate, context) {
      return reify(this, filterFactory(this, predicate, context, false));
    },

    findIndex: function findIndex(predicate, context) {
      var entry = this.findEntry(predicate, context);
      return entry ? entry[0] : -1;
    },

    indexOf: function indexOf(searchValue) {
      var key = this.toKeyedSeq().keyOf(searchValue);
      return key === undefined ? -1 : key;
    },

    lastIndexOf: function lastIndexOf(searchValue) {
      var key = this.toKeyedSeq().reverse().keyOf(searchValue);
      return key === undefined ? -1 : key;
    },

    reverse: function reverse() {
      return reify(this, reverseFactory(this, false));
    },

    slice: function slice(begin, end) {
      return reify(this, sliceFactory(this, begin, end, false));
    },

    splice: function splice(index, removeNum) {
      var numArgs = arguments.length;
      removeNum = Math.max(removeNum | 0, 0);
      if (numArgs === 0 || numArgs === 2 && !removeNum) {
        return this;
      }

      index = resolveBegin(index, index < 0 ? this.count() : this.size);
      var spliced = this.slice(0, index);
      return reify(this, numArgs === 1 ? spliced : spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum)));
    },

    findLastIndex: function findLastIndex(predicate, context) {
      var key = this.toKeyedSeq().findLastKey(predicate, context);
      return key === undefined ? -1 : key;
    },

    first: function first() {
      return this.get(0);
    },

    flatten: function flatten(depth) {
      return reify(this, flattenFactory(this, depth, false));
    },

    get: function get(index, notSetValue) {
      index = wrapIndex(this, index);
      return index < 0 || this.size === Infinity || this.size !== undefined && index > this.size ? notSetValue : this.find(function (_, key) {
        return key === index;
      }, undefined, notSetValue);
    },

    has: function has(index) {
      index = wrapIndex(this, index);
      return index >= 0 && (this.size !== undefined ? this.size === Infinity || index < this.size : this.indexOf(index) !== -1);
    },

    interpose: function interpose(separator) {
      return reify(this, interposeFactory(this, separator));
    },

    interleave: function interleave() {
      var iterables = [this].concat(arrCopy(arguments));
      var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, iterables);
      var interleaved = zipped.flatten(true);
      if (zipped.size) {
        interleaved.size = zipped.size * iterables.length;
      }
      return reify(this, interleaved);
    },

    last: function last() {
      return this.get(-1);
    },

    skipWhile: function skipWhile(predicate, context) {
      return reify(this, skipWhileFactory(this, predicate, context, false));
    },

    zip: function zip() {
      var iterables = [this].concat(arrCopy(arguments));
      return reify(this, zipWithFactory(this, defaultZipper, iterables));
    },

    zipWith: function zipWith(zipper) {
      var iterables = arrCopy(arguments);
      iterables[0] = this;
      return reify(this, zipWithFactory(this, zipper, iterables));
    }

  });

  IndexedIterable.prototype[IS_INDEXED_SENTINEL] = true;
  IndexedIterable.prototype[IS_ORDERED_SENTINEL] = true;

  mixin(SetIterable, {

    get: function get(value, notSetValue) {
      return this.has(value) ? value : notSetValue;
    },

    includes: function includes(value) {
      return this.has(value);
    },

    keySeq: function keySeq() {
      return this.valueSeq();
    }

  });

  SetIterable.prototype.has = IterablePrototype.includes;

  mixin(KeyedSeq, KeyedIterable.prototype);
  mixin(IndexedSeq, IndexedIterable.prototype);
  mixin(SetSeq, SetIterable.prototype);

  mixin(KeyedCollection, KeyedIterable.prototype);
  mixin(IndexedCollection, IndexedIterable.prototype);
  mixin(SetCollection, SetIterable.prototype);

  function keyMapper(v, k) {
    return k;
  }

  function entryMapper(v, k) {
    return [k, v];
  }

  function not(predicate) {
    return function () {
      return !predicate.apply(this, arguments);
    };
  }

  function neg(predicate) {
    return function () {
      return -predicate.apply(this, arguments);
    };
  }

  function quoteString(value) {
    return typeof value === 'string' ? JSON.stringify(value) : value;
  }

  function defaultZipper() {
    return arrCopy(arguments);
  }

  function defaultNegComparator(a, b) {
    return a < b ? 1 : a > b ? -1 : 0;
  }

  function hashIterable(iterable) {
    if (iterable.size === Infinity) {
      return 0;
    }
    var ordered = isOrdered(iterable);
    var keyed = isKeyed(iterable);
    var h = ordered ? 1 : 0;
    var size = iterable.__iterate(keyed ? ordered ? function (v, k) {
      h = 31 * h + hashMerge(hash(v), hash(k)) | 0;
    } : function (v, k) {
      h = h + hashMerge(hash(v), hash(k)) | 0;
    } : ordered ? function (v) {
      h = 31 * h + hash(v) | 0;
    } : function (v) {
      h = h + hash(v) | 0;
    });
    return murmurHashOfSize(size, h);
  }

  function murmurHashOfSize(size, h) {
    h = imul(h, 0xCC9E2D51);
    h = imul(h << 15 | h >>> -15, 0x1B873593);
    h = imul(h << 13 | h >>> -13, 5);
    h = (h + 0xE6546B64 | 0) ^ size;
    h = imul(h ^ h >>> 16, 0x85EBCA6B);
    h = imul(h ^ h >>> 13, 0xC2B2AE35);
    h = smi(h ^ h >>> 16);
    return h;
  }

  function hashMerge(a, b) {
    return a ^ b + 0x9E3779B9 + (a << 6) + (a >> 2) | 0;
  }

  var Immutable = {

    Iterable: Iterable,

    Seq: Seq,
    Collection: Collection,
    Map: Map,
    OrderedMap: OrderedMap,
    List: List,
    Stack: Stack,
    Set: Set,
    OrderedSet: OrderedSet,

    Record: Record,
    Range: Range,
    Repeat: Repeat,

    is: is,
    fromJS: fromJS

  };

  return Immutable;
});
}, 313, null, "immutable/dist/immutable.js");
__d(/* NavigatorBreadcrumbNavigationBar */function(global, require, module, exports) {
'use strict';

var NavigatorBreadcrumbNavigationBarStyles = require(315                                     ); // 315 = NavigatorBreadcrumbNavigationBarStyles
var NavigatorNavigationBarStylesAndroid = require(316                                  ); // 316 = NavigatorNavigationBarStylesAndroid
var NavigatorNavigationBarStylesIOS = require(318                              ); // 318 = NavigatorNavigationBarStylesIOS
var Platform = require(26        ); // 26 = Platform
var React = require(76     ); // 76 = React
var StyleSheet = require(99          ); // 99 = StyleSheet
var View = require(119   ); // 119 = View

var guid = require(216   ); // 216 = guid
var invariant = require(24                  ); // 24 = fbjs/lib/invariant

var _require = require(313        ), // 313 = immutable
    Map = _require.Map;

var Interpolators = NavigatorBreadcrumbNavigationBarStyles.Interpolators;
var NavigatorNavigationBarStyles = Platform.OS === 'android' ? NavigatorNavigationBarStylesAndroid : NavigatorNavigationBarStylesIOS;
var PropTypes = React.PropTypes;

var CRUMB_PROPS = Interpolators.map(function () {
  return { style: {} };
});
var ICON_PROPS = Interpolators.map(function () {
  return { style: {} };
});
var SEPARATOR_PROPS = Interpolators.map(function () {
  return { style: {} };
});
var TITLE_PROPS = Interpolators.map(function () {
  return { style: {} };
});
var RIGHT_BUTTON_PROPS = Interpolators.map(function () {
  return { style: {} };
});

function navStatePresentedIndex(navState) {
  if (navState.presentedIndex !== undefined) {
    return navState.presentedIndex;
  }

  return navState.observedTopOfStack;
}

function initStyle(index, presentedIndex) {
  return index === presentedIndex ? NavigatorBreadcrumbNavigationBarStyles.Center[index] : index < presentedIndex ? NavigatorBreadcrumbNavigationBarStyles.Left[index] : NavigatorBreadcrumbNavigationBarStyles.Right[index];
}

var NavigatorBreadcrumbNavigationBar = function (_React$Component) {
  babelHelpers.inherits(NavigatorBreadcrumbNavigationBar, _React$Component);

  function NavigatorBreadcrumbNavigationBar() {
    var _ref;

    var _temp, _this, _ret;

    babelHelpers.classCallCheck(this, NavigatorBreadcrumbNavigationBar);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = NavigatorBreadcrumbNavigationBar.__proto__ || Object.getPrototypeOf(NavigatorBreadcrumbNavigationBar)).call.apply(_ref, [this].concat(args))), _this), _this._getBreadcrumb = function (route, index) {
      var pointerEvents = _this.props.navState.routeStack.length <= 1 && index === 0 ? 'none' : 'auto';
      var navBarRouteMapper = _this.props.routeMapper;
      var firstStyles = initStyle(index, navStatePresentedIndex(_this.props.navState));

      var breadcrumbDescriptor = React.createElement(
        View,
        {
          key: 'crumb_' + index,
          pointerEvents: pointerEvents,
          ref: 'crumb_' + index,
          style: firstStyles.Crumb },
        React.createElement(
          View,
          { ref: 'icon_' + index, style: firstStyles.Icon },
          navBarRouteMapper.iconForRoute(route, _this.props.navigator)
        ),
        React.createElement(
          View,
          { ref: 'separator_' + index, style: firstStyles.Separator },
          navBarRouteMapper.separatorForRoute(route, _this.props.navigator)
        )
      );

      return breadcrumbDescriptor;
    }, _this._getTitle = function (route, index) {
      if (_this._descriptors.title.has(route)) {
        return _this._descriptors.title.get(route);
      }

      var titleContent = _this.props.routeMapper.titleContentForRoute(_this.props.navState.routeStack[index], _this.props.navigator);
      var firstStyles = initStyle(index, navStatePresentedIndex(_this.props.navState));

      var titleDescriptor = React.createElement(
        View,
        {
          key: 'title_' + index,
          ref: 'title_' + index,
          style: firstStyles.Title },
        titleContent
      );
      _this._descriptors.title = _this._descriptors.title.set(route, titleDescriptor);
      return titleDescriptor;
    }, _this._getRightButton = function (route, index) {
      if (_this._descriptors.right.has(route)) {
        return _this._descriptors.right.get(route);
      }
      var rightContent = _this.props.routeMapper.rightContentForRoute(_this.props.navState.routeStack[index], _this.props.navigator);
      if (!rightContent) {
        _this._descriptors.right = _this._descriptors.right.set(route, null);
        return null;
      }
      var firstStyles = initStyle(index, navStatePresentedIndex(_this.props.navState));
      var rightButtonDescriptor = React.createElement(
        View,
        {
          key: 'right_' + index,
          ref: 'right_' + index,
          style: firstStyles.RightItem },
        rightContent
      );
      _this._descriptors.right = _this._descriptors.right.set(route, rightButtonDescriptor);
      return rightButtonDescriptor;
    }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
  }

  babelHelpers.createClass(NavigatorBreadcrumbNavigationBar, [{
    key: '_updateIndexProgress',
    value: function _updateIndexProgress(progress, index, fromIndex, toIndex) {
      var amount = toIndex > fromIndex ? progress : 1 - progress;
      var oldDistToCenter = index - fromIndex;
      var newDistToCenter = index - toIndex;
      var interpolate;
      invariant(Interpolators[index], 'Cannot find breadcrumb interpolators for ' + index);
      if (oldDistToCenter > 0 && newDistToCenter === 0 || newDistToCenter > 0 && oldDistToCenter === 0) {
        interpolate = Interpolators[index].RightToCenter;
      } else if (oldDistToCenter < 0 && newDistToCenter === 0 || newDistToCenter < 0 && oldDistToCenter === 0) {
        interpolate = Interpolators[index].CenterToLeft;
      } else if (oldDistToCenter === newDistToCenter) {
        interpolate = Interpolators[index].RightToCenter;
      } else {
        interpolate = Interpolators[index].RightToLeft;
      }

      if (interpolate.Crumb(CRUMB_PROPS[index].style, amount)) {
        this._setPropsIfExists('crumb_' + index, CRUMB_PROPS[index]);
      }
      if (interpolate.Icon(ICON_PROPS[index].style, amount)) {
        this._setPropsIfExists('icon_' + index, ICON_PROPS[index]);
      }
      if (interpolate.Separator(SEPARATOR_PROPS[index].style, amount)) {
        this._setPropsIfExists('separator_' + index, SEPARATOR_PROPS[index]);
      }
      if (interpolate.Title(TITLE_PROPS[index].style, amount)) {
        this._setPropsIfExists('title_' + index, TITLE_PROPS[index]);
      }
      var right = this.refs['right_' + index];

      var rightButtonStyle = RIGHT_BUTTON_PROPS[index].style;
      if (right && interpolate.RightItem(rightButtonStyle, amount)) {
        right.setNativeProps({
          style: rightButtonStyle,
          pointerEvents: rightButtonStyle.opacity === 0 ? 'none' : 'auto'
        });
      }
    }
  }, {
    key: 'updateProgress',
    value: function updateProgress(progress, fromIndex, toIndex) {
      var max = Math.max(fromIndex, toIndex);
      var min = Math.min(fromIndex, toIndex);
      for (var index = min; index <= max; index++) {
        this._updateIndexProgress(progress, index, fromIndex, toIndex);
      }
    }
  }, {
    key: 'onAnimationStart',
    value: function onAnimationStart(fromIndex, toIndex) {
      var max = Math.max(fromIndex, toIndex);
      var min = Math.min(fromIndex, toIndex);
      for (var index = min; index <= max; index++) {
        this._setRenderViewsToHardwareTextureAndroid(index, true);
      }
    }
  }, {
    key: 'onAnimationEnd',
    value: function onAnimationEnd() {
      var max = this.props.navState.routeStack.length - 1;
      for (var index = 0; index <= max; index++) {
        this._setRenderViewsToHardwareTextureAndroid(index, false);
      }
    }
  }, {
    key: '_setRenderViewsToHardwareTextureAndroid',
    value: function _setRenderViewsToHardwareTextureAndroid(index, renderToHardwareTexture) {
      var props = {
        renderToHardwareTextureAndroid: renderToHardwareTexture
      };

      this._setPropsIfExists('icon_' + index, props);
      this._setPropsIfExists('separator_' + index, props);
      this._setPropsIfExists('title_' + index, props);
      this._setPropsIfExists('right_' + index, props);
    }
  }, {
    key: 'componentWillMount',
    value: function componentWillMount() {
      this._reset();
    }
  }, {
    key: 'render',
    value: function render() {
      var navState = this.props.navState;
      var icons = navState && navState.routeStack.map(this._getBreadcrumb);
      var titles = navState.routeStack.map(this._getTitle);
      var buttons = navState.routeStack.map(this._getRightButton);

      return React.createElement(
        View,
        {
          key: this._key,
          style: [styles.breadCrumbContainer, this.props.style] },
        titles,
        icons,
        buttons
      );
    }
  }, {
    key: 'immediatelyRefresh',
    value: function immediatelyRefresh() {
      this._reset();
      this.forceUpdate();
    }
  }, {
    key: '_reset',
    value: function _reset() {
      this._key = guid();
      this._descriptors = {
        title: new Map(),
        right: new Map()
      };
    }
  }, {
    key: '_setPropsIfExists',
    value: function _setPropsIfExists(ref, props) {
      var ref = this.refs[ref];
      ref && ref.setNativeProps(props);
    }
  }]);
  return NavigatorBreadcrumbNavigationBar;
}(React.Component);

NavigatorBreadcrumbNavigationBar.propTypes = {
  navigator: PropTypes.shape({
    push: PropTypes.func,
    pop: PropTypes.func,
    replace: PropTypes.func,
    popToRoute: PropTypes.func,
    popToTop: PropTypes.func
  }),
  routeMapper: PropTypes.shape({
    rightContentForRoute: PropTypes.func,
    titleContentForRoute: PropTypes.func,
    iconForRoute: PropTypes.func
  }),
  navState: React.PropTypes.shape({
    routeStack: React.PropTypes.arrayOf(React.PropTypes.object),
    presentedIndex: React.PropTypes.number
  }),
  style: View.propTypes.style
};
NavigatorBreadcrumbNavigationBar.Styles = NavigatorBreadcrumbNavigationBarStyles;


var styles = StyleSheet.create({
  breadCrumbContainer: {
    overflow: 'hidden',
    position: 'absolute',
    height: NavigatorNavigationBarStyles.General.TotalNavHeight,
    top: 0,
    left: 0,
    right: 0
  }
});

module.exports = NavigatorBreadcrumbNavigationBar;
}, 314, null, "NavigatorBreadcrumbNavigationBar");
__d(/* NavigatorBreadcrumbNavigationBarStyles */function(global, require, module, exports) {
'use strict';

var NavigatorNavigationBarStylesAndroid = require(316                                  ); // 316 = NavigatorNavigationBarStylesAndroid

var buildStyleInterpolator = require(317                     ); // 317 = buildStyleInterpolator
var merge = require(122    ); // 122 = merge

var NAV_BAR_HEIGHT = NavigatorNavigationBarStylesAndroid.General.NavBarHeight;

var SPACING = 8;
var ICON_WIDTH = 40;
var SEPARATOR_WIDTH = 9;
var CRUMB_WIDTH = ICON_WIDTH + SEPARATOR_WIDTH;
var NAV_ELEMENT_HEIGHT = NAV_BAR_HEIGHT;

var OPACITY_RATIO = 100;
var ICON_INACTIVE_OPACITY = 0.6;
var MAX_BREADCRUMBS = 10;

var CRUMB_BASE = {
  position: 'absolute',
  flexDirection: 'row',
  top: 0,
  width: CRUMB_WIDTH,
  height: NAV_ELEMENT_HEIGHT,
  backgroundColor: 'transparent'
};

var ICON_BASE = {
  width: ICON_WIDTH,
  height: NAV_ELEMENT_HEIGHT
};

var SEPARATOR_BASE = {
  width: SEPARATOR_WIDTH,
  height: NAV_ELEMENT_HEIGHT
};

var TITLE_BASE = {
  position: 'absolute',
  top: 0,
  height: NAV_ELEMENT_HEIGHT,
  backgroundColor: 'transparent',
  alignItems: 'flex-start'
};

var FIRST_TITLE_BASE = merge(TITLE_BASE, {
  left: 0,
  right: 0
});

var RIGHT_BUTTON_BASE = {
  position: 'absolute',
  top: 0,
  right: 0,
  overflow: 'hidden',
  opacity: 1,
  height: NAV_ELEMENT_HEIGHT,
  backgroundColor: 'transparent'
};

var LEFT = [];
var CENTER = [];
var RIGHT = [];
for (var i = 0; i < MAX_BREADCRUMBS; i++) {
  var crumbLeft = CRUMB_WIDTH * i + SPACING;
  LEFT[i] = {
    Crumb: merge(CRUMB_BASE, { left: crumbLeft }),
    Icon: merge(ICON_BASE, { opacity: ICON_INACTIVE_OPACITY }),
    Separator: merge(SEPARATOR_BASE, { opacity: 1 }),
    Title: merge(TITLE_BASE, { left: crumbLeft, opacity: 0 }),
    RightItem: merge(RIGHT_BUTTON_BASE, { opacity: 0 })
  };
  CENTER[i] = {
    Crumb: merge(CRUMB_BASE, { left: crumbLeft }),
    Icon: merge(ICON_BASE, { opacity: 1 }),
    Separator: merge(SEPARATOR_BASE, { opacity: 0 }),
    Title: merge(TITLE_BASE, {
      left: crumbLeft + ICON_WIDTH,
      opacity: 1
    }),
    RightItem: merge(RIGHT_BUTTON_BASE, { opacity: 1 })
  };
  var crumbRight = crumbLeft + 50;
  RIGHT[i] = {
    Crumb: merge(CRUMB_BASE, { left: crumbRight }),
    Icon: merge(ICON_BASE, { opacity: 0 }),
    Separator: merge(SEPARATOR_BASE, { opacity: 0 }),
    Title: merge(TITLE_BASE, {
      left: crumbRight + ICON_WIDTH,
      opacity: 0
    }),
    RightItem: merge(RIGHT_BUTTON_BASE, { opacity: 0 })
  };
}

CENTER[0] = {
  Crumb: merge(CRUMB_BASE, { left: SPACING + CRUMB_WIDTH }),
  Icon: merge(ICON_BASE, { opacity: 0 }),
  Separator: merge(SEPARATOR_BASE, { opacity: 0 }),
  Title: merge(FIRST_TITLE_BASE, { opacity: 1 }),
  RightItem: CENTER[0].RightItem
};
LEFT[0].Title = merge(FIRST_TITLE_BASE, { opacity: 0 });
RIGHT[0].Title = merge(FIRST_TITLE_BASE, { opacity: 0 });

var buildIndexSceneInterpolator = function buildIndexSceneInterpolator(startStyles, endStyles) {
  return {
    Crumb: buildStyleInterpolator({
      left: {
        type: 'linear',
        from: startStyles.Crumb.left,
        to: endStyles.Crumb.left,
        min: 0,
        max: 1,
        extrapolate: true
      }
    }),
    Icon: buildStyleInterpolator({
      opacity: {
        type: 'linear',
        from: startStyles.Icon.opacity,
        to: endStyles.Icon.opacity,
        min: 0,
        max: 1
      }
    }),
    Separator: buildStyleInterpolator({
      opacity: {
        type: 'linear',
        from: startStyles.Separator.opacity,
        to: endStyles.Separator.opacity,
        min: 0,
        max: 1
      }
    }),
    Title: buildStyleInterpolator({
      opacity: {
        type: 'linear',
        from: startStyles.Title.opacity,
        to: endStyles.Title.opacity,
        min: 0,
        max: 1
      },
      left: {
        type: 'linear',
        from: startStyles.Title.left,
        to: endStyles.Title.left,
        min: 0,
        max: 1,
        extrapolate: true
      }
    }),
    RightItem: buildStyleInterpolator({
      opacity: {
        type: 'linear',
        from: startStyles.RightItem.opacity,
        to: endStyles.RightItem.opacity,
        min: 0,
        max: 1,
        round: OPACITY_RATIO
      }
    })
  };
};

var Interpolators = CENTER.map(function (_, ii) {
  return {
    RightToCenter: buildIndexSceneInterpolator(RIGHT[ii], CENTER[ii]),

    CenterToLeft: buildIndexSceneInterpolator(CENTER[ii], LEFT[ii]),

    RightToLeft: buildIndexSceneInterpolator(RIGHT[ii], LEFT[ii])
  };
});

module.exports = {
  Interpolators: Interpolators,
  Left: LEFT,
  Center: CENTER,
  Right: RIGHT,
  IconWidth: ICON_WIDTH,
  IconHeight: NAV_BAR_HEIGHT,
  SeparatorWidth: SEPARATOR_WIDTH,
  SeparatorHeight: NAV_BAR_HEIGHT
};
}, 315, null, "NavigatorBreadcrumbNavigationBarStyles");
__d(/* NavigatorNavigationBarStylesAndroid */function(global, require, module, exports) {
'use strict';

var buildStyleInterpolator = require(317                     ); // 317 = buildStyleInterpolator
var merge = require(122    ); // 122 = merge

var NAV_BAR_HEIGHT = 56;
var TITLE_LEFT = 72;
var BUTTON_SIZE = 24;
var TOUCH_TARGT_SIZE = 48;
var BUTTON_HORIZONTAL_MARGIN = 16;

var BUTTON_EFFECTIVE_MARGIN = BUTTON_HORIZONTAL_MARGIN - (TOUCH_TARGT_SIZE - BUTTON_SIZE) / 2;
var NAV_ELEMENT_HEIGHT = NAV_BAR_HEIGHT;

var BASE_STYLES = {
  Title: {
    position: 'absolute',
    bottom: 0,
    left: 0,
    right: 0,
    alignItems: 'flex-start',
    height: NAV_ELEMENT_HEIGHT,
    backgroundColor: 'transparent',
    marginLeft: TITLE_LEFT
  },
  LeftButton: {
    position: 'absolute',
    top: 0,
    left: BUTTON_EFFECTIVE_MARGIN,
    overflow: 'hidden',
    height: NAV_ELEMENT_HEIGHT,
    backgroundColor: 'transparent'
  },
  RightButton: {
    position: 'absolute',
    top: 0,
    right: BUTTON_EFFECTIVE_MARGIN,
    overflow: 'hidden',
    alignItems: 'flex-end',
    height: NAV_ELEMENT_HEIGHT,
    backgroundColor: 'transparent'
  }
};

var Stages = {
  Left: {
    Title: merge(BASE_STYLES.Title, { opacity: 0 }),
    LeftButton: merge(BASE_STYLES.LeftButton, { opacity: 0 }),
    RightButton: merge(BASE_STYLES.RightButton, { opacity: 0 })
  },
  Center: {
    Title: merge(BASE_STYLES.Title, { opacity: 1 }),
    LeftButton: merge(BASE_STYLES.LeftButton, { opacity: 1 }),
    RightButton: merge(BASE_STYLES.RightButton, { opacity: 1 })
  },
  Right: {
    Title: merge(BASE_STYLES.Title, { opacity: 0 }),
    LeftButton: merge(BASE_STYLES.LeftButton, { opacity: 0 }),
    RightButton: merge(BASE_STYLES.RightButton, { opacity: 0 })
  }
};

var opacityRatio = 100;

function buildSceneInterpolators(startStyles, endStyles) {
  return {
    Title: buildStyleInterpolator({
      opacity: {
        type: 'linear',
        from: startStyles.Title.opacity,
        to: endStyles.Title.opacity,
        min: 0,
        max: 1
      },
      left: {
        type: 'linear',
        from: startStyles.Title.left,
        to: endStyles.Title.left,
        min: 0,
        max: 1,
        extrapolate: true
      }
    }),
    LeftButton: buildStyleInterpolator({
      opacity: {
        type: 'linear',
        from: startStyles.LeftButton.opacity,
        to: endStyles.LeftButton.opacity,
        min: 0,
        max: 1,
        round: opacityRatio
      },
      left: {
        type: 'linear',
        from: startStyles.LeftButton.left,
        to: endStyles.LeftButton.left,
        min: 0,
        max: 1
      }
    }),
    RightButton: buildStyleInterpolator({
      opacity: {
        type: 'linear',
        from: startStyles.RightButton.opacity,
        to: endStyles.RightButton.opacity,
        min: 0,
        max: 1,
        round: opacityRatio
      },
      left: {
        type: 'linear',
        from: startStyles.RightButton.left,
        to: endStyles.RightButton.left,
        min: 0,
        max: 1,
        extrapolate: true
      }
    })
  };
}

var Interpolators = {
  RightToCenter: buildSceneInterpolators(Stages.Right, Stages.Center),

  CenterToLeft: buildSceneInterpolators(Stages.Center, Stages.Left),

  RightToLeft: buildSceneInterpolators(Stages.Right, Stages.Left)
};

module.exports = {
  General: {
    NavBarHeight: NAV_BAR_HEIGHT,
    StatusBarHeight: 0,
    TotalNavHeight: NAV_BAR_HEIGHT
  },
  Interpolators: Interpolators,
  Stages: Stages
};
}, 316, null, "NavigatorNavigationBarStylesAndroid");
__d(/* buildStyleInterpolator */function(global, require, module, exports) {

var keyOf = require(298             ); // 298 = fbjs/lib/keyOf

var X_DIM = keyOf({ x: null });
var Y_DIM = keyOf({ y: null });
var Z_DIM = keyOf({ z: null });
var W_DIM = keyOf({ w: null });

var TRANSFORM_ROTATE_NAME = keyOf({ transformRotateRadians: null });

var ShouldAllocateReusableOperationVars = {
  transformRotateRadians: true,
  transformScale: true,
  transformTranslate: true
};

var InitialOperationField = {
  transformRotateRadians: [0, 0, 0, 1],
  transformTranslate: [0, 0, 0],
  transformScale: [1, 1, 1]
};

var ARGUMENT_NAMES_RE = /([^\s,]+)/g;

var inline = function inline(fnStr, replaceWithArgs) {
  var parameterNames = fnStr.slice(fnStr.indexOf('(') + 1, fnStr.indexOf(')')).match(ARGUMENT_NAMES_RE) || [];
  var replaceRegexStr = parameterNames.map(function (paramName) {
    return '\\b' + paramName + '\\b';
  }).join('|');
  var replaceRegex = new RegExp(replaceRegexStr, 'g');
  var fnBody = fnStr.substring(fnStr.indexOf('{') + 1, fnStr.lastIndexOf('}'));
  var newFnBody = fnBody.replace(replaceRegex, function (parameterName) {
    var indexInParameterNames = parameterNames.indexOf(parameterName);
    var replacementName = replaceWithArgs[indexInParameterNames];
    return replacementName;
  });
  return newFnBody.split('\n');
};

var MatrixOps = {
  unroll: 'function(matVar, m0, m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12, m13, m14, m15) {\n    m0 = matVar[0];\n    m1 = matVar[1];\n    m2 = matVar[2];\n    m3 = matVar[3];\n    m4 = matVar[4];\n    m5 = matVar[5];\n    m6 = matVar[6];\n    m7 = matVar[7];\n    m8 = matVar[8];\n    m9 = matVar[9];\n    m10 = matVar[10];\n    m11 = matVar[11];\n    m12 = matVar[12];\n    m13 = matVar[13];\n    m14 = matVar[14];\n    m15 = matVar[15];\n  }',

  matrixDiffers: 'function(retVar, matVar, m0, m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12, m13, m14, m15) {\n    retVar = retVar ||\n    m0 !== matVar[0] ||\n    m1 !== matVar[1] ||\n    m2 !== matVar[2] ||\n    m3 !== matVar[3] ||\n    m4 !== matVar[4] ||\n    m5 !== matVar[5] ||\n    m6 !== matVar[6] ||\n    m7 !== matVar[7] ||\n    m8 !== matVar[8] ||\n    m9 !== matVar[9] ||\n    m10 !== matVar[10] ||\n    m11 !== matVar[11] ||\n    m12 !== matVar[12] ||\n    m13 !== matVar[13] ||\n    m14 !== matVar[14] ||\n    m15 !== matVar[15];\n  }',

  transformScale: 'function(matVar, opVar) {\n    // Scaling matVar by opVar\n    var x = opVar[0];\n    var y = opVar[1];\n    var z = opVar[2];\n    matVar[0] = matVar[0] * x;\n    matVar[1] = matVar[1] * x;\n    matVar[2] = matVar[2] * x;\n    matVar[3] = matVar[3] * x;\n    matVar[4] = matVar[4] * y;\n    matVar[5] = matVar[5] * y;\n    matVar[6] = matVar[6] * y;\n    matVar[7] = matVar[7] * y;\n    matVar[8] = matVar[8] * z;\n    matVar[9] = matVar[9] * z;\n    matVar[10] = matVar[10] * z;\n    matVar[11] = matVar[11] * z;\n    matVar[12] = matVar[12];\n    matVar[13] = matVar[13];\n    matVar[14] = matVar[14];\n    matVar[15] = matVar[15];\n  }',

  transformTranslate: 'function(matVar, opVar) {\n    // Translating matVar by opVar\n    var x = opVar[0];\n    var y = opVar[1];\n    var z = opVar[2];\n    matVar[12] = matVar[0] * x + matVar[4] * y + matVar[8] * z + matVar[12];\n    matVar[13] = matVar[1] * x + matVar[5] * y + matVar[9] * z + matVar[13];\n    matVar[14] = matVar[2] * x + matVar[6] * y + matVar[10] * z + matVar[14];\n    matVar[15] = matVar[3] * x + matVar[7] * y + matVar[11] * z + matVar[15];\n  }',

  transformRotateRadians: 'function(matVar, q) {\n    // Rotating matVar by q\n    var xQuat = q[0], yQuat = q[1], zQuat = q[2], wQuat = q[3];\n    var x2Quat = xQuat + xQuat;\n    var y2Quat = yQuat + yQuat;\n    var z2Quat = zQuat + zQuat;\n    var xxQuat = xQuat * x2Quat;\n    var xyQuat = xQuat * y2Quat;\n    var xzQuat = xQuat * z2Quat;\n    var yyQuat = yQuat * y2Quat;\n    var yzQuat = yQuat * z2Quat;\n    var zzQuat = zQuat * z2Quat;\n    var wxQuat = wQuat * x2Quat;\n    var wyQuat = wQuat * y2Quat;\n    var wzQuat = wQuat * z2Quat;\n    // Step 1: Inlines the construction of a quaternion matrix (\'quatMat\')\n    var quatMat0 = 1 - (yyQuat + zzQuat);\n    var quatMat1 = xyQuat + wzQuat;\n    var quatMat2 = xzQuat - wyQuat;\n    var quatMat4 = xyQuat - wzQuat;\n    var quatMat5 = 1 - (xxQuat + zzQuat);\n    var quatMat6 = yzQuat + wxQuat;\n    var quatMat8 = xzQuat + wyQuat;\n    var quatMat9 = yzQuat - wxQuat;\n    var quatMat10 = 1 - (xxQuat + yyQuat);\n    // quatMat3/7/11/12/13/14 = 0, quatMat15 = 1\n\n    // Step 2: Inlines multiplication, takes advantage of constant quatMat cells\n    var a00 = matVar[0];\n    var a01 = matVar[1];\n    var a02 = matVar[2];\n    var a03 = matVar[3];\n    var a10 = matVar[4];\n    var a11 = matVar[5];\n    var a12 = matVar[6];\n    var a13 = matVar[7];\n    var a20 = matVar[8];\n    var a21 = matVar[9];\n    var a22 = matVar[10];\n    var a23 = matVar[11];\n\n    var b0  = quatMat0, b1 = quatMat1, b2 = quatMat2;\n    matVar[0] = b0 * a00 + b1 * a10 + b2 * a20;\n    matVar[1] = b0 * a01 + b1 * a11 + b2 * a21;\n    matVar[2] = b0 * a02 + b1 * a12 + b2 * a22;\n    matVar[3] = b0 * a03 + b1 * a13 + b2 * a23;\n    b0 = quatMat4; b1 = quatMat5; b2 = quatMat6;\n    matVar[4] = b0 * a00 + b1 * a10 + b2 * a20;\n    matVar[5] = b0 * a01 + b1 * a11 + b2 * a21;\n    matVar[6] = b0 * a02 + b1 * a12 + b2 * a22;\n    matVar[7] = b0 * a03 + b1 * a13 + b2 * a23;\n    b0 = quatMat8; b1 = quatMat9; b2 = quatMat10;\n    matVar[8] = b0 * a00 + b1 * a10 + b2 * a20;\n    matVar[9] = b0 * a01 + b1 * a11 + b2 * a21;\n    matVar[10] = b0 * a02 + b1 * a12 + b2 * a22;\n    matVar[11] = b0 * a03 + b1 * a13 + b2 * a23;\n  }'
};

var MatrixOpsInitial = {
  transformScale: 'function(matVar, opVar) {\n    // Scaling matVar known to be identity by opVar\n    matVar[0] = opVar[0];\n    matVar[1] = 0;\n    matVar[2] = 0;\n    matVar[3] = 0;\n    matVar[4] = 0;\n    matVar[5] = opVar[1];\n    matVar[6] = 0;\n    matVar[7] = 0;\n    matVar[8] = 0;\n    matVar[9] = 0;\n    matVar[10] = opVar[2];\n    matVar[11] = 0;\n    matVar[12] = 0;\n    matVar[13] = 0;\n    matVar[14] = 0;\n    matVar[15] = 1;\n  }',

  transformTranslate: 'function(matVar, opVar) {\n    // Translating matVar known to be identity by opVar;\n    matVar[0] = 1;\n    matVar[1] = 0;\n    matVar[2] = 0;\n    matVar[3] = 0;\n    matVar[4] = 0;\n    matVar[5] = 1;\n    matVar[6] = 0;\n    matVar[7] = 0;\n    matVar[8] = 0;\n    matVar[9] = 0;\n    matVar[10] = 1;\n    matVar[11] = 0;\n    matVar[12] = opVar[0];\n    matVar[13] = opVar[1];\n    matVar[14] = opVar[2];\n    matVar[15] = 1;\n  }',

  transformRotateRadians: 'function(matVar, q) {\n\n    // Rotating matVar which is known to be identity by q\n    var xQuat = q[0], yQuat = q[1], zQuat = q[2], wQuat = q[3];\n    var x2Quat = xQuat + xQuat;\n    var y2Quat = yQuat + yQuat;\n    var z2Quat = zQuat + zQuat;\n    var xxQuat = xQuat * x2Quat;\n    var xyQuat = xQuat * y2Quat;\n    var xzQuat = xQuat * z2Quat;\n    var yyQuat = yQuat * y2Quat;\n    var yzQuat = yQuat * z2Quat;\n    var zzQuat = zQuat * z2Quat;\n    var wxQuat = wQuat * x2Quat;\n    var wyQuat = wQuat * y2Quat;\n    var wzQuat = wQuat * z2Quat;\n    // Step 1: Inlines the construction of a quaternion matrix (\'quatMat\')\n    var quatMat0 = 1 - (yyQuat + zzQuat);\n    var quatMat1 = xyQuat + wzQuat;\n    var quatMat2 = xzQuat - wyQuat;\n    var quatMat4 = xyQuat - wzQuat;\n    var quatMat5 = 1 - (xxQuat + zzQuat);\n    var quatMat6 = yzQuat + wxQuat;\n    var quatMat8 = xzQuat + wyQuat;\n    var quatMat9 = yzQuat - wxQuat;\n    var quatMat10 = 1 - (xxQuat + yyQuat);\n    // quatMat3/7/11/12/13/14 = 0, quatMat15 = 1\n\n    // Step 2: Inlines the multiplication with identity matrix.\n    var b0  = quatMat0, b1 = quatMat1, b2 = quatMat2;\n    matVar[0] = b0;\n    matVar[1] = b1;\n    matVar[2] = b2;\n    matVar[3] = 0;\n    b0 = quatMat4; b1 = quatMat5; b2 = quatMat6;\n    matVar[4] = b0;\n    matVar[5] = b1;\n    matVar[6] = b2;\n    matVar[7] = 0;\n    b0 = quatMat8; b1 = quatMat9; b2 = quatMat10;\n    matVar[8] = b0;\n    matVar[9] = b1;\n    matVar[10] = b2;\n    matVar[11] = 0;\n    matVar[12] = 0;\n    matVar[13] = 0;\n    matVar[14] = 0;\n    matVar[15] = 1;\n  }'
};

var setNextValAndDetectChange = function setNextValAndDetectChange(name, tmpVarName) {
  return '  if (!didChange) {\n' + '    var prevVal = result.' + name + ';\n' + '    result.' + name + ' = ' + tmpVarName + ';\n' + '    didChange = didChange  || (' + tmpVarName + ' !== prevVal);\n' + '  } else {\n' + '    result.' + name + ' = ' + tmpVarName + ';\n' + '  }\n';
};

var computeNextValLinear = function computeNextValLinear(anim, from, to, tmpVarName) {
  var hasRoundRatio = 'round' in anim;
  var roundRatio = anim.round;
  var fn = '  ratio = (value - ' + anim.min + ') / ' + (anim.max - anim.min) + ';\n';
  if (!anim.extrapolate) {
    fn += '  ratio = ratio > 1 ? 1 : (ratio < 0 ? 0 : ratio);\n';
  }

  var roundOpen = hasRoundRatio ? 'Math.round(' + roundRatio + ' * ' : '';
  var roundClose = hasRoundRatio ? ') / ' + roundRatio : '';
  fn += '  ' + tmpVarName + ' = ' + roundOpen + '(' + from + ' * (1 - ratio) + ' + to + ' * ratio)' + roundClose + ';\n';
  return fn;
};

var computeNextValLinearScalar = function computeNextValLinearScalar(anim) {
  return computeNextValLinear(anim, anim.from, anim.to, 'nextScalarVal');
};

var computeNextValConstant = function computeNextValConstant(anim) {
  var constantExpression = JSON.stringify(anim.value);
  return '  nextScalarVal = ' + constantExpression + ';\n';
};

var computeNextValStep = function computeNextValStep(anim) {
  return '  nextScalarVal = value >= ' + (anim.threshold + ' ? ' + anim.to + ' : ' + anim.from) + ';\n';
};

var computeNextValIdentity = function computeNextValIdentity(anim) {
  return '  nextScalarVal = value;\n';
};

var operationVar = function operationVar(name) {
  return name + 'ReuseOp';
};

var createReusableOperationVars = function createReusableOperationVars(anims) {
  var ret = '';
  for (var name in anims) {
    if (ShouldAllocateReusableOperationVars[name]) {
      ret += 'var ' + operationVar(name) + ' = [];\n';
    }
  }
  return ret;
};

var newlines = function newlines(statements) {
  return '\n' + statements.join('\n') + '\n';
};

var computeNextMatrixOperationField = function computeNextMatrixOperationField(anim, name, dimension, index) {
  var fieldAccess = operationVar(name) + '[' + index + ']';
  if (anim.from[dimension] !== undefined && anim.to[dimension] !== undefined) {
    return '  ' + anim.from[dimension] !== anim.to[dimension] ? computeNextValLinear(anim, anim.from[dimension], anim.to[dimension], fieldAccess) : fieldAccess + ' = ' + anim.from[dimension] + ';';
  } else {
    return '  ' + fieldAccess + ' = ' + InitialOperationField[name][index] + ';';
  }
};

var unrolledVars = [];
for (var varIndex = 0; varIndex < 16; varIndex++) {
  unrolledVars.push('m' + varIndex);
}
var setNextMatrixAndDetectChange = function setNextMatrixAndDetectChange(orderedMatrixOperations) {
  var fn = ['  var transform = result.transform !== undefined ? ' + 'result.transform : (result.transform = [{ matrix: [] }]);' + '  var transformMatrix = transform[0].matrix;'];
  fn.push.apply(fn, inline(MatrixOps.unroll, ['transformMatrix'].concat(unrolledVars)));
  for (var i = 0; i < orderedMatrixOperations.length; i++) {
    var opName = orderedMatrixOperations[i];
    if (i === 0) {
      fn.push.apply(fn, inline(MatrixOpsInitial[opName], ['transformMatrix', operationVar(opName)]));
    } else {
      fn.push.apply(fn, inline(MatrixOps[opName], ['transformMatrix', operationVar(opName)]));
    }
  }
  fn.push.apply(fn, inline(MatrixOps.matrixDiffers, ['didChange', 'transformMatrix'].concat(unrolledVars)));
  return fn;
};

var InterpolateMatrix = {
  transformTranslate: true,
  transformRotateRadians: true,
  transformScale: true
};

var createFunctionString = function createFunctionString(anims) {
  var orderedMatrixOperations = [];

  var fn = 'return (function() {\n';
  fn += createReusableOperationVars(anims);
  fn += 'return function(result, value) {\n';
  fn += '  var didChange = false;\n';
  fn += '  var nextScalarVal;\n';
  fn += '  var ratio;\n';

  for (var name in anims) {
    var anim = anims[name];
    if (anim.type === 'linear') {
      if (InterpolateMatrix[name]) {
        orderedMatrixOperations.push(name);
        var setOperations = [computeNextMatrixOperationField(anim, name, X_DIM, 0), computeNextMatrixOperationField(anim, name, Y_DIM, 1), computeNextMatrixOperationField(anim, name, Z_DIM, 2)];
        if (name === TRANSFORM_ROTATE_NAME) {
          setOperations.push(computeNextMatrixOperationField(anim, name, W_DIM, 3));
        }
        fn += newlines(setOperations);
      } else {
        fn += computeNextValLinearScalar(anim, 'nextScalarVal');
        fn += setNextValAndDetectChange(name, 'nextScalarVal');
      }
    } else if (anim.type === 'constant') {
      fn += computeNextValConstant(anim);
      fn += setNextValAndDetectChange(name, 'nextScalarVal');
    } else if (anim.type === 'step') {
      fn += computeNextValStep(anim);
      fn += setNextValAndDetectChange(name, 'nextScalarVal');
    } else if (anim.type === 'identity') {
      fn += computeNextValIdentity(anim);
      fn += setNextValAndDetectChange(name, 'nextScalarVal');
    }
  }
  if (orderedMatrixOperations.length) {
    fn += newlines(setNextMatrixAndDetectChange(orderedMatrixOperations));
  }
  fn += '  return didChange;\n';
  fn += '};\n';
  fn += '})()';
  return fn;
};

var buildStyleInterpolator = function buildStyleInterpolator(anims) {
  var interpolator = null;
  function lazyStyleInterpolator(result, value) {
    if (interpolator === null) {
      interpolator = Function(createFunctionString(anims))();
    }
    return interpolator(result, value);
  }
  return lazyStyleInterpolator;
};

module.exports = buildStyleInterpolator;
}, 317, null, "buildStyleInterpolator");
__d(/* NavigatorNavigationBarStylesIOS */function(global, require, module, exports) {
'use strict';

var Dimensions = require(101         ); // 101 = Dimensions

var buildStyleInterpolator = require(317                     ); // 317 = buildStyleInterpolator
var merge = require(122    ); // 122 = merge

var SCREEN_WIDTH = Dimensions.get('window').width;
var NAV_BAR_HEIGHT = 44;
var STATUS_BAR_HEIGHT = 20;
var NAV_HEIGHT = NAV_BAR_HEIGHT + STATUS_BAR_HEIGHT;

var BASE_STYLES = {
  Title: {
    position: 'absolute',
    top: STATUS_BAR_HEIGHT,
    left: 0,
    right: 0,
    alignItems: 'center',
    height: NAV_BAR_HEIGHT,
    backgroundColor: 'transparent'
  },
  LeftButton: {
    position: 'absolute',
    top: STATUS_BAR_HEIGHT,
    left: 0,
    overflow: 'hidden',
    opacity: 1,
    height: NAV_BAR_HEIGHT,
    backgroundColor: 'transparent'
  },
  RightButton: {
    position: 'absolute',
    top: STATUS_BAR_HEIGHT,
    right: 0,
    overflow: 'hidden',
    opacity: 1,
    alignItems: 'flex-end',
    height: NAV_BAR_HEIGHT,
    backgroundColor: 'transparent'
  }
};

var Stages = {
  Left: {
    Title: merge(BASE_STYLES.Title, { left: -SCREEN_WIDTH / 2, opacity: 0 }),
    LeftButton: merge(BASE_STYLES.LeftButton, { left: 0, opacity: 0 }),
    RightButton: merge(BASE_STYLES.RightButton, { opacity: 0 })
  },
  Center: {
    Title: merge(BASE_STYLES.Title, { left: 0, opacity: 1 }),
    LeftButton: merge(BASE_STYLES.LeftButton, { left: 0, opacity: 1 }),
    RightButton: merge(BASE_STYLES.RightButton, { opacity: 1 })
  },
  Right: {
    Title: merge(BASE_STYLES.Title, { left: SCREEN_WIDTH / 2, opacity: 0 }),
    LeftButton: merge(BASE_STYLES.LeftButton, { left: 0, opacity: 0 }),
    RightButton: merge(BASE_STYLES.RightButton, { opacity: 0 })
  }
};

var opacityRatio = 100;

function buildSceneInterpolators(startStyles, endStyles) {
  return {
    Title: buildStyleInterpolator({
      opacity: {
        type: 'linear',
        from: startStyles.Title.opacity,
        to: endStyles.Title.opacity,
        min: 0,
        max: 1
      },
      left: {
        type: 'linear',
        from: startStyles.Title.left,
        to: endStyles.Title.left,
        min: 0,
        max: 1,
        extrapolate: true
      }
    }),
    LeftButton: buildStyleInterpolator({
      opacity: {
        type: 'linear',
        from: startStyles.LeftButton.opacity,
        to: endStyles.LeftButton.opacity,
        min: 0,
        max: 1,
        round: opacityRatio
      },
      left: {
        type: 'linear',
        from: startStyles.LeftButton.left,
        to: endStyles.LeftButton.left,
        min: 0,
        max: 1
      }
    }),
    RightButton: buildStyleInterpolator({
      opacity: {
        type: 'linear',
        from: startStyles.RightButton.opacity,
        to: endStyles.RightButton.opacity,
        min: 0,
        max: 1,
        round: opacityRatio
      },
      left: {
        type: 'linear',
        from: startStyles.RightButton.left,
        to: endStyles.RightButton.left,
        min: 0,
        max: 1,
        extrapolate: true
      }
    })
  };
}

var Interpolators = {
  RightToCenter: buildSceneInterpolators(Stages.Right, Stages.Center),

  CenterToLeft: buildSceneInterpolators(Stages.Center, Stages.Left),

  RightToLeft: buildSceneInterpolators(Stages.Right, Stages.Left)
};

module.exports = {
  General: {
    NavBarHeight: NAV_BAR_HEIGHT,
    StatusBarHeight: STATUS_BAR_HEIGHT,
    TotalNavHeight: NAV_HEIGHT
  },
  Interpolators: Interpolators,
  Stages: Stages
};
}, 318, null, "NavigatorNavigationBarStylesIOS");
__d(/* NavigatorNavigationBar */function(global, require, module, exports) {
'use strict';

var React = require(76     ); // 76 = React
var NavigatorNavigationBarStylesAndroid = require(316                                  ); // 316 = NavigatorNavigationBarStylesAndroid
var NavigatorNavigationBarStylesIOS = require(318                              ); // 318 = NavigatorNavigationBarStylesIOS
var Platform = require(26        ); // 26 = Platform
var StyleSheet = require(99          ); // 99 = StyleSheet
var View = require(119   ); // 119 = View

var guid = require(216   ); // 216 = guid

var _require = require(313        ), // 313 = immutable
    Map = _require.Map;

var COMPONENT_NAMES = ['Title', 'LeftButton', 'RightButton'];

var NavigatorNavigationBarStyles = Platform.OS === 'android' ? NavigatorNavigationBarStylesAndroid : NavigatorNavigationBarStylesIOS;

var navStatePresentedIndex = function navStatePresentedIndex(navState) {
  if (navState.presentedIndex !== undefined) {
    return navState.presentedIndex;
  }

  return navState.observedTopOfStack;
};

var NavigatorNavigationBar = function (_React$Component) {
  babelHelpers.inherits(NavigatorNavigationBar, _React$Component);

  function NavigatorNavigationBar() {
    var _ref;

    var _temp, _this, _ret;

    babelHelpers.classCallCheck(this, NavigatorNavigationBar);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = NavigatorNavigationBar.__proto__ || Object.getPrototypeOf(NavigatorNavigationBar)).call.apply(_ref, [this].concat(args))), _this), _this.immediatelyRefresh = function () {
      _this._reset();
      _this.forceUpdate();
    }, _this._reset = function () {
      _this._key = guid();
      _this._reusableProps = {};
      _this._components = {};
      _this._descriptors = {};

      COMPONENT_NAMES.forEach(function (componentName) {
        _this._components[componentName] = new Map();
        _this._descriptors[componentName] = new Map();
      });
    }, _this._getReusableProps = function (componentName, index) {
      var propStack = _this._reusableProps[componentName];
      if (!propStack) {
        propStack = _this._reusableProps[componentName] = [];
      }
      var props = propStack[index];
      if (!props) {
        props = propStack[index] = { style: {} };
      }
      return props;
    }, _this._updateIndexProgress = function (progress, index, fromIndex, toIndex) {
      var amount = toIndex > fromIndex ? progress : 1 - progress;
      var oldDistToCenter = index - fromIndex;
      var newDistToCenter = index - toIndex;
      var interpolate;
      if (oldDistToCenter > 0 && newDistToCenter === 0 || newDistToCenter > 0 && oldDistToCenter === 0) {
        interpolate = _this.props.navigationStyles.Interpolators.RightToCenter;
      } else if (oldDistToCenter < 0 && newDistToCenter === 0 || newDistToCenter < 0 && oldDistToCenter === 0) {
        interpolate = _this.props.navigationStyles.Interpolators.CenterToLeft;
      } else if (oldDistToCenter === newDistToCenter) {
        interpolate = _this.props.navigationStyles.Interpolators.RightToCenter;
      } else {
        interpolate = _this.props.navigationStyles.Interpolators.RightToLeft;
      }

      COMPONENT_NAMES.forEach(function (componentName) {
        var component = this._components[componentName].get(this.props.navState.routeStack[index]);
        var props = this._getReusableProps(componentName, index);
        if (component && interpolate[componentName](props.style, amount)) {
          props.pointerEvents = props.style.opacity === 0 ? 'none' : 'box-none';
          component.setNativeProps(props);
        }
      }, _this);
    }, _this.updateProgress = function (progress, fromIndex, toIndex) {
      var max = Math.max(fromIndex, toIndex);
      var min = Math.min(fromIndex, toIndex);
      for (var index = min; index <= max; index++) {
        _this._updateIndexProgress(progress, index, fromIndex, toIndex);
      }
    }, _this._getComponent = function (componentName, route, index) {
      if (_this._descriptors[componentName].includes(route)) {
        return _this._descriptors[componentName].get(route);
      }

      var rendered = null;

      var content = _this.props.routeMapper[componentName](_this.props.navState.routeStack[index], _this.props.navigator, index, _this.props.navState);
      if (!content) {
        return null;
      }

      var componentIsActive = index === navStatePresentedIndex(_this.props.navState);
      var initialStage = componentIsActive ? _this.props.navigationStyles.Stages.Center : _this.props.navigationStyles.Stages.Left;
      rendered = React.createElement(
        View,
        {
          ref: function ref(_ref2) {
            _this._components[componentName] = _this._components[componentName].set(route, _ref2);
          },
          pointerEvents: componentIsActive ? 'box-none' : 'none',
          style: initialStage[componentName] },
        content
      );

      _this._descriptors[componentName] = _this._descriptors[componentName].set(route, rendered);
      return rendered;
    }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
  }

  babelHelpers.createClass(NavigatorNavigationBar, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this._reset();
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var navBarStyle = {
        height: this.props.navigationStyles.General.TotalNavHeight
      };
      var navState = this.props.navState;
      var components = navState.routeStack.map(function (route, index) {
        return COMPONENT_NAMES.map(function (componentName) {
          return _this2._getComponent(componentName, route, index);
        });
      });

      return React.createElement(
        View,
        {
          key: this._key,
          style: [styles.navBarContainer, navBarStyle, this.props.style] },
        components
      );
    }
  }]);
  return NavigatorNavigationBar;
}(React.Component);

NavigatorNavigationBar.propTypes = {
  navigator: React.PropTypes.object,
  routeMapper: React.PropTypes.shape({
    Title: React.PropTypes.func.isRequired,
    LeftButton: React.PropTypes.func.isRequired,
    RightButton: React.PropTypes.func.isRequired
  }).isRequired,
  navState: React.PropTypes.shape({
    routeStack: React.PropTypes.arrayOf(React.PropTypes.object),
    presentedIndex: React.PropTypes.number
  }),
  navigationStyles: React.PropTypes.object,
  style: View.propTypes.style
};
NavigatorNavigationBar.Styles = NavigatorNavigationBarStyles;
NavigatorNavigationBar.StylesAndroid = NavigatorNavigationBarStylesAndroid;
NavigatorNavigationBar.StylesIOS = NavigatorNavigationBarStylesIOS;
NavigatorNavigationBar.defaultProps = {
  navigationStyles: NavigatorNavigationBarStyles
};


var styles = StyleSheet.create({
  navBarContainer: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    backgroundColor: 'transparent'
  }
});

module.exports = NavigatorNavigationBar;
}, 319, null, "NavigatorNavigationBar");
__d(/* NavigatorSceneConfigs */function(global, require, module, exports) {
'use strict';

var Dimensions = require(101         ); // 101 = Dimensions
var I18nManager = require(306          ); // 306 = I18nManager
var PixelRatio = require(100         ); // 100 = PixelRatio

var buildStyleInterpolator = require(317                     ); // 317 = buildStyleInterpolator

var IS_RTL = I18nManager.isRTL;

var SCREEN_WIDTH = Dimensions.get('window').width;
var SCREEN_HEIGHT = Dimensions.get('window').height;
var PIXEL_RATIO = PixelRatio.get();

var ToTheLeftIOS = {
  transformTranslate: {
    from: { x: 0, y: 0, z: 0 },
    to: { x: -SCREEN_WIDTH * 0.3, y: 0, z: 0 },
    min: 0,
    max: 1,
    type: 'linear',
    extrapolate: true,
    round: PIXEL_RATIO
  },
  opacity: {
    value: 1.0,
    type: 'constant'
  }
};

var ToTheRightIOS = babelHelpers.extends({}, ToTheLeftIOS, {
  transformTranslate: {
    from: { x: 0, y: 0, z: 0 },
    to: { x: SCREEN_WIDTH * 0.3, y: 0, z: 0 }
  }
});

var FadeToTheLeft = {
  transformTranslate: {
    from: { x: 0, y: 0, z: 0 },
    to: { x: -Math.round(SCREEN_WIDTH * 0.3), y: 0, z: 0 },
    min: 0,
    max: 1,
    type: 'linear',
    extrapolate: true,
    round: PIXEL_RATIO
  },

  transformScale: {
    from: { x: 1, y: 1, z: 1 },
    to: { x: 0.95, y: 0.95, z: 1 },
    min: 0,
    max: 1,
    type: 'linear',
    extrapolate: true
  },
  opacity: {
    from: 1,
    to: 0.3,
    min: 0,
    max: 1,
    type: 'linear',
    extrapolate: false,
    round: 100
  },
  translateX: {
    from: 0,
    to: -Math.round(SCREEN_WIDTH * 0.3),
    min: 0,
    max: 1,
    type: 'linear',
    extrapolate: true,
    round: PIXEL_RATIO
  },
  scaleX: {
    from: 1,
    to: 0.95,
    min: 0,
    max: 1,
    type: 'linear',
    extrapolate: true
  },
  scaleY: {
    from: 1,
    to: 0.95,
    min: 0,
    max: 1,
    type: 'linear',
    extrapolate: true
  }
};

var FadeToTheRight = babelHelpers.extends({}, FadeToTheLeft, {
  transformTranslate: {
    from: { x: 0, y: 0, z: 0 },
    to: { x: Math.round(SCREEN_WIDTH * 0.3), y: 0, z: 0 }
  },
  translateX: {
    from: 0,
    to: Math.round(SCREEN_WIDTH * 0.3)
  }
});

var FadeIn = {
  opacity: {
    from: 0,
    to: 1,
    min: 0.5,
    max: 1,
    type: 'linear',
    extrapolate: false,
    round: 100
  }
};

var FadeOut = {
  opacity: {
    from: 1,
    to: 0,
    min: 0,
    max: 0.5,
    type: 'linear',
    extrapolate: false,
    round: 100
  }
};

var ToTheLeft = {
  transformTranslate: {
    from: { x: 0, y: 0, z: 0 },
    to: { x: -SCREEN_WIDTH, y: 0, z: 0 },
    min: 0,
    max: 1,
    type: 'linear',
    extrapolate: true,
    round: PIXEL_RATIO
  },
  opacity: {
    value: 1.0,
    type: 'constant'
  },

  translateX: {
    from: 0,
    to: -SCREEN_WIDTH,
    min: 0,
    max: 1,
    type: 'linear',
    extrapolate: true,
    round: PIXEL_RATIO
  }
};

var ToTheRight = {
  transformTranslate: {
    from: { x: 0, y: 0, z: 0 },
    to: { x: SCREEN_WIDTH, y: 0, z: 0 },
    min: 0,
    max: 1,
    type: 'linear',
    extrapolate: true,
    round: PIXEL_RATIO
  },
  opacity: {
    value: 1.0,
    type: 'constant'
  },

  translateX: {
    from: 0,
    to: SCREEN_WIDTH,
    min: 0,
    max: 1,
    type: 'linear',
    extrapolate: true,
    round: PIXEL_RATIO
  }
};

var ToTheUp = {
  transformTranslate: {
    from: { x: 0, y: 0, z: 0 },
    to: { x: 0, y: -SCREEN_HEIGHT, z: 0 },
    min: 0,
    max: 1,
    type: 'linear',
    extrapolate: true,
    round: PIXEL_RATIO
  },
  opacity: {
    value: 1.0,
    type: 'constant'
  },
  translateY: {
    from: 0,
    to: -SCREEN_HEIGHT,
    min: 0,
    max: 1,
    type: 'linear',
    extrapolate: true,
    round: PIXEL_RATIO
  }
};

var ToTheDown = {
  transformTranslate: {
    from: { x: 0, y: 0, z: 0 },
    to: { x: 0, y: SCREEN_HEIGHT, z: 0 },
    min: 0,
    max: 1,
    type: 'linear',
    extrapolate: true,
    round: PIXEL_RATIO
  },
  opacity: {
    value: 1.0,
    type: 'constant'
  },
  translateY: {
    from: 0,
    to: SCREEN_HEIGHT,
    min: 0,
    max: 1,
    type: 'linear',
    extrapolate: true,
    round: PIXEL_RATIO
  }
};

var FromTheRight = {
  opacity: {
    value: 1.0,
    type: 'constant'
  },

  transformTranslate: {
    from: { x: SCREEN_WIDTH, y: 0, z: 0 },
    to: { x: 0, y: 0, z: 0 },
    min: 0,
    max: 1,
    type: 'linear',
    extrapolate: true,
    round: PIXEL_RATIO
  },

  translateX: {
    from: SCREEN_WIDTH,
    to: 0,
    min: 0,
    max: 1,
    type: 'linear',
    extrapolate: true,
    round: PIXEL_RATIO
  },

  scaleX: {
    value: 1,
    type: 'constant'
  },
  scaleY: {
    value: 1,
    type: 'constant'
  }
};

var FromTheLeft = babelHelpers.extends({}, FromTheRight, {
  transformTranslate: {
    from: { x: -SCREEN_WIDTH, y: 0, z: 0 },
    to: { x: 0, y: 0, z: 0 },
    min: 0,
    max: 1,
    type: 'linear',
    extrapolate: true,
    round: PIXEL_RATIO
  },
  translateX: {
    from: -SCREEN_WIDTH,
    to: 0,
    min: 0,
    max: 1,
    type: 'linear',
    extrapolate: true,
    round: PIXEL_RATIO
  }
});

var FromTheDown = babelHelpers.extends({}, FromTheRight, {
  transformTranslate: {
    from: { y: SCREEN_HEIGHT, x: 0, z: 0 },
    to: { x: 0, y: 0, z: 0 },
    min: 0,
    max: 1,
    type: 'linear',
    extrapolate: true,
    round: PIXEL_RATIO
  },
  translateY: {
    from: SCREEN_HEIGHT,
    to: 0,
    min: 0,
    max: 1,
    type: 'linear',
    extrapolate: true,
    round: PIXEL_RATIO
  }
});

var FromTheTop = babelHelpers.extends({}, FromTheRight, {
  transformTranslate: {
    from: { y: -SCREEN_HEIGHT, x: 0, z: 0 },
    to: { x: 0, y: 0, z: 0 },
    min: 0,
    max: 1,
    type: 'linear',
    extrapolate: true,
    round: PIXEL_RATIO
  },
  translateY: {
    from: -SCREEN_HEIGHT,
    to: 0,
    min: 0,
    max: 1,
    type: 'linear',
    extrapolate: true,
    round: PIXEL_RATIO
  }
});

var ToTheBack = {
  transformTranslate: {
    from: { x: 0, y: 0, z: 0 },
    to: { x: 0, y: 0, z: 0 },
    min: 0,
    max: 1,
    type: 'linear',
    extrapolate: true,
    round: PIXEL_RATIO
  },
  transformScale: {
    from: { x: 1, y: 1, z: 1 },
    to: { x: 0.95, y: 0.95, z: 1 },
    min: 0,
    max: 1,
    type: 'linear',
    extrapolate: true
  },
  opacity: {
    from: 1,
    to: 0.3,
    min: 0,
    max: 1,
    type: 'linear',
    extrapolate: false,
    round: 100
  },
  scaleX: {
    from: 1,
    to: 0.95,
    min: 0,
    max: 1,
    type: 'linear',
    extrapolate: true
  },
  scaleY: {
    from: 1,
    to: 0.95,
    min: 0,
    max: 1,
    type: 'linear',
    extrapolate: true
  }
};

var FromTheFront = {
  opacity: {
    value: 1.0,
    type: 'constant'
  },

  transformTranslate: {
    from: { x: 0, y: SCREEN_HEIGHT, z: 0 },
    to: { x: 0, y: 0, z: 0 },
    min: 0,
    max: 1,
    type: 'linear',
    extrapolate: true,
    round: PIXEL_RATIO
  },
  translateY: {
    from: SCREEN_HEIGHT,
    to: 0,
    min: 0,
    max: 1,
    type: 'linear',
    extrapolate: true,
    round: PIXEL_RATIO
  },
  scaleX: {
    value: 1,
    type: 'constant'
  },
  scaleY: {
    value: 1,
    type: 'constant'
  }
};

var ToTheBackAndroid = {
  opacity: {
    value: 1,
    type: 'constant'
  }
};

var FromTheFrontAndroid = {
  opacity: {
    from: 0,
    to: 1,
    min: 0.5,
    max: 1,
    type: 'linear',
    extrapolate: false,
    round: 100
  },
  transformTranslate: {
    from: { x: 0, y: 100, z: 0 },
    to: { x: 0, y: 0, z: 0 },
    min: 0,
    max: 1,
    type: 'linear',
    extrapolate: true,
    round: PIXEL_RATIO
  },
  translateY: {
    from: 100,
    to: 0,
    min: 0,
    max: 1,
    type: 'linear',
    extrapolate: true,
    round: PIXEL_RATIO
  }
};

var BaseOverswipeConfig = {
  frictionConstant: 1,
  frictionByDistance: 1.5
};

var BaseLeftToRightGesture = {
  isDetachable: false,

  gestureDetectMovement: 2,

  notMoving: 0.3,

  directionRatio: 0.66,

  snapVelocity: 2,

  edgeHitWidth: 30,

  stillCompletionRatio: 3 / 5,

  fullDistance: SCREEN_WIDTH,

  direction: 'left-to-right'

};

var BaseRightToLeftGesture = babelHelpers.extends({}, BaseLeftToRightGesture, {
  direction: 'right-to-left'
});

var BaseDownUpGesture = babelHelpers.extends({}, BaseLeftToRightGesture, {
  fullDistance: SCREEN_HEIGHT,
  direction: 'bottom-to-top'
});

var BaseUpDownGesture = babelHelpers.extends({}, BaseLeftToRightGesture, {
  fullDistance: SCREEN_HEIGHT,
  direction: 'top-to-bottom'
});

var directionMapping = {
  ToTheStartIOS: ToTheLeftIOS,
  ToTheEndIOS: ToTheRightIOS,
  FadeToTheStart: FadeToTheLeft,
  FadeToTheEnd: FadeToTheRight,
  ToTheStart: ToTheLeft,
  ToTheEnd: ToTheRight,
  FromTheStart: FromTheLeft,
  FromTheEnd: FromTheRight,
  BaseStartToEndGesture: BaseLeftToRightGesture,
  BaseEndToStartGesture: BaseRightToLeftGesture
};

if (IS_RTL) {
  directionMapping = {
    ToTheStartIOS: ToTheRightIOS,
    ToTheEndIOS: ToTheLeftIOS,
    FadeToTheStart: FadeToTheRight,
    FadeToTheEnd: FadeToTheLeft,
    ToTheStart: ToTheRight,
    ToTheEnd: ToTheLeft,
    FromTheStart: FromTheRight,
    FromTheEnd: FromTheLeft,
    BaseStartToEndGesture: BaseRightToLeftGesture,
    BaseEndToStartGesture: BaseLeftToRightGesture
  };
}

var BaseConfig = {
  gestures: {
    pop: directionMapping.BaseStartToEndGesture
  },

  springFriction: 26,
  springTension: 200,

  defaultTransitionVelocity: 1.5,

  animationInterpolators: {
    into: buildStyleInterpolator(directionMapping.FromTheEnd),
    out: buildStyleInterpolator(directionMapping.FadeToTheStart)
  }
};

var NavigatorSceneConfigs = {
  PushFromRight: babelHelpers.extends({}, BaseConfig, {
    animationInterpolators: {
      into: buildStyleInterpolator(directionMapping.FromTheEnd),
      out: buildStyleInterpolator(directionMapping.ToTheStartIOS)
    }
  }),
  PushFromLeft: babelHelpers.extends({}, BaseConfig, {
    animationInterpolators: {
      into: buildStyleInterpolator(directionMapping.FromTheStart),
      out: buildStyleInterpolator(directionMapping.ToTheEndIOS)
    }
  }),
  FloatFromRight: babelHelpers.extends({}, BaseConfig),
  FloatFromLeft: babelHelpers.extends({}, BaseConfig, {
    gestures: {
      pop: directionMapping.BaseEndToStartGesture
    },
    animationInterpolators: {
      into: buildStyleInterpolator(directionMapping.FromTheStart),
      out: buildStyleInterpolator(directionMapping.FadeToTheEnd)
    }
  }),
  FloatFromBottom: babelHelpers.extends({}, BaseConfig, {
    gestures: {
      pop: babelHelpers.extends({}, directionMapping.BaseStartToEndGesture, {
        edgeHitWidth: 150,
        direction: 'top-to-bottom',
        fullDistance: SCREEN_HEIGHT
      })
    },
    animationInterpolators: {
      into: buildStyleInterpolator(FromTheFront),
      out: buildStyleInterpolator(ToTheBack)
    }
  }),
  FloatFromBottomAndroid: babelHelpers.extends({}, BaseConfig, {
    gestures: null,
    defaultTransitionVelocity: 3,
    springFriction: 20,
    animationInterpolators: {
      into: buildStyleInterpolator(FromTheFrontAndroid),
      out: buildStyleInterpolator(ToTheBackAndroid)
    }
  }),
  FadeAndroid: babelHelpers.extends({}, BaseConfig, {
    gestures: null,
    animationInterpolators: {
      into: buildStyleInterpolator(FadeIn),
      out: buildStyleInterpolator(FadeOut)
    }
  }),
  SwipeFromLeft: babelHelpers.extends({}, BaseConfig, {
    gestures: {
      jumpBack: babelHelpers.extends({}, directionMapping.BaseEndToStartGesture, {
        overswipe: BaseOverswipeConfig,
        edgeHitWidth: null,
        isDetachable: true
      }),
      jumpForward: babelHelpers.extends({}, directionMapping.BaseStartToEndGesture, {
        overswipe: BaseOverswipeConfig,
        edgeHitWidth: null,
        isDetachable: true
      })
    },
    animationInterpolators: {
      into: buildStyleInterpolator(directionMapping.FromTheStart),
      out: buildStyleInterpolator(directionMapping.ToTheEnd)
    }
  }),
  HorizontalSwipeJump: babelHelpers.extends({}, BaseConfig, {
    gestures: {
      jumpBack: babelHelpers.extends({}, directionMapping.BaseStartToEndGesture, {
        overswipe: BaseOverswipeConfig,
        edgeHitWidth: null,
        isDetachable: true
      }),
      jumpForward: babelHelpers.extends({}, directionMapping.BaseEndToStartGesture, {
        overswipe: BaseOverswipeConfig,
        edgeHitWidth: null,
        isDetachable: true
      })
    },
    animationInterpolators: {
      into: buildStyleInterpolator(directionMapping.FromTheEnd),
      out: buildStyleInterpolator(directionMapping.ToTheStart)
    }
  }),
  HorizontalSwipeJumpFromRight: babelHelpers.extends({}, BaseConfig, {
    gestures: {
      jumpBack: babelHelpers.extends({}, directionMapping.BaseEndToStartGesture, {
        overswipe: BaseOverswipeConfig,
        edgeHitWidth: null,
        isDetachable: true
      }),
      jumpForward: babelHelpers.extends({}, directionMapping.BaseStartToEndGesture, {
        overswipe: BaseOverswipeConfig,
        edgeHitWidth: null,
        isDetachable: true
      }),
      pop: directionMapping.BaseEndToStartGesture
    },
    animationInterpolators: {
      into: buildStyleInterpolator(directionMapping.FromTheStart),
      out: buildStyleInterpolator(directionMapping.FadeToTheEnd)
    }
  }),
  HorizontalSwipeJumpFromLeft: babelHelpers.extends({}, BaseConfig, {
    gestures: {
      jumpBack: babelHelpers.extends({}, directionMapping.BaseEndToStartGesture, {
        overswipe: BaseOverswipeConfig,
        edgeHitWidth: null,
        isDetachable: true
      }),
      jumpForward: babelHelpers.extends({}, directionMapping.BaseStartToEndGesture, {
        overswipe: BaseOverswipeConfig,
        edgeHitWidth: null,
        isDetachable: true
      }),
      pop: directionMapping.BaseEndToStartGesture
    },
    animationInterpolators: {
      into: buildStyleInterpolator(directionMapping.FromTheStart),
      out: buildStyleInterpolator(directionMapping.ToTheEnd)
    }
  }),
  VerticalUpSwipeJump: babelHelpers.extends({}, BaseConfig, {
    gestures: {
      jumpBack: babelHelpers.extends({}, BaseUpDownGesture, {
        overswipe: BaseOverswipeConfig,
        edgeHitWidth: null,
        isDetachable: true
      }),
      jumpForward: babelHelpers.extends({}, BaseDownUpGesture, {
        overswipe: BaseOverswipeConfig,
        edgeHitWidth: null,
        isDetachable: true
      })
    },
    animationInterpolators: {
      into: buildStyleInterpolator(FromTheDown),
      out: buildStyleInterpolator(ToTheUp)
    }
  }),
  VerticalDownSwipeJump: babelHelpers.extends({}, BaseConfig, {
    gestures: {
      jumpBack: babelHelpers.extends({}, BaseDownUpGesture, {
        overswipe: BaseOverswipeConfig,
        edgeHitWidth: null,
        isDetachable: true
      }),
      jumpForward: babelHelpers.extends({}, BaseUpDownGesture, {
        overswipe: BaseOverswipeConfig,
        edgeHitWidth: null,
        isDetachable: true
      })
    },
    animationInterpolators: {
      into: buildStyleInterpolator(FromTheTop),
      out: buildStyleInterpolator(ToTheDown)
    }
  })
};

module.exports = NavigatorSceneConfigs;
}, 320, null, "NavigatorSceneConfigs");
__d(/* PanResponder */function(global, require, module, exports) {

'use strict';

var InteractionManager = require(253                   ); // 253 = ./InteractionManager
var TouchHistoryMath = require(322               ); // 322 = TouchHistoryMath

var currentCentroidXOfTouchesChangedAfter = TouchHistoryMath.currentCentroidXOfTouchesChangedAfter;
var currentCentroidYOfTouchesChangedAfter = TouchHistoryMath.currentCentroidYOfTouchesChangedAfter;
var previousCentroidXOfTouchesChangedAfter = TouchHistoryMath.previousCentroidXOfTouchesChangedAfter;
var previousCentroidYOfTouchesChangedAfter = TouchHistoryMath.previousCentroidYOfTouchesChangedAfter;
var currentCentroidX = TouchHistoryMath.currentCentroidX;
var currentCentroidY = TouchHistoryMath.currentCentroidY;

var PanResponder = {

  _initializeGestureState: function _initializeGestureState(gestureState) {
    gestureState.moveX = 0;
    gestureState.moveY = 0;
    gestureState.x0 = 0;
    gestureState.y0 = 0;
    gestureState.dx = 0;
    gestureState.dy = 0;
    gestureState.vx = 0;
    gestureState.vy = 0;
    gestureState.numberActiveTouches = 0;

    gestureState._accountsForMovesUpTo = 0;
  },

  _updateGestureStateOnMove: function _updateGestureStateOnMove(gestureState, touchHistory) {
    gestureState.numberActiveTouches = touchHistory.numberActiveTouches;
    gestureState.moveX = currentCentroidXOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);
    gestureState.moveY = currentCentroidYOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);
    var movedAfter = gestureState._accountsForMovesUpTo;
    var prevX = previousCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);
    var x = currentCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);
    var prevY = previousCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);
    var y = currentCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);
    var nextDX = gestureState.dx + (x - prevX);
    var nextDY = gestureState.dy + (y - prevY);

    var dt = touchHistory.mostRecentTimeStamp - gestureState._accountsForMovesUpTo;
    gestureState.vx = (nextDX - gestureState.dx) / dt;
    gestureState.vy = (nextDY - gestureState.dy) / dt;

    gestureState.dx = nextDX;
    gestureState.dy = nextDY;
    gestureState._accountsForMovesUpTo = touchHistory.mostRecentTimeStamp;
  },

  create: function create(config) {
    var interactionState = {
      handle: null
    };
    var gestureState = {
      stateID: Math.random()
    };
    PanResponder._initializeGestureState(gestureState);
    var panHandlers = {
      onStartShouldSetResponder: function onStartShouldSetResponder(e) {
        return config.onStartShouldSetPanResponder === undefined ? false : config.onStartShouldSetPanResponder(e, gestureState);
      },
      onMoveShouldSetResponder: function onMoveShouldSetResponder(e) {
        return config.onMoveShouldSetPanResponder === undefined ? false : config.onMoveShouldSetPanResponder(e, gestureState);
      },
      onStartShouldSetResponderCapture: function onStartShouldSetResponderCapture(e) {
        if (e.nativeEvent.touches.length === 1) {
          PanResponder._initializeGestureState(gestureState);
        }
        gestureState.numberActiveTouches = e.touchHistory.numberActiveTouches;
        return config.onStartShouldSetPanResponderCapture !== undefined ? config.onStartShouldSetPanResponderCapture(e, gestureState) : false;
      },

      onMoveShouldSetResponderCapture: function onMoveShouldSetResponderCapture(e) {
        var touchHistory = e.touchHistory;

        if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {
          return false;
        }
        PanResponder._updateGestureStateOnMove(gestureState, touchHistory);
        return config.onMoveShouldSetPanResponderCapture ? config.onMoveShouldSetPanResponderCapture(e, gestureState) : false;
      },

      onResponderGrant: function onResponderGrant(e) {
        if (!interactionState.handle) {
          interactionState.handle = InteractionManager.createInteractionHandle();
        }
        gestureState.x0 = currentCentroidX(e.touchHistory);
        gestureState.y0 = currentCentroidY(e.touchHistory);
        gestureState.dx = 0;
        gestureState.dy = 0;
        if (config.onPanResponderGrant) {
          config.onPanResponderGrant(e, gestureState);
        }

        return config.onShouldBlockNativeResponder === undefined ? true : config.onShouldBlockNativeResponder();
      },

      onResponderReject: function onResponderReject(e) {
        clearInteractionHandle(interactionState, config.onPanResponderReject, e, gestureState);
      },

      onResponderRelease: function onResponderRelease(e) {
        clearInteractionHandle(interactionState, config.onPanResponderRelease, e, gestureState);
        PanResponder._initializeGestureState(gestureState);
      },

      onResponderStart: function onResponderStart(e) {
        var touchHistory = e.touchHistory;
        gestureState.numberActiveTouches = touchHistory.numberActiveTouches;
        if (config.onPanResponderStart) {
          config.onPanResponderStart(e, gestureState);
        }
      },

      onResponderMove: function onResponderMove(e) {
        var touchHistory = e.touchHistory;

        if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {
          return;
        }

        PanResponder._updateGestureStateOnMove(gestureState, touchHistory);
        if (config.onPanResponderMove) {
          config.onPanResponderMove(e, gestureState);
        }
      },

      onResponderEnd: function onResponderEnd(e) {
        var touchHistory = e.touchHistory;
        gestureState.numberActiveTouches = touchHistory.numberActiveTouches;
        clearInteractionHandle(interactionState, config.onPanResponderEnd, e, gestureState);
      },

      onResponderTerminate: function onResponderTerminate(e) {
        clearInteractionHandle(interactionState, config.onPanResponderTerminate, e, gestureState);
        PanResponder._initializeGestureState(gestureState);
      },

      onResponderTerminationRequest: function onResponderTerminationRequest(e) {
        return config.onPanResponderTerminationRequest === undefined ? true : config.onPanResponderTerminationRequest(e, gestureState);
      }
    };
    return {
      panHandlers: panHandlers,
      getInteractionHandle: function getInteractionHandle() {
        return interactionState.handle;
      }
    };
  }
};

function clearInteractionHandle(interactionState, callback, event, gestureState) {
  if (interactionState.handle) {
    InteractionManager.clearInteractionHandle(interactionState.handle);
    interactionState.handle = null;
  }
  if (callback) {
    callback(event, gestureState);
  }
}

module.exports = PanResponder;
}, 321, null, "PanResponder");
__d(/* TouchHistoryMath */function(global, require, module, exports) {

'use strict';

var TouchHistoryMath = {
  centroidDimension: function centroidDimension(touchHistory, touchesChangedAfter, isXAxis, ofCurrent) {
    var touchBank = touchHistory.touchBank;
    var total = 0;
    var count = 0;

    var oneTouchData = touchHistory.numberActiveTouches === 1 ? touchHistory.touchBank[touchHistory.indexOfSingleActiveTouch] : null;

    if (oneTouchData !== null) {
      if (oneTouchData.touchActive && oneTouchData.currentTimeStamp > touchesChangedAfter) {
        total += ofCurrent && isXAxis ? oneTouchData.currentPageX : ofCurrent && !isXAxis ? oneTouchData.currentPageY : !ofCurrent && isXAxis ? oneTouchData.previousPageX : oneTouchData.previousPageY;
        count = 1;
      }
    } else {
      for (var i = 0; i < touchBank.length; i++) {
        var touchTrack = touchBank[i];
        if (touchTrack !== null && touchTrack !== undefined && touchTrack.touchActive && touchTrack.currentTimeStamp >= touchesChangedAfter) {
          var toAdd;
          if (ofCurrent && isXAxis) {
            toAdd = touchTrack.currentPageX;
          } else if (ofCurrent && !isXAxis) {
            toAdd = touchTrack.currentPageY;
          } else if (!ofCurrent && isXAxis) {
            toAdd = touchTrack.previousPageX;
          } else {
            toAdd = touchTrack.previousPageY;
          }
          total += toAdd;
          count++;
        }
      }
    }
    return count > 0 ? total / count : TouchHistoryMath.noCentroid;
  },

  currentCentroidXOfTouchesChangedAfter: function currentCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, true);
  },

  currentCentroidYOfTouchesChangedAfter: function currentCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, true);
  },

  previousCentroidXOfTouchesChangedAfter: function previousCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, false);
  },

  previousCentroidYOfTouchesChangedAfter: function previousCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, false);
  },

  currentCentroidX: function currentCentroidX(touchHistory) {
    return TouchHistoryMath.centroidDimension(touchHistory, 0, true, true);
  },

  currentCentroidY: function currentCentroidY(touchHistory) {
    return TouchHistoryMath.centroidDimension(touchHistory, 0, false, true);
  },

  noCentroid: -1
};

module.exports = TouchHistoryMath;
}, 322, null, "TouchHistoryMath");
__d(/* clamp */function(global, require, module, exports) {
'use strict';

function clamp(min, value, max) {
  if (value < min) {
    return min;
  }
  if (value > max) {
    return max;
  }
  return value;
}

module.exports = clamp;
}, 323, null, "clamp");
__d(/* rebound/rebound.js */function(global, require, module, exports) {

(function () {
  var rebound = {};
  var util = rebound.util = {};
  var concat = Array.prototype.concat;
  var slice = Array.prototype.slice;

  util.bind = function bind(func, context) {
    var args = slice.call(arguments, 2);
    return function () {
      func.apply(context, concat.call(args, slice.call(arguments)));
    };
  };

  util.extend = function extend(target, source) {
    for (var key in source) {
      if (source.hasOwnProperty(key)) {
        target[key] = source[key];
      }
    }
  };

  var SpringSystem = rebound.SpringSystem = function SpringSystem(looper) {
    this._springRegistry = {};
    this._activeSprings = [];
    this.listeners = [];
    this._idleSpringIndices = [];
    this.looper = looper || new AnimationLooper();
    this.looper.springSystem = this;
  };

  util.extend(SpringSystem.prototype, {

    _springRegistry: null,

    _isIdle: true,

    _lastTimeMillis: -1,

    _activeSprings: null,

    listeners: null,

    _idleSpringIndices: null,

    setLooper: function setLooper(looper) {
      this.looper = looper;
      looper.springSystem = this;
    },

    createSpring: function createSpring(tension, friction) {
      var springConfig;
      if (tension === undefined || friction === undefined) {
        springConfig = SpringConfig.DEFAULT_ORIGAMI_SPRING_CONFIG;
      } else {
        springConfig = SpringConfig.fromOrigamiTensionAndFriction(tension, friction);
      }
      return this.createSpringWithConfig(springConfig);
    },

    createSpringWithBouncinessAndSpeed: function createSpringWithBouncinessAndSpeed(bounciness, speed) {
      var springConfig;
      if (bounciness === undefined || speed === undefined) {
        springConfig = SpringConfig.DEFAULT_ORIGAMI_SPRING_CONFIG;
      } else {
        springConfig = SpringConfig.fromBouncinessAndSpeed(bounciness, speed);
      }
      return this.createSpringWithConfig(springConfig);
    },

    createSpringWithConfig: function createSpringWithConfig(springConfig) {
      var spring = new Spring(this);
      this.registerSpring(spring);
      spring.setSpringConfig(springConfig);
      return spring;
    },

    getIsIdle: function getIsIdle() {
      return this._isIdle;
    },

    getSpringById: function getSpringById(id) {
      return this._springRegistry[id];
    },

    getAllSprings: function getAllSprings() {
      var vals = [];
      for (var id in this._springRegistry) {
        if (this._springRegistry.hasOwnProperty(id)) {
          vals.push(this._springRegistry[id]);
        }
      }
      return vals;
    },

    registerSpring: function registerSpring(spring) {
      this._springRegistry[spring.getId()] = spring;
    },

    deregisterSpring: function deregisterSpring(spring) {
      removeFirst(this._activeSprings, spring);
      delete this._springRegistry[spring.getId()];
    },

    advance: function advance(time, deltaTime) {
      while (this._idleSpringIndices.length > 0) {
        this._idleSpringIndices.pop();
      }for (var i = 0, len = this._activeSprings.length; i < len; i++) {
        var spring = this._activeSprings[i];
        if (spring.systemShouldAdvance()) {
          spring.advance(time / 1000.0, deltaTime / 1000.0);
        } else {
          this._idleSpringIndices.push(this._activeSprings.indexOf(spring));
        }
      }
      while (this._idleSpringIndices.length > 0) {
        var idx = this._idleSpringIndices.pop();
        idx >= 0 && this._activeSprings.splice(idx, 1);
      }
    },

    loop: function loop(currentTimeMillis) {
      var listener;
      if (this._lastTimeMillis === -1) {
        this._lastTimeMillis = currentTimeMillis - 1;
      }
      var ellapsedMillis = currentTimeMillis - this._lastTimeMillis;
      this._lastTimeMillis = currentTimeMillis;

      var i = 0,
          len = this.listeners.length;
      for (i = 0; i < len; i++) {
        listener = this.listeners[i];
        listener.onBeforeIntegrate && listener.onBeforeIntegrate(this);
      }

      this.advance(currentTimeMillis, ellapsedMillis);
      if (this._activeSprings.length === 0) {
        this._isIdle = true;
        this._lastTimeMillis = -1;
      }

      for (i = 0; i < len; i++) {
        listener = this.listeners[i];
        listener.onAfterIntegrate && listener.onAfterIntegrate(this);
      }

      if (!this._isIdle) {
        this.looper.run();
      }
    },

    activateSpring: function activateSpring(springId) {
      var spring = this._springRegistry[springId];
      if (this._activeSprings.indexOf(spring) == -1) {
        this._activeSprings.push(spring);
      }
      if (this.getIsIdle()) {
        this._isIdle = false;
        this.looper.run();
      }
    },

    addListener: function addListener(listener) {
      this.listeners.push(listener);
    },

    removeListener: function removeListener(listener) {
      removeFirst(this.listeners, listener);
    },

    removeAllListeners: function removeAllListeners() {
      this.listeners = [];
    }

  });

  var Spring = rebound.Spring = function Spring(springSystem) {
    this._id = 's' + Spring._ID++;
    this._springSystem = springSystem;
    this.listeners = [];
    this._currentState = new PhysicsState();
    this._previousState = new PhysicsState();
    this._tempState = new PhysicsState();
  };

  util.extend(Spring, {
    _ID: 0,

    MAX_DELTA_TIME_SEC: 0.064,

    SOLVER_TIMESTEP_SEC: 0.001

  });

  util.extend(Spring.prototype, {

    _id: 0,

    _springConfig: null,

    _overshootClampingEnabled: false,

    _currentState: null,

    _previousState: null,

    _tempState: null,

    _startValue: 0,

    _endValue: 0,

    _wasAtRest: true,

    _restSpeedThreshold: 0.001,

    _displacementFromRestThreshold: 0.001,

    listeners: null,

    _timeAccumulator: 0,

    _springSystem: null,

    destroy: function destroy() {
      this.listeners = [];
      this.frames = [];
      this._springSystem.deregisterSpring(this);
    },

    getId: function getId() {
      return this._id;
    },

    setSpringConfig: function setSpringConfig(springConfig) {
      this._springConfig = springConfig;
      return this;
    },

    getSpringConfig: function getSpringConfig() {
      return this._springConfig;
    },

    setCurrentValue: function setCurrentValue(currentValue, skipSetAtRest) {
      this._startValue = currentValue;
      this._currentState.position = currentValue;
      if (!skipSetAtRest) {
        this.setAtRest();
      }
      this.notifyPositionUpdated(false, false);
      return this;
    },

    getStartValue: function getStartValue() {
      return this._startValue;
    },

    getCurrentValue: function getCurrentValue() {
      return this._currentState.position;
    },

    getCurrentDisplacementDistance: function getCurrentDisplacementDistance() {
      return this.getDisplacementDistanceForState(this._currentState);
    },

    getDisplacementDistanceForState: function getDisplacementDistanceForState(state) {
      return Math.abs(this._endValue - state.position);
    },

    setEndValue: function setEndValue(endValue) {
      if (this._endValue == endValue && this.isAtRest()) {
        return this;
      }
      this._startValue = this.getCurrentValue();
      this._endValue = endValue;
      this._springSystem.activateSpring(this.getId());
      for (var i = 0, len = this.listeners.length; i < len; i++) {
        var listener = this.listeners[i];
        var onChange = listener.onSpringEndStateChange;
        onChange && onChange(this);
      }
      return this;
    },

    getEndValue: function getEndValue() {
      return this._endValue;
    },

    setVelocity: function setVelocity(velocity) {
      if (velocity === this._currentState.velocity) {
        return this;
      }
      this._currentState.velocity = velocity;
      this._springSystem.activateSpring(this.getId());
      return this;
    },

    getVelocity: function getVelocity() {
      return this._currentState.velocity;
    },

    setRestSpeedThreshold: function setRestSpeedThreshold(restSpeedThreshold) {
      this._restSpeedThreshold = restSpeedThreshold;
      return this;
    },

    getRestSpeedThreshold: function getRestSpeedThreshold() {
      return this._restSpeedThreshold;
    },

    setRestDisplacementThreshold: function setRestDisplacementThreshold(displacementFromRestThreshold) {
      this._displacementFromRestThreshold = displacementFromRestThreshold;
    },

    getRestDisplacementThreshold: function getRestDisplacementThreshold() {
      return this._displacementFromRestThreshold;
    },

    setOvershootClampingEnabled: function setOvershootClampingEnabled(enabled) {
      this._overshootClampingEnabled = enabled;
      return this;
    },

    isOvershootClampingEnabled: function isOvershootClampingEnabled() {
      return this._overshootClampingEnabled;
    },

    isOvershooting: function isOvershooting() {
      var start = this._startValue;
      var end = this._endValue;
      return this._springConfig.tension > 0 && (start < end && this.getCurrentValue() > end || start > end && this.getCurrentValue() < end);
    },

    advance: function advance(time, realDeltaTime) {
      var isAtRest = this.isAtRest();

      if (isAtRest && this._wasAtRest) {
        return;
      }

      var adjustedDeltaTime = realDeltaTime;
      if (realDeltaTime > Spring.MAX_DELTA_TIME_SEC) {
        adjustedDeltaTime = Spring.MAX_DELTA_TIME_SEC;
      }

      this._timeAccumulator += adjustedDeltaTime;

      var tension = this._springConfig.tension,
          friction = this._springConfig.friction,
          position = this._currentState.position,
          velocity = this._currentState.velocity,
          tempPosition = this._tempState.position,
          tempVelocity = this._tempState.velocity,
          aVelocity,
          aAcceleration,
          bVelocity,
          bAcceleration,
          cVelocity,
          cAcceleration,
          dVelocity,
          dAcceleration,
          dxdt,
          dvdt;

      while (this._timeAccumulator >= Spring.SOLVER_TIMESTEP_SEC) {

        this._timeAccumulator -= Spring.SOLVER_TIMESTEP_SEC;

        if (this._timeAccumulator < Spring.SOLVER_TIMESTEP_SEC) {
          this._previousState.position = position;
          this._previousState.velocity = velocity;
        }

        aVelocity = velocity;
        aAcceleration = tension * (this._endValue - tempPosition) - friction * velocity;

        tempPosition = position + aVelocity * Spring.SOLVER_TIMESTEP_SEC * 0.5;
        tempVelocity = velocity + aAcceleration * Spring.SOLVER_TIMESTEP_SEC * 0.5;
        bVelocity = tempVelocity;
        bAcceleration = tension * (this._endValue - tempPosition) - friction * tempVelocity;

        tempPosition = position + bVelocity * Spring.SOLVER_TIMESTEP_SEC * 0.5;
        tempVelocity = velocity + bAcceleration * Spring.SOLVER_TIMESTEP_SEC * 0.5;
        cVelocity = tempVelocity;
        cAcceleration = tension * (this._endValue - tempPosition) - friction * tempVelocity;

        tempPosition = position + cVelocity * Spring.SOLVER_TIMESTEP_SEC * 0.5;
        tempVelocity = velocity + cAcceleration * Spring.SOLVER_TIMESTEP_SEC * 0.5;
        dVelocity = tempVelocity;
        dAcceleration = tension * (this._endValue - tempPosition) - friction * tempVelocity;

        dxdt = 1.0 / 6.0 * (aVelocity + 2.0 * (bVelocity + cVelocity) + dVelocity);
        dvdt = 1.0 / 6.0 * (aAcceleration + 2.0 * (bAcceleration + cAcceleration) + dAcceleration);

        position += dxdt * Spring.SOLVER_TIMESTEP_SEC;
        velocity += dvdt * Spring.SOLVER_TIMESTEP_SEC;
      }

      this._tempState.position = tempPosition;
      this._tempState.velocity = tempVelocity;

      this._currentState.position = position;
      this._currentState.velocity = velocity;

      if (this._timeAccumulator > 0) {
        this._interpolate(this._timeAccumulator / Spring.SOLVER_TIMESTEP_SEC);
      }

      if (this.isAtRest() || this._overshootClampingEnabled && this.isOvershooting()) {

        if (this._springConfig.tension > 0) {
          this._startValue = this._endValue;
          this._currentState.position = this._endValue;
        } else {
          this._endValue = this._currentState.position;
          this._startValue = this._endValue;
        }
        this.setVelocity(0);
        isAtRest = true;
      }

      var notifyActivate = false;
      if (this._wasAtRest) {
        this._wasAtRest = false;
        notifyActivate = true;
      }

      var notifyAtRest = false;
      if (isAtRest) {
        this._wasAtRest = true;
        notifyAtRest = true;
      }

      this.notifyPositionUpdated(notifyActivate, notifyAtRest);
    },

    notifyPositionUpdated: function notifyPositionUpdated(notifyActivate, notifyAtRest) {
      for (var i = 0, len = this.listeners.length; i < len; i++) {
        var listener = this.listeners[i];
        if (notifyActivate && listener.onSpringActivate) {
          listener.onSpringActivate(this);
        }

        if (listener.onSpringUpdate) {
          listener.onSpringUpdate(this);
        }

        if (notifyAtRest && listener.onSpringAtRest) {
          listener.onSpringAtRest(this);
        }
      }
    },

    systemShouldAdvance: function systemShouldAdvance() {
      return !this.isAtRest() || !this.wasAtRest();
    },

    wasAtRest: function wasAtRest() {
      return this._wasAtRest;
    },

    isAtRest: function isAtRest() {
      return Math.abs(this._currentState.velocity) < this._restSpeedThreshold && (this.getDisplacementDistanceForState(this._currentState) <= this._displacementFromRestThreshold || this._springConfig.tension === 0);
    },

    setAtRest: function setAtRest() {
      this._endValue = this._currentState.position;
      this._tempState.position = this._currentState.position;
      this._currentState.velocity = 0;
      return this;
    },

    _interpolate: function _interpolate(alpha) {
      this._currentState.position = this._currentState.position * alpha + this._previousState.position * (1 - alpha);
      this._currentState.velocity = this._currentState.velocity * alpha + this._previousState.velocity * (1 - alpha);
    },

    getListeners: function getListeners() {
      return this.listeners;
    },

    addListener: function addListener(newListener) {
      this.listeners.push(newListener);
      return this;
    },

    removeListener: function removeListener(listenerToRemove) {
      removeFirst(this.listeners, listenerToRemove);
      return this;
    },

    removeAllListeners: function removeAllListeners() {
      this.listeners = [];
      return this;
    },

    currentValueIsApproximately: function currentValueIsApproximately(value) {
      return Math.abs(this.getCurrentValue() - value) <= this.getRestDisplacementThreshold();
    }

  });

  var PhysicsState = function PhysicsState() {};

  util.extend(PhysicsState.prototype, {
    position: 0,
    velocity: 0
  });

  var SpringConfig = rebound.SpringConfig = function SpringConfig(tension, friction) {
    this.tension = tension;
    this.friction = friction;
  };

  var AnimationLooper = rebound.AnimationLooper = function AnimationLooper() {
    this.springSystem = null;
    var _this = this;
    var _run = function _run() {
      _this.springSystem.loop(Date.now());
    };

    this.run = function () {
      util.onFrame(_run);
    };
  };

  rebound.SimulationLooper = function SimulationLooper(timestep) {
    this.springSystem = null;
    var time = 0;
    var running = false;
    timestep = timestep || 16.667;

    this.run = function () {
      if (running) {
        return;
      }
      running = true;
      while (!this.springSystem.getIsIdle()) {
        this.springSystem.loop(time += timestep);
      }
      running = false;
    };
  };

  rebound.SteppingSimulationLooper = function (timestep) {
    this.springSystem = null;
    var time = 0;

    this.run = function () {};

    this.step = function (timestep) {
      this.springSystem.loop(time += timestep);
    };
  };

  var OrigamiValueConverter = rebound.OrigamiValueConverter = {
    tensionFromOrigamiValue: function tensionFromOrigamiValue(oValue) {
      return (oValue - 30.0) * 3.62 + 194.0;
    },

    origamiValueFromTension: function origamiValueFromTension(tension) {
      return (tension - 194.0) / 3.62 + 30.0;
    },

    frictionFromOrigamiValue: function frictionFromOrigamiValue(oValue) {
      return (oValue - 8.0) * 3.0 + 25.0;
    },

    origamiFromFriction: function origamiFromFriction(friction) {
      return (friction - 25.0) / 3.0 + 8.0;
    }
  };

  var BouncyConversion = rebound.BouncyConversion = function (bounciness, speed) {
    this.bounciness = bounciness;
    this.speed = speed;
    var b = this.normalize(bounciness / 1.7, 0, 20.0);
    b = this.projectNormal(b, 0.0, 0.8);
    var s = this.normalize(speed / 1.7, 0, 20.0);
    this.bouncyTension = this.projectNormal(s, 0.5, 200);
    this.bouncyFriction = this.quadraticOutInterpolation(b, this.b3Nobounce(this.bouncyTension), 0.01);
  };

  util.extend(BouncyConversion.prototype, {

    normalize: function normalize(value, startValue, endValue) {
      return (value - startValue) / (endValue - startValue);
    },

    projectNormal: function projectNormal(n, start, end) {
      return start + n * (end - start);
    },

    linearInterpolation: function linearInterpolation(t, start, end) {
      return t * end + (1.0 - t) * start;
    },

    quadraticOutInterpolation: function quadraticOutInterpolation(t, start, end) {
      return this.linearInterpolation(2 * t - t * t, start, end);
    },

    b3Friction1: function b3Friction1(x) {
      return 0.0007 * Math.pow(x, 3) - 0.031 * Math.pow(x, 2) + 0.64 * x + 1.28;
    },

    b3Friction2: function b3Friction2(x) {
      return 0.000044 * Math.pow(x, 3) - 0.006 * Math.pow(x, 2) + 0.36 * x + 2.;
    },

    b3Friction3: function b3Friction3(x) {
      return 0.00000045 * Math.pow(x, 3) - 0.000332 * Math.pow(x, 2) + 0.1078 * x + 5.84;
    },

    b3Nobounce: function b3Nobounce(tension) {
      var friction = 0;
      if (tension <= 18) {
        friction = this.b3Friction1(tension);
      } else if (tension > 18 && tension <= 44) {
        friction = this.b3Friction2(tension);
      } else {
        friction = this.b3Friction3(tension);
      }
      return friction;
    }
  });

  util.extend(SpringConfig, {
    fromOrigamiTensionAndFriction: function fromOrigamiTensionAndFriction(tension, friction) {
      return new SpringConfig(OrigamiValueConverter.tensionFromOrigamiValue(tension), OrigamiValueConverter.frictionFromOrigamiValue(friction));
    },

    fromBouncinessAndSpeed: function fromBouncinessAndSpeed(bounciness, speed) {
      var bouncyConversion = new rebound.BouncyConversion(bounciness, speed);
      return this.fromOrigamiTensionAndFriction(bouncyConversion.bouncyTension, bouncyConversion.bouncyFriction);
    },

    coastingConfigWithOrigamiFriction: function coastingConfigWithOrigamiFriction(friction) {
      return new SpringConfig(0, OrigamiValueConverter.frictionFromOrigamiValue(friction));
    }
  });

  SpringConfig.DEFAULT_ORIGAMI_SPRING_CONFIG = SpringConfig.fromOrigamiTensionAndFriction(40, 7);

  util.extend(SpringConfig.prototype, { friction: 0, tension: 0 });

  var colorCache = {};
  util.hexToRGB = function (color) {
    if (colorCache[color]) {
      return colorCache[color];
    }
    color = color.replace('#', '');
    if (color.length === 3) {
      color = color[0] + color[0] + color[1] + color[1] + color[2] + color[2];
    }
    var parts = color.match(/.{2}/g);

    var ret = {
      r: parseInt(parts[0], 16),
      g: parseInt(parts[1], 16),
      b: parseInt(parts[2], 16)
    };

    colorCache[color] = ret;
    return ret;
  };

  util.rgbToHex = function (r, g, b) {
    r = r.toString(16);
    g = g.toString(16);
    b = b.toString(16);
    r = r.length < 2 ? '0' + r : r;
    g = g.length < 2 ? '0' + g : g;
    b = b.length < 2 ? '0' + b : b;
    return '#' + r + g + b;
  };

  var MathUtil = rebound.MathUtil = {
    mapValueInRange: function mapValueInRange(value, fromLow, fromHigh, toLow, toHigh) {
      var fromRangeSize = fromHigh - fromLow;
      var toRangeSize = toHigh - toLow;
      var valueScale = (value - fromLow) / fromRangeSize;
      return toLow + valueScale * toRangeSize;
    },

    interpolateColor: function interpolateColor(val, startColor, endColor, fromLow, fromHigh, asRGB) {
      fromLow = fromLow === undefined ? 0 : fromLow;
      fromHigh = fromHigh === undefined ? 1 : fromHigh;
      startColor = util.hexToRGB(startColor);
      endColor = util.hexToRGB(endColor);
      var r = Math.floor(util.mapValueInRange(val, fromLow, fromHigh, startColor.r, endColor.r));
      var g = Math.floor(util.mapValueInRange(val, fromLow, fromHigh, startColor.g, endColor.g));
      var b = Math.floor(util.mapValueInRange(val, fromLow, fromHigh, startColor.b, endColor.b));
      if (asRGB) {
        return 'rgb(' + r + ',' + g + ',' + b + ')';
      } else {
        return util.rgbToHex(r, g, b);
      }
    },

    degreesToRadians: function degreesToRadians(deg) {
      return deg * Math.PI / 180;
    },

    radiansToDegrees: function radiansToDegrees(rad) {
      return rad * 180 / Math.PI;
    }

  };

  util.extend(util, MathUtil);

  function removeFirst(array, item) {
    var idx = array.indexOf(item);
    idx != -1 && array.splice(idx, 1);
  }

  var _onFrame;
  if (typeof window !== 'undefined') {
    _onFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame || window.oRequestAnimationFrame || function (callback) {
      window.setTimeout(callback, 1000 / 60);
    };
  }
  if (!_onFrame && typeof process !== 'undefined' && process.title === 'node') {
    _onFrame = setImmediate;
  }

  util.onFrame = function onFrame(func) {
    return _onFrame(func);
  };

  if (typeof exports != 'undefined') {
    util.extend(exports, rebound);
  } else if (typeof window != 'undefined') {
    window.rebound = rebound;
  }
})();
}, 324, null, "rebound/rebound.js");
__d(/* NavigatorIOS */function(global, require, module, exports) {
'use strict';

module.exports = require(129                ); // 129 = UnimplementedView
}, 325, null, "NavigatorIOS");
__d(/* Picker */function(global, require, module, exports) {

'use strict';

var _class, _temp;

var ColorPropType = require(16             ); // 16 = ColorPropType
var PickerIOS = require(327        ); // 327 = PickerIOS
var PickerAndroid = require(328            ); // 328 = PickerAndroid
var Platform = require(26        ); // 26 = Platform
var React = require(76     ); // 76 = React
var StyleSheetPropType = require(126                 ); // 126 = StyleSheetPropType
var TextStylePropTypes = require(111                 ); // 111 = TextStylePropTypes
var UnimplementedView = require(129                ); // 129 = UnimplementedView
var View = require(119   ); // 119 = View
var ViewStylePropTypes = require(112                 ); // 112 = ViewStylePropTypes

var itemStylePropType = StyleSheetPropType(TextStylePropTypes);

var pickerStyleType = StyleSheetPropType(babelHelpers.extends({}, ViewStylePropTypes, {
  color: ColorPropType
}));

var MODE_DIALOG = 'dialog';
var MODE_DROPDOWN = 'dropdown';

var Picker = function (_React$Component) {
  babelHelpers.inherits(Picker, _React$Component);

  function Picker() {
    babelHelpers.classCallCheck(this, Picker);
    return babelHelpers.possibleConstructorReturn(this, (Picker.__proto__ || Object.getPrototypeOf(Picker)).apply(this, arguments));
  }

  babelHelpers.createClass(Picker, [{
    key: 'render',
    value: function render() {
      if (Platform.OS === 'ios') {
        return React.createElement(
          PickerIOS,
          this.props,
          this.props.children
        );
      } else if (Platform.OS === 'android') {
        return React.createElement(
          PickerAndroid,
          this.props,
          this.props.children
        );
      } else {
        return React.createElement(UnimplementedView, null);
      }
    }
  }]);
  return Picker;
}(React.Component);

Picker.MODE_DIALOG = MODE_DIALOG;
Picker.MODE_DROPDOWN = MODE_DROPDOWN;
Picker.defaultProps = {
  mode: MODE_DIALOG
};
Picker.propTypes = babelHelpers.extends({}, View.propTypes, {
  style: pickerStyleType,

  selectedValue: React.PropTypes.any,

  onValueChange: React.PropTypes.func,

  enabled: React.PropTypes.bool,

  mode: React.PropTypes.oneOf(['dialog', 'dropdown']),

  itemStyle: itemStylePropType,

  prompt: React.PropTypes.string,

  testID: React.PropTypes.string
});

Picker.Item = (_temp = _class = function (_React$Component2) {
  babelHelpers.inherits(_class, _React$Component2);

  function _class() {
    babelHelpers.classCallCheck(this, _class);
    return babelHelpers.possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));
  }

  babelHelpers.createClass(_class, [{
    key: 'render',
    value: function render() {
      throw null;
    }
  }]);
  return _class;
}(React.Component), _class.propTypes = {
  label: React.PropTypes.string.isRequired,

  value: React.PropTypes.any,

  color: ColorPropType,

  testID: React.PropTypes.string
}, _temp);

module.exports = Picker;
}, 326, null, "Picker");
__d(/* PickerIOS */function(global, require, module, exports) {
'use strict';

module.exports = require(129                ); // 129 = UnimplementedView
}, 327, null, "PickerIOS");
__d(/* PickerAndroid */function(global, require, module, exports) {

'use strict';

var ColorPropType = require(16             ); // 16 = ColorPropType
var React = require(76     ); // 76 = React
var StyleSheet = require(99          ); // 99 = StyleSheet
var StyleSheetPropType = require(126                 ); // 126 = StyleSheetPropType
var View = require(119   ); // 119 = View
var ViewStylePropTypes = require(112                 ); // 112 = ViewStylePropTypes

var processColor = require(114           ); // 114 = processColor
var requireNativeComponent = require(128                     ); // 128 = requireNativeComponent

var ReactPropTypes = React.PropTypes;

var REF_PICKER = 'picker';
var MODE_DROPDOWN = 'dropdown';

var pickerStyleType = StyleSheetPropType(babelHelpers.extends({}, ViewStylePropTypes, {
  color: ColorPropType
}));

var PickerAndroid = function (_React$Component) {
  babelHelpers.inherits(PickerAndroid, _React$Component);

  function PickerAndroid(props, context) {
    babelHelpers.classCallCheck(this, PickerAndroid);

    var _this = babelHelpers.possibleConstructorReturn(this, (PickerAndroid.__proto__ || Object.getPrototypeOf(PickerAndroid)).call(this, props, context));

    _initialiseProps.call(_this);

    var state = _this._stateFromProps(props);

    _this.state = babelHelpers.extends({}, state, {
      initialSelectedIndex: state.selectedIndex
    });
    return _this;
  }

  babelHelpers.createClass(PickerAndroid, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      this.setState(this._stateFromProps(nextProps));
    }
  }, {
    key: 'render',
    value: function render() {
      var Picker = this.props.mode === MODE_DROPDOWN ? DropdownPicker : DialogPicker;

      var nativeProps = {
        enabled: this.props.enabled,
        items: this.state.items,
        mode: this.props.mode,
        onSelect: this._onChange,
        prompt: this.props.prompt,
        selected: this.state.initialSelectedIndex,
        testID: this.props.testID,
        style: [styles.pickerAndroid, this.props.style],
        accessibilityLabel: this.props.accessibilityLabel
      };

      return React.createElement(Picker, babelHelpers.extends({ ref: REF_PICKER }, nativeProps));
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this._lastNativePosition = this.state.initialSelectedIndex;
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      if (this.refs[REF_PICKER] && this.state.selectedIndex !== this._lastNativePosition) {
        this.refs[REF_PICKER].setNativeProps({ selected: this.state.selectedIndex });
        this._lastNativePosition = this.state.selectedIndex;
      }
    }
  }]);
  return PickerAndroid;
}(React.Component);

PickerAndroid.propTypes = babelHelpers.extends({}, View.propTypes, {
  style: pickerStyleType,
  selectedValue: React.PropTypes.any,
  enabled: ReactPropTypes.bool,
  mode: ReactPropTypes.oneOf(['dialog', 'dropdown']),
  onValueChange: ReactPropTypes.func,
  prompt: ReactPropTypes.string,
  testID: ReactPropTypes.string
});

var _initialiseProps = function _initialiseProps() {
  var _this2 = this;

  this._stateFromProps = function (props) {
    var selectedIndex = 0;
    var items = React.Children.map(props.children, function (child, index) {
      if (child.props.value === props.selectedValue) {
        selectedIndex = index;
      }
      var childProps = {
        value: child.props.value,
        label: child.props.label
      };
      if (child.props.color) {
        childProps.color = processColor(child.props.color);
      }
      return childProps;
    });
    return { selectedIndex: selectedIndex, items: items };
  };

  this._onChange = function (event) {
    if (_this2.props.onValueChange) {
      var position = event.nativeEvent.position;
      if (position >= 0) {
        var value = _this2.props.children[position].props.value;
        _this2.props.onValueChange(value, position);
      } else {
        _this2.props.onValueChange(null, position);
      }
    }
    _this2._lastNativePosition = event.nativeEvent.position;
    _this2.forceUpdate();
  };
};

var styles = StyleSheet.create({
  pickerAndroid: {
    height: 50
  }
});

var cfg = {
  nativeOnly: {
    items: true,
    selected: true
  }
};

var DropdownPicker = requireNativeComponent('AndroidDropdownPicker', PickerAndroid, cfg);
var DialogPicker = requireNativeComponent('AndroidDialogPicker', PickerAndroid, cfg);

module.exports = PickerAndroid;
}, 328, null, "PickerAndroid");
__d(/* ProgressBarAndroid */function(global, require, module, exports) {
'use strict';

var NativeMethodsMixin = require(19                  ); // 19 = NativeMethodsMixin
var React = require(76     ); // 76 = React
var View = require(119   ); // 119 = View
var ColorPropType = require(16             ); // 16 = ColorPropType

var requireNativeComponent = require(128                     ); // 128 = requireNativeComponent

var ReactPropTypes = React.PropTypes;

var STYLE_ATTRIBUTES = ['Horizontal', 'Normal', 'Small', 'Large', 'Inverse', 'SmallInverse', 'LargeInverse'];

var indeterminateType = function indeterminateType(props, propName, componentName) {
  var checker = function checker() {
    var indeterminate = props[propName];
    var styleAttr = props.styleAttr;
    if (!indeterminate && styleAttr !== 'Horizontal') {
      return new Error('indeterminate=false is only valid for styleAttr=Horizontal');
    }
  };

  return ReactPropTypes.bool(props, propName, componentName) || checker();
};

var ProgressBarAndroid = React.createClass({
  displayName: 'ProgressBarAndroid',

  propTypes: babelHelpers.extends({}, View.propTypes, {
    styleAttr: ReactPropTypes.oneOf(STYLE_ATTRIBUTES),

    indeterminate: indeterminateType,

    progress: ReactPropTypes.number,

    color: ColorPropType,

    testID: ReactPropTypes.string
  }),

  getDefaultProps: function getDefaultProps() {
    return {
      styleAttr: 'Normal',
      indeterminate: true
    };
  },

  mixins: [NativeMethodsMixin],

  componentDidMount: function componentDidMount() {
    if (this.props.indeterminate && this.props.styleAttr !== 'Horizontal') {
      console.warn('Circular indeterminate `ProgressBarAndroid`' + 'is deprecated. Use `ActivityIndicator` instead.');
    }
  },

  render: function render() {
    return React.createElement(AndroidProgressBar, this.props);
  }
});

var AndroidProgressBar = requireNativeComponent('AndroidProgressBar', ProgressBarAndroid, { nativeOnly: { animating: true } });

module.exports = ProgressBarAndroid;
}, 329, null, "ProgressBarAndroid");
__d(/* ProgressViewIOS */function(global, require, module, exports) {

'use strict';

var React = require(76     ); // 76 = React
var StyleSheet = require(99          ); // 99 = StyleSheet
var Text = require(183   ); // 183 = Text
var View = require(119   ); // 119 = View

var DummyProgressViewIOS = function (_React$Component) {
  babelHelpers.inherits(DummyProgressViewIOS, _React$Component);

  function DummyProgressViewIOS() {
    babelHelpers.classCallCheck(this, DummyProgressViewIOS);
    return babelHelpers.possibleConstructorReturn(this, (DummyProgressViewIOS.__proto__ || Object.getPrototypeOf(DummyProgressViewIOS)).apply(this, arguments));
  }

  babelHelpers.createClass(DummyProgressViewIOS, [{
    key: 'render',
    value: function render() {
      return React.createElement(
        View,
        { style: [styles.dummy, this.props.style] },
        React.createElement(
          Text,
          { style: styles.text },
          'ProgressViewIOS is not supported on this platform!'
        )
      );
    }
  }]);
  return DummyProgressViewIOS;
}(React.Component);

var styles = StyleSheet.create({
  dummy: {
    width: 120,
    height: 20,
    backgroundColor: '#ffbcbc',
    borderWidth: 1,
    borderColor: 'red',
    alignItems: 'center',
    justifyContent: 'center'
  },
  text: {
    color: '#333333',
    margin: 5,
    fontSize: 10
  }
});

module.exports = DummyProgressViewIOS;
}, 330, null, "ProgressViewIOS");
__d(/* SegmentedControlIOS */function(global, require, module, exports) {

'use strict';

var React = require(76     ); // 76 = React
var StyleSheet = require(99          ); // 99 = StyleSheet
var Text = require(183   ); // 183 = Text
var View = require(119   ); // 119 = View

var DummySegmentedControlIOS = function (_React$Component) {
  babelHelpers.inherits(DummySegmentedControlIOS, _React$Component);

  function DummySegmentedControlIOS() {
    babelHelpers.classCallCheck(this, DummySegmentedControlIOS);
    return babelHelpers.possibleConstructorReturn(this, (DummySegmentedControlIOS.__proto__ || Object.getPrototypeOf(DummySegmentedControlIOS)).apply(this, arguments));
  }

  babelHelpers.createClass(DummySegmentedControlIOS, [{
    key: 'render',
    value: function render() {
      return React.createElement(
        View,
        { style: [styles.dummy, this.props.style] },
        React.createElement(
          Text,
          { style: styles.text },
          'SegmentedControlIOS is not supported on this platform!'
        )
      );
    }
  }]);
  return DummySegmentedControlIOS;
}(React.Component);

var styles = StyleSheet.create({
  dummy: {
    width: 120,
    height: 50,
    backgroundColor: '#ffbcbc',
    borderWidth: 1,
    borderColor: 'red',
    alignItems: 'center',
    justifyContent: 'center'
  },
  text: {
    color: '#333333',
    margin: 5,
    fontSize: 10
  }
});

module.exports = DummySegmentedControlIOS;
}, 331, null, "SegmentedControlIOS");
__d(/* Slider */function(global, require, module, exports) {
'use strict';

var Image = require(263    ); // 263 = Image
var ColorPropType = require(16             ); // 16 = ColorPropType
var NativeMethodsMixin = require(19                  ); // 19 = NativeMethodsMixin
var ReactNativeViewAttributes = require(125                        ); // 125 = ReactNativeViewAttributes
var Platform = require(26        ); // 26 = Platform
var React = require(76     ); // 76 = React
var StyleSheet = require(99          ); // 99 = StyleSheet
var View = require(119   ); // 119 = View

var requireNativeComponent = require(128                     ); // 128 = requireNativeComponent

var PropTypes = React.PropTypes;

var Slider = React.createClass({
  displayName: 'Slider',

  mixins: [NativeMethodsMixin],

  propTypes: babelHelpers.extends({}, View.propTypes, {
    style: View.propTypes.style,

    value: PropTypes.number,

    step: PropTypes.number,

    minimumValue: PropTypes.number,

    maximumValue: PropTypes.number,

    minimumTrackTintColor: ColorPropType,

    maximumTrackTintColor: ColorPropType,

    disabled: PropTypes.bool,

    trackImage: Image.propTypes.source,

    minimumTrackImage: Image.propTypes.source,

    maximumTrackImage: Image.propTypes.source,

    thumbImage: Image.propTypes.source,

    thumbTintColor: ColorPropType,

    onValueChange: PropTypes.func,

    onSlidingComplete: PropTypes.func,

    testID: PropTypes.string
  }),

  getDefaultProps: function getDefaultProps() {
    return {
      disabled: false,
      value: 0,
      minimumValue: 0,
      maximumValue: 1,
      step: 0
    };
  },

  viewConfig: {
    uiViewClassName: 'RCTSlider',
    validAttributes: babelHelpers.extends({}, ReactNativeViewAttributes.RCTView, {
      value: true
    })
  },

  render: function render() {
    var _props = this.props,
        style = _props.style,
        onValueChange = _props.onValueChange,
        onSlidingComplete = _props.onSlidingComplete,
        props = babelHelpers.objectWithoutProperties(_props, ['style', 'onValueChange', 'onSlidingComplete']);

    props.style = [styles.slider, style];

    props.onValueChange = onValueChange && function (event) {
      var userEvent = true;
      if (Platform.OS === 'android') {
        userEvent = event.nativeEvent.fromUser;
      }
      onValueChange && userEvent && onValueChange(event.nativeEvent.value);
    };

    props.onChange = props.onValueChange;

    props.onSlidingComplete = onSlidingComplete && function (event) {
      onSlidingComplete && onSlidingComplete(event.nativeEvent.value);
    };

    return React.createElement(RCTSlider, babelHelpers.extends({}, props, {
      enabled: !this.props.disabled,
      onStartShouldSetResponder: function onStartShouldSetResponder() {
        return true;
      },
      onResponderTerminationRequest: function onResponderTerminationRequest() {
        return false;
      }
    }));
  }
});

var styles = void 0;
if (Platform.OS === 'ios') {
  styles = StyleSheet.create({
    slider: {
      height: 40
    }
  });
} else {
  styles = StyleSheet.create({
    slider: {}
  });
}

var options = {};
if (Platform.OS === 'android') {
  options = {
    nativeOnly: {
      enabled: true
    }
  };
}
var RCTSlider = requireNativeComponent('RCTSlider', Slider, options);

module.exports = Slider;
}, 332, null, "Slider");
__d(/* SnapshotViewIOS */function(global, require, module, exports) {
'use strict';

module.exports = require(129                ); // 129 = UnimplementedView
}, 333, null, "SnapshotViewIOS");
__d(/* Switch */function(global, require, module, exports) {
'use strict';

var ColorPropType = require(16             ); // 16 = ColorPropType
var NativeMethodsMixin = require(19                  ); // 19 = NativeMethodsMixin
var Platform = require(26        ); // 26 = Platform
var React = require(76     ); // 76 = React
var StyleSheet = require(99          ); // 99 = StyleSheet
var View = require(119   ); // 119 = View

var requireNativeComponent = require(128                     ); // 128 = requireNativeComponent

var PropTypes = React.PropTypes;

var Switch = React.createClass({
  displayName: 'Switch',

  propTypes: babelHelpers.extends({}, View.propTypes, {
    value: PropTypes.bool,

    disabled: PropTypes.bool,

    onValueChange: PropTypes.func,

    testID: PropTypes.string,

    tintColor: ColorPropType,

    onTintColor: ColorPropType,

    thumbTintColor: ColorPropType
  }),

  getDefaultProps: function getDefaultProps() {
    return {
      value: false,
      disabled: false
    };
  },

  mixins: [NativeMethodsMixin],

  _rctSwitch: {},
  _onChange: function _onChange(event) {
    if (Platform.OS === 'android') {
      this._rctSwitch.setNativeProps({ on: this.props.value });
    } else {
      this._rctSwitch.setNativeProps({ value: this.props.value });
    }

    this.props.onChange && this.props.onChange(event);
    this.props.onValueChange && this.props.onValueChange(event.nativeEvent.value);
  },

  render: function render() {
    var _this = this;

    var props = babelHelpers.extends({}, this.props);
    props.onStartShouldSetResponder = function () {
      return true;
    };
    props.onResponderTerminationRequest = function () {
      return false;
    };
    if (Platform.OS === 'android') {
      props.enabled = !this.props.disabled;
      props.on = this.props.value;
      props.style = this.props.style;
      props.trackTintColor = this.props.value ? this.props.onTintColor : this.props.tintColor;
    } else if (Platform.OS === 'ios') {
      props.style = [styles.rctSwitchIOS, this.props.style];
    }
    return React.createElement(RCTSwitch, babelHelpers.extends({}, props, {
      ref: function ref(_ref) {
        _this._rctSwitch = _ref;
      },
      onChange: this._onChange
    }));
  }
});

var styles = StyleSheet.create({
  rctSwitchIOS: {
    height: 31,
    width: 51
  }
});

if (Platform.OS === 'android') {
  var RCTSwitch = requireNativeComponent('AndroidSwitch', Switch, {
    nativeOnly: {
      onChange: true,
      on: true,
      enabled: true,
      trackTintColor: true
    }
  });
} else {
  var RCTSwitch = requireNativeComponent('RCTSwitch', Switch, {
    nativeOnly: {
      onChange: true
    }
  });
}

module.exports = Switch;
}, 334, null, "Switch");
__d(/* RefreshControl */function(global, require, module, exports) {
'use strict';

var ColorPropType = require(16             ); // 16 = ColorPropType
var NativeMethodsMixin = require(19                  ); // 19 = NativeMethodsMixin
var Platform = require(26        ); // 26 = Platform
var React = require(76     ); // 76 = React
var View = require(119   ); // 119 = View

var requireNativeComponent = require(128                     ); // 128 = requireNativeComponent

if (Platform.OS === 'android') {
  var RefreshLayoutConsts = require(73         ).AndroidSwipeRefreshLayout.Constants; // 73 = UIManager
} else {
  var RefreshLayoutConsts = { SIZE: {} };
}

var RefreshControl = React.createClass({
  displayName: 'RefreshControl',

  statics: {
    SIZE: RefreshLayoutConsts.SIZE
  },

  mixins: [NativeMethodsMixin],

  propTypes: babelHelpers.extends({}, View.propTypes, {
    onRefresh: React.PropTypes.func,

    refreshing: React.PropTypes.bool.isRequired,

    tintColor: ColorPropType,

    titleColor: ColorPropType,

    title: React.PropTypes.string,

    enabled: React.PropTypes.bool,

    colors: React.PropTypes.arrayOf(ColorPropType),

    progressBackgroundColor: ColorPropType,

    size: React.PropTypes.oneOf([RefreshLayoutConsts.SIZE.DEFAULT, RefreshLayoutConsts.SIZE.LARGE]),

    progressViewOffset: React.PropTypes.number
  }),

  _nativeRef: null,
  _lastNativeRefreshing: false,

  componentDidMount: function componentDidMount() {
    this._lastNativeRefreshing = this.props.refreshing;
  },
  componentDidUpdate: function componentDidUpdate(prevProps) {
    if (this.props.refreshing !== prevProps.refreshing) {
      this._lastNativeRefreshing = this.props.refreshing;
    } else if (this.props.refreshing !== this._lastNativeRefreshing) {
      this._nativeRef.setNativeProps({ refreshing: this.props.refreshing });
      this._lastNativeRefreshing = this.props.refreshing;
    }
  },
  render: function render() {
    var _this = this;

    return React.createElement(NativeRefreshControl, babelHelpers.extends({}, this.props, {
      ref: function ref(_ref) {
        _this._nativeRef = _ref;
      },
      onRefresh: this._onRefresh
    }));
  },
  _onRefresh: function _onRefresh() {
    this._lastNativeRefreshing = true;

    this.props.onRefresh && this.props.onRefresh();

    this.forceUpdate();
  }
});

if (Platform.OS === 'ios') {
  var NativeRefreshControl = requireNativeComponent('RCTRefreshControl', RefreshControl);
} else if (Platform.OS === 'android') {
  var NativeRefreshControl = requireNativeComponent('AndroidSwipeRefreshLayout', RefreshControl);
}

module.exports = RefreshControl;
}, 335, null, "RefreshControl");
__d(/* SwipeableListView */function(global, require, module, exports) {
'use strict';

var ListView = require(277       ); // 277 = ListView
var React = require(76     ); // 76 = React
var SwipeableListViewDataSource = require(337                          ); // 337 = SwipeableListViewDataSource
var SwipeableRow = require(338           ); // 338 = SwipeableRow

var PropTypes = React.PropTypes;

var SwipeableListView = function (_React$Component) {
  babelHelpers.inherits(SwipeableListView, _React$Component);
  babelHelpers.createClass(SwipeableListView, null, [{
    key: 'getNewDataSource',
    value: function getNewDataSource() {
      return new SwipeableListViewDataSource({
        getRowData: function getRowData(data, sectionID, rowID) {
          return data[sectionID][rowID];
        },
        getSectionHeaderData: function getSectionHeaderData(data, sectionID) {
          return data[sectionID];
        },
        rowHasChanged: function rowHasChanged(row1, row2) {
          return row1 !== row2;
        },
        sectionHeaderHasChanged: function sectionHeaderHasChanged(s1, s2) {
          return s1 !== s2;
        }
      });
    }
  }]);

  function SwipeableListView(props, context) {
    babelHelpers.classCallCheck(this, SwipeableListView);

    var _this = babelHelpers.possibleConstructorReturn(this, (SwipeableListView.__proto__ || Object.getPrototypeOf(SwipeableListView)).call(this, props, context));

    _this._listViewRef = null;
    _this._shouldBounceFirstRowOnMount = false;

    _this._onScroll = function (e) {
      if (_this.props.dataSource.getOpenRowID()) {
        _this.setState({
          dataSource: _this.state.dataSource.setOpenRowID(null)
        });
      }
      _this.props.onScroll && _this.props.onScroll(e);
    };

    _this._getMaxSwipeDistance = function (rowData, sectionID, rowID) {
      if (typeof _this.props.maxSwipeDistance === 'function') {
        return _this.props.maxSwipeDistance(rowData, sectionID, rowID);
      }

      return _this.props.maxSwipeDistance;
    };

    _this._renderRow = function (rowData, sectionID, rowID) {
      var slideoutView = _this.props.renderQuickActions(rowData, sectionID, rowID);

      if (!slideoutView) {
        return _this.props.renderRow(rowData, sectionID, rowID);
      }

      var shouldBounceOnMount = false;
      if (_this._shouldBounceFirstRowOnMount) {
        _this._shouldBounceFirstRowOnMount = false;
        shouldBounceOnMount = rowID === _this.props.dataSource.getFirstRowID();
      }

      return React.createElement(
        SwipeableRow,
        {
          slideoutView: slideoutView,
          isOpen: rowData.id === _this.props.dataSource.getOpenRowID(),
          maxSwipeDistance: _this._getMaxSwipeDistance(rowData, sectionID, rowID),
          key: rowID,
          onOpen: function onOpen() {
            return _this._onOpen(rowData.id);
          },
          onClose: function onClose() {
            return _this._onClose(rowData.id);
          },
          onSwipeEnd: function onSwipeEnd() {
            return _this._setListViewScrollable(true);
          },
          onSwipeStart: function onSwipeStart() {
            return _this._setListViewScrollable(false);
          },
          shouldBounceOnMount: shouldBounceOnMount },
        _this.props.renderRow(rowData, sectionID, rowID)
      );
    };

    _this._shouldBounceFirstRowOnMount = _this.props.bounceFirstRowOnMount;
    _this.state = {
      dataSource: _this.props.dataSource
    };
    return _this;
  }

  babelHelpers.createClass(SwipeableListView, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (this.state.dataSource.getDataSource() !== nextProps.dataSource.getDataSource()) {
        this.setState({
          dataSource: nextProps.dataSource
        });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      return React.createElement(ListView, babelHelpers.extends({}, this.props, {
        ref: function ref(_ref) {
          _this2._listViewRef = _ref;
        },
        dataSource: this.state.dataSource.getDataSource(),
        onScroll: this._onScroll,
        renderRow: this._renderRow
      }));
    }
  }, {
    key: '_setListViewScrollable',
    value: function _setListViewScrollable(value) {
      if (this._listViewRef && typeof this._listViewRef.setNativeProps === 'function') {
        this._listViewRef.setNativeProps({
          scrollEnabled: value
        });
      }
    }
  }, {
    key: 'getScrollResponder',
    value: function getScrollResponder() {
      if (this._listViewRef && typeof this._listViewRef.getScrollResponder === 'function') {
        return this._listViewRef.getScrollResponder();
      }
    }
  }, {
    key: '_onOpen',
    value: function _onOpen(rowID) {
      this.setState({
        dataSource: this.state.dataSource.setOpenRowID(rowID)
      });
    }
  }, {
    key: '_onClose',
    value: function _onClose(rowID) {
      this.setState({
        dataSource: this.state.dataSource.setOpenRowID(null)
      });
    }
  }]);
  return SwipeableListView;
}(React.Component);

SwipeableListView.propTypes = {
  bounceFirstRowOnMount: PropTypes.bool.isRequired,

  dataSource: PropTypes.instanceOf(SwipeableListViewDataSource).isRequired,

  maxSwipeDistance: PropTypes.oneOfType([PropTypes.number, PropTypes.func]).isRequired,

  renderRow: PropTypes.func.isRequired,

  renderQuickActions: PropTypes.func.isRequired
};
SwipeableListView.defaultProps = {
  bounceFirstRowOnMount: false,
  renderQuickActions: function renderQuickActions() {
    return null;
  }
};


module.exports = SwipeableListView;
}, 336, null, "SwipeableListView");
__d(/* SwipeableListViewDataSource */function(global, require, module, exports) {
'use strict';

var ListViewDataSource = require(278                 ); // 278 = ListViewDataSource

var SwipeableListViewDataSource = function () {
  function SwipeableListViewDataSource(params) {
    var _this = this;

    babelHelpers.classCallCheck(this, SwipeableListViewDataSource);

    this._dataSource = new ListViewDataSource({
      getRowData: params.getRowData,
      getSectionHeaderData: params.getSectionHeaderData,
      rowHasChanged: function rowHasChanged(row1, row2) {
        return row1.id !== _this._previousOpenRowID && row2.id === _this._openRowID || row1.id === _this._previousOpenRowID && row2.id !== _this._openRowID || params.rowHasChanged(row1, row2);
      },
      sectionHeaderHasChanged: params.sectionHeaderHasChanged
    });
  }

  babelHelpers.createClass(SwipeableListViewDataSource, [{
    key: 'cloneWithRowsAndSections',
    value: function cloneWithRowsAndSections(dataBlob, sectionIdentities, rowIdentities) {
      this._dataSource = this._dataSource.cloneWithRowsAndSections(dataBlob, sectionIdentities, rowIdentities);

      this._dataBlob = dataBlob;
      this.rowIdentities = this._dataSource.rowIdentities;
      this.sectionIdentities = this._dataSource.sectionIdentities;

      return this;
    }
  }, {
    key: 'getDataSource',
    value: function getDataSource() {
      return this._dataSource;
    }
  }, {
    key: 'getOpenRowID',
    value: function getOpenRowID() {
      return this._openRowID;
    }
  }, {
    key: 'getFirstRowID',
    value: function getFirstRowID() {
      if (this.rowIdentities) {
        return this.rowIdentities[0] && this.rowIdentities[0][0];
      }
      return Object.keys(this._dataBlob)[0];
    }
  }, {
    key: 'setOpenRowID',
    value: function setOpenRowID(rowID) {
      this._previousOpenRowID = this._openRowID;
      this._openRowID = rowID;

      this._dataSource = this._dataSource.cloneWithRowsAndSections(this._dataBlob, this.sectionIdentities, this.rowIdentities);

      return this;
    }
  }]);
  return SwipeableListViewDataSource;
}();

module.exports = SwipeableListViewDataSource;
}, 337, null, "SwipeableListViewDataSource");
__d(/* SwipeableRow */function(global, require, module, exports) {
'use strict';

var Animated = require(251       ); // 251 = Animated
var PanResponder = require(321           ); // 321 = PanResponder
var I18nManager = require(306          ); // 306 = I18nManager
var React = require(76     ); // 76 = React
var StyleSheet = require(99          ); // 99 = StyleSheet
var TimerMixin = require(248                ); // 248 = react-timer-mixin
var View = require(119   ); // 119 = View

var PropTypes = React.PropTypes;


var emptyFunction = require(14                      ); // 14 = fbjs/lib/emptyFunction

var IS_RTL = I18nManager.isRTL;

var CLOSED_LEFT_POSITION = 0;

var HORIZONTAL_SWIPE_DISTANCE_THRESHOLD = 10;

var HORIZONTAL_FULL_SWIPE_SPEED_THRESHOLD = 0.3;

var SLOW_SPEED_SWIPE_FACTOR = 4;

var SWIPE_DURATION = 300;

var ON_MOUNT_BOUNCE_DELAY = 700;
var ON_MOUNT_BOUNCE_DURATION = 400;

var RIGHT_SWIPE_BOUNCE_BACK_DISTANCE = 30;
var RIGHT_SWIPE_BOUNCE_BACK_DURATION = 300;

var RIGHT_SWIPE_THRESHOLD = 30 * SLOW_SPEED_SWIPE_FACTOR;

var SwipeableRow = React.createClass({
  displayName: 'SwipeableRow',

  _panResponder: {},
  _previousLeft: CLOSED_LEFT_POSITION,

  mixins: [TimerMixin],

  propTypes: {
    children: PropTypes.any,
    isOpen: PropTypes.bool,
    maxSwipeDistance: PropTypes.number.isRequired,
    onOpen: PropTypes.func.isRequired,
    onClose: PropTypes.func.isRequired,
    onSwipeEnd: PropTypes.func.isRequired,
    onSwipeStart: PropTypes.func.isRequired,

    shouldBounceOnMount: PropTypes.bool,

    slideoutView: PropTypes.node.isRequired,

    swipeThreshold: PropTypes.number.isRequired
  },

  getInitialState: function getInitialState() {
    return {
      currentLeft: new Animated.Value(this._previousLeft),

      isSwipeableViewRendered: false,
      rowHeight: null
    };
  },
  getDefaultProps: function getDefaultProps() {
    return {
      isOpen: false,
      maxSwipeDistance: 0,
      onOpen: emptyFunction,
      onClose: emptyFunction,
      onSwipeEnd: emptyFunction,
      onSwipeStart: emptyFunction,
      swipeThreshold: 30
    };
  },
  componentWillMount: function componentWillMount() {
    this._panResponder = PanResponder.create({
      onMoveShouldSetPanResponderCapture: this._handleMoveShouldSetPanResponderCapture,
      onPanResponderGrant: this._handlePanResponderGrant,
      onPanResponderMove: this._handlePanResponderMove,
      onPanResponderRelease: this._handlePanResponderEnd,
      onPanResponderTerminationRequest: this._onPanResponderTerminationRequest,
      onPanResponderTerminate: this._handlePanResponderEnd,
      onShouldBlockNativeResponder: function onShouldBlockNativeResponder(event, gestureState) {
        return false;
      }
    });
  },
  componentDidMount: function componentDidMount() {
    var _this = this;

    if (this.props.shouldBounceOnMount) {
      this.setTimeout(function () {
        _this._animateBounceBack(ON_MOUNT_BOUNCE_DURATION);
      }, ON_MOUNT_BOUNCE_DELAY);
    }
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if (this.props.isOpen && !nextProps.isOpen) {
      this._animateToClosedPosition();
    }
  },
  shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
    if (this.props.shouldBounceOnMount && !nextProps.shouldBounceOnMount) {
      return false;
    }

    return true;
  },
  render: function render() {
    var slideOutView = void 0;
    if (this.state.isSwipeableViewRendered) {
      slideOutView = React.createElement(
        View,
        { style: [styles.slideOutContainer, { height: this.state.rowHeight }] },
        this.props.slideoutView
      );
    }

    var swipeableView = React.createElement(
      Animated.View,
      {
        onLayout: this._onSwipeableViewLayout,
        style: [styles.swipeableContainer, {
          transform: [{ translateX: this.state.currentLeft }]
        }] },
      this.props.children
    );

    return React.createElement(
      View,
      this._panResponder.panHandlers,
      slideOutView,
      swipeableView
    );
  },
  _onSwipeableViewLayout: function _onSwipeableViewLayout(event) {
    this.setState({
      isSwipeableViewRendered: true,
      rowHeight: event.nativeEvent.layout.height
    });
  },
  _handleMoveShouldSetPanResponderCapture: function _handleMoveShouldSetPanResponderCapture(event, gestureState) {
    return gestureState.dy < 10 && this._isValidSwipe(gestureState);
  },
  _handlePanResponderGrant: function _handlePanResponderGrant(event, gestureState) {},
  _handlePanResponderMove: function _handlePanResponderMove(event, gestureState) {
    if (this._isSwipingExcessivelyRightFromClosedPosition(gestureState)) {
      return;
    }

    this.props.onSwipeStart();

    if (this._isSwipingRightFromClosed(gestureState)) {
      this._swipeSlowSpeed(gestureState);
    } else {
      this._swipeFullSpeed(gestureState);
    }
  },
  _isSwipingRightFromClosed: function _isSwipingRightFromClosed(gestureState) {
    var gestureStateDx = IS_RTL ? -gestureState.dx : gestureState.dx;
    return this._previousLeft === CLOSED_LEFT_POSITION && gestureStateDx > 0;
  },
  _swipeFullSpeed: function _swipeFullSpeed(gestureState) {
    this.state.currentLeft.setValue(this._previousLeft + gestureState.dx);
  },
  _swipeSlowSpeed: function _swipeSlowSpeed(gestureState) {
    this.state.currentLeft.setValue(this._previousLeft + gestureState.dx / SLOW_SPEED_SWIPE_FACTOR);
  },
  _isSwipingExcessivelyRightFromClosedPosition: function _isSwipingExcessivelyRightFromClosedPosition(gestureState) {
    var gestureStateDx = IS_RTL ? -gestureState.dx : gestureState.dx;
    return this._isSwipingRightFromClosed(gestureState) && gestureStateDx > RIGHT_SWIPE_THRESHOLD;
  },
  _onPanResponderTerminationRequest: function _onPanResponderTerminationRequest(event, gestureState) {
    return false;
  },
  _animateTo: function _animateTo(toValue) {
    var _this2 = this;

    var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SWIPE_DURATION;
    var callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : emptyFunction;

    Animated.timing(this.state.currentLeft, {
      duration: duration,
      toValue: toValue
    }).start(function () {
      _this2._previousLeft = toValue;
      callback();
    });
  },
  _animateToOpenPosition: function _animateToOpenPosition() {
    var maxSwipeDistance = IS_RTL ? -this.props.maxSwipeDistance : this.props.maxSwipeDistance;
    this._animateTo(-maxSwipeDistance);
  },
  _animateToOpenPositionWith: function _animateToOpenPositionWith(speed, distMoved) {
    speed = speed > HORIZONTAL_FULL_SWIPE_SPEED_THRESHOLD ? speed : HORIZONTAL_FULL_SWIPE_SPEED_THRESHOLD;

    var duration = Math.abs((this.props.maxSwipeDistance - Math.abs(distMoved)) / speed);
    var maxSwipeDistance = IS_RTL ? -this.props.maxSwipeDistance : this.props.maxSwipeDistance;
    this._animateTo(-maxSwipeDistance, duration);
  },
  _animateToClosedPosition: function _animateToClosedPosition() {
    var duration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : SWIPE_DURATION;

    this._animateTo(CLOSED_LEFT_POSITION, duration);
  },
  _animateToClosedPositionDuringBounce: function _animateToClosedPositionDuringBounce() {
    this._animateToClosedPosition(RIGHT_SWIPE_BOUNCE_BACK_DURATION);
  },
  _animateBounceBack: function _animateBounceBack(duration) {
    var swipeBounceBackDistance = IS_RTL ? -RIGHT_SWIPE_BOUNCE_BACK_DISTANCE : RIGHT_SWIPE_BOUNCE_BACK_DISTANCE;
    this._animateTo(-swipeBounceBackDistance, duration, this._animateToClosedPositionDuringBounce);
  },
  _isValidSwipe: function _isValidSwipe(gestureState) {
    return Math.abs(gestureState.dx) > HORIZONTAL_SWIPE_DISTANCE_THRESHOLD;
  },
  _shouldAnimateRemainder: function _shouldAnimateRemainder(gestureState) {
    return Math.abs(gestureState.dx) > this.props.swipeThreshold || gestureState.vx > HORIZONTAL_FULL_SWIPE_SPEED_THRESHOLD;
  },
  _handlePanResponderEnd: function _handlePanResponderEnd(event, gestureState) {
    var horizontalDistance = IS_RTL ? -gestureState.dx : gestureState.dx;
    if (this._isSwipingRightFromClosed(gestureState)) {
      this.props.onOpen();
      this._animateBounceBack(RIGHT_SWIPE_BOUNCE_BACK_DURATION);
    } else if (this._shouldAnimateRemainder(gestureState)) {
      if (horizontalDistance < 0) {
        this.props.onOpen();
        this._animateToOpenPositionWith(gestureState.vx, horizontalDistance);
      } else {
        this.props.onClose();
        this._animateToClosedPosition();
      }
    } else {
      if (this._previousLeft === CLOSED_LEFT_POSITION) {
        this._animateToClosedPosition();
      } else {
        this._animateToOpenPosition();
      }
    }

    this.props.onSwipeEnd();
  }
});

var styles = StyleSheet.create({
  slideOutContainer: {
    bottom: 0,
    left: 0,
    position: 'absolute',
    right: 0,
    top: 0
  },
  swipeableContainer: {
    flex: 1
  }
});

module.exports = SwipeableRow;
}, 338, null, "SwipeableRow");
__d(/* TabBarIOS */function(global, require, module, exports) {

'use strict';

var React = require(76     ); // 76 = React
var View = require(119   ); // 119 = View
var StyleSheet = require(99          ); // 99 = StyleSheet

var DummyTabBarIOS = function (_React$Component) {
  babelHelpers.inherits(DummyTabBarIOS, _React$Component);

  function DummyTabBarIOS() {
    babelHelpers.classCallCheck(this, DummyTabBarIOS);
    return babelHelpers.possibleConstructorReturn(this, (DummyTabBarIOS.__proto__ || Object.getPrototypeOf(DummyTabBarIOS)).apply(this, arguments));
  }

  babelHelpers.createClass(DummyTabBarIOS, [{
    key: 'render',
    value: function render() {
      return React.createElement(
        View,
        { style: [this.props.style, styles.tabGroup] },
        this.props.children
      );
    }
  }]);
  return DummyTabBarIOS;
}(React.Component);

var styles = StyleSheet.create({
  tabGroup: {
    flex: 1
  }
});

module.exports = DummyTabBarIOS;
}, 339, null, "TabBarIOS");
__d(/* TextInput */function(global, require, module, exports) {
'use strict';

var ColorPropType = require(16             ); // 16 = ColorPropType
var DocumentSelectionState = require(341                     ); // 341 = DocumentSelectionState
var EventEmitter = require(53            ); // 53 = EventEmitter
var NativeMethodsMixin = require(19                  ); // 19 = NativeMethodsMixin
var Platform = require(26        ); // 26 = Platform
var React = require(76     ); // 76 = React
var ReactNative = require(191          ); // 191 = ReactNative
var StyleSheet = require(99          ); // 99 = StyleSheet
var Text = require(183   ); // 183 = Text
var TextInputState = require(25              ); // 25 = TextInputState
var TimerMixin = require(248                ); // 248 = react-timer-mixin
var TouchableWithoutFeedback = require(247                       ); // 247 = TouchableWithoutFeedback
var UIManager = require(73         ); // 73 = UIManager
var View = require(119   ); // 119 = View
var warning = require(13                ); // 13 = fbjs/lib/warning

var emptyFunction = require(14                      ); // 14 = fbjs/lib/emptyFunction
var invariant = require(24                  ); // 24 = fbjs/lib/invariant
var requireNativeComponent = require(128                     ); // 128 = requireNativeComponent

var PropTypes = React.PropTypes;

var onlyMultiline = {
  onTextInput: true,
  children: true
};

if (Platform.OS === 'android') {
  var AndroidTextInput = requireNativeComponent('AndroidTextInput', null);
} else if (Platform.OS === 'ios') {
  var RCTTextView = requireNativeComponent('RCTTextView', null);
  var RCTTextField = requireNativeComponent('RCTTextField', null);
}

var DataDetectorTypes = ['phoneNumber', 'link', 'address', 'calendarEvent', 'none', 'all'];

var TextInput = React.createClass({
  displayName: 'TextInput',

  statics: {
    State: TextInputState
  },

  propTypes: babelHelpers.extends({}, View.propTypes, {
    autoCapitalize: PropTypes.oneOf(['none', 'sentences', 'words', 'characters']),

    autoCorrect: PropTypes.bool,

    spellCheck: PropTypes.bool,

    autoFocus: PropTypes.bool,

    editable: PropTypes.bool,

    keyboardType: PropTypes.oneOf(['default', 'email-address', 'numeric', 'phone-pad', 'ascii-capable', 'numbers-and-punctuation', 'url', 'number-pad', 'name-phone-pad', 'decimal-pad', 'twitter', 'web-search']),

    keyboardAppearance: PropTypes.oneOf(['default', 'light', 'dark']),

    returnKeyType: PropTypes.oneOf(['done', 'go', 'next', 'search', 'send', 'none', 'previous', 'default', 'emergency-call', 'google', 'join', 'route', 'yahoo']),

    returnKeyLabel: PropTypes.string,

    maxLength: PropTypes.number,

    numberOfLines: PropTypes.number,

    disableFullscreenUI: PropTypes.bool,

    enablesReturnKeyAutomatically: PropTypes.bool,

    multiline: PropTypes.bool,

    textBreakStrategy: React.PropTypes.oneOf(['simple', 'highQuality', 'balanced']),

    onBlur: PropTypes.func,

    onFocus: PropTypes.func,

    onChange: PropTypes.func,

    onChangeText: PropTypes.func,

    onContentSizeChange: PropTypes.func,

    onEndEditing: PropTypes.func,

    onSelectionChange: PropTypes.func,

    onSubmitEditing: PropTypes.func,

    onKeyPress: PropTypes.func,

    onLayout: PropTypes.func,

    onScroll: PropTypes.func,

    placeholder: PropTypes.node,

    placeholderTextColor: ColorPropType,

    secureTextEntry: PropTypes.bool,

    selectionColor: ColorPropType,

    selectionState: PropTypes.instanceOf(DocumentSelectionState),

    selection: PropTypes.shape({
      start: PropTypes.number.isRequired,
      end: PropTypes.number
    }),

    value: PropTypes.string,

    defaultValue: PropTypes.node,

    clearButtonMode: PropTypes.oneOf(['never', 'while-editing', 'unless-editing', 'always']),

    clearTextOnFocus: PropTypes.bool,

    selectTextOnFocus: PropTypes.bool,

    blurOnSubmit: PropTypes.bool,

    style: Text.propTypes.style,

    underlineColorAndroid: ColorPropType,

    inlineImageLeft: PropTypes.string,

    inlineImagePadding: PropTypes.number,

    dataDetectorTypes: PropTypes.oneOfType([PropTypes.oneOf(DataDetectorTypes), PropTypes.arrayOf(PropTypes.oneOf(DataDetectorTypes))])
  }),

  mixins: [NativeMethodsMixin, TimerMixin],

  viewConfig: Platform.OS === 'ios' && RCTTextField ? RCTTextField.viewConfig : Platform.OS === 'android' && AndroidTextInput ? AndroidTextInput.viewConfig : {},

  isFocused: function isFocused() {
    return TextInputState.currentlyFocusedField() === ReactNative.findNodeHandle(this._inputRef);
  },

  contextTypes: {
    onFocusRequested: React.PropTypes.func,
    focusEmitter: React.PropTypes.instanceOf(EventEmitter)
  },

  _inputRef: undefined,
  _focusSubscription: undefined,
  _lastNativeText: undefined,
  _lastNativeSelection: undefined,

  componentDidMount: function componentDidMount() {
    var _this = this;

    this._lastNativeText = this.props.value;
    if (!this.context.focusEmitter) {
      if (this.props.autoFocus) {
        this.requestAnimationFrame(this.focus);
      }
      return;
    }
    this._focusSubscription = this.context.focusEmitter.addListener('focus', function (el) {
      if (_this === el) {
        _this.requestAnimationFrame(_this.focus);
      } else if (_this.isFocused()) {
        _this.blur();
      }
    });
    if (this.props.autoFocus) {
      this.context.onFocusRequested(this);
    }
  },

  componentWillUnmount: function componentWillUnmount() {
    this._focusSubscription && this._focusSubscription.remove();
    if (this.isFocused()) {
      this.blur();
    }
  },

  getChildContext: function getChildContext() {
    return { isInAParentText: true };
  },

  childContextTypes: {
    isInAParentText: React.PropTypes.bool
  },

  clear: function clear() {
    this.setNativeProps({ text: '' });
  },

  render: function render() {
    if (Platform.OS === 'ios') {
      return this._renderIOS();
    } else if (Platform.OS === 'android') {
      return this._renderAndroid();
    }
  },

  _getText: function _getText() {
    return typeof this.props.value === 'string' ? this.props.value : typeof this.props.defaultValue === 'string' ? this.props.defaultValue : '';
  },

  _setNativeRef: function _setNativeRef(ref) {
    this._inputRef = ref;
  },

  _renderIOS: function _renderIOS() {
    var textContainer;

    var props = babelHelpers.extends({}, this.props);
    props.style = [styles.input, this.props.style];

    if (props.selection && props.selection.end == null) {
      props.selection = { start: props.selection.start, end: props.selection.start };
    }

    if (!props.multiline) {
      if (__DEV__) {
        for (var propKey in onlyMultiline) {
          if (props[propKey]) {
            var error = new Error('TextInput prop `' + propKey + '` is only supported with multiline.');
            warning(false, '%s', error.stack);
          }
        }
      }
      textContainer = React.createElement(RCTTextField, babelHelpers.extends({
        ref: this._setNativeRef
      }, props, {
        onFocus: this._onFocus,
        onBlur: this._onBlur,
        onChange: this._onChange,
        onSelectionChange: this._onSelectionChange,
        onSelectionChangeShouldSetResponder: emptyFunction.thatReturnsTrue,
        text: this._getText()
      }));
    } else {
      var children = props.children;
      var childCount = 0;
      React.Children.forEach(children, function () {
        return ++childCount;
      });
      invariant(!(props.value && childCount), 'Cannot specify both value and children.');
      if (childCount >= 1) {
        children = React.createElement(
          Text,
          { style: props.style },
          children
        );
      }
      if (props.inputView) {
        children = [children, props.inputView];
      }
      textContainer = React.createElement(RCTTextView, babelHelpers.extends({
        ref: this._setNativeRef
      }, props, {
        children: children,
        onFocus: this._onFocus,
        onBlur: this._onBlur,
        onChange: this._onChange,
        onContentSizeChange: this.props.onContentSizeChange,
        onSelectionChange: this._onSelectionChange,
        onTextInput: this._onTextInput,
        onSelectionChangeShouldSetResponder: emptyFunction.thatReturnsTrue,
        text: this._getText(),
        dataDetectorTypes: this.props.dataDetectorTypes,
        onScroll: this._onScroll
      }));
    }

    return React.createElement(
      TouchableWithoutFeedback,
      {
        onLayout: props.onLayout,
        onPress: this._onPress,
        rejectResponderTermination: true,
        accessible: props.accessible,
        accessibilityLabel: props.accessibilityLabel,
        accessibilityTraits: props.accessibilityTraits,
        testID: props.testID },
      textContainer
    );
  },

  _renderAndroid: function _renderAndroid() {
    var props = babelHelpers.extends({}, this.props);
    props.style = [this.props.style];
    props.autoCapitalize = UIManager.AndroidTextInput.Constants.AutoCapitalizationType[this.props.autoCapitalize];
    var children = this.props.children;
    var childCount = 0;
    React.Children.forEach(children, function () {
      return ++childCount;
    });
    invariant(!(this.props.value && childCount), 'Cannot specify both value and children.');
    if (childCount > 1) {
      children = React.createElement(
        Text,
        null,
        children
      );
    }

    if (props.selection && props.selection.end == null) {
      props.selection = { start: props.selection.start, end: props.selection.start };
    }

    var textContainer = React.createElement(AndroidTextInput, babelHelpers.extends({
      ref: this._setNativeRef
    }, props, {
      mostRecentEventCount: 0,
      onFocus: this._onFocus,
      onBlur: this._onBlur,
      onChange: this._onChange,
      onSelectionChange: this._onSelectionChange,
      onTextInput: this._onTextInput,
      text: this._getText(),
      children: children,
      disableFullscreenUI: this.props.disableFullscreenUI,
      textBreakStrategy: this.props.textBreakStrategy
    }));

    return React.createElement(
      TouchableWithoutFeedback,
      {
        onLayout: this.props.onLayout,
        onPress: this._onPress,
        accessible: this.props.accessible,
        accessibilityLabel: this.props.accessibilityLabel,
        accessibilityComponentType: this.props.accessibilityComponentType,
        testID: this.props.testID },
      textContainer
    );
  },

  _onFocus: function _onFocus(event) {
    if (this.props.onFocus) {
      this.props.onFocus(event);
    }

    if (this.props.selectionState) {
      this.props.selectionState.focus();
    }
  },

  _onPress: function _onPress(event) {
    if (this.props.editable || this.props.editable === undefined) {
      this.focus();
    }
  },

  _onChange: function _onChange(event) {
    if (this._inputRef) {
      this._inputRef.setNativeProps({
        mostRecentEventCount: event.nativeEvent.eventCount
      });
    }

    var text = event.nativeEvent.text;
    this.props.onChange && this.props.onChange(event);
    this.props.onChangeText && this.props.onChangeText(text);

    if (!this._inputRef) {
      return;
    }

    this._lastNativeText = text;
    this.forceUpdate();
  },

  _onSelectionChange: function _onSelectionChange(event) {
    this.props.onSelectionChange && this.props.onSelectionChange(event);

    if (!this._inputRef) {
      return;
    }

    this._lastNativeSelection = event.nativeEvent.selection;

    if (this.props.selection || this.props.selectionState) {
      this.forceUpdate();
    }
  },

  componentDidUpdate: function componentDidUpdate() {
    var nativeProps = {};

    if (this._lastNativeText !== this.props.value && typeof this.props.value === 'string') {
      nativeProps.text = this.props.value;
    }

    var selection = this.props.selection;

    if (this._lastNativeSelection && selection && (this._lastNativeSelection.start !== selection.start || this._lastNativeSelection.end !== selection.end)) {
      nativeProps.selection = this.props.selection;
    }

    if (Object.keys(nativeProps).length > 0 && this._inputRef) {
      this._inputRef.setNativeProps(nativeProps);
    }

    if (this.props.selectionState && selection) {
      this.props.selectionState.update(selection.start, selection.end);
    }
  },

  _onBlur: function _onBlur(event) {
    this.blur();
    if (this.props.onBlur) {
      this.props.onBlur(event);
    }

    if (this.props.selectionState) {
      this.props.selectionState.blur();
    }
  },

  _onTextInput: function _onTextInput(event) {
    this.props.onTextInput && this.props.onTextInput(event);
  },

  _onScroll: function _onScroll(event) {
    this.props.onScroll && this.props.onScroll(event);
  }
});

var styles = StyleSheet.create({
  input: {
    alignSelf: 'stretch'
  }
});

module.exports = TextInput;
}, 340, null, "TextInput");
__d(/* DocumentSelectionState */function(global, require, module, exports) {

'use strict';

var mixInEventEmitter = require(342                ); // 342 = mixInEventEmitter

var DocumentSelectionState = function () {
  function DocumentSelectionState(anchor, focus) {
    babelHelpers.classCallCheck(this, DocumentSelectionState);

    this._anchorOffset = anchor;
    this._focusOffset = focus;
    this._hasFocus = false;
  }

  babelHelpers.createClass(DocumentSelectionState, [{
    key: 'update',
    value: function update(anchor, focus) {
      if (this._anchorOffset !== anchor || this._focusOffset !== focus) {
        this._anchorOffset = anchor;
        this._focusOffset = focus;
        this.emit('update');
      }
    }
  }, {
    key: 'constrainLength',
    value: function constrainLength(maxLength) {
      this.update(Math.min(this._anchorOffset, maxLength), Math.min(this._focusOffset, maxLength));
    }
  }, {
    key: 'focus',
    value: function focus() {
      if (!this._hasFocus) {
        this._hasFocus = true;
        this.emit('focus');
      }
    }
  }, {
    key: 'blur',
    value: function blur() {
      if (this._hasFocus) {
        this._hasFocus = false;
        this.emit('blur');
      }
    }
  }, {
    key: 'hasFocus',
    value: function hasFocus() {
      return this._hasFocus;
    }
  }, {
    key: 'isCollapsed',
    value: function isCollapsed() {
      return this._anchorOffset === this._focusOffset;
    }
  }, {
    key: 'isBackward',
    value: function isBackward() {
      return this._anchorOffset > this._focusOffset;
    }
  }, {
    key: 'getAnchorOffset',
    value: function getAnchorOffset() {
      return this._hasFocus ? this._anchorOffset : null;
    }
  }, {
    key: 'getFocusOffset',
    value: function getFocusOffset() {
      return this._hasFocus ? this._focusOffset : null;
    }
  }, {
    key: 'getStartOffset',
    value: function getStartOffset() {
      return this._hasFocus ? Math.min(this._anchorOffset, this._focusOffset) : null;
    }
  }, {
    key: 'getEndOffset',
    value: function getEndOffset() {
      return this._hasFocus ? Math.max(this._anchorOffset, this._focusOffset) : null;
    }
  }, {
    key: 'overlaps',
    value: function overlaps(start, end) {
      return this.hasFocus() && this.getStartOffset() <= end && start <= this.getEndOffset();
    }
  }]);
  return DocumentSelectionState;
}();

mixInEventEmitter(DocumentSelectionState, {
  'blur': true,
  'focus': true,
  'update': true
});

module.exports = DocumentSelectionState;
}, 341, null, "DocumentSelectionState");
__d(/* mixInEventEmitter */function(global, require, module, exports) {
'use strict';

var EventEmitter = require(53            ); // 53 = EventEmitter
var EventEmitterWithHolding = require(343                      ); // 343 = EventEmitterWithHolding
var EventHolder = require(344          ); // 344 = EventHolder
var EventValidator = require(345             ); // 345 = EventValidator

var copyProperties = require(346             ); // 346 = copyProperties
var invariant = require(24                  ); // 24 = fbjs/lib/invariant
var keyOf = require(298             ); // 298 = fbjs/lib/keyOf

var TYPES_KEY = keyOf({ __types: true });

function mixInEventEmitter(cls, types) {
  invariant(types, 'Must supply set of valid event types');

  var target = cls.prototype || cls;

  invariant(!target.__eventEmitter, 'An active emitter is already mixed in');

  var ctor = cls.constructor;
  if (ctor) {
    invariant(ctor === Object || ctor === Function, 'Mix EventEmitter into a class, not an instance');
  }

  if (target.hasOwnProperty(TYPES_KEY)) {
    copyProperties(target.__types, types);
  } else if (target.__types) {
    target.__types = copyProperties({}, target.__types, types);
  } else {
    target.__types = types;
  }
  copyProperties(target, EventEmitterMixin);
}

var EventEmitterMixin = {
  emit: function emit(eventType, a, b, c, d, e, _) {
    return this.__getEventEmitter().emit(eventType, a, b, c, d, e, _);
  },

  emitAndHold: function emitAndHold(eventType, a, b, c, d, e, _) {
    return this.__getEventEmitter().emitAndHold(eventType, a, b, c, d, e, _);
  },

  addListener: function addListener(eventType, listener, context) {
    return this.__getEventEmitter().addListener(eventType, listener, context);
  },

  once: function once(eventType, listener, context) {
    return this.__getEventEmitter().once(eventType, listener, context);
  },

  addRetroactiveListener: function addRetroactiveListener(eventType, listener, context) {
    return this.__getEventEmitter().addRetroactiveListener(eventType, listener, context);
  },

  addListenerMap: function addListenerMap(listenerMap, context) {
    return this.__getEventEmitter().addListenerMap(listenerMap, context);
  },

  addRetroactiveListenerMap: function addRetroactiveListenerMap(listenerMap, context) {
    return this.__getEventEmitter().addListenerMap(listenerMap, context);
  },

  removeAllListeners: function removeAllListeners() {
    this.__getEventEmitter().removeAllListeners();
  },

  removeCurrentListener: function removeCurrentListener() {
    this.__getEventEmitter().removeCurrentListener();
  },

  releaseHeldEventType: function releaseHeldEventType(eventType) {
    this.__getEventEmitter().releaseHeldEventType(eventType);
  },

  __getEventEmitter: function __getEventEmitter() {
    if (!this.__eventEmitter) {
      var emitter = new EventEmitter();
      emitter = EventValidator.addValidation(emitter, this.__types);

      var holder = new EventHolder();
      this.__eventEmitter = new EventEmitterWithHolding(emitter, holder);
    }
    return this.__eventEmitter;
  }
};

module.exports = mixInEventEmitter;
}, 342, null, "mixInEventEmitter");
__d(/* EventEmitterWithHolding */function(global, require, module, exports) {
'use strict';

var EventEmitterWithHolding = function () {
  function EventEmitterWithHolding(emitter, holder) {
    babelHelpers.classCallCheck(this, EventEmitterWithHolding);

    this._emitter = emitter;
    this._eventHolder = holder;
    this._currentEventToken = null;
    this._emittingHeldEvents = false;
  }

  babelHelpers.createClass(EventEmitterWithHolding, [{
    key: 'addListener',
    value: function addListener(eventType, listener, context) {
      return this._emitter.addListener(eventType, listener, context);
    }
  }, {
    key: 'once',
    value: function once(eventType, listener, context) {
      return this._emitter.once(eventType, listener, context);
    }
  }, {
    key: 'addRetroactiveListener',
    value: function addRetroactiveListener(eventType, listener, context) {
      var subscription = this._emitter.addListener(eventType, listener, context);

      this._emittingHeldEvents = true;
      this._eventHolder.emitToListener(eventType, listener, context);
      this._emittingHeldEvents = false;

      return subscription;
    }
  }, {
    key: 'removeAllListeners',
    value: function removeAllListeners(eventType) {
      this._emitter.removeAllListeners(eventType);
    }
  }, {
    key: 'removeCurrentListener',
    value: function removeCurrentListener() {
      this._emitter.removeCurrentListener();
    }
  }, {
    key: 'listeners',
    value: function listeners(eventType) {
      return this._emitter.listeners(eventType);
    }
  }, {
    key: 'emit',
    value: function emit(eventType) {
      var _emitter;

      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      (_emitter = this._emitter).emit.apply(_emitter, [eventType].concat(babelHelpers.toConsumableArray(args)));
    }
  }, {
    key: 'emitAndHold',
    value: function emitAndHold(eventType) {
      var _eventHolder, _emitter2;

      for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      this._currentEventToken = (_eventHolder = this._eventHolder).holdEvent.apply(_eventHolder, [eventType].concat(babelHelpers.toConsumableArray(args)));
      (_emitter2 = this._emitter).emit.apply(_emitter2, [eventType].concat(babelHelpers.toConsumableArray(args)));
      this._currentEventToken = null;
    }
  }, {
    key: 'releaseCurrentEvent',
    value: function releaseCurrentEvent() {
      if (this._currentEventToken) {
        this._eventHolder.releaseEvent(this._currentEventToken);
      } else if (this._emittingHeldEvents) {
        this._eventHolder.releaseCurrentEvent();
      }
    }
  }, {
    key: 'releaseHeldEventType',
    value: function releaseHeldEventType(eventType) {
      this._eventHolder.releaseEventType(eventType);
    }
  }]);
  return EventEmitterWithHolding;
}();

module.exports = EventEmitterWithHolding;
}, 343, null, "EventEmitterWithHolding");
__d(/* EventHolder */function(global, require, module, exports) {
'use strict';

var invariant = require(24                  ); // 24 = fbjs/lib/invariant

var EventHolder = function () {
  function EventHolder() {
    babelHelpers.classCallCheck(this, EventHolder);

    this._heldEvents = {};
    this._currentEventKey = null;
  }

  babelHelpers.createClass(EventHolder, [{
    key: 'holdEvent',
    value: function holdEvent(eventType) {
      this._heldEvents[eventType] = this._heldEvents[eventType] || [];
      var eventsOfType = this._heldEvents[eventType];
      var key = {
        eventType: eventType,
        index: eventsOfType.length
      };

      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      eventsOfType.push(args);
      return key;
    }
  }, {
    key: 'emitToListener',
    value: function emitToListener(eventType, listener, context) {
      var _this = this;

      var eventsOfType = this._heldEvents[eventType];
      if (!eventsOfType) {
        return;
      }
      var origEventKey = this._currentEventKey;
      eventsOfType.forEach(function (eventHeld, index) {
        if (!eventHeld) {
          return;
        }
        _this._currentEventKey = {
          eventType: eventType,
          index: index
        };
        listener.apply(context, eventHeld);
      });
      this._currentEventKey = origEventKey;
    }
  }, {
    key: 'releaseCurrentEvent',
    value: function releaseCurrentEvent() {
      invariant(this._currentEventKey !== null, 'Not in an emitting cycle; there is no current event');
      this._currentEventKey && this.releaseEvent(this._currentEventKey);
    }
  }, {
    key: 'releaseEvent',
    value: function releaseEvent(token) {
      delete this._heldEvents[token.eventType][token.index];
    }
  }, {
    key: 'releaseEventType',
    value: function releaseEventType(type) {
      this._heldEvents[type] = [];
    }
  }]);
  return EventHolder;
}();

module.exports = EventHolder;
}, 344, null, "EventHolder");
__d(/* EventValidator */function(global, require, module, exports) {
'use strict';

var copyProperties = require(346             ); // 346 = copyProperties

var EventValidator = {
  addValidation: function addValidation(emitter, types) {
    var eventTypes = Object.keys(types);
    var emitterWithValidation = Object.create(emitter);

    copyProperties(emitterWithValidation, {
      emit: function emit(type, a, b, c, d, e, _) {
        assertAllowsEventType(type, eventTypes);
        return emitter.emit.call(this, type, a, b, c, d, e, _);
      }
    });

    return emitterWithValidation;
  }
};

function assertAllowsEventType(type, allowedTypes) {
  if (allowedTypes.indexOf(type) === -1) {
    throw new TypeError(errorMessageFor(type, allowedTypes));
  }
}

function errorMessageFor(type, allowedTypes) {
  var message = 'Unknown event type "' + type + '". ';
  if (__DEV__) {
    message += recommendationFor(type, allowedTypes);
  }
  message += 'Known event types: ' + allowedTypes.join(', ') + '.';
  return message;
}

if (__DEV__) {
  var recommendationFor = function recommendationFor(type, allowedTypes) {
    var closestTypeRecommendation = closestTypeFor(type, allowedTypes);
    if (isCloseEnough(closestTypeRecommendation, type)) {
      return 'Did you mean "' + closestTypeRecommendation.type + '"? ';
    } else {
      return '';
    }
  };

  var closestTypeFor = function closestTypeFor(type, allowedTypes) {
    var typeRecommendations = allowedTypes.map(typeRecommendationFor.bind(this, type));
    return typeRecommendations.sort(recommendationSort)[0];
  };

  var typeRecommendationFor = function typeRecommendationFor(type, recomendedType) {
    return {
      type: recomendedType,
      distance: damerauLevenshteinDistance(type, recomendedType)
    };
  };

  var recommendationSort = function recommendationSort(recommendationA, recommendationB) {
    if (recommendationA.distance < recommendationB.distance) {
      return -1;
    } else if (recommendationA.distance > recommendationB.distance) {
      return 1;
    } else {
      return 0;
    }
  };

  var isCloseEnough = function isCloseEnough(closestType, actualType) {
    return closestType.distance / actualType.length < 0.334;
  };

  var damerauLevenshteinDistance = function damerauLevenshteinDistance(a, b) {
    var i = void 0,
        j = void 0;
    var d = [];

    for (i = 0; i <= a.length; i++) {
      d[i] = [i];
    }

    for (j = 1; j <= b.length; j++) {
      d[0][j] = j;
    }

    for (i = 1; i <= a.length; i++) {
      for (j = 1; j <= b.length; j++) {
        var cost = a.charAt(i - 1) === b.charAt(j - 1) ? 0 : 1;

        d[i][j] = Math.min(d[i - 1][j] + 1, d[i][j - 1] + 1, d[i - 1][j - 1] + cost);

        if (i > 1 && j > 1 && a.charAt(i - 1) === b.charAt(j - 2) && a.charAt(i - 2) === b.charAt(j - 1)) {
          d[i][j] = Math.min(d[i][j], d[i - 2][j - 2] + cost);
        }
      }
    }

    return d[a.length][b.length];
  };
}

module.exports = EventValidator;
}, 345, null, "EventValidator");
__d(/* copyProperties */function(global, require, module, exports) {
'use strict';

function copyProperties(obj, a, b, c, d, e, f) {
  obj = obj || {};

  if (__DEV__) {
    if (f) {
      throw new Error('Too many arguments passed to copyProperties');
    }
  }

  var args = [a, b, c, d, e];
  var ii = 0,
      v;
  while (args[ii]) {
    v = args[ii++];
    for (var k in v) {
      obj[k] = v[k];
    }

    if (v.hasOwnProperty && v.hasOwnProperty('toString') && typeof v.toString !== 'undefined' && obj.toString !== v.toString) {
      obj.toString = v.toString;
    }
  }

  return obj;
}

module.exports = copyProperties;
}, 346, null, "copyProperties");
__d(/* ToolbarAndroid */function(global, require, module, exports) {

'use strict';

var Image = require(263    ); // 263 = Image
var NativeMethodsMixin = require(19                  ); // 19 = NativeMethodsMixin
var React = require(76     ); // 76 = React
var ReactNativeViewAttributes = require(125                        ); // 125 = ReactNativeViewAttributes
var UIManager = require(73         ); // 73 = UIManager
var View = require(119   ); // 119 = View
var ColorPropType = require(16             ); // 16 = ColorPropType

var requireNativeComponent = require(128                     ); // 128 = requireNativeComponent
var resolveAssetSource = require(171                 ); // 171 = resolveAssetSource

var ReactPropTypes = React.PropTypes;

var optionalImageSource = ReactPropTypes.oneOfType([Image.propTypes.source, ReactPropTypes.oneOf([])]);

var ToolbarAndroid = React.createClass({
  displayName: 'ToolbarAndroid',

  mixins: [NativeMethodsMixin],

  propTypes: babelHelpers.extends({}, View.propTypes, {
    actions: ReactPropTypes.arrayOf(ReactPropTypes.shape({
      title: ReactPropTypes.string.isRequired,
      icon: optionalImageSource,
      show: ReactPropTypes.oneOf(['always', 'ifRoom', 'never']),
      showWithText: ReactPropTypes.bool
    })),

    logo: optionalImageSource,

    navIcon: optionalImageSource,

    onActionSelected: ReactPropTypes.func,

    onIconClicked: ReactPropTypes.func,

    overflowIcon: optionalImageSource,

    subtitle: ReactPropTypes.string,

    subtitleColor: ColorPropType,

    title: ReactPropTypes.string,

    titleColor: ColorPropType,

    contentInsetStart: ReactPropTypes.number,

    contentInsetEnd: ReactPropTypes.number,

    rtl: ReactPropTypes.bool,

    testID: ReactPropTypes.string
  }),

  render: function render() {
    var nativeProps = babelHelpers.extends({}, this.props);
    if (this.props.logo) {
      nativeProps.logo = resolveAssetSource(this.props.logo);
    }
    if (this.props.navIcon) {
      nativeProps.navIcon = resolveAssetSource(this.props.navIcon);
    }
    if (this.props.overflowIcon) {
      nativeProps.overflowIcon = resolveAssetSource(this.props.overflowIcon);
    }
    if (this.props.actions) {
      var nativeActions = [];
      for (var i = 0; i < this.props.actions.length; i++) {
        var action = babelHelpers.extends({}, this.props.actions[i]);
        if (action.icon) {
          action.icon = resolveAssetSource(action.icon);
        }
        if (action.show) {
          action.show = UIManager.ToolbarAndroid.Constants.ShowAsAction[action.show];
        }
        nativeActions.push(action);
      }
      nativeProps.nativeActions = nativeActions;
    }

    return React.createElement(NativeToolbar, babelHelpers.extends({ onSelect: this._onSelect }, nativeProps));
  },

  _onSelect: function _onSelect(event) {
    var position = event.nativeEvent.position;
    if (position === -1) {
      this.props.onIconClicked && this.props.onIconClicked();
    } else {
      this.props.onActionSelected && this.props.onActionSelected(position);
    }
  }
});

var NativeToolbar = requireNativeComponent('ToolbarAndroid', ToolbarAndroid, {
  nativeOnly: {
    nativeActions: true
  }
});

module.exports = ToolbarAndroid;
}, 347, null, "ToolbarAndroid");
__d(/* ViewPagerAndroid */function(global, require, module, exports) {
'use strict';

var React = require(76     ); // 76 = React
var ReactNative = require(191          ); // 191 = ReactNative
var UIManager = require(73         ); // 73 = UIManager
var View = require(119   ); // 119 = View

var dismissKeyboard = require(60               ); // 60 = dismissKeyboard
var requireNativeComponent = require(128                     ); // 128 = requireNativeComponent

var ReactPropTypes = React.PropTypes;

var VIEWPAGER_REF = 'viewPager';

var ViewPagerAndroid = function (_React$Component) {
  babelHelpers.inherits(ViewPagerAndroid, _React$Component);

  function ViewPagerAndroid() {
    var _ref;

    var _temp, _this, _ret;

    babelHelpers.classCallCheck(this, ViewPagerAndroid);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = ViewPagerAndroid.__proto__ || Object.getPrototypeOf(ViewPagerAndroid)).call.apply(_ref, [this].concat(args))), _this), _this.getInnerViewNode = function () {
      return _this.refs[VIEWPAGER_REF].getInnerViewNode();
    }, _this._childrenWithOverridenStyle = function () {
      return React.Children.map(_this.props.children, function (child) {
        if (!child) {
          return null;
        }
        var newProps = babelHelpers.extends({}, child.props, {
          style: [child.props.style, {
            position: 'absolute',
            left: 0,
            top: 0,
            right: 0,
            bottom: 0,
            width: undefined,
            height: undefined
          }],
          collapsable: false
        });
        if (child.type && child.type.displayName && child.type.displayName !== 'RCTView' && child.type.displayName !== 'View') {
          console.warn('Each ViewPager child must be a <View>. Was ' + child.type.displayName);
        }
        return React.createElement(child.type, newProps);
      });
    }, _this._onPageScroll = function (e) {
      if (_this.props.onPageScroll) {
        _this.props.onPageScroll(e);
      }
      if (_this.props.keyboardDismissMode === 'on-drag') {
        dismissKeyboard();
      }
    }, _this._onPageScrollStateChanged = function (e) {
      if (_this.props.onPageScrollStateChanged) {
        _this.props.onPageScrollStateChanged(e.nativeEvent.pageScrollState);
      }
    }, _this._onPageSelected = function (e) {
      if (_this.props.onPageSelected) {
        _this.props.onPageSelected(e);
      }
    }, _this.setPage = function (selectedPage) {
      UIManager.dispatchViewManagerCommand(ReactNative.findNodeHandle(_this), UIManager.AndroidViewPager.Commands.setPage, [selectedPage]);
    }, _this.setPageWithoutAnimation = function (selectedPage) {
      UIManager.dispatchViewManagerCommand(ReactNative.findNodeHandle(_this), UIManager.AndroidViewPager.Commands.setPageWithoutAnimation, [selectedPage]);
    }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
  }

  babelHelpers.createClass(ViewPagerAndroid, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (this.props.initialPage != null) {
        this.setPageWithoutAnimation(this.props.initialPage);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      return React.createElement(NativeAndroidViewPager, babelHelpers.extends({}, this.props, {
        ref: VIEWPAGER_REF,
        style: this.props.style,
        onPageScroll: this._onPageScroll,
        onPageScrollStateChanged: this._onPageScrollStateChanged,
        onPageSelected: this._onPageSelected,
        children: this._childrenWithOverridenStyle()
      }));
    }
  }]);
  return ViewPagerAndroid;
}(React.Component);

ViewPagerAndroid.propTypes = babelHelpers.extends({}, View.propTypes, {
  initialPage: ReactPropTypes.number,

  onPageScroll: ReactPropTypes.func,

  onPageScrollStateChanged: ReactPropTypes.func,

  onPageSelected: ReactPropTypes.func,

  pageMargin: ReactPropTypes.number,

  keyboardDismissMode: ReactPropTypes.oneOf(['none', 'on-drag']),

  scrollEnabled: ReactPropTypes.bool
});


var NativeAndroidViewPager = requireNativeComponent('AndroidViewPager', ViewPagerAndroid);

module.exports = ViewPagerAndroid;
}, 348, null, "ViewPagerAndroid");
__d(/* WebView */function(global, require, module, exports) {
'use strict';

var EdgeInsetsPropType = require(120                 ); // 120 = EdgeInsetsPropType
var ActivityIndicator = require(15                 ); // 15 = ActivityIndicator
var React = require(76     ); // 76 = React
var ReactNative = require(191          ); // 191 = ReactNative
var StyleSheet = require(99          ); // 99 = StyleSheet
var UIManager = require(73         ); // 73 = UIManager
var View = require(119   ); // 119 = View

var deprecatedPropType = require(109                 ); // 109 = deprecatedPropType
var keyMirror = require(105                 ); // 105 = fbjs/lib/keyMirror
var requireNativeComponent = require(128                     ); // 128 = requireNativeComponent
var resolveAssetSource = require(171                 ); // 171 = resolveAssetSource

var PropTypes = React.PropTypes;

var RCT_WEBVIEW_REF = 'webview';

var WebViewState = keyMirror({
  IDLE: null,
  LOADING: null,
  ERROR: null
});

var defaultRenderLoading = function defaultRenderLoading() {
  return React.createElement(
    View,
    { style: styles.loadingView },
    React.createElement(ActivityIndicator, {
      style: styles.loadingProgressBar
    })
  );
};

var WebView = function (_React$Component) {
  babelHelpers.inherits(WebView, _React$Component);

  function WebView() {
    var _ref;

    var _temp, _this, _ret;

    babelHelpers.classCallCheck(this, WebView);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = WebView.__proto__ || Object.getPrototypeOf(WebView)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      viewState: WebViewState.IDLE,
      lastErrorEvent: null,
      startInLoadingState: true
    }, _this.goForward = function () {
      UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), UIManager.RCTWebView.Commands.goForward, null);
    }, _this.goBack = function () {
      UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), UIManager.RCTWebView.Commands.goBack, null);
    }, _this.reload = function () {
      UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), UIManager.RCTWebView.Commands.reload, null);
    }, _this.stopLoading = function () {
      UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), UIManager.RCTWebView.Commands.stopLoading, null);
    }, _this.postMessage = function (data) {
      UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), UIManager.RCTWebView.Commands.postMessage, [String(data)]);
    }, _this.injectJavaScript = function (data) {
      UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), UIManager.RCTWebView.Commands.injectJavaScript, [data]);
    }, _this.updateNavigationState = function (event) {
      if (_this.props.onNavigationStateChange) {
        _this.props.onNavigationStateChange(event.nativeEvent);
      }
    }, _this.getWebViewHandle = function () {
      return ReactNative.findNodeHandle(_this.refs[RCT_WEBVIEW_REF]);
    }, _this.onLoadingStart = function (event) {
      var onLoadStart = _this.props.onLoadStart;
      onLoadStart && onLoadStart(event);
      _this.updateNavigationState(event);
    }, _this.onLoadingError = function (event) {
      event.persist();var _this$props = _this.props,
          onError = _this$props.onError,
          onLoadEnd = _this$props.onLoadEnd;

      onError && onError(event);
      onLoadEnd && onLoadEnd(event);
      console.warn('Encountered an error loading page', event.nativeEvent);

      _this.setState({
        lastErrorEvent: event.nativeEvent,
        viewState: WebViewState.ERROR
      });
    }, _this.onLoadingFinish = function (event) {
      var _this$props2 = _this.props,
          onLoad = _this$props2.onLoad,
          onLoadEnd = _this$props2.onLoadEnd;

      onLoad && onLoad(event);
      onLoadEnd && onLoadEnd(event);
      _this.setState({
        viewState: WebViewState.IDLE
      });
      _this.updateNavigationState(event);
    }, _this.onMessage = function (event) {
      var onMessage = _this.props.onMessage;

      onMessage && onMessage(event);
    }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
  }

  babelHelpers.createClass(WebView, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      if (this.props.startInLoadingState) {
        this.setState({ viewState: WebViewState.LOADING });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var otherView = null;

      if (this.state.viewState === WebViewState.LOADING) {
        otherView = (this.props.renderLoading || defaultRenderLoading)();
      } else if (this.state.viewState === WebViewState.ERROR) {
        var errorEvent = this.state.lastErrorEvent;
        otherView = this.props.renderError && this.props.renderError(errorEvent.domain, errorEvent.code, errorEvent.description);
      } else if (this.state.viewState !== WebViewState.IDLE) {
        console.error('RCTWebView invalid state encountered: ' + this.state.loading);
      }

      var webViewStyles = [styles.container, this.props.style];
      if (this.state.viewState === WebViewState.LOADING || this.state.viewState === WebViewState.ERROR) {
        webViewStyles.push(styles.hidden);
      }

      var source = this.props.source || {};
      if (this.props.html) {
        source.html = this.props.html;
      } else if (this.props.url) {
        source.uri = this.props.url;
      }

      if (source.method === 'POST' && source.headers) {
        console.warn('WebView: `source.headers` is not supported when using POST.');
      } else if (source.method === 'GET' && source.body) {
        console.warn('WebView: `source.body` is not supported when using GET.');
      }

      var webView = React.createElement(RCTWebView, {
        ref: RCT_WEBVIEW_REF,
        key: 'webViewKey',
        style: webViewStyles,
        source: resolveAssetSource(source),
        scalesPageToFit: this.props.scalesPageToFit,
        injectedJavaScript: this.props.injectedJavaScript,
        userAgent: this.props.userAgent,
        javaScriptEnabled: this.props.javaScriptEnabled,
        domStorageEnabled: this.props.domStorageEnabled,
        messagingEnabled: typeof this.props.onMessage === 'function',
        onMessage: this.onMessage,
        contentInset: this.props.contentInset,
        automaticallyAdjustContentInsets: this.props.automaticallyAdjustContentInsets,
        onContentSizeChange: this.props.onContentSizeChange,
        onLoadingStart: this.onLoadingStart,
        onLoadingFinish: this.onLoadingFinish,
        onLoadingError: this.onLoadingError,
        testID: this.props.testID,
        mediaPlaybackRequiresUserAction: this.props.mediaPlaybackRequiresUserAction,
        allowUniversalAccessFromFileURLs: this.props.allowUniversalAccessFromFileURLs
      });

      return React.createElement(
        View,
        { style: styles.container },
        webView,
        otherView
      );
    }
  }]);
  return WebView;
}(React.Component);

WebView.propTypes = babelHelpers.extends({}, View.propTypes, {
  renderError: PropTypes.func,
  renderLoading: PropTypes.func,
  onLoad: PropTypes.func,
  onLoadEnd: PropTypes.func,
  onLoadStart: PropTypes.func,
  onError: PropTypes.func,
  automaticallyAdjustContentInsets: PropTypes.bool,
  contentInset: EdgeInsetsPropType,
  onNavigationStateChange: PropTypes.func,
  onMessage: PropTypes.func,
  onContentSizeChange: PropTypes.func,
  startInLoadingState: PropTypes.bool,
  style: View.propTypes.style,

  html: deprecatedPropType(PropTypes.string, 'Use the `source` prop instead.'),

  url: deprecatedPropType(PropTypes.string, 'Use the `source` prop instead.'),

  source: PropTypes.oneOfType([PropTypes.shape({
    uri: PropTypes.string,

    method: PropTypes.oneOf(['GET', 'POST']),

    headers: PropTypes.object,

    body: PropTypes.string
  }), PropTypes.shape({
    html: PropTypes.string,

    baseUrl: PropTypes.string
  }), PropTypes.number]),

  javaScriptEnabled: PropTypes.bool,

  domStorageEnabled: PropTypes.bool,

  injectedJavaScript: PropTypes.string,

  scalesPageToFit: PropTypes.bool,

  userAgent: PropTypes.string,

  testID: PropTypes.string,

  mediaPlaybackRequiresUserAction: PropTypes.bool,

  allowUniversalAccessFromFileURLs: PropTypes.bool
});
WebView.defaultProps = {
  javaScriptEnabled: true,
  scalesPageToFit: true
};


var RCTWebView = requireNativeComponent('RCTWebView', WebView, {
  nativeOnly: {
    messagingEnabled: PropTypes.bool
  }
});

var styles = StyleSheet.create({
  container: {
    flex: 1
  },
  hidden: {
    height: 0,
    flex: 0 },
  loadingView: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center'
  },
  loadingProgressBar: {
    height: 20
  }
});

module.exports = WebView;
}, 349, null, "WebView");
__d(/* ActionSheetIOS */function(global, require, module, exports) {
'use strict';

var RCTActionSheetManager = require(27             ).ActionSheetManager; // 27 = NativeModules

var invariant = require(24                  ); // 24 = fbjs/lib/invariant
var processColor = require(114           ); // 114 = processColor

var ActionSheetIOS = {
  showActionSheetWithOptions: function showActionSheetWithOptions(options, callback) {
    invariant(typeof options === 'object' && options !== null, 'Options must be a valid object');
    invariant(typeof callback === 'function', 'Must provide a valid callback');
    RCTActionSheetManager.showActionSheetWithOptions(babelHelpers.extends({}, options, { tintColor: processColor(options.tintColor) }), callback);
  },
  showShareActionSheetWithOptions: function showShareActionSheetWithOptions(options, failureCallback, successCallback) {
    invariant(typeof options === 'object' && options !== null, 'Options must be a valid object');
    invariant(typeof failureCallback === 'function', 'Must provide a valid failureCallback');
    invariant(typeof successCallback === 'function', 'Must provide a valid successCallback');
    RCTActionSheetManager.showShareActionSheetWithOptions(babelHelpers.extends({}, options, { tintColor: processColor(options.tintColor) }), failureCallback, successCallback);
  }
};

module.exports = ActionSheetIOS;
}, 350, null, "ActionSheetIOS");
__d(/* AdSupportIOS */function(global, require, module, exports) {
'use strict';

var AdSupport = require(27             ).AdSupport; // 27 = NativeModules

module.exports = {
  getAdvertisingId: function getAdvertisingId(onSuccess, onFailure) {
    AdSupport.getAdvertisingId(onSuccess, onFailure);
  },

  getAdvertisingTrackingEnabled: function getAdvertisingTrackingEnabled(onSuccess, onFailure) {
    AdSupport.getAdvertisingTrackingEnabled(onSuccess, onFailure);
  }
};
}, 351, null, "AdSupportIOS");
__d(/* AppRegistry */function(global, require, module, exports) {
'use strict';

var BatchedBridge = require(28             ); // 28 = BatchedBridge
var BugReporting = require(353           ); // 353 = BugReporting
var ReactNative = require(191          ); // 191 = ReactNative

var infoLog = require(255      ); // 255 = infoLog
var invariant = require(24                  ); // 24 = fbjs/lib/invariant
var renderApplication = require(356                ); // 356 = renderApplication

var _require = require(27             ), // 27 = NativeModules
    HeadlessJsTaskSupport = _require.HeadlessJsTaskSupport;

if (__DEV__) {
  require(358               ); // 358 = RCTRenderingPerf
}

var runnables = {};
var runCount = 1;
var tasks = new Map();

var AppRegistry = {
  registerConfig: function registerConfig(config) {
    for (var i = 0; i < config.length; ++i) {
      var appConfig = config[i];
      if (appConfig.run) {
        AppRegistry.registerRunnable(appConfig.appKey, appConfig.run);
      } else {
        invariant(appConfig.component, 'No component provider passed in');
        AppRegistry.registerComponent(appConfig.appKey, appConfig.component);
      }
    }
  },

  registerComponent: function registerComponent(appKey, getComponentFunc) {
    runnables[appKey] = {
      run: function run(appParameters) {
        return renderApplication(getComponentFunc(), appParameters.initialProps, appParameters.rootTag);
      }
    };
    return appKey;
  },

  registerRunnable: function registerRunnable(appKey, func) {
    runnables[appKey] = { run: func };
    return appKey;
  },

  getAppKeys: function getAppKeys() {
    return Object.keys(runnables);
  },

  runApplication: function runApplication(appKey, appParameters) {
    var msg = 'Running application "' + appKey + '" with appParams: ' + JSON.stringify(appParameters) + '. ' + '__DEV__ === ' + String(__DEV__) + ', development-level warning are ' + (__DEV__ ? 'ON' : 'OFF') + ', performance optimizations are ' + (__DEV__ ? 'OFF' : 'ON');
    infoLog(msg);
    BugReporting.addSource('AppRegistry.runApplication' + runCount++, function () {
      return msg;
    });
    invariant(runnables[appKey] && runnables[appKey].run, 'Application ' + appKey + ' has not been registered. This ' + 'is either due to a require() error during initialization ' + 'or failure to call AppRegistry.registerComponent.');
    runnables[appKey].run(appParameters);
  },

  unmountApplicationComponentAtRootTag: function unmountApplicationComponentAtRootTag(rootTag) {
    ReactNative.unmountComponentAtNodeAndRemoveContainer(rootTag);
  },

  registerHeadlessTask: function registerHeadlessTask(taskKey, task) {
    if (tasks.has(taskKey)) {
      console.warn('registerHeadlessTask called multiple times for same key \'' + taskKey + '\'');
    }
    tasks.set(taskKey, task);
  },

  startHeadlessTask: function startHeadlessTask(taskId, taskKey, data) {
    var taskProvider = tasks.get(taskKey);
    if (!taskProvider) {
      throw new Error('No task registered for key ' + taskKey);
    }
    taskProvider()(data).then(function () {
      return HeadlessJsTaskSupport.notifyTaskFinished(taskId);
    }).catch(function (reason) {
      console.error(reason);
      HeadlessJsTaskSupport.notifyTaskFinished(taskId);
    });
  }

};

BatchedBridge.registerCallableModule('AppRegistry', AppRegistry);

module.exports = AppRegistry;
}, 352, null, "AppRegistry");
__d(/* BugReporting */function(global, require, module, exports) {
'use strict';

var RCTDeviceEventEmitter = require(57                     ); // 57 = RCTDeviceEventEmitter
var Map = require(214  ); // 214 = Map
var infoLog = require(255      ); // 255 = infoLog

function defaultExtras() {
  BugReporting.addFileSource('react_hierarchy.txt', function () {
    return require(354            )(); // 354 = dumpReactTree
  });
}

var BugReporting = function () {
  function BugReporting() {
    babelHelpers.classCallCheck(this, BugReporting);
  }

  babelHelpers.createClass(BugReporting, null, [{
    key: '_maybeInit',
    value: function _maybeInit() {
      if (!BugReporting._subscription) {
        BugReporting._subscription = RCTDeviceEventEmitter.addListener('collectBugExtraData', BugReporting.collectExtraData, null);
        defaultExtras();
      }
    }
  }, {
    key: 'addSource',
    value: function addSource(key, callback) {
      return this._addSource(key, callback, BugReporting._extraSources);
    }
  }, {
    key: 'addFileSource',
    value: function addFileSource(key, callback) {
      return this._addSource(key, callback, BugReporting._fileSources);
    }
  }, {
    key: '_addSource',
    value: function _addSource(key, callback, source) {
      BugReporting._maybeInit();
      if (source.has(key)) {
        console.warn('BugReporting.add* called multiple times for same key \'' + key + '\'');
      }
      source.set(key, callback);
      return { remove: function remove() {
          source.delete(key);
        } };
    }
  }, {
    key: 'collectExtraData',
    value: function collectExtraData() {
      var extraData = {};
      for (var _iterator = BugReporting._extraSources, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
        var _ref3;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref3 = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref3 = _i.value;
        }

        var _ref = _ref3;

        var _ref2 = babelHelpers.slicedToArray(_ref, 2);

        var _key = _ref2[0];
        var callback = _ref2[1];

        extraData[_key] = callback();
      }
      var fileData = {};
      for (var _iterator2 = BugReporting._fileSources, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
        var _ref6;

        if (_isArray2) {
          if (_i2 >= _iterator2.length) break;
          _ref6 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done) break;
          _ref6 = _i2.value;
        }

        var _ref4 = _ref6;

        var _ref5 = babelHelpers.slicedToArray(_ref4, 2);

        var _key2 = _ref5[0];
        var _callback = _ref5[1];

        fileData[_key2] = _callback();
      }
      infoLog('BugReporting extraData:', extraData);
      var BugReportingNativeModule = require(27             ).BugReporting; // 27 = NativeModules
      BugReportingNativeModule && BugReportingNativeModule.setExtraData && BugReportingNativeModule.setExtraData(extraData, fileData);

      return { extras: extraData, files: fileData };
    }
  }]);
  return BugReporting;
}();

BugReporting._extraSources = new Map();
BugReporting._fileSources = new Map();
BugReporting._subscription = null;


module.exports = BugReporting;
}, 353, null, "BugReporting");
__d(/* dumpReactTree */function(global, require, module, exports) {
'use strict';

var ReactNativeMount = require(221               ); // 221 = ReactNativeMount
var getReactData = require(355           ); // 355 = getReactData

var INDENTATION_SIZE = 2;
var MAX_DEPTH = 2;
var MAX_STRING_LENGTH = 50;

function dumpReactTree() {
  try {
    return getReactTree();
  } catch (e) {
    return 'Failed to dump react tree: ' + e;
  }
}

function getReactTree() {
  var output = '';
  var rootIds = Object.getOwnPropertyNames(ReactNativeMount._instancesByContainerID);
  for (var _iterator = rootIds, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
    var _ref;

    if (_isArray) {
      if (_i >= _iterator.length) break;
      _ref = _iterator[_i++];
    } else {
      _i = _iterator.next();
      if (_i.done) break;
      _ref = _i.value;
    }

    var rootId = _ref;

    var instance = ReactNativeMount._instancesByContainerID[rootId];
    output += '============ Root ID: ' + rootId + ' ============\n';
    output += dumpNode(instance, 0);
    output += '============ End root ID: ' + rootId + ' ============\n';
  }
  return output;
}

function dumpNode(node, identation) {
  var data = getReactData(node);
  if (data.nodeType === 'Text') {
    return indent(identation) + data.text + '\n';
  } else if (data.nodeType === 'Empty') {
    return '';
  }
  var output = indent(identation) + ('<' + data.name);
  if (data.nodeType === 'Composite') {
    for (var _iterator2 = Object.getOwnPropertyNames(data.props || {}), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
      var _ref2;

      if (_isArray2) {
        if (_i2 >= _iterator2.length) break;
        _ref2 = _iterator2[_i2++];
      } else {
        _i2 = _iterator2.next();
        if (_i2.done) break;
        _ref2 = _i2.value;
      }

      var propName = _ref2;

      if (isNormalProp(propName)) {
        try {
          var value = convertValue(data.props[propName]);
          if (value) {
            output += ' ' + propName + '=' + value;
          }
        } catch (e) {
          var message = '[Failed to get property: ' + e + ']';
          output += ' ' + propName + '=' + message;
        }
      }
    }
  }
  var childOutput = '';
  for (var _iterator3 = data.children || [], _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
    var _ref3;

    if (_isArray3) {
      if (_i3 >= _iterator3.length) break;
      _ref3 = _iterator3[_i3++];
    } else {
      _i3 = _iterator3.next();
      if (_i3.done) break;
      _ref3 = _i3.value;
    }

    var child = _ref3;

    childOutput += dumpNode(child, identation + 1);
  }

  if (childOutput) {
    output += '>\n' + childOutput + indent(identation) + ('</' + data.name + '>\n');
  } else {
    output += ' />\n';
  }

  return output;
}

function isNormalProp(name) {
  switch (name) {
    case 'children':
    case 'key':
    case 'ref':
      return false;
    default:
      return true;
  }
}

function convertObject(object, depth) {
  if (depth >= MAX_DEPTH) {
    return '[...omitted]';
  }
  var output = '{';
  var first = true;
  for (var _iterator4 = Object.getOwnPropertyNames(object), _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
    var _ref4;

    if (_isArray4) {
      if (_i4 >= _iterator4.length) break;
      _ref4 = _iterator4[_i4++];
    } else {
      _i4 = _iterator4.next();
      if (_i4.done) break;
      _ref4 = _i4.value;
    }

    var key = _ref4;

    if (!first) {
      output += ', ';
    }

    output += key + ': ' + convertValue(object[key], depth + 1);
    first = false;
  }
  return output + '}';
}

function convertValue(value) {
  var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

  if (!value) {
    return null;
  }

  switch (typeof value) {
    case 'string':
      return JSON.stringify(possiblyEllipsis(value).replace('\n', '\\n'));
    case 'boolean':
    case 'number':
      return JSON.stringify(value);
    case 'function':
      return '[function]';
    case 'object':
      return convertObject(value, depth);
    default:
      return null;
  }
}

function possiblyEllipsis(value) {
  if (value.length > MAX_STRING_LENGTH) {
    return value.slice(0, MAX_STRING_LENGTH) + '...';
  } else {
    return value;
  }
}

function indent(size) {
  return ' '.repeat(size * INDENTATION_SIZE);
}

module.exports = dumpReactTree;
}, 354, null, "dumpReactTree");
__d(/* getReactData */function(global, require, module, exports) {
'use strict';

function getData(element) {
  var children = null;
  var props = null;
  var state = null;
  var context = null;
  var updater = null;
  var name = null;
  var type = null;
  var text = null;
  var publicInstance = null;
  var nodeType = 'Native';

  if (typeof element !== 'object') {
    nodeType = 'Text';
    text = element + '';
  } else if (element._currentElement === null || element._currentElement === false) {
    nodeType = 'Empty';
  } else if (element._renderedComponent) {
    nodeType = 'NativeWrapper';
    children = [element._renderedComponent];
    props = element._instance.props;
    state = element._instance.state;
    context = element._instance.context;
    if (context && Object.keys(context).length === 0) {
      context = null;
    }
  } else if (element._renderedChildren) {
    children = childrenList(element._renderedChildren);
  } else if (element._currentElement && element._currentElement.props) {
    children = element._currentElement.props.children;
  }

  if (!props && element._currentElement && element._currentElement.props) {
    props = element._currentElement.props;
  }

  if (element._currentElement != null) {
    type = element._currentElement.type;
    if (typeof type === 'string') {
      name = type;
    } else if (element.getName) {
      nodeType = 'Composite';
      name = element.getName();

      if (element._renderedComponent && element._currentElement.props === element._renderedComponent._currentElement) {
        nodeType = 'Wrapper';
      }
      if (name === null) {
        name = 'No display name';
      }
    } else if (element._stringText) {
      nodeType = 'Text';
      text = element._stringText;
    } else {
      name = type.displayName || type.name || 'Unknown';
    }
  }

  if (element._instance) {
    var inst = element._instance;
    updater = {
      setState: inst.setState && inst.setState.bind(inst),
      forceUpdate: inst.forceUpdate && inst.forceUpdate.bind(inst),
      setInProps: inst.forceUpdate && setInProps.bind(null, element),
      setInState: inst.forceUpdate && setInState.bind(null, inst),
      setInContext: inst.forceUpdate && setInContext.bind(null, inst)
    };
    publicInstance = inst;

    if (inst._renderedChildren) {
      children = childrenList(inst._renderedChildren);
    }
  }

  return {
    nodeType: nodeType,
    type: type,
    name: name,
    props: props,
    state: state,
    context: context,
    children: children,
    text: text,
    updater: updater,
    publicInstance: publicInstance
  };
}

function setInProps(internalInst, path, value) {
  var element = internalInst._currentElement;
  internalInst._currentElement = babelHelpers.extends({}, element, {
    props: copyWithSet(element.props, path, value)
  });
  internalInst._instance.forceUpdate();
}

function setInState(inst, path, value) {
  setIn(inst.state, path, value);
  inst.forceUpdate();
}

function setInContext(inst, path, value) {
  setIn(inst.context, path, value);
  inst.forceUpdate();
}

function setIn(obj, path, value) {
  var last = path.pop();
  var parent = path.reduce(function (obj_, attr) {
    return obj_ ? obj_[attr] : null;
  }, obj);
  if (parent) {
    parent[last] = value;
  }
}

function childrenList(children) {
  var res = [];
  for (var name in children) {
    res.push(children[name]);
  }
  return res;
}

function copyWithSetImpl(obj, path, idx, value) {
  if (idx >= path.length) {
    return value;
  }
  var key = path[idx];
  var updated = Array.isArray(obj) ? obj.slice() : babelHelpers.extends({}, obj);

  updated[key] = copyWithSetImpl(obj[key], path, idx + 1, value);
  return updated;
}

function copyWithSet(obj, path, value) {
  return copyWithSetImpl(obj, path, 0, value);
}

module.exports = getData;
}, 355, null, "getReactData");
__d(/* renderApplication */function(global, require, module, exports) {

'use strict';

var AppContainer = require(285           ); // 285 = AppContainer
var React = require(76     ); // 76 = React
var ReactNative = require(191          ); // 191 = ReactNative

var invariant = require(24                  ); // 24 = fbjs/lib/invariant

require(357          ); // 357 = BackAndroid

function renderApplication(RootComponent, initialProps, rootTag) {
  invariant(rootTag, 'Expect to have a valid rootTag, instead got ', rootTag);
  ReactNative.render(React.createElement(
    AppContainer,
    { rootTag: rootTag },
    React.createElement(RootComponent, babelHelpers.extends({}, initialProps, {
      rootTag: rootTag
    }))
  ), rootTag);
}

module.exports = renderApplication;
}, 356, null, "renderApplication");
__d(/* BackAndroid */function(global, require, module, exports) {

'use strict';

var DeviceEventManager = require(27             ).DeviceEventManager; // 27 = NativeModules
var RCTDeviceEventEmitter = require(57                     ); // 57 = RCTDeviceEventEmitter

var DEVICE_BACK_EVENT = 'hardwareBackPress';

var _backPressSubscriptions = new Set();

RCTDeviceEventEmitter.addListener(DEVICE_BACK_EVENT, function () {
  var backPressSubscriptions = new Set(_backPressSubscriptions);
  var invokeDefault = true;
  var subscriptions = [].concat(babelHelpers.toConsumableArray(backPressSubscriptions)).reverse();
  for (var i = 0; i < subscriptions.length; ++i) {
    if (subscriptions[i]()) {
      invokeDefault = false;
      break;
    }
  }

  if (invokeDefault) {
    BackAndroid.exitApp();
  }
});

var BackAndroid = {

  exitApp: function exitApp() {
    DeviceEventManager.invokeDefaultBackPressHandler();
  },

  addEventListener: function addEventListener(eventName, handler) {
    _backPressSubscriptions.add(handler);
    return {
      remove: function remove() {
        return BackAndroid.removeEventListener(eventName, handler);
      }
    };
  },

  removeEventListener: function removeEventListener(eventName, handler) {
    _backPressSubscriptions.delete(handler);
  }

};

module.exports = BackAndroid;
}, 357, null, "BackAndroid");
__d(/* RCTRenderingPerf */function(global, require, module, exports) {
'use strict';

var ReactDebugTool = require(36              ); // 36 = ReactDebugTool
var ReactPerf = require(359        ); // 359 = ReactPerf

var invariant = require(24                  ); // 24 = fbjs/lib/invariant
var performanceNow = require(40                       ); // 40 = fbjs/lib/performanceNow

var perfModules = [];
var enabled = false;
var lastRenderStartTime = 0;
var totalRenderDuration = 0;

var RCTRenderingPerfDevtool = {
  onBeginLifeCycleTimer: function onBeginLifeCycleTimer(debugID, timerType) {
    if (timerType === 'render') {
      lastRenderStartTime = performanceNow();
    }
  },
  onEndLifeCycleTimer: function onEndLifeCycleTimer(debugID, timerType) {
    if (timerType === 'render') {
      var lastRenderDuration = performanceNow() - lastRenderStartTime;
      totalRenderDuration += lastRenderDuration;
    }
  }
};

var RCTRenderingPerf = {
  toggle: function toggle() {
    console.log('Render perfomance measurements enabled');
    enabled = true;
  },

  start: function start() {
    if (!enabled) {
      return;
    }

    ReactPerf.start();
    ReactDebugTool.addHook(RCTRenderingPerfDevtool);
    perfModules.forEach(function (module) {
      return module.start();
    });
  },

  stop: function stop() {
    if (!enabled) {
      return;
    }

    ReactPerf.stop();
    ReactPerf.printInclusive();
    ReactPerf.printWasted();
    ReactDebugTool.removeHook(RCTRenderingPerfDevtool);

    console.log('Total time spent in render(): ' + totalRenderDuration.toFixed(2) + ' ms');
    lastRenderStartTime = 0;
    totalRenderDuration = 0;

    perfModules.forEach(function (module) {
      return module.stop();
    });
  },

  register: function register(module) {
    invariant(typeof module.start === 'function', 'Perf module should have start() function');
    invariant(typeof module.stop === 'function', 'Perf module should have stop() function');
    perfModules.push(module);
  }
};

module.exports = RCTRenderingPerf;
}, 358, null, "RCTRenderingPerf");
__d(/* ReactPerf */function(global, require, module, exports) {

'use strict';

var ReactDebugTool = require(36              ); // 36 = ReactDebugTool
var warning = require(13                ); // 13 = fbjs/lib/warning
var alreadyWarned = false;

function roundFloat(val) {
  var base = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;

  var n = Math.pow(10, base);
  return Math.floor(val * n) / n;
}

function consoleTable(table) {
  console.table(table);
}

function warnInProduction() {
  if (alreadyWarned) {
    return;
  }
  alreadyWarned = true;
  if (typeof console !== 'undefined') {
    console.error('ReactPerf is not supported in the production builds of React. ' + 'To collect measurements, please use the development build of React instead.');
  }
}

function getLastMeasurements() {
  if (!__DEV__) {
    warnInProduction();
    return [];
  }

  return ReactDebugTool.getFlushHistory();
}

function getExclusive() {
  var flushHistory = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getLastMeasurements();

  if (!__DEV__) {
    warnInProduction();
    return [];
  }

  var aggregatedStats = {};
  var affectedIDs = {};

  function updateAggregatedStats(treeSnapshot, instanceID, timerType, applyUpdate) {
    var displayName = treeSnapshot[instanceID].displayName;

    var key = displayName;
    var stats = aggregatedStats[key];
    if (!stats) {
      affectedIDs[key] = {};
      stats = aggregatedStats[key] = {
        key: key,
        instanceCount: 0,
        counts: {},
        durations: {},
        totalDuration: 0
      };
    }
    if (!stats.durations[timerType]) {
      stats.durations[timerType] = 0;
    }
    if (!stats.counts[timerType]) {
      stats.counts[timerType] = 0;
    }
    affectedIDs[key][instanceID] = true;
    applyUpdate(stats);
  }

  flushHistory.forEach(function (flush) {
    var measurements = flush.measurements,
        treeSnapshot = flush.treeSnapshot;

    measurements.forEach(function (measurement) {
      var duration = measurement.duration,
          instanceID = measurement.instanceID,
          timerType = measurement.timerType;

      updateAggregatedStats(treeSnapshot, instanceID, timerType, function (stats) {
        stats.totalDuration += duration;
        stats.durations[timerType] += duration;
        stats.counts[timerType]++;
      });
    });
  });

  return Object.keys(aggregatedStats).map(function (key) {
    return babelHelpers.extends({}, aggregatedStats[key], {
      instanceCount: Object.keys(affectedIDs[key]).length
    });
  }).sort(function (a, b) {
    return b.totalDuration - a.totalDuration;
  });
}

function getInclusive() {
  var flushHistory = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getLastMeasurements();

  if (!__DEV__) {
    warnInProduction();
    return [];
  }

  var aggregatedStats = {};
  var affectedIDs = {};

  function updateAggregatedStats(treeSnapshot, instanceID, applyUpdate) {
    var _treeSnapshot$instanc = treeSnapshot[instanceID],
        displayName = _treeSnapshot$instanc.displayName,
        ownerID = _treeSnapshot$instanc.ownerID;

    var owner = treeSnapshot[ownerID];
    var key = (owner ? owner.displayName + ' > ' : '') + displayName;
    var stats = aggregatedStats[key];
    if (!stats) {
      affectedIDs[key] = {};
      stats = aggregatedStats[key] = {
        key: key,
        instanceCount: 0,
        inclusiveRenderDuration: 0,
        renderCount: 0
      };
    }
    affectedIDs[key][instanceID] = true;
    applyUpdate(stats);
  }

  var isCompositeByID = {};
  flushHistory.forEach(function (flush) {
    var measurements = flush.measurements;

    measurements.forEach(function (measurement) {
      var instanceID = measurement.instanceID,
          timerType = measurement.timerType;

      if (timerType !== 'render') {
        return;
      }
      isCompositeByID[instanceID] = true;
    });
  });

  flushHistory.forEach(function (flush) {
    var measurements = flush.measurements,
        treeSnapshot = flush.treeSnapshot;

    measurements.forEach(function (measurement) {
      var duration = measurement.duration,
          instanceID = measurement.instanceID,
          timerType = measurement.timerType;

      if (timerType !== 'render') {
        return;
      }
      updateAggregatedStats(treeSnapshot, instanceID, function (stats) {
        stats.renderCount++;
      });
      var nextParentID = instanceID;
      while (nextParentID) {
        if (isCompositeByID[nextParentID]) {
          updateAggregatedStats(treeSnapshot, nextParentID, function (stats) {
            stats.inclusiveRenderDuration += duration;
          });
        }
        nextParentID = treeSnapshot[nextParentID].parentID;
      }
    });
  });

  return Object.keys(aggregatedStats).map(function (key) {
    return babelHelpers.extends({}, aggregatedStats[key], {
      instanceCount: Object.keys(affectedIDs[key]).length
    });
  }).sort(function (a, b) {
    return b.inclusiveRenderDuration - a.inclusiveRenderDuration;
  });
}

function getWasted() {
  var flushHistory = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getLastMeasurements();

  if (!__DEV__) {
    warnInProduction();
    return [];
  }

  var aggregatedStats = {};
  var affectedIDs = {};

  function updateAggregatedStats(treeSnapshot, instanceID, applyUpdate) {
    var _treeSnapshot$instanc2 = treeSnapshot[instanceID],
        displayName = _treeSnapshot$instanc2.displayName,
        ownerID = _treeSnapshot$instanc2.ownerID;

    var owner = treeSnapshot[ownerID];
    var key = (owner ? owner.displayName + ' > ' : '') + displayName;
    var stats = aggregatedStats[key];
    if (!stats) {
      affectedIDs[key] = {};
      stats = aggregatedStats[key] = {
        key: key,
        instanceCount: 0,
        inclusiveRenderDuration: 0,
        renderCount: 0
      };
    }
    affectedIDs[key][instanceID] = true;
    applyUpdate(stats);
  }

  flushHistory.forEach(function (flush) {
    var measurements = flush.measurements,
        treeSnapshot = flush.treeSnapshot,
        operations = flush.operations;

    var isDefinitelyNotWastedByID = {};

    operations.forEach(function (operation) {
      var instanceID = operation.instanceID;

      var nextParentID = instanceID;
      while (nextParentID) {
        isDefinitelyNotWastedByID[nextParentID] = true;
        nextParentID = treeSnapshot[nextParentID].parentID;
      }
    });

    var renderedCompositeIDs = {};
    measurements.forEach(function (measurement) {
      var instanceID = measurement.instanceID,
          timerType = measurement.timerType;

      if (timerType !== 'render') {
        return;
      }
      renderedCompositeIDs[instanceID] = true;
    });

    measurements.forEach(function (measurement) {
      var duration = measurement.duration,
          instanceID = measurement.instanceID,
          timerType = measurement.timerType;

      if (timerType !== 'render') {
        return;
      }

      var updateCount = treeSnapshot[instanceID].updateCount;

      if (isDefinitelyNotWastedByID[instanceID] || updateCount === 0) {
        return;
      }

      updateAggregatedStats(treeSnapshot, instanceID, function (stats) {
        stats.renderCount++;
      });

      var nextParentID = instanceID;
      while (nextParentID) {
        var isWasted = renderedCompositeIDs[nextParentID] && !isDefinitelyNotWastedByID[nextParentID];
        if (isWasted) {
          updateAggregatedStats(treeSnapshot, nextParentID, function (stats) {
            stats.inclusiveRenderDuration += duration;
          });
        }
        nextParentID = treeSnapshot[nextParentID].parentID;
      }
    });
  });

  return Object.keys(aggregatedStats).map(function (key) {
    return babelHelpers.extends({}, aggregatedStats[key], {
      instanceCount: Object.keys(affectedIDs[key]).length
    });
  }).sort(function (a, b) {
    return b.inclusiveRenderDuration - a.inclusiveRenderDuration;
  });
}

function getOperations() {
  var flushHistory = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getLastMeasurements();

  if (!__DEV__) {
    warnInProduction();
    return [];
  }

  var stats = [];
  flushHistory.forEach(function (flush, flushIndex) {
    var operations = flush.operations,
        treeSnapshot = flush.treeSnapshot;

    operations.forEach(function (operation) {
      var instanceID = operation.instanceID,
          type = operation.type,
          payload = operation.payload;
      var _treeSnapshot$instanc3 = treeSnapshot[instanceID],
          displayName = _treeSnapshot$instanc3.displayName,
          ownerID = _treeSnapshot$instanc3.ownerID;

      var owner = treeSnapshot[ownerID];
      var key = (owner ? owner.displayName + ' > ' : '') + displayName;

      stats.push({
        flushIndex: flushIndex,
        instanceID: instanceID,
        key: key,
        type: type,
        ownerID: ownerID,
        payload: payload
      });
    });
  });
  return stats;
}

function printExclusive(flushHistory) {
  if (!__DEV__) {
    warnInProduction();
    return;
  }

  var stats = getExclusive(flushHistory);
  var table = stats.map(function (item) {
    var key = item.key,
        instanceCount = item.instanceCount,
        totalDuration = item.totalDuration;

    var renderCount = item.counts.render || 0;
    var renderDuration = item.durations.render || 0;
    return {
      'Component': key,
      'Total time (ms)': roundFloat(totalDuration),
      'Instance count': instanceCount,
      'Total render time (ms)': roundFloat(renderDuration),
      'Average render time (ms)': renderCount ? roundFloat(renderDuration / renderCount) : undefined,
      'Render count': renderCount,
      'Total lifecycle time (ms)': roundFloat(totalDuration - renderDuration)
    };
  });
  consoleTable(table);
}

function printInclusive(flushHistory) {
  if (!__DEV__) {
    warnInProduction();
    return;
  }

  var stats = getInclusive(flushHistory);
  var table = stats.map(function (item) {
    var key = item.key,
        instanceCount = item.instanceCount,
        inclusiveRenderDuration = item.inclusiveRenderDuration,
        renderCount = item.renderCount;

    return {
      'Owner > Component': key,
      'Inclusive render time (ms)': roundFloat(inclusiveRenderDuration),
      'Instance count': instanceCount,
      'Render count': renderCount
    };
  });
  consoleTable(table);
}

function printWasted(flushHistory) {
  if (!__DEV__) {
    warnInProduction();
    return;
  }

  var stats = getWasted(flushHistory);
  var table = stats.map(function (item) {
    var key = item.key,
        instanceCount = item.instanceCount,
        inclusiveRenderDuration = item.inclusiveRenderDuration,
        renderCount = item.renderCount;

    return {
      'Owner > Component': key,
      'Inclusive wasted time (ms)': roundFloat(inclusiveRenderDuration),
      'Instance count': instanceCount,
      'Render count': renderCount
    };
  });
  consoleTable(table);
}

function printOperations(flushHistory) {
  if (!__DEV__) {
    warnInProduction();
    return;
  }

  var stats = getOperations(flushHistory);
  var table = stats.map(function (stat) {
    return {
      'Owner > Node': stat.key,
      'Operation': stat.type,
      'Payload': typeof stat.payload === 'object' ? JSON.stringify(stat.payload) : stat.payload,
      'Flush index': stat.flushIndex,
      'Owner Component ID': stat.ownerID,
      'DOM Component ID': stat.instanceID
    };
  });
  consoleTable(table);
}

var warnedAboutPrintDOM = false;
function printDOM(measurements) {
  warning(warnedAboutPrintDOM, '`ReactPerf.printDOM(...)` is deprecated. Use ' + '`ReactPerf.printOperations(...)` instead.');
  warnedAboutPrintDOM = true;
  return printOperations(measurements);
}

var warnedAboutGetMeasurementsSummaryMap = false;
function getMeasurementsSummaryMap(measurements) {
  warning(warnedAboutGetMeasurementsSummaryMap, '`ReactPerf.getMeasurementsSummaryMap(...)` is deprecated. Use ' + '`ReactPerf.getWasted(...)` instead.');
  warnedAboutGetMeasurementsSummaryMap = true;
  return getWasted(measurements);
}

function start() {
  if (!__DEV__) {
    warnInProduction();
    return;
  }

  ReactDebugTool.beginProfiling();
}

function stop() {
  if (!__DEV__) {
    warnInProduction();
    return;
  }

  ReactDebugTool.endProfiling();
}

function isRunning() {
  if (!__DEV__) {
    warnInProduction();
    return false;
  }

  return ReactDebugTool.isProfiling();
}

var ReactPerfAnalysis = {
  getLastMeasurements: getLastMeasurements,
  getExclusive: getExclusive,
  getInclusive: getInclusive,
  getWasted: getWasted,
  getOperations: getOperations,
  printExclusive: printExclusive,
  printInclusive: printInclusive,
  printWasted: printWasted,
  printOperations: printOperations,
  start: start,
  stop: stop,
  isRunning: isRunning,

  printDOM: printDOM,
  getMeasurementsSummaryMap: getMeasurementsSummaryMap
};

module.exports = ReactPerfAnalysis;
}, 359, null, "ReactPerf");
__d(/* AsyncStorage */function(global, require, module, exports) {
'use strict';

var NativeModules = require(27             ); // 27 = NativeModules
var RCTAsyncSQLiteStorage = NativeModules.AsyncSQLiteDBStorage;
var RCTAsyncRocksDBStorage = NativeModules.AsyncRocksDBStorage;
var RCTAsyncFileStorage = NativeModules.AsyncLocalStorage;

var RCTAsyncStorage = RCTAsyncRocksDBStorage || RCTAsyncSQLiteStorage || RCTAsyncFileStorage;

var AsyncStorage = {
  _getRequests: [],
  _getKeys: [],
  _immediate: null,

  getItem: function getItem(key, callback) {
    return new Promise(function (resolve, reject) {
      RCTAsyncStorage.multiGet([key], function (errors, result) {
        var value = result && result[0] && result[0][1] ? result[0][1] : null;
        var errs = convertErrors(errors);
        callback && callback(errs && errs[0], value);
        if (errs) {
          reject(errs[0]);
        } else {
          resolve(value);
        }
      });
    });
  },

  setItem: function setItem(key, value, callback) {
    return new Promise(function (resolve, reject) {
      RCTAsyncStorage.multiSet([[key, value]], function (errors) {
        var errs = convertErrors(errors);
        callback && callback(errs && errs[0]);
        if (errs) {
          reject(errs[0]);
        } else {
          resolve(null);
        }
      });
    });
  },

  removeItem: function removeItem(key, callback) {
    return new Promise(function (resolve, reject) {
      RCTAsyncStorage.multiRemove([key], function (errors) {
        var errs = convertErrors(errors);
        callback && callback(errs && errs[0]);
        if (errs) {
          reject(errs[0]);
        } else {
          resolve(null);
        }
      });
    });
  },

  mergeItem: function mergeItem(key, value, callback) {
    return new Promise(function (resolve, reject) {
      RCTAsyncStorage.multiMerge([[key, value]], function (errors) {
        var errs = convertErrors(errors);
        callback && callback(errs && errs[0]);
        if (errs) {
          reject(errs[0]);
        } else {
          resolve(null);
        }
      });
    });
  },

  clear: function clear(callback) {
    return new Promise(function (resolve, reject) {
      RCTAsyncStorage.clear(function (error) {
        callback && callback(convertError(error));
        if (error && convertError(error)) {
          reject(convertError(error));
        } else {
          resolve(null);
        }
      });
    });
  },

  getAllKeys: function getAllKeys(callback) {
    return new Promise(function (resolve, reject) {
      RCTAsyncStorage.getAllKeys(function (error, keys) {
        callback && callback(convertError(error), keys);
        if (error) {
          reject(convertError(error));
        } else {
          resolve(keys);
        }
      });
    });
  },

  flushGetRequests: function flushGetRequests() {
    var getRequests = this._getRequests;
    var getKeys = this._getKeys;

    this._getRequests = [];
    this._getKeys = [];

    RCTAsyncStorage.multiGet(getKeys, function (errors, result) {
      var map = {};
      result && result.forEach(function (_ref) {
        var _ref2 = babelHelpers.slicedToArray(_ref, 2),
            key = _ref2[0],
            value = _ref2[1];

        map[key] = value;return value;
      });
      var reqLength = getRequests.length;
      for (var i = 0; i < reqLength; i++) {
        var request = getRequests[i];
        var requestKeys = request.keys;
        var requestResult = requestKeys.map(function (key) {
          return [key, map[key]];
        });
        request.callback && request.callback(null, requestResult);
        request.resolve && request.resolve(requestResult);
      }
    });
  },

  multiGet: function multiGet(keys, callback) {
    var _this = this;

    if (!this._immediate) {
      this._immediate = setImmediate(function () {
        _this._immediate = null;
        _this.flushGetRequests();
      });
    }

    var getRequest = {
      keys: keys,
      callback: callback,

      keyIndex: this._getKeys.length,
      resolve: null,
      reject: null
    };

    var promiseResult = new Promise(function (resolve, reject) {
      getRequest.resolve = resolve;
      getRequest.reject = reject;
    });

    this._getRequests.push(getRequest);

    keys.forEach(function (key) {
      if (_this._getKeys.indexOf(key) === -1) {
        _this._getKeys.push(key);
      }
    });

    return promiseResult;
  },

  multiSet: function multiSet(keyValuePairs, callback) {
    return new Promise(function (resolve, reject) {
      RCTAsyncStorage.multiSet(keyValuePairs, function (errors) {
        var error = convertErrors(errors);
        callback && callback(error);
        if (error) {
          reject(error);
        } else {
          resolve(null);
        }
      });
    });
  },

  multiRemove: function multiRemove(keys, callback) {
    return new Promise(function (resolve, reject) {
      RCTAsyncStorage.multiRemove(keys, function (errors) {
        var error = convertErrors(errors);
        callback && callback(error);
        if (error) {
          reject(error);
        } else {
          resolve(null);
        }
      });
    });
  },

  multiMerge: function multiMerge(keyValuePairs, callback) {
    return new Promise(function (resolve, reject) {
      RCTAsyncStorage.multiMerge(keyValuePairs, function (errors) {
        var error = convertErrors(errors);
        callback && callback(error);
        if (error) {
          reject(error);
        } else {
          resolve(null);
        }
      });
    });
  }
};

if (!RCTAsyncStorage.multiMerge) {
  delete AsyncStorage.mergeItem;
  delete AsyncStorage.multiMerge;
}

function convertErrors(errs) {
  if (!errs) {
    return null;
  }
  return (Array.isArray(errs) ? errs : [errs]).map(function (e) {
    return convertError(e);
  });
}

function convertError(error) {
  if (!error) {
    return null;
  }
  var out = new Error(error.message);
  out.key = error.key;
  return out;
}

module.exports = AsyncStorage;
}, 360, null, "AsyncStorage");
__d(/* CameraRoll */function(global, require, module, exports) {
'use strict';

var ReactPropTypes = require(76     ).PropTypes; // 76 = React
var RCTCameraRollManager = require(27             ).CameraRollManager; // 27 = NativeModules

var createStrictShapeTypeChecker = require(121                           ); // 121 = createStrictShapeTypeChecker
var deepFreezeAndThrowOnMutationInDev = require(46                                 ); // 46 = deepFreezeAndThrowOnMutationInDev
var invariant = require(24                  ); // 24 = fbjs/lib/invariant

var GROUP_TYPES_OPTIONS = ['Album', 'All', 'Event', 'Faces', 'Library', 'PhotoStream', 'SavedPhotos'];

var ASSET_TYPE_OPTIONS = ['All', 'Videos', 'Photos'];

deepFreezeAndThrowOnMutationInDev(GROUP_TYPES_OPTIONS);
deepFreezeAndThrowOnMutationInDev(ASSET_TYPE_OPTIONS);

var getPhotosParamChecker = createStrictShapeTypeChecker({
  first: ReactPropTypes.number.isRequired,

  after: ReactPropTypes.string,

  groupTypes: ReactPropTypes.oneOf(GROUP_TYPES_OPTIONS),

  groupName: ReactPropTypes.string,

  assetType: ReactPropTypes.oneOf(ASSET_TYPE_OPTIONS),

  mimeTypes: ReactPropTypes.arrayOf(ReactPropTypes.string)
});

var getPhotosReturnChecker = createStrictShapeTypeChecker({
  edges: ReactPropTypes.arrayOf(createStrictShapeTypeChecker({
    node: createStrictShapeTypeChecker({
      type: ReactPropTypes.string.isRequired,
      group_name: ReactPropTypes.string.isRequired,
      image: createStrictShapeTypeChecker({
        uri: ReactPropTypes.string.isRequired,
        height: ReactPropTypes.number.isRequired,
        width: ReactPropTypes.number.isRequired,
        isStored: ReactPropTypes.bool
      }).isRequired,
      timestamp: ReactPropTypes.number.isRequired,
      location: createStrictShapeTypeChecker({
        latitude: ReactPropTypes.number,
        longitude: ReactPropTypes.number,
        altitude: ReactPropTypes.number,
        heading: ReactPropTypes.number,
        speed: ReactPropTypes.number
      })
    }).isRequired
  })).isRequired,
  page_info: createStrictShapeTypeChecker({
    has_next_page: ReactPropTypes.bool.isRequired,
    start_cursor: ReactPropTypes.string,
    end_cursor: ReactPropTypes.string
  }).isRequired
});

var CameraRoll = function () {
  function CameraRoll() {
    babelHelpers.classCallCheck(this, CameraRoll);
  }

  babelHelpers.createClass(CameraRoll, null, [{
    key: 'saveImageWithTag',
    value: function saveImageWithTag(tag) {
      console.warn('CameraRoll.saveImageWithTag is deprecated. Use CameraRoll.saveToCameraRoll instead');
      return this.saveToCameraRoll(tag, 'photo');
    }
  }, {
    key: 'saveToCameraRoll',
    value: function saveToCameraRoll(tag, type) {
      invariant(typeof tag === 'string', 'CameraRoll.saveToCameraRoll must be a valid string.');

      invariant(type === 'photo' || type === 'video' || type === undefined, 'The second argument to saveToCameraRoll must be \'photo\' or \'video\'. You passed ' + type);

      var mediaType = 'photo';
      if (type) {
        mediaType = type;
      } else if (['mov', 'mp4'].indexOf(tag.split('.').slice(-1)[0]) >= 0) {
        mediaType = 'video';
      }

      return RCTCameraRollManager.saveToCameraRoll(tag, mediaType);
    }
  }, {
    key: 'getPhotos',
    value: function getPhotos(params) {
      if (__DEV__) {
        getPhotosParamChecker({ params: params }, 'params', 'CameraRoll.getPhotos');
      }
      if (arguments.length > 1) {
        console.warn('CameraRoll.getPhotos(tag, success, error) is deprecated.  Use the returned Promise instead');
        var successCallback = arguments[1];
        if (__DEV__) {
          var callback = arguments[1];
          successCallback = function successCallback(response) {
            getPhotosReturnChecker({ response: response }, 'response', 'CameraRoll.getPhotos callback');
            callback(response);
          };
        }
        var errorCallback = arguments[2] || function () {};
        RCTCameraRollManager.getPhotos(params).then(successCallback, errorCallback);
      }

      return RCTCameraRollManager.getPhotos(params);
    }
  }]);
  return CameraRoll;
}();

CameraRoll.GroupTypesOptions = GROUP_TYPES_OPTIONS;
CameraRoll.AssetTypeOptions = ASSET_TYPE_OPTIONS;

module.exports = CameraRoll;
}, 361, null, "CameraRoll");
__d(/* Clipboard */function(global, require, module, exports) {
'use strict';

var Clipboard = require(27             ).Clipboard; // 27 = NativeModules

module.exports = {
  getString: function getString() {
    return Clipboard.getString();
  },
  setString: function setString(content) {
    Clipboard.setString(content);
  }
};
}, 362, null, "Clipboard");
__d(/* DatePickerAndroid */function(global, require, module, exports) {
'use strict';

var DatePickerModule = require(27             ).DatePickerAndroid; // 27 = NativeModules

function _toMillis(options, key) {
  var dateVal = options[key];

  if (typeof dateVal === 'object' && typeof dateVal.getMonth === 'function') {
    options[key] = dateVal.getTime();
  }
}

var DatePickerAndroid = function () {
  function DatePickerAndroid() {
    babelHelpers.classCallCheck(this, DatePickerAndroid);
  }

  babelHelpers.createClass(DatePickerAndroid, null, [{
    key: 'open',
    value: function open(options) {
      var optionsMs;
      return regeneratorRuntime.async(function open$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              optionsMs = options;

              if (optionsMs) {
                _toMillis(options, 'date');
                _toMillis(options, 'minDate');
                _toMillis(options, 'maxDate');
              }
              return _context.abrupt('return', DatePickerModule.open(options));

            case 3:
            case 'end':
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'dateSetAction',
    get: function get() {
      return 'dateSetAction';
    }
  }, {
    key: 'dismissedAction',
    get: function get() {
      return 'dismissedAction';
    }
  }]);
  return DatePickerAndroid;
}();

module.exports = DatePickerAndroid;
}, 363, null, "DatePickerAndroid");
__d(/* ImagePickerIOS */function(global, require, module, exports) {
'use strict';

var RCTImagePicker = require(27             ).ImagePickerIOS; // 27 = NativeModules

var ImagePickerIOS = {
  canRecordVideos: function canRecordVideos(callback) {
    return RCTImagePicker.canRecordVideos(callback);
  },
  canUseCamera: function canUseCamera(callback) {
    return RCTImagePicker.canUseCamera(callback);
  },
  openCameraDialog: function openCameraDialog(config, successCallback, cancelCallback) {
    config = babelHelpers.extends({
      videoMode: false
    }, config);
    return RCTImagePicker.openCameraDialog(config, successCallback, cancelCallback);
  },
  openSelectDialog: function openSelectDialog(config, successCallback, cancelCallback) {
    config = babelHelpers.extends({
      showImages: true,
      showVideos: false
    }, config);
    return RCTImagePicker.openSelectDialog(config, successCallback, cancelCallback);
  }
};

module.exports = ImagePickerIOS;
}, 364, null, "ImagePickerIOS");
__d(/* Linking */function(global, require, module, exports) {
'use strict';

var NativeEventEmitter = require(52                  ); // 52 = NativeEventEmitter
var NativeModules = require(27             ); // 27 = NativeModules
var Platform = require(26        ); // 26 = Platform

var invariant = require(24                  ); // 24 = fbjs/lib/invariant

var LinkingManager = Platform.OS === 'android' ? NativeModules.IntentAndroid : NativeModules.LinkingManager;

var Linking = function (_NativeEventEmitter) {
  babelHelpers.inherits(Linking, _NativeEventEmitter);

  function Linking() {
    babelHelpers.classCallCheck(this, Linking);
    return babelHelpers.possibleConstructorReturn(this, (Linking.__proto__ || Object.getPrototypeOf(Linking)).call(this, LinkingManager));
  }

  babelHelpers.createClass(Linking, [{
    key: 'addEventListener',
    value: function addEventListener(type, handler) {
      this.addListener(type, handler);
    }
  }, {
    key: 'removeEventListener',
    value: function removeEventListener(type, handler) {
      this.removeListener(type, handler);
    }
  }, {
    key: 'openURL',
    value: function openURL(url) {
      this._validateURL(url);
      return LinkingManager.openURL(url);
    }
  }, {
    key: 'canOpenURL',
    value: function canOpenURL(url) {
      this._validateURL(url);
      return LinkingManager.canOpenURL(url);
    }
  }, {
    key: 'getInitialURL',
    value: function getInitialURL() {
      return LinkingManager.getInitialURL();
    }
  }, {
    key: '_validateURL',
    value: function _validateURL(url) {
      invariant(typeof url === 'string', 'Invalid URL: should be a string. Was: ' + url);
      invariant(url, 'Invalid URL: cannot be empty');
    }
  }]);
  return Linking;
}(NativeEventEmitter);

module.exports = new Linking();
}, 365, null, "Linking");
__d(/* NavigationExperimental */function(global, require, module, exports) {
'use strict';

var NavigationCard = require(367             ); // 367 = NavigationCard
var NavigationCardStack = require(376                  ); // 376 = NavigationCardStack
var NavigationHeader = require(379               ); // 379 = NavigationHeader
var NavigationPropTypes = require(375                  ); // 375 = NavigationPropTypes
var NavigationStateUtils = require(386                   ); // 386 = NavigationStateUtils
var NavigationTransitioner = require(377                     ); // 377 = NavigationTransitioner

var NavigationExperimental = {
  StateUtils: NavigationStateUtils,

  Transitioner: NavigationTransitioner,

  Card: NavigationCard,
  CardStack: NavigationCardStack,
  Header: NavigationHeader,

  PropTypes: NavigationPropTypes
};

module.exports = NavigationExperimental;
}, 366, null, "NavigationExperimental");
__d(/* NavigationCard */function(global, require, module, exports) {
'use strict';

var Animated = require(251       ); // 251 = Animated
var NavigationCardStackPanResponder = require(368                              ); // 368 = NavigationCardStackPanResponder
var NavigationCardStackStyleInterpolator = require(370                                   ); // 370 = NavigationCardStackStyleInterpolator
var NavigationPagerPanResponder = require(371                          ); // 371 = NavigationPagerPanResponder
var NavigationPagerStyleInterpolator = require(372                               ); // 372 = NavigationPagerStyleInterpolator
var NavigationPointerEventsContainer = require(373                               ); // 373 = NavigationPointerEventsContainer
var NavigationPropTypes = require(375                  ); // 375 = NavigationPropTypes
var React = require(76     ); // 76 = React
var StyleSheet = require(99          ); // 99 = StyleSheet

var PropTypes = React.PropTypes;

var NavigationCard = function (_React$Component) {
  babelHelpers.inherits(NavigationCard, _React$Component);

  function NavigationCard() {
    babelHelpers.classCallCheck(this, NavigationCard);
    return babelHelpers.possibleConstructorReturn(this, (NavigationCard.__proto__ || Object.getPrototypeOf(NavigationCard)).apply(this, arguments));
  }

  babelHelpers.createClass(NavigationCard, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          panHandlers = _props.panHandlers,
          pointerEvents = _props.pointerEvents,
          renderScene = _props.renderScene,
          style = _props.style,
          props = babelHelpers.objectWithoutProperties(_props, ['panHandlers', 'pointerEvents', 'renderScene', 'style']);


      var viewStyle = style === undefined ? NavigationCardStackStyleInterpolator.forHorizontal(props) : style;

      var viewPanHandlers = panHandlers === undefined ? NavigationCardStackPanResponder.forHorizontal(babelHelpers.extends({}, props, {
        onNavigateBack: this.props.onNavigateBack
      })) : panHandlers;

      return React.createElement(
        Animated.View,
        babelHelpers.extends({}, viewPanHandlers, {
          pointerEvents: pointerEvents,
          ref: this.props.onComponentRef,
          style: [styles.main, viewStyle] }),
        renderScene(props)
      );
    }
  }]);
  return NavigationCard;
}(React.Component);

NavigationCard.propTypes = babelHelpers.extends({}, NavigationPropTypes.SceneRendererProps, {
  onComponentRef: PropTypes.func.isRequired,
  onNavigateBack: PropTypes.func,
  panHandlers: NavigationPropTypes.panHandlers,
  pointerEvents: PropTypes.string.isRequired,
  renderScene: PropTypes.func.isRequired,
  style: PropTypes.any
});


var styles = StyleSheet.create({
  main: {
    backgroundColor: '#E9E9EF',
    bottom: 0,
    left: 0,
    position: 'absolute',
    right: 0,
    shadowColor: 'black',
    shadowOffset: { width: 0, height: 0 },
    shadowOpacity: 0.4,
    shadowRadius: 10,
    top: 0
  }
});

NavigationCard = NavigationPointerEventsContainer.create(NavigationCard);

NavigationCard.CardStackPanResponder = NavigationCardStackPanResponder;
NavigationCard.CardStackStyleInterpolator = NavigationCardStackStyleInterpolator;
NavigationCard.PagerPanResponder = NavigationPagerPanResponder;
NavigationCard.PagerStyleInterpolator = NavigationPagerStyleInterpolator;

module.exports = NavigationCard;
}, 367, null, "NavigationCard");
__d(/* NavigationCardStackPanResponder */function(global, require, module, exports) {
'use strict';

var Animated = require(251       ); // 251 = Animated
var I18nManager = require(306          ); // 306 = I18nManager
var NavigationAbstractPanResponder = require(369                             ); // 369 = NavigationAbstractPanResponder

var clamp = require(323    ); // 323 = clamp

var emptyFunction = function emptyFunction() {};

var ANIMATION_DURATION = 250;

var POSITION_THRESHOLD = 1 / 3;

var RESPOND_THRESHOLD = 15;

var DISTANCE_THRESHOLD = 100;

var Directions = {
  'HORIZONTAL': 'horizontal',
  'VERTICAL': 'vertical'
};

var NavigationCardStackPanResponder = function (_NavigationAbstractPa) {
  babelHelpers.inherits(NavigationCardStackPanResponder, _NavigationAbstractPa);

  function NavigationCardStackPanResponder(direction, props) {
    babelHelpers.classCallCheck(this, NavigationCardStackPanResponder);

    var _this = babelHelpers.possibleConstructorReturn(this, (NavigationCardStackPanResponder.__proto__ || Object.getPrototypeOf(NavigationCardStackPanResponder)).call(this));

    _this._isResponding = false;
    _this._isVertical = direction === Directions.VERTICAL;
    _this._props = props;
    _this._startValue = 0;

    _this._addNativeListener(_this._props.layout.width);
    _this._addNativeListener(_this._props.layout.height);
    _this._addNativeListener(_this._props.position);
    return _this;
  }

  babelHelpers.createClass(NavigationCardStackPanResponder, [{
    key: 'onMoveShouldSetPanResponder',
    value: function onMoveShouldSetPanResponder(event, gesture) {
      var props = this._props;

      if (props.navigationState.index !== props.scene.index) {
        return false;
      }

      var layout = props.layout;
      var isVertical = this._isVertical;
      var index = props.navigationState.index;
      var currentDragDistance = gesture[isVertical ? 'dy' : 'dx'];
      var currentDragPosition = gesture[isVertical ? 'moveY' : 'moveX'];
      var maxDragDistance = isVertical ? layout.height.__getValue() : layout.width.__getValue();

      var positionMax = isVertical ? props.gestureResponseDistance : props.gestureResponseDistance || 30;

      if (positionMax != null && currentDragPosition > positionMax) {
        return false;
      }

      return Math.abs(currentDragDistance) > RESPOND_THRESHOLD && maxDragDistance > 0 && index > 0;
    }
  }, {
    key: 'onPanResponderGrant',
    value: function onPanResponderGrant() {
      var _this2 = this;

      this._isResponding = false;
      this._props.position.stopAnimation(function (value) {
        _this2._isResponding = true;
        _this2._startValue = value;
      });
    }
  }, {
    key: 'onPanResponderMove',
    value: function onPanResponderMove(event, gesture) {
      if (!this._isResponding) {
        return;
      }

      var props = this._props;
      var layout = props.layout;
      var isVertical = this._isVertical;
      var axis = isVertical ? 'dy' : 'dx';
      var index = props.navigationState.index;
      var distance = isVertical ? layout.height.__getValue() : layout.width.__getValue();
      var currentValue = I18nManager.isRTL && axis === 'dx' ? this._startValue + gesture[axis] / distance : this._startValue - gesture[axis] / distance;

      var value = clamp(index - 1, currentValue, index);

      props.position.setValue(value);
    }
  }, {
    key: 'onPanResponderRelease',
    value: function onPanResponderRelease(event, gesture) {
      var _this3 = this;

      if (!this._isResponding) {
        return;
      }

      this._isResponding = false;

      var props = this._props;
      var isVertical = this._isVertical;
      var axis = isVertical ? 'dy' : 'dx';
      var index = props.navigationState.index;
      var distance = I18nManager.isRTL && axis === 'dx' ? -gesture[axis] : gesture[axis];

      props.position.stopAnimation(function (value) {
        _this3._reset();

        if (!props.onNavigateBack) {
          return;
        }

        if (distance > DISTANCE_THRESHOLD || value <= index - POSITION_THRESHOLD) {
          props.onNavigateBack();
        }
      });
    }
  }, {
    key: 'onPanResponderTerminate',
    value: function onPanResponderTerminate() {
      this._isResponding = false;
      this._reset();
    }
  }, {
    key: '_reset',
    value: function _reset() {
      var props = this._props;
      Animated.timing(props.position, {
        toValue: props.navigationState.index,
        duration: ANIMATION_DURATION,
        useNativeDriver: props.position.__isNative
      }).start();
    }
  }, {
    key: '_addNativeListener',
    value: function _addNativeListener(animatedValue) {
      if (!animatedValue.__isNative) {
        return;
      }

      if (Object.keys(animatedValue._listeners).length === 0) {
        animatedValue.addListener(emptyFunction);
      }
    }
  }]);
  return NavigationCardStackPanResponder;
}(NavigationAbstractPanResponder);

function createPanHandlers(direction, props) {
  var responder = new NavigationCardStackPanResponder(direction, props);
  return responder.panHandlers;
}

function forHorizontal(props) {
  return createPanHandlers(Directions.HORIZONTAL, props);
}

function forVertical(props) {
  return createPanHandlers(Directions.VERTICAL, props);
}

module.exports = {
  ANIMATION_DURATION: ANIMATION_DURATION,
  DISTANCE_THRESHOLD: DISTANCE_THRESHOLD,
  POSITION_THRESHOLD: POSITION_THRESHOLD,
  RESPOND_THRESHOLD: RESPOND_THRESHOLD,

  Directions: Directions,

  forHorizontal: forHorizontal,
  forVertical: forVertical
};
}, 368, null, "NavigationCardStackPanResponder");
__d(/* NavigationAbstractPanResponder */function(global, require, module, exports) {
'use strict';

var PanResponder = require(321           ); // 321 = PanResponder

var invariant = require(24                  ); // 24 = fbjs/lib/invariant

var EmptyPanHandlers = {
  onMoveShouldSetPanResponder: null,
  onPanResponderGrant: null,
  onPanResponderMove: null,
  onPanResponderRelease: null,
  onPanResponderTerminate: null
};

var NavigationAbstractPanResponder = function NavigationAbstractPanResponder() {
  var _this = this;

  babelHelpers.classCallCheck(this, NavigationAbstractPanResponder);

  var config = {};
  Object.keys(EmptyPanHandlers).forEach(function (name) {
    var fn = _this[name];

    invariant(typeof fn === 'function', 'subclass of `NavigationAbstractPanResponder` must implement method %s', name);

    config[name] = fn.bind(_this);
  }, this);

  this.panHandlers = PanResponder.create(config).panHandlers;
};

module.exports = NavigationAbstractPanResponder;
}, 369, null, "NavigationAbstractPanResponder");
__d(/* NavigationCardStackStyleInterpolator */function(global, require, module, exports) {
'use strict';

var I18nManager = require(306          ); // 306 = I18nManager

function forInitial(props) {
  var navigationState = props.navigationState,
      scene = props.scene;


  var focused = navigationState.index === scene.index;
  var opacity = focused ? 1 : 0;

  var translate = focused ? 0 : 1000000;
  return {
    opacity: opacity,
    transform: [{ translateX: translate }, { translateY: translate }]
  };
}

function forHorizontal(props) {
  var layout = props.layout,
      position = props.position,
      scene = props.scene;


  if (!layout.isMeasured) {
    return forInitial(props);
  }

  var index = scene.index;
  var inputRange = [index - 1, index, index + 0.99, index + 1];
  var width = layout.initWidth;
  var outputRange = I18nManager.isRTL ? [-width, 0, 10, 10] : [width, 0, -10, -10];

  var opacity = position.interpolate({
    inputRange: inputRange,
    outputRange: [1, 1, 0.3, 0]
  });

  var scale = position.interpolate({
    inputRange: inputRange,
    outputRange: [1, 1, 0.95, 0.95]
  });

  var translateY = 0;
  var translateX = position.interpolate({
    inputRange: inputRange,
    outputRange: outputRange
  });

  return {
    opacity: opacity,
    transform: [{ scale: scale }, { translateX: translateX }, { translateY: translateY }]
  };
}

function forVertical(props) {
  var layout = props.layout,
      position = props.position,
      scene = props.scene;


  if (!layout.isMeasured) {
    return forInitial(props);
  }

  var index = scene.index;
  var inputRange = [index - 1, index, index + 0.99, index + 1];
  var height = layout.initHeight;

  var opacity = position.interpolate({
    inputRange: inputRange,
    outputRange: [1, 1, 0.3, 0]
  });

  var scale = position.interpolate({
    inputRange: inputRange,
    outputRange: [1, 1, 0.95, 0.95]
  });

  var translateX = 0;
  var translateY = position.interpolate({
    inputRange: inputRange,
    outputRange: [height, 0, -10, -10]
  });

  return {
    opacity: opacity,
    transform: [{ scale: scale }, { translateX: translateX }, { translateY: translateY }]
  };
}

function canUseNativeDriver(isVertical) {

  return true;
}

module.exports = {
  forHorizontal: forHorizontal,
  forVertical: forVertical,
  canUseNativeDriver: canUseNativeDriver
};
}, 370, null, "NavigationCardStackStyleInterpolator");
__d(/* NavigationPagerPanResponder */function(global, require, module, exports) {
'use strict';

var Animated = require(251       ); // 251 = Animated
var NavigationAbstractPanResponder = require(369                             ); // 369 = NavigationAbstractPanResponder
var NavigationCardStackPanResponder = require(368                              ); // 368 = NavigationCardStackPanResponder
var I18nManager = require(306          ); // 306 = I18nManager

var clamp = require(323    ); // 323 = clamp

var ANIMATION_DURATION = NavigationCardStackPanResponder.ANIMATION_DURATION,
    POSITION_THRESHOLD = NavigationCardStackPanResponder.POSITION_THRESHOLD,
    RESPOND_THRESHOLD = NavigationCardStackPanResponder.RESPOND_THRESHOLD,
    Directions = NavigationCardStackPanResponder.Directions;

var DISTANCE_THRESHOLD = 50;

var VELOCITY_THRESHOLD = 1.5;

var NavigationPagerPanResponder = function (_NavigationAbstractPa) {
  babelHelpers.inherits(NavigationPagerPanResponder, _NavigationAbstractPa);

  function NavigationPagerPanResponder(direction, props) {
    babelHelpers.classCallCheck(this, NavigationPagerPanResponder);

    var _this = babelHelpers.possibleConstructorReturn(this, (NavigationPagerPanResponder.__proto__ || Object.getPrototypeOf(NavigationPagerPanResponder)).call(this));

    _this._isResponding = false;
    _this._isVertical = direction === Directions.VERTICAL;
    _this._props = props;
    _this._startValue = 0;
    return _this;
  }

  babelHelpers.createClass(NavigationPagerPanResponder, [{
    key: 'onMoveShouldSetPanResponder',
    value: function onMoveShouldSetPanResponder(event, gesture) {
      var props = this._props;

      if (props.navigationState.index !== props.scene.index) {
        return false;
      }

      var layout = props.layout;
      var isVertical = this._isVertical;
      var axis = isVertical ? 'dy' : 'dx';
      var index = props.navigationState.index;
      var distance = isVertical ? layout.height.__getValue() : layout.width.__getValue();

      return Math.abs(gesture[axis]) > RESPOND_THRESHOLD && distance > 0 && index >= 0;
    }
  }, {
    key: 'onPanResponderGrant',
    value: function onPanResponderGrant() {
      var _this2 = this;

      this._isResponding = false;
      this._props.position.stopAnimation(function (value) {
        _this2._isResponding = true;
        _this2._startValue = value;
      });
    }
  }, {
    key: 'onPanResponderMove',
    value: function onPanResponderMove(event, gesture) {
      if (!this._isResponding) {
        return;
      }

      var _props = this._props,
          layout = _props.layout,
          navigationState = _props.navigationState,
          position = _props.position,
          scenes = _props.scenes;


      var isVertical = this._isVertical;
      var axis = isVertical ? 'dy' : 'dx';
      var index = navigationState.index;
      var distance = isVertical ? layout.height.__getValue() : layout.width.__getValue();
      var currentValue = I18nManager.isRTL && axis === 'dx' ? this._startValue + gesture[axis] / distance : this._startValue - gesture[axis] / distance;

      var prevIndex = Math.max(0, index - 1);

      var nextIndex = Math.min(index + 1, scenes.length - 1);

      var value = clamp(prevIndex, currentValue, nextIndex);

      position.setValue(value);
    }
  }, {
    key: 'onPanResponderRelease',
    value: function onPanResponderRelease(event, gesture) {
      var _this3 = this;

      if (!this._isResponding) {
        return;
      }

      this._isResponding = false;

      var _props2 = this._props,
          navigationState = _props2.navigationState,
          onNavigateBack = _props2.onNavigateBack,
          onNavigateForward = _props2.onNavigateForward,
          position = _props2.position;


      var isVertical = this._isVertical;
      var axis = isVertical ? 'dy' : 'dx';
      var velocityAxis = isVertical ? 'vy' : 'vx';
      var index = navigationState.index;
      var distance = I18nManager.isRTL && axis === 'dx' ? -gesture[axis] : gesture[axis];
      var moveSpeed = I18nManager.isRTL && velocityAxis === 'vx' ? -gesture[velocityAxis] : gesture[velocityAxis];

      position.stopAnimation(function (value) {
        _this3._reset();
        if (distance > DISTANCE_THRESHOLD || value <= index - POSITION_THRESHOLD || moveSpeed > VELOCITY_THRESHOLD) {
          onNavigateBack && onNavigateBack();
          return;
        }

        if (distance < -DISTANCE_THRESHOLD || value >= index + POSITION_THRESHOLD || moveSpeed < -VELOCITY_THRESHOLD) {
          onNavigateForward && onNavigateForward();
        }
      });
    }
  }, {
    key: 'onPanResponderTerminate',
    value: function onPanResponderTerminate() {
      this._isResponding = false;
      this._reset();
    }
  }, {
    key: '_reset',
    value: function _reset() {
      var props = this._props;
      Animated.timing(props.position, {
        toValue: props.navigationState.index,
        duration: ANIMATION_DURATION
      }).start();
    }
  }]);
  return NavigationPagerPanResponder;
}(NavigationAbstractPanResponder);

function createPanHandlers(direction, props) {
  var responder = new NavigationPagerPanResponder(direction, props);
  return responder.panHandlers;
}

function forHorizontal(props) {
  return createPanHandlers(Directions.HORIZONTAL, props);
}

module.exports = {
  forHorizontal: forHorizontal
};
}, 371, null, "NavigationPagerPanResponder");
__d(/* NavigationPagerStyleInterpolator */function(global, require, module, exports) {
'use strict';

var I18nManager = require(306          ); // 306 = I18nManager

function forInitial(props) {
  var navigationState = props.navigationState,
      scene = props.scene;


  var focused = navigationState.index === scene.index;
  var opacity = focused ? 1 : 0;

  var dir = scene.index > navigationState.index ? 1 : -1;
  var translate = focused ? 0 : 1000000 * dir;
  return {
    opacity: opacity,
    transform: [{ translateX: translate }, { translateY: translate }]
  };
}

function forHorizontal(props) {
  var layout = props.layout,
      position = props.position,
      scene = props.scene;


  if (!layout.isMeasured) {
    return forInitial(props);
  }

  var index = scene.index;
  var inputRange = [index - 1, index, index + 1];
  var width = layout.initWidth;
  var outputRange = I18nManager.isRTL ? [-width, 0, width] : [width, 0, -width];

  var translateX = position.interpolate({
    inputRange: inputRange,
    outputRange: outputRange
  });

  return {
    opacity: 1,
    shadowColor: 'transparent',
    shadowRadius: 0,
    transform: [{ scale: 1 }, { translateX: translateX }, { translateY: 0 }]
  };
}

module.exports = {
  forHorizontal: forHorizontal
};
}, 372, null, "NavigationPagerStyleInterpolator");
__d(/* NavigationPointerEventsContainer */function(global, require, module, exports) {
'use strict';

var React = require(76     ); // 76 = React
var NavigationAnimatedValueSubscription = require(374                                  ); // 374 = NavigationAnimatedValueSubscription

var invariant = require(24                  ); // 24 = fbjs/lib/invariant

var MIN_POSITION_OFFSET = 0.01;

function create(Component) {
  var Container = function (_React$Component) {
    babelHelpers.inherits(Container, _React$Component);

    function Container(props, context) {
      babelHelpers.classCallCheck(this, Container);

      var _this = babelHelpers.possibleConstructorReturn(this, (Container.__proto__ || Object.getPrototypeOf(Container)).call(this, props, context));

      _this._pointerEvents = _this._computePointerEvents();
      return _this;
    }

    babelHelpers.createClass(Container, [{
      key: 'componentWillMount',
      value: function componentWillMount() {
        this._onPositionChange = this._onPositionChange.bind(this);
        this._onComponentRef = this._onComponentRef.bind(this);
      }
    }, {
      key: 'componentDidMount',
      value: function componentDidMount() {
        this._bindPosition(this.props);
      }
    }, {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        this._positionListener && this._positionListener.remove();
      }
    }, {
      key: 'componentWillReceiveProps',
      value: function componentWillReceiveProps(nextProps) {
        this._bindPosition(nextProps);
      }
    }, {
      key: 'render',
      value: function render() {
        this._pointerEvents = this._computePointerEvents();
        return React.createElement(Component, babelHelpers.extends({}, this.props, {
          pointerEvents: this._pointerEvents,
          onComponentRef: this._onComponentRef
        }));
      }
    }, {
      key: '_onComponentRef',
      value: function _onComponentRef(component) {
        this._component = component;
        if (component) {
          invariant(typeof component.setNativeProps === 'function', 'component must implement method `setNativeProps`');
        }
      }
    }, {
      key: '_bindPosition',
      value: function _bindPosition(props) {
        this._positionListener && this._positionListener.remove();
        this._positionListener = new NavigationAnimatedValueSubscription(props.position, this._onPositionChange);
      }
    }, {
      key: '_onPositionChange',
      value: function _onPositionChange() {
        if (this._component) {
          var pointerEvents = this._computePointerEvents();
          if (this._pointerEvents !== pointerEvents) {
            this._pointerEvents = pointerEvents;
            this._component.setNativeProps({ pointerEvents: pointerEvents });
          }
        }
      }
    }, {
      key: '_computePointerEvents',
      value: function _computePointerEvents() {
        var _props = this.props,
            navigationState = _props.navigationState,
            position = _props.position,
            scene = _props.scene;


        if (scene.isStale || navigationState.index !== scene.index) {
          return scene.index > navigationState.index ? 'box-only' : 'none';
        }

        var offset = position.__getAnimatedValue() - navigationState.index;
        if (Math.abs(offset) > MIN_POSITION_OFFSET) {
          return 'box-only';
        }

        return 'auto';
      }
    }]);
    return Container;
  }(React.Component);

  return Container;
}

module.exports = {
  create: create
};
}, 373, null, "NavigationPointerEventsContainer");
__d(/* NavigationAnimatedValueSubscription */function(global, require, module, exports) {
'use strict';

var NavigationAnimatedValueSubscription = function () {
  function NavigationAnimatedValueSubscription(value, callback) {
    babelHelpers.classCallCheck(this, NavigationAnimatedValueSubscription);

    this._value = value;
    this._token = value.addListener(callback);
  }

  babelHelpers.createClass(NavigationAnimatedValueSubscription, [{
    key: 'remove',
    value: function remove() {
      this._value.removeListener(this._token);
    }
  }]);
  return NavigationAnimatedValueSubscription;
}();

module.exports = NavigationAnimatedValueSubscription;
}, 374, null, "NavigationAnimatedValueSubscription");
__d(/* NavigationPropTypes */function(global, require, module, exports) {
'use strict';

var Animated = require(251       ); // 251 = Animated
var React = require(76     ); // 76 = React

var PropTypes = React.PropTypes;

var action = PropTypes.shape({
  type: PropTypes.string.isRequired
});

var animatedValue = PropTypes.instanceOf(Animated.Value);

var navigationRoute = PropTypes.shape({
  key: PropTypes.string.isRequired
});

var navigationState = PropTypes.shape({
  index: PropTypes.number.isRequired,
  routes: PropTypes.arrayOf(navigationRoute)
});

var layout = PropTypes.shape({
  height: animatedValue,
  initHeight: PropTypes.number.isRequired,
  initWidth: PropTypes.number.isRequired,
  isMeasured: PropTypes.bool.isRequired,
  width: animatedValue
});

var scene = PropTypes.shape({
  index: PropTypes.number.isRequired,
  isActive: PropTypes.bool.isRequired,
  isStale: PropTypes.bool.isRequired,
  key: PropTypes.string.isRequired,
  route: navigationRoute.isRequired
});

var SceneRendererProps = {
  layout: layout.isRequired,
  navigationState: navigationState.isRequired,
  position: animatedValue.isRequired,
  progress: animatedValue.isRequired,
  scene: scene.isRequired,
  scenes: PropTypes.arrayOf(scene).isRequired
};

var SceneRenderer = PropTypes.shape(SceneRendererProps);

var panHandlers = PropTypes.shape({
  onMoveShouldSetResponder: PropTypes.func.isRequired,
  onMoveShouldSetResponderCapture: PropTypes.func.isRequired,
  onResponderEnd: PropTypes.func.isRequired,
  onResponderGrant: PropTypes.func.isRequired,
  onResponderMove: PropTypes.func.isRequired,
  onResponderReject: PropTypes.func.isRequired,
  onResponderRelease: PropTypes.func.isRequired,
  onResponderStart: PropTypes.func.isRequired,
  onResponderTerminate: PropTypes.func.isRequired,
  onResponderTerminationRequest: PropTypes.func.isRequired,
  onStartShouldSetResponder: PropTypes.func.isRequired,
  onStartShouldSetResponderCapture: PropTypes.func.isRequired
});

function extractSceneRendererProps(props) {
  return {
    layout: props.layout,
    navigationState: props.navigationState,
    position: props.position,
    progress: props.progress,
    scene: props.scene,
    scenes: props.scenes
  };
}

module.exports = {
  extractSceneRendererProps: extractSceneRendererProps,

  SceneRendererProps: SceneRendererProps,

  SceneRenderer: SceneRenderer,
  action: action,
  navigationState: navigationState,
  navigationRoute: navigationRoute,
  panHandlers: panHandlers
};
}, 375, null, "NavigationPropTypes");
__d(/* NavigationCardStack */function(global, require, module, exports) {
'use strict';

var NativeAnimatedModule = require(27             ).NativeAnimatedModule; // 27 = NativeModules
var NavigationCard = require(367             ); // 367 = NavigationCard
var NavigationCardStackPanResponder = require(368                              ); // 368 = NavigationCardStackPanResponder
var NavigationCardStackStyleInterpolator = require(370                                   ); // 370 = NavigationCardStackStyleInterpolator
var NavigationPropTypes = require(375                  ); // 375 = NavigationPropTypes
var NavigationTransitioner = require(377                     ); // 377 = NavigationTransitioner
var React = require(76     ); // 76 = React
var StyleSheet = require(99          ); // 99 = StyleSheet
var View = require(119   ); // 119 = View

var PropTypes = React.PropTypes;
var Directions = NavigationCardStackPanResponder.Directions;

var NavigationCardStack = function (_React$Component) {
  babelHelpers.inherits(NavigationCardStack, _React$Component);

  function NavigationCardStack(props, context) {
    babelHelpers.classCallCheck(this, NavigationCardStack);

    var _this = babelHelpers.possibleConstructorReturn(this, (NavigationCardStack.__proto__ || Object.getPrototypeOf(NavigationCardStack)).call(this, props, context));

    _this._configureTransition = function () {
      var isVertical = _this.props.direction === 'vertical';
      var animationConfig = {};
      if (!!NativeAnimatedModule && !_this.props.enableGestures && NavigationCardStackStyleInterpolator.canUseNativeDriver(isVertical)) {
        animationConfig.useNativeDriver = true;
      }
      return animationConfig;
    };

    return _this;
  }

  babelHelpers.createClass(NavigationCardStack, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this._render = this._render.bind(this);
      this._renderScene = this._renderScene.bind(this);
    }
  }, {
    key: 'render',
    value: function render() {
      return React.createElement(NavigationTransitioner, {
        configureTransition: this._configureTransition,
        navigationState: this.props.navigationState,
        render: this._render,
        style: this.props.style
      });
    }
  }, {
    key: '_render',
    value: function _render(props) {
      var _this2 = this;

      var renderHeader = this.props.renderHeader;


      var header = renderHeader ? React.createElement(
        View,
        null,
        renderHeader(props)
      ) : null;

      var scenes = props.scenes.map(function (scene) {
        return _this2._renderScene(babelHelpers.extends({}, props, {
          scene: scene
        }));
      });

      return React.createElement(
        View,
        { style: styles.container },
        React.createElement(
          View,
          {
            style: [styles.scenes, this.props.scenesStyle] },
          scenes
        ),
        header
      );
    }
  }, {
    key: '_renderScene',
    value: function _renderScene(props) {
      var isVertical = this.props.direction === 'vertical';

      var interpolator = this.props.cardStyleInterpolator || (isVertical ? NavigationCardStackStyleInterpolator.forVertical : NavigationCardStackStyleInterpolator.forHorizontal);

      var style = interpolator(props);

      var panHandlers = null;

      if (this.props.enableGestures) {
        var panHandlersProps = babelHelpers.extends({}, props, {
          onNavigateBack: this.props.onNavigateBack,
          gestureResponseDistance: this.props.gestureResponseDistance
        });
        panHandlers = isVertical ? NavigationCardStackPanResponder.forVertical(panHandlersProps) : NavigationCardStackPanResponder.forHorizontal(panHandlersProps);
      }

      return React.createElement(NavigationCard, babelHelpers.extends({}, props, {
        key: 'card_' + props.scene.key,
        panHandlers: panHandlers,
        renderScene: this.props.renderScene,
        style: [style, this.props.cardStyle]
      }));
    }
  }]);
  return NavigationCardStack;
}(React.Component);

NavigationCardStack.propTypes = {
  cardStyle: PropTypes.any,

  direction: PropTypes.oneOf([Directions.HORIZONTAL, Directions.VERTICAL]),

  gestureResponseDistance: PropTypes.number,

  cardStyleInterpolator: PropTypes.func,

  enableGestures: PropTypes.bool,

  navigationState: NavigationPropTypes.navigationState.isRequired,

  onNavigateBack: PropTypes.func,

  renderHeader: PropTypes.func,

  renderScene: PropTypes.func.isRequired,

  style: View.propTypes.style,

  scenesStyle: View.propTypes.style
};
NavigationCardStack.defaultProps = {
  direction: Directions.HORIZONTAL,
  enableGestures: true
};


var styles = StyleSheet.create({
  container: {
    flex: 1,

    flexDirection: 'column-reverse'
  },
  scenes: {
    flex: 1
  }
});

module.exports = NavigationCardStack;
}, 376, null, "NavigationCardStack");
__d(/* NavigationTransitioner */function(global, require, module, exports) {
'use strict';

var Animated = require(251       ); // 251 = Animated
var Easing = require(261     ); // 261 = Easing
var NavigationPropTypes = require(375                  ); // 375 = NavigationPropTypes
var NavigationScenesReducer = require(378                      ); // 378 = NavigationScenesReducer
var React = require(76     ); // 76 = React
var StyleSheet = require(99          ); // 99 = StyleSheet
var View = require(119   ); // 119 = View

var invariant = require(24                  ); // 24 = fbjs/lib/invariant

var PropTypes = React.PropTypes;


var DefaultTransitionSpec = {
  duration: 250,
  easing: Easing.inOut(Easing.ease),
  timing: Animated.timing
};

var NavigationTransitioner = function (_React$Component) {
  babelHelpers.inherits(NavigationTransitioner, _React$Component);

  function NavigationTransitioner(props, context) {
    babelHelpers.classCallCheck(this, NavigationTransitioner);

    var _this = babelHelpers.possibleConstructorReturn(this, (NavigationTransitioner.__proto__ || Object.getPrototypeOf(NavigationTransitioner)).call(this, props, context));

    var layout = {
      height: new Animated.Value(0),
      initHeight: 0,
      initWidth: 0,
      isMeasured: false,
      width: new Animated.Value(0)
    };

    _this.state = {
      layout: layout,
      position: new Animated.Value(_this.props.navigationState.index),
      progress: new Animated.Value(1),
      scenes: NavigationScenesReducer([], _this.props.navigationState)
    };

    _this._prevTransitionProps = null;
    _this._transitionProps = buildTransitionProps(props, _this.state);
    _this._isMounted = false;
    return _this;
  }

  babelHelpers.createClass(NavigationTransitioner, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this._onLayout = this._onLayout.bind(this);
      this._onTransitionEnd = this._onTransitionEnd.bind(this);
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this._isMounted = true;
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this._isMounted = false;
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var _this2 = this;

      var nextScenes = NavigationScenesReducer(this.state.scenes, nextProps.navigationState, this.props.navigationState);

      if (nextScenes === this.state.scenes) {
        return;
      }

      var nextState = babelHelpers.extends({}, this.state, {
        scenes: nextScenes
      });

      var position = nextState.position,
          progress = nextState.progress;


      progress.setValue(0);

      this._prevTransitionProps = this._transitionProps;
      this._transitionProps = buildTransitionProps(nextProps, nextState);

      var transitionUserSpec = nextProps.configureTransition ? nextProps.configureTransition(this._transitionProps, this._prevTransitionProps) : null;

      var transitionSpec = babelHelpers.extends({}, DefaultTransitionSpec, transitionUserSpec);

      var timing = transitionSpec.timing;

      delete transitionSpec.timing;

      var animations = [timing(progress, babelHelpers.extends({}, transitionSpec, {
        toValue: 1
      }))];

      if (nextProps.navigationState.index !== this.props.navigationState.index) {
        animations.push(timing(position, babelHelpers.extends({}, transitionSpec, {
          toValue: nextProps.navigationState.index
        })));
      }

      this.setState(nextState, function () {
        nextProps.onTransitionStart && nextProps.onTransitionStart(_this2._transitionProps, _this2._prevTransitionProps);
        Animated.parallel(animations).start(_this2._onTransitionEnd);
      });
    }
  }, {
    key: 'render',
    value: function render() {
      return React.createElement(
        View,
        {
          onLayout: this._onLayout,
          style: [styles.main, this.props.style] },
        this.props.render(this._transitionProps, this._prevTransitionProps)
      );
    }
  }, {
    key: '_onLayout',
    value: function _onLayout(event) {
      var _event$nativeEvent$la = event.nativeEvent.layout,
          height = _event$nativeEvent$la.height,
          width = _event$nativeEvent$la.width;

      if (this.state.layout.initWidth === width && this.state.layout.initHeight === height) {
        return;
      }
      var layout = babelHelpers.extends({}, this.state.layout, {
        initHeight: height,
        initWidth: width,
        isMeasured: true
      });

      layout.height.setValue(height);
      layout.width.setValue(width);

      var nextState = babelHelpers.extends({}, this.state, {
        layout: layout
      });

      this._transitionProps = buildTransitionProps(this.props, nextState);
      this.setState(nextState);
    }
  }, {
    key: '_onTransitionEnd',
    value: function _onTransitionEnd() {
      var _this3 = this;

      if (!this._isMounted) {
        return;
      }

      var prevTransitionProps = this._prevTransitionProps;
      this._prevTransitionProps = null;

      var nextState = babelHelpers.extends({}, this.state, {
        scenes: this.state.scenes.filter(isSceneNotStale)
      });

      this._transitionProps = buildTransitionProps(this.props, nextState);

      this.setState(nextState, function () {
        _this3.props.onTransitionEnd && _this3.props.onTransitionEnd(_this3._transitionProps, prevTransitionProps);
      });
    }
  }]);
  return NavigationTransitioner;
}(React.Component);

NavigationTransitioner.propTypes = {
  configureTransition: PropTypes.func,
  navigationState: NavigationPropTypes.navigationState.isRequired,
  onTransitionEnd: PropTypes.func,
  onTransitionStart: PropTypes.func,
  render: PropTypes.func.isRequired
};


function buildTransitionProps(props, state) {
  var navigationState = props.navigationState;
  var layout = state.layout,
      position = state.position,
      progress = state.progress,
      scenes = state.scenes;


  var scene = scenes.find(isSceneActive);

  invariant(scene, 'No active scene when building navigation transition props.');

  return {
    layout: layout,
    navigationState: navigationState,
    position: position,
    progress: progress,
    scenes: scenes,
    scene: scene
  };
}

function isSceneNotStale(scene) {
  return !scene.isStale;
}

function isSceneActive(scene) {
  return scene.isActive;
}

var styles = StyleSheet.create({
  main: {
    flex: 1
  }
});

module.exports = NavigationTransitioner;
}, 377, null, "NavigationTransitioner");
__d(/* NavigationScenesReducer */function(global, require, module, exports) {
'use strict';

var invariant = require(24                  ); // 24 = fbjs/lib/invariant
var shallowEqual = require(160                    ); // 160 = fbjs/lib/shallowEqual

var SCENE_KEY_PREFIX = 'scene_';

function compareKey(one, two) {
  var delta = one.length - two.length;
  if (delta > 0) {
    return 1;
  }
  if (delta < 0) {
    return -1;
  }
  return one > two ? 1 : -1;
}

function compareScenes(one, two) {
  if (one.index > two.index) {
    return 1;
  }
  if (one.index < two.index) {
    return -1;
  }

  return compareKey(one.key, two.key);
}

function areScenesShallowEqual(one, two) {
  return one.key === two.key && one.index === two.index && one.isStale === two.isStale && one.isActive === two.isActive && areRoutesShallowEqual(one.route, two.route);
}

function areRoutesShallowEqual(one, two) {
  if (!one || !two) {
    return one === two;
  }

  if (one.key !== two.key) {
    return false;
  }

  return shallowEqual(one, two);
}

function NavigationScenesReducer(scenes, nextState, prevState) {
  if (prevState === nextState) {
    return scenes;
  }

  var prevScenes = new Map();
  var freshScenes = new Map();
  var staleScenes = new Map();

  scenes.forEach(function (scene) {
    var key = scene.key;

    if (scene.isStale) {
      staleScenes.set(key, scene);
    }
    prevScenes.set(key, scene);
  });

  var nextKeys = new Set();
  nextState.routes.forEach(function (route, index) {
    var key = SCENE_KEY_PREFIX + route.key;
    var scene = {
      index: index,
      isActive: false,
      isStale: false,
      key: key,
      route: route
    };
    invariant(!nextKeys.has(key), 'navigationState.routes[' + index + '].key "' + key + '" conflicts with ' + 'another route!');
    nextKeys.add(key);

    if (staleScenes.has(key)) {
      staleScenes.delete(key);
    }
    freshScenes.set(key, scene);
  });

  if (prevState) {
    prevState.routes.forEach(function (route, index) {
      var key = SCENE_KEY_PREFIX + route.key;
      if (freshScenes.has(key)) {
        return;
      }
      staleScenes.set(key, {
        index: index,
        isActive: false,
        isStale: true,
        key: key,
        route: route
      });
    });
  }

  var nextScenes = [];

  var mergeScene = function mergeScene(nextScene) {
    var key = nextScene.key;

    var prevScene = prevScenes.has(key) ? prevScenes.get(key) : null;
    if (prevScene && areScenesShallowEqual(prevScene, nextScene)) {
      nextScenes.push(prevScene);
    } else {
      nextScenes.push(nextScene);
    }
  };

  staleScenes.forEach(mergeScene);
  freshScenes.forEach(mergeScene);

  nextScenes.sort(compareScenes);

  var activeScenesCount = 0;
  nextScenes.forEach(function (scene, ii) {
    var isActive = !scene.isStale && scene.index === nextState.index;
    if (isActive !== scene.isActive) {
      nextScenes[ii] = babelHelpers.extends({}, scene, {
        isActive: isActive
      });
    }
    if (isActive) {
      activeScenesCount++;
    }
  });

  invariant(activeScenesCount === 1, 'there should always be only one scene active, not %s.', activeScenesCount);

  if (nextScenes.length !== scenes.length) {
    return nextScenes;
  }

  if (nextScenes.some(function (scene, index) {
    return !areScenesShallowEqual(scenes[index], scene);
  })) {
    return nextScenes;
  }

  return scenes;
}

module.exports = NavigationScenesReducer;
}, 378, null, "NavigationScenesReducer");
__d(/* NavigationHeader */function(global, require, module, exports) {
'use strict';

var NavigationHeaderBackButton = require(380                         ); // 380 = NavigationHeaderBackButton
var NavigationHeaderStyleInterpolator = require(382                                ); // 382 = NavigationHeaderStyleInterpolator
var NavigationHeaderTitle = require(383                    ); // 383 = NavigationHeaderTitle
var NavigationPropTypes = require(375                  ); // 375 = NavigationPropTypes
var React = require(76     ); // 76 = React
var ReactComponentWithPureRenderMixin = require(384                                          ); // 384 = react/lib/ReactComponentWithPureRenderMixin
var ReactNative = require(12            ); // 12 = react-native
var TVEventHandler = require(187             ); // 187 = TVEventHandler

var Animated = ReactNative.Animated,
    Platform = ReactNative.Platform,
    StyleSheet = ReactNative.StyleSheet,
    View = ReactNative.View;


var APPBAR_HEIGHT = Platform.OS === 'ios' ? 44 : 56;
var STATUSBAR_HEIGHT = Platform.OS === 'ios' ? 20 : 0;
var PropTypes = React.PropTypes;

var NavigationHeader = function (_React$Component) {
  babelHelpers.inherits(NavigationHeader, _React$Component);

  function NavigationHeader() {
    var _ref;

    var _temp, _this, _ret;

    babelHelpers.classCallCheck(this, NavigationHeader);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = NavigationHeader.__proto__ || Object.getPrototypeOf(NavigationHeader)).call.apply(_ref, [this].concat(args))), _this), _this._renderLeft = function (props) {
      return _this._renderSubView(props, 'left', _this.props.renderLeftComponent, NavigationHeaderStyleInterpolator.forLeft);
    }, _this._renderTitle = function (props) {
      return _this._renderSubView(props, 'title', _this.props.renderTitleComponent, NavigationHeaderStyleInterpolator.forCenter);
    }, _this._renderRight = function (props) {
      return _this._renderSubView(props, 'right', _this.props.renderRightComponent, NavigationHeaderStyleInterpolator.forRight);
    }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
  }

  babelHelpers.createClass(NavigationHeader, [{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps, nextState) {
      return ReactComponentWithPureRenderMixin.shouldComponentUpdate.call(this, nextProps, nextState);
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this._tvEventHandler = new TVEventHandler();
      this._tvEventHandler.enable(this, function (cmp, evt) {
        if (evt && evt.eventType === 'menu') {
          cmp.props.onNavigateBack && cmp.props.onNavigateBack();
        }
      });
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this._tvEventHandler) {
        this._tvEventHandler.disable();
        delete this._tvEventHandler;
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          scenes = _props.scenes,
          style = _props.style,
          viewProps = _props.viewProps;


      var scenesProps = scenes.map(function (scene) {
        var props = NavigationPropTypes.extractSceneRendererProps(_this2.props);
        props.scene = scene;
        return props;
      });

      var barHeight = this.props.statusBarHeight instanceof Animated.Value ? Animated.add(this.props.statusBarHeight, new Animated.Value(APPBAR_HEIGHT)) : APPBAR_HEIGHT + this.props.statusBarHeight;

      return React.createElement(
        Animated.View,
        babelHelpers.extends({ style: [styles.appbar, { height: barHeight }, style]
        }, viewProps),
        scenesProps.map(this._renderLeft, this),
        scenesProps.map(this._renderTitle, this),
        scenesProps.map(this._renderRight, this)
      );
    }
  }, {
    key: '_renderSubView',
    value: function _renderSubView(props, name, renderer, styleInterpolator) {
      var scene = props.scene,
          navigationState = props.navigationState;
      var index = scene.index,
          isStale = scene.isStale,
          key = scene.key;


      var offset = navigationState.index - index;

      if (Math.abs(offset) > 2) {
        return null;
      }

      var subViewProps = babelHelpers.extends({}, props, { onNavigateBack: this.props.onNavigateBack });
      var subView = renderer(subViewProps);
      if (subView === null) {
        return null;
      }

      var pointerEvents = offset !== 0 || isStale ? 'none' : 'box-none';
      return React.createElement(
        Animated.View,
        {
          pointerEvents: pointerEvents,
          key: name + '_' + key,
          style: [styles[name], { marginTop: this.props.statusBarHeight }, styleInterpolator(props)] },
        subView
      );
    }
  }]);
  return NavigationHeader;
}(React.Component);

NavigationHeader.defaultProps = {

  renderTitleComponent: function renderTitleComponent(props) {
    var title = String(props.scene.route.title || '');
    return React.createElement(
      NavigationHeaderTitle,
      null,
      title
    );
  },

  renderLeftComponent: function renderLeftComponent(props) {
    if (props.scene.index === 0 || !props.onNavigateBack) {
      return null;
    }
    return React.createElement(NavigationHeaderBackButton, {
      onPress: props.onNavigateBack
    });
  },

  renderRightComponent: function renderRightComponent(props) {
    return null;
  },

  statusBarHeight: STATUSBAR_HEIGHT
};
NavigationHeader.propTypes = babelHelpers.extends({}, NavigationPropTypes.SceneRendererProps, {
  onNavigateBack: PropTypes.func,
  renderLeftComponent: PropTypes.func,
  renderRightComponent: PropTypes.func,
  renderTitleComponent: PropTypes.func,
  style: View.propTypes.style,
  statusBarHeight: PropTypes.number,
  viewProps: PropTypes.shape(View.propTypes)
});
NavigationHeader.HEIGHT = APPBAR_HEIGHT + STATUSBAR_HEIGHT;
NavigationHeader.Title = NavigationHeaderTitle;
NavigationHeader.BackButton = NavigationHeaderBackButton;


var styles = StyleSheet.create({
  appbar: {
    alignItems: 'center',
    backgroundColor: Platform.OS === 'ios' ? '#EFEFF2' : '#FFF',
    borderBottomColor: 'rgba(0, 0, 0, .15)',
    borderBottomWidth: Platform.OS === 'ios' ? StyleSheet.hairlineWidth : 0,
    elevation: 4,
    flexDirection: 'row',
    justifyContent: 'flex-start'
  },

  title: {
    bottom: 0,
    left: APPBAR_HEIGHT,
    position: 'absolute',
    right: APPBAR_HEIGHT,
    top: 0
  },

  left: {
    bottom: 0,
    left: 0,
    position: 'absolute',
    top: 0
  },

  right: {
    bottom: 0,
    position: 'absolute',
    right: 0,
    top: 0
  }
});

module.exports = NavigationHeader;
}, 379, null, "NavigationHeader");
__d(/* NavigationHeaderBackButton */function(global, require, module, exports) {
'use strict';

var React = require(282    ); // 282 = react
var ReactNative = require(12            ); // 12 = react-native

var I18nManager = ReactNative.I18nManager,
    Image = ReactNative.Image,
    Platform = ReactNative.Platform,
    StyleSheet = ReactNative.StyleSheet,
    TouchableOpacity = ReactNative.TouchableOpacity;


var NavigationHeaderBackButton = function NavigationHeaderBackButton(props) {
  return React.createElement(
    TouchableOpacity,
    { style: [styles.buttonContainer, props.style], onPress: props.onPress },
    React.createElement(Image, { style: [styles.button, props.imageStyle], source: require(381                     ) }) // 381 = ./assets/back-icon.png
  );
};

NavigationHeaderBackButton.propTypes = {
  onPress: React.PropTypes.func.isRequired
};

var styles = StyleSheet.create({
  buttonContainer: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center'
  },
  button: {
    height: 24,
    width: 24,
    margin: Platform.OS === 'ios' ? 10 : 16,
    resizeMode: 'contain',
    transform: [{ scaleX: I18nManager.isRTL ? -1 : 1 }]
  }
});

module.exports = NavigationHeaderBackButton;
}, 380, null, "NavigationHeaderBackButton");
__d(/* react-native/Libraries/CustomComponents/NavigationExperimental/assets/back-icon.png */function(global, require, module, exports) {module.exports = require(172                                         ).registerAsset({"__packager_asset":true,"httpServerLocation":"/assets/node_modules/react-native/Libraries/CustomComponents/NavigationExperimental/assets","width":24,"height":24,"scales":[1,1.5,2,3,4],"hash":"a364dc7a784101f7c8f6791c7b4514ce","name":"back-icon","type":"png"}); // 172 = react-native/Libraries/Image/AssetRegistry
}, 381, null, "react-native/Libraries/CustomComponents/NavigationExperimental/assets/back-icon.png");
__d(/* NavigationHeaderStyleInterpolator */function(global, require, module, exports) {
'use strict';

var I18nManager = require(306          ); // 306 = I18nManager

function forLeft(props) {
  var position = props.position,
      scene = props.scene;
  var index = scene.index;

  return {
    opacity: position.interpolate({
      inputRange: [index - 1, index, index + 1],
      outputRange: [0, 1, 0]
    })
  };
}

function forCenter(props) {
  var position = props.position,
      scene = props.scene;
  var index = scene.index;

  return {
    opacity: position.interpolate({
      inputRange: [index - 1, index, index + 1],
      outputRange: [0, 1, 0]
    }),
    transform: [{
      translateX: position.interpolate({
        inputRange: [index - 1, index + 1],
        outputRange: I18nManager.isRTL ? [-200, 200] : [200, -200]
      })
    }]
  };
}

function forRight(props) {
  var position = props.position,
      scene = props.scene;
  var index = scene.index;

  return {
    opacity: position.interpolate({
      inputRange: [index - 1, index, index + 1],
      outputRange: [0, 1, 0]
    })
  };
}

module.exports = {
  forCenter: forCenter,
  forLeft: forLeft,
  forRight: forRight
};
}, 382, null, "NavigationHeaderStyleInterpolator");
__d(/* NavigationHeaderTitle */function(global, require, module, exports) {
'use strict';

var React = require(282    ); // 282 = react
var ReactNative = require(12            ); // 12 = react-native

var Platform = ReactNative.Platform,
    StyleSheet = ReactNative.StyleSheet,
    View = ReactNative.View,
    Text = ReactNative.Text;


var NavigationHeaderTitle = function NavigationHeaderTitle(_ref) {
  var children = _ref.children,
      style = _ref.style,
      textStyle = _ref.textStyle,
      viewProps = _ref.viewProps;
  return React.createElement(
    View,
    babelHelpers.extends({ style: [styles.title, style] }, viewProps),
    React.createElement(
      Text,
      { style: [styles.titleText, textStyle] },
      children
    )
  );
};

var styles = StyleSheet.create({
  title: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    marginHorizontal: 16
  },

  titleText: {
    flex: 1,
    fontSize: 18,
    fontWeight: '500',
    color: 'rgba(0, 0, 0, .9)',
    textAlign: Platform.OS === 'ios' ? 'center' : 'left'
  }
});

NavigationHeaderTitle.propTypes = {
  children: React.PropTypes.node.isRequired,
  style: View.propTypes.style,
  textStyle: Text.propTypes.style
};

module.exports = NavigationHeaderTitle;
}, 383, null, "NavigationHeaderTitle");
__d(/* react/lib/ReactComponentWithPureRenderMixin.js */function(global, require, module, exports) {

'use strict';

var shallowCompare = require(385               ); // 385 = ./shallowCompare

var ReactComponentWithPureRenderMixin = {
  shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
    return shallowCompare(this, nextProps, nextState);
  }
};

module.exports = ReactComponentWithPureRenderMixin;
}, 384, null, "react/lib/ReactComponentWithPureRenderMixin.js");
__d(/* react/lib/shallowCompare.js */function(global, require, module, exports) {

'use strict';

var shallowEqual = require(160                    ); // 160 = fbjs/lib/shallowEqual

function shallowCompare(instance, nextProps, nextState) {
  return !shallowEqual(instance.props, nextProps) || !shallowEqual(instance.state, nextState);
}

module.exports = shallowCompare;
}, 385, null, "react/lib/shallowCompare.js");
__d(/* NavigationStateUtils */function(global, require, module, exports) {
'use strict';

var invariant = require(24                  ); // 24 = fbjs/lib/invariant

var NavigationStateUtils = {
  get: function get(state, key) {
    return state.routes.find(function (route) {
      return route.key === key;
    }) || null;
  },
  indexOf: function indexOf(state, key) {
    return state.routes.map(function (route) {
      return route.key;
    }).indexOf(key);
  },
  has: function has(state, key) {
    return !!state.routes.some(function (route) {
      return route.key === key;
    });
  },
  push: function push(state, route) {
    invariant(NavigationStateUtils.indexOf(state, route.key) === -1, 'should not push route with duplicated key %s', route.key);

    var routes = state.routes.slice();
    routes.push(route);

    return babelHelpers.extends({}, state, {
      index: routes.length - 1,
      routes: routes
    });
  },
  pop: function pop(state) {
    if (state.index <= 0) {
      return state;
    }
    var routes = state.routes.slice(0, -1);
    return babelHelpers.extends({}, state, {
      index: routes.length - 1,
      routes: routes
    });
  },
  jumpToIndex: function jumpToIndex(state, index) {
    if (index === state.index) {
      return state;
    }

    invariant(!!state.routes[index], 'invalid index %s to jump to', index);

    return babelHelpers.extends({}, state, {
      index: index
    });
  },
  jumpTo: function jumpTo(state, key) {
    var index = NavigationStateUtils.indexOf(state, key);
    return NavigationStateUtils.jumpToIndex(state, index);
  },
  back: function back(state) {
    var index = state.index - 1;
    var route = state.routes[index];
    return route ? NavigationStateUtils.jumpToIndex(state, index) : state;
  },
  forward: function forward(state) {
    var index = state.index + 1;
    var route = state.routes[index];
    return route ? NavigationStateUtils.jumpToIndex(state, index) : state;
  },
  replaceAt: function replaceAt(state, key, route) {
    var index = NavigationStateUtils.indexOf(state, key);
    return NavigationStateUtils.replaceAtIndex(state, index, route);
  },
  replaceAtIndex: function replaceAtIndex(state, index, route) {
    invariant(!!state.routes[index], 'invalid index %s for replacing route %s', index, route.key);

    if (state.routes[index] === route) {
      return state;
    }

    var routes = state.routes.slice();
    routes[index] = route;

    return babelHelpers.extends({}, state, {
      index: index,
      routes: routes
    });
  },
  reset: function reset(state, routes, index) {
    invariant(routes.length && Array.isArray(routes), 'invalid routes to replace');

    var nextIndex = index === undefined ? routes.length - 1 : index;

    if (state.routes.length === routes.length && state.index === nextIndex) {
      var compare = function compare(route, ii) {
        return routes[ii] === route;
      };
      if (state.routes.every(compare)) {
        return state;
      }
    }

    invariant(!!routes[nextIndex], 'invalid index %s to reset', nextIndex);

    return babelHelpers.extends({}, state, {
      index: nextIndex,
      routes: routes
    });
  }
};

module.exports = NavigationStateUtils;
}, 386, null, "NavigationStateUtils");
__d(/* NetInfo */function(global, require, module, exports) {
'use strict';

var Map = require(214  ); // 214 = Map
var NativeEventEmitter = require(52                  ); // 52 = NativeEventEmitter
var NativeModules = require(27             ); // 27 = NativeModules
var Platform = require(26        ); // 26 = Platform
var RCTNetInfo = NativeModules.NetInfo;

var NetInfoEventEmitter = new NativeEventEmitter(RCTNetInfo);

var DEVICE_CONNECTIVITY_EVENT = 'networkStatusDidChange';

var _subscriptions = new Map();

var _isConnected = void 0;
if (Platform.OS === 'ios') {
  _isConnected = function _isConnected(reachability) {
    return reachability !== 'none' && reachability !== 'unknown';
  };
} else if (Platform.OS === 'android') {
  _isConnected = function _isConnected(connectionType) {
    return connectionType !== 'NONE' && connectionType !== 'UNKNOWN';
  };
}

var _isConnectedSubscriptions = new Map();

var NetInfo = {
  addEventListener: function addEventListener(eventName, handler) {
    var listener = NetInfoEventEmitter.addListener(DEVICE_CONNECTIVITY_EVENT, function (appStateData) {
      handler(appStateData.network_info);
    });
    _subscriptions.set(handler, listener);
    return {
      remove: function remove() {
        return NetInfo.removeEventListener(eventName, handler);
      }
    };
  },
  removeEventListener: function removeEventListener(eventName, handler) {
    var listener = _subscriptions.get(handler);
    if (!listener) {
      return;
    }
    listener.remove();
    _subscriptions.delete(handler);
  },
  fetch: function fetch() {
    return RCTNetInfo.getCurrentConnectivity().then(function (resp) {
      return resp.network_info;
    });
  },

  isConnected: {
    addEventListener: function addEventListener(eventName, handler) {
      var listener = function listener(connection) {
        handler(_isConnected(connection));
      };
      _isConnectedSubscriptions.set(handler, listener);
      NetInfo.addEventListener(eventName, listener);
      return {
        remove: function remove() {
          return NetInfo.isConnected.removeEventListener(eventName, handler);
        }
      };
    },
    removeEventListener: function removeEventListener(eventName, handler) {
      var listener = _isConnectedSubscriptions.get(handler);
      NetInfo.removeEventListener(eventName, listener);
      _isConnectedSubscriptions.delete(handler);
    },
    fetch: function fetch() {
      return NetInfo.fetch().then(function (connection) {
        return _isConnected(connection);
      });
    }
  },

  isConnectionExpensive: function isConnectionExpensive() {
    return Platform.OS === 'android' ? RCTNetInfo.isConnectionMetered() : Promise.reject(new Error('Currently not supported on iOS'));
  }
};

module.exports = NetInfo;
}, 387, null, "NetInfo");
__d(/* PermissionsAndroid */function(global, require, module, exports) {
'use strict';

var DialogManagerAndroid = require(27             ).DialogManagerAndroid; // 27 = NativeModules
var Permissions = require(27             ).PermissionsAndroid; // 27 = NativeModules

var PermissionsAndroid = function () {
  function PermissionsAndroid() {
    babelHelpers.classCallCheck(this, PermissionsAndroid);

    this.PERMISSIONS = {
      READ_CALENDAR: 'android.permission.READ_CALENDAR',
      WRITE_CALENDAR: 'android.permission.WRITE_CALENDAR',
      CAMERA: 'android.permission.CAMERA',
      READ_CONTACTS: 'android.permission.READ_CONTACTS',
      WRITE_CONTACTS: 'android.permission.WRITE_CONTACTS',
      GET_ACCOUNTS: 'android.permission.GET_ACCOUNTS',
      ACCESS_FINE_LOCATION: 'android.permission.ACCESS_FINE_LOCATION',
      ACCESS_COARSE_LOCATION: 'android.permission.ACCESS_COARSE_LOCATION',
      RECORD_AUDIO: 'android.permission.RECORD_AUDIO',
      READ_PHONE_STATE: 'android.permission.READ_PHONE_STATE',
      CALL_PHONE: 'android.permission.CALL_PHONE',
      READ_CALL_LOG: 'android.permission.READ_CALL_LOG',
      WRITE_CALL_LOG: 'android.permission.WRITE_CALL_LOG',
      ADD_VOICEMAIL: 'com.android.voicemail.permission.ADD_VOICEMAIL',
      USE_SIP: 'android.permission.USE_SIP',
      PROCESS_OUTGOING_CALLS: 'android.permission.PROCESS_OUTGOING_CALLS',
      BODY_SENSORS: 'android.permission.BODY_SENSORS',
      SEND_SMS: 'android.permission.SEND_SMS',
      RECEIVE_SMS: 'android.permission.RECEIVE_SMS',
      READ_SMS: 'android.permission.READ_SMS',
      RECEIVE_WAP_PUSH: 'android.permission.RECEIVE_WAP_PUSH',
      RECEIVE_MMS: 'android.permission.RECEIVE_MMS',
      READ_EXTERNAL_STORAGE: 'android.permission.READ_EXTERNAL_STORAGE',
      WRITE_EXTERNAL_STORAGE: 'android.permission.WRITE_EXTERNAL_STORAGE'
    };

    this.RESULTS = {
      GRANTED: 'granted',
      DENIED: 'denied',
      NEVER_ASK_AGAIN: 'never_ask_again'
    };
  }

  babelHelpers.createClass(PermissionsAndroid, [{
    key: 'checkPermission',
    value: function checkPermission(permission) {
      console.warn('"PermissionsAndroid.checkPermission" is deprecated. Use "PermissionsAndroid.check" instead');
      return Permissions.checkPermission(permission);
    }
  }, {
    key: 'check',
    value: function check(permission) {
      return Permissions.checkPermission(permission);
    }
  }, {
    key: 'requestPermission',
    value: function requestPermission(permission, rationale) {
      var response;
      return regeneratorRuntime.async(function requestPermission$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              console.warn('"PermissionsAndroid.requestPermission" is deprecated. Use "PermissionsAndroid.request" instead');
              _context.next = 3;
              return regeneratorRuntime.awrap(this.request(permission, rationale));

            case 3:
              response = _context.sent;
              return _context.abrupt('return', response === this.RESULTS.GRANTED);

            case 5:
            case 'end':
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'request',
    value: function request(permission, rationale) {
      var shouldShowRationale;
      return regeneratorRuntime.async(function request$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (!rationale) {
                _context2.next = 6;
                break;
              }

              _context2.next = 3;
              return regeneratorRuntime.awrap(Permissions.shouldShowRequestPermissionRationale(permission));

            case 3:
              shouldShowRationale = _context2.sent;

              if (!shouldShowRationale) {
                _context2.next = 6;
                break;
              }

              return _context2.abrupt('return', new Promise(function (resolve, reject) {
                DialogManagerAndroid.showAlert(rationale, function () {
                  return reject(new Error('Error showing rationale'));
                }, function () {
                  return resolve(Permissions.requestPermission(permission));
                });
              }));

            case 6:
              return _context2.abrupt('return', Permissions.requestPermission(permission));

            case 7:
            case 'end':
              return _context2.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'requestMultiple',
    value: function requestMultiple(permissions) {
      return Permissions.requestMultiplePermissions(permissions);
    }
  }]);
  return PermissionsAndroid;
}();

PermissionsAndroid = new PermissionsAndroid();

module.exports = PermissionsAndroid;
}, 388, null, "PermissionsAndroid");
__d(/* PushNotificationIOS */function(global, require, module, exports) {
'use strict';

var NativeEventEmitter = require(52                  ); // 52 = NativeEventEmitter
var RCTPushNotificationManager = require(27             ).PushNotificationManager; // 27 = NativeModules
var invariant = require(24                  ); // 24 = fbjs/lib/invariant

var PushNotificationEmitter = new NativeEventEmitter(RCTPushNotificationManager);

var _notifHandlers = new Map();

var DEVICE_NOTIF_EVENT = 'remoteNotificationReceived';
var NOTIF_REGISTER_EVENT = 'remoteNotificationsRegistered';
var NOTIF_REGISTRATION_ERROR_EVENT = 'remoteNotificationRegistrationError';
var DEVICE_LOCAL_NOTIF_EVENT = 'localNotificationReceived';

var PushNotificationIOS = function () {
  babelHelpers.createClass(PushNotificationIOS, null, [{
    key: 'presentLocalNotification',
    value: function presentLocalNotification(details) {
      RCTPushNotificationManager.presentLocalNotification(details);
    }
  }, {
    key: 'scheduleLocalNotification',
    value: function scheduleLocalNotification(details) {
      RCTPushNotificationManager.scheduleLocalNotification(details);
    }
  }, {
    key: 'cancelAllLocalNotifications',
    value: function cancelAllLocalNotifications() {
      RCTPushNotificationManager.cancelAllLocalNotifications();
    }
  }, {
    key: 'setApplicationIconBadgeNumber',
    value: function setApplicationIconBadgeNumber(number) {
      RCTPushNotificationManager.setApplicationIconBadgeNumber(number);
    }
  }, {
    key: 'getApplicationIconBadgeNumber',
    value: function getApplicationIconBadgeNumber(callback) {
      RCTPushNotificationManager.getApplicationIconBadgeNumber(callback);
    }
  }, {
    key: 'cancelLocalNotifications',
    value: function cancelLocalNotifications(userInfo) {
      RCTPushNotificationManager.cancelLocalNotifications(userInfo);
    }
  }, {
    key: 'getScheduledLocalNotifications',
    value: function getScheduledLocalNotifications(callback) {
      RCTPushNotificationManager.getScheduledLocalNotifications(callback);
    }
  }, {
    key: 'addEventListener',
    value: function addEventListener(type, handler) {
      invariant(type === 'notification' || type === 'register' || type === 'registrationError' || type === 'localNotification', 'PushNotificationIOS only supports `notification`, `register`, `registrationError`, and `localNotification` events');
      var listener;
      if (type === 'notification') {
        listener = PushNotificationEmitter.addListener(DEVICE_NOTIF_EVENT, function (notifData) {
          handler(new PushNotificationIOS(notifData));
        });
      } else if (type === 'localNotification') {
        listener = PushNotificationEmitter.addListener(DEVICE_LOCAL_NOTIF_EVENT, function (notifData) {
          handler(new PushNotificationIOS(notifData));
        });
      } else if (type === 'register') {
        listener = PushNotificationEmitter.addListener(NOTIF_REGISTER_EVENT, function (registrationInfo) {
          handler(registrationInfo.deviceToken);
        });
      } else if (type === 'registrationError') {
        listener = PushNotificationEmitter.addListener(NOTIF_REGISTRATION_ERROR_EVENT, function (errorInfo) {
          handler(errorInfo);
        });
      }
      _notifHandlers.set(type, listener);
    }
  }, {
    key: 'removeEventListener',
    value: function removeEventListener(type, handler) {
      invariant(type === 'notification' || type === 'register' || type === 'registrationError' || type === 'localNotification', 'PushNotificationIOS only supports `notification`, `register`, `registrationError`, and `localNotification` events');
      var listener = _notifHandlers.get(type);
      if (!listener) {
        return;
      }
      listener.remove();
      _notifHandlers.delete(type);
    }
  }, {
    key: 'requestPermissions',
    value: function requestPermissions(permissions) {
      var requestedPermissions = {};
      if (permissions) {
        requestedPermissions = {
          alert: !!permissions.alert,
          badge: !!permissions.badge,
          sound: !!permissions.sound
        };
      } else {
        requestedPermissions = {
          alert: true,
          badge: true,
          sound: true
        };
      }
      return RCTPushNotificationManager.requestPermissions(requestedPermissions);
    }
  }, {
    key: 'abandonPermissions',
    value: function abandonPermissions() {
      RCTPushNotificationManager.abandonPermissions();
    }
  }, {
    key: 'checkPermissions',
    value: function checkPermissions(callback) {
      invariant(typeof callback === 'function', 'Must provide a valid callback');
      RCTPushNotificationManager.checkPermissions(callback);
    }
  }, {
    key: 'getInitialNotification',
    value: function getInitialNotification() {
      return RCTPushNotificationManager.getInitialNotification().then(function (notification) {
        return notification && new PushNotificationIOS(notification);
      });
    }
  }]);

  function PushNotificationIOS(nativeNotif) {
    var _this = this;

    babelHelpers.classCallCheck(this, PushNotificationIOS);

    this._data = {};
    this._remoteNotificationCompleteCalllbackCalled = false;
    this._isRemote = nativeNotif.remote;
    if (this._isRemote) {
      this._notificationId = nativeNotif.notificationId;
    }

    if (nativeNotif.remote) {
      Object.keys(nativeNotif).forEach(function (notifKey) {
        var notifVal = nativeNotif[notifKey];
        if (notifKey === 'aps') {
          _this._alert = notifVal.alert;
          _this._sound = notifVal.sound;
          _this._badgeCount = notifVal.badge;
        } else {
          _this._data[notifKey] = notifVal;
        }
      });
    } else {
      this._badgeCount = nativeNotif.applicationIconBadgeNumber;
      this._sound = nativeNotif.soundName;
      this._alert = nativeNotif.alertBody;
      this._data = nativeNotif.userInfo;
    }
  }

  babelHelpers.createClass(PushNotificationIOS, [{
    key: 'finish',
    value: function finish(fetchResult) {
      if (!this._isRemote || !this._notificationId || this._remoteNotificationCompleteCalllbackCalled) {
        return;
      }
      this._remoteNotificationCompleteCalllbackCalled = true;

      RCTPushNotificationManager.onFinishRemoteNotification(this._notificationId, fetchResult);
    }
  }, {
    key: 'getMessage',
    value: function getMessage() {
      return this._alert;
    }
  }, {
    key: 'getSound',
    value: function getSound() {
      return this._sound;
    }
  }, {
    key: 'getAlert',
    value: function getAlert() {
      return this._alert;
    }
  }, {
    key: 'getBadgeCount',
    value: function getBadgeCount() {
      return this._badgeCount;
    }
  }, {
    key: 'getData',
    value: function getData() {
      return this._data;
    }
  }]);
  return PushNotificationIOS;
}();

PushNotificationIOS.FetchResult = {
  NewData: 'UIBackgroundFetchResultNewData',
  NoData: 'UIBackgroundFetchResultNoData',
  ResultFailed: 'UIBackgroundFetchResultFailed'
};


module.exports = PushNotificationIOS;
}, 389, null, "PushNotificationIOS");
__d(/* Settings */function(global, require, module, exports) {
'use strict';

var Settings = {
  get: function get(key) {
    console.warn('Settings is not yet supported on Android');
    return null;
  },
  set: function set(settings) {
    console.warn('Settings is not yet supported on Android');
  },
  watchKeys: function watchKeys(keys, callback) {
    console.warn('Settings is not yet supported on Android');
    return -1;
  },
  clearWatch: function clearWatch(watchId) {
    console.warn('Settings is not yet supported on Android');
  }
};

module.exports = Settings;
}, 390, null, "Settings");
__d(/* Share */function(global, require, module, exports) {
'use strict';

var Platform = require(26        ); // 26 = Platform

var _require = require(27             ), // 27 = NativeModules
    ActionSheetManager = _require.ActionSheetManager,
    ShareModule = _require.ShareModule;

var invariant = require(24                  ); // 24 = fbjs/lib/invariant
var processColor = require(114           ); // 114 = processColor

var Share = function () {
  function Share() {
    babelHelpers.classCallCheck(this, Share);
  }

  babelHelpers.createClass(Share, null, [{
    key: 'share',
    value: function share(content) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      invariant(typeof content === 'object' && content !== null, 'Content to share must be a valid object');
      invariant(typeof content.url === 'string' || typeof content.message === 'string', 'At least one of URL and message is required');
      invariant(typeof options === 'object' && options !== null, 'Options must be a valid object');

      if (Platform.OS === 'android') {
        invariant(!content.title || typeof content.title === 'string', 'Invalid title: title should be a string.');
        return ShareModule.share(content, options.dialogTitle);
      } else if (Platform.OS === 'ios') {
        return new Promise(function (resolve, reject) {
          ActionSheetManager.showShareActionSheetWithOptions(babelHelpers.extends({}, content, options, { tintColor: processColor(options.tintColor) }), function (error) {
            return reject(error);
          }, function (success, activityType) {
            if (success) {
              resolve({
                'action': 'sharedAction',
                'activityType': activityType
              });
            } else {
              resolve({
                'action': 'dismissedAction'
              });
            }
          });
        });
      } else {
        return Promise.reject(new Error('Unsupported platform'));
      }
    }
  }, {
    key: 'sharedAction',
    get: function get() {
      return 'sharedAction';
    }
  }, {
    key: 'dismissedAction',
    get: function get() {
      return 'dismissedAction';
    }
  }]);
  return Share;
}();

module.exports = Share;
}, 391, null, "Share");
__d(/* TimePickerAndroid */function(global, require, module, exports) {
'use strict';

var TimePickerModule = require(27             ).TimePickerAndroid; // 27 = NativeModules

var TimePickerAndroid = function () {
  function TimePickerAndroid() {
    babelHelpers.classCallCheck(this, TimePickerAndroid);
  }

  babelHelpers.createClass(TimePickerAndroid, null, [{
    key: 'open',
    value: function open(options) {
      return regeneratorRuntime.async(function open$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt('return', TimePickerModule.open(options));

            case 1:
            case 'end':
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'timeSetAction',
    get: function get() {
      return 'timeSetAction';
    }
  }, {
    key: 'dismissedAction',
    get: function get() {
      return 'dismissedAction';
    }
  }]);
  return TimePickerAndroid;
}();

module.exports = TimePickerAndroid;
}, 392, null, "TimePickerAndroid");
__d(/* Vibration */function(global, require, module, exports) {
'use strict';

var RCTVibration = require(27             ).Vibration; // 27 = NativeModules
var Platform = require(26        ); // 26 = Platform

var _vibrating = false;
var _id = 0;

function vibrateByPattern(pattern) {
  var repeat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  if (_vibrating) {
    return;
  }
  _vibrating = true;
  if (pattern[0] === 0) {
    RCTVibration.vibrate();
    pattern = pattern.slice(1);
  }
  if (pattern.length === 0) {
    _vibrating = false;
    return;
  }
  setTimeout(function () {
    return vibrateScheduler(++_id, pattern, repeat, 1);
  }, pattern[0]);
}

function vibrateScheduler(id, pattern, repeat, nextIndex) {
  if (!_vibrating || id !== _id) {
    return;
  }
  RCTVibration.vibrate();
  if (nextIndex >= pattern.length) {
    if (repeat) {
      nextIndex = 0;
    } else {
      _vibrating = false;
      return;
    }
  }
  setTimeout(function () {
    return vibrateScheduler(id, pattern, repeat, nextIndex + 1);
  }, pattern[nextIndex]);
}

var Vibration = {
  vibrate: function vibrate() {
    var pattern = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 400;
    var repeat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    if (Platform.OS === 'android') {
      if (typeof pattern === 'number') {
        RCTVibration.vibrate(pattern);
      } else if (Array.isArray(pattern)) {
        RCTVibration.vibrateByPattern(pattern, repeat ? 0 : -1);
      } else {
        throw new Error('Vibration pattern should be a number or array');
      }
    } else {
      if (_vibrating) {
        return;
      }
      if (typeof pattern === 'number') {
        RCTVibration.vibrate();
      } else if (Array.isArray(pattern)) {
        vibrateByPattern(pattern, repeat);
      } else {
        throw new Error('Vibration pattern should be a number or array');
      }
    }
  },

  cancel: function cancel() {
    if (Platform.OS === 'ios') {
      _vibrating = false;
    } else {
      RCTVibration.cancel();
    }
  }
};

module.exports = Vibration;
}, 393, null, "Vibration");
__d(/* VibrationIOS */function(global, require, module, exports) {
'use strict';

var warning = require(13                ); // 13 = fbjs/lib/warning

var VibrationIOS = {
  vibrate: function vibrate() {
    warning('VibrationIOS is not supported on this platform!');
  }
};

module.exports = VibrationIOS;
}, 394, null, "VibrationIOS");
__d(/* react/lib/LinkedStateMixin.js */function(global, require, module, exports) {

'use strict';

var ReactLink = require(396          ); // 396 = ./ReactLink
var ReactStateSetters = require(397                  ); // 397 = ./ReactStateSetters

var LinkedStateMixin = {
  linkState: function linkState(key) {
    return new ReactLink(this.state[key], ReactStateSetters.createStateKeySetter(this, key));
  }
};

module.exports = LinkedStateMixin;
}, 395, null, "react/lib/LinkedStateMixin.js");
__d(/* react/lib/ReactLink.js */function(global, require, module, exports) {

'use strict';

var React = require(77       ); // 77 = ./React

function ReactLink(value, requestChange) {
  this.value = value;
  this.requestChange = requestChange;
}

function createLinkTypeChecker(linkType) {
  var shapes = {
    value: linkType === undefined ? React.PropTypes.any.isRequired : linkType.isRequired,
    requestChange: React.PropTypes.func.isRequired
  };
  return React.PropTypes.shape(shapes);
}

ReactLink.PropTypes = {
  link: createLinkTypeChecker
};

module.exports = ReactLink;
}, 396, null, "react/lib/ReactLink.js");
__d(/* react/lib/ReactStateSetters.js */function(global, require, module, exports) {

'use strict';

var ReactStateSetters = {
  createStateSetter: function createStateSetter(component, funcReturningState) {
    return function (a, b, c, d, e, f) {
      var partialState = funcReturningState.call(component, a, b, c, d, e, f);
      if (partialState) {
        component.setState(partialState);
      }
    };
  },

  createStateKeySetter: function createStateKeySetter(component, key) {
    var cache = component.__keySetters || (component.__keySetters = {});
    return cache[key] || (cache[key] = _createStateKeySetter(component, key));
  }
};

function _createStateKeySetter(component, key) {
  var partialState = {};
  return function stateKeySetter(value) {
    partialState[key] = value;
    component.setState(partialState);
  };
}

ReactStateSetters.Mixin = {
  createStateSetter: function createStateSetter(funcReturningState) {
    return ReactStateSetters.createStateSetter(this, funcReturningState);
  },

  createStateKeySetter: function createStateKeySetter(key) {
    return ReactStateSetters.createStateKeySetter(this, key);
  }
};

module.exports = ReactStateSetters;
}, 397, null, "react/lib/ReactStateSetters.js");
__d(/* react/lib/ReactFragment.js */function(global, require, module, exports) {

'use strict';

var _prodInvariant = require(34                    ); // 34 = ./reactProdInvariant

var ReactChildren = require(79               ); // 79 = ./ReactChildren
var ReactElement = require(81              ); // 81 = ./ReactElement

var emptyFunction = require(14                      ); // 14 = fbjs/lib/emptyFunction
var invariant = require(24                  ); // 24 = fbjs/lib/invariant
var warning = require(13                ); // 13 = fbjs/lib/warning

var numericPropertyRegex = /^\d+$/;

var warnedAboutNumeric = false;

var ReactFragment = {
  create: function create(object) {
    if (typeof object !== 'object' || !object || Array.isArray(object)) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'React.addons.createFragment only accepts a single object. Got: %s', object) : void 0;
      return object;
    }
    if (ReactElement.isValidElement(object)) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'React.addons.createFragment does not accept a ReactElement ' + 'without a wrapper object.') : void 0;
      return object;
    }

    !(object.nodeType !== 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React.addons.createFragment(...): Encountered an invalid child; DOM elements are not valid children of React components.') : _prodInvariant('0') : void 0;

    var result = [];

    for (var key in object) {
      if (process.env.NODE_ENV !== 'production') {
        if (!warnedAboutNumeric && numericPropertyRegex.test(key)) {
          process.env.NODE_ENV !== 'production' ? warning(false, 'React.addons.createFragment(...): Child objects should have ' + 'non-numeric keys so ordering is preserved.') : void 0;
          warnedAboutNumeric = true;
        }
      }
      ReactChildren.mapIntoWithKeyPrefixInternal(object[key], result, key, emptyFunction.thatReturnsArgument);
    }

    return result;
  }
};

module.exports = ReactFragment;
}, 398, null, "react/lib/ReactFragment.js");
__d(/* react/lib/update.js */function(global, require, module, exports) {

'use strict';

var _prodInvariant = require(34                    ), // 34 = ./reactProdInvariant
    _assign = require(78             ); // 78 = object-assign

var invariant = require(24                  ); // 24 = fbjs/lib/invariant
var hasOwnProperty = {}.hasOwnProperty;

function shallowCopy(x) {
  if (Array.isArray(x)) {
    return x.concat();
  } else if (x && typeof x === 'object') {
    return _assign(new x.constructor(), x);
  } else {
    return x;
  }
}

var COMMAND_PUSH = '$push';
var COMMAND_UNSHIFT = '$unshift';
var COMMAND_SPLICE = '$splice';
var COMMAND_SET = '$set';
var COMMAND_MERGE = '$merge';
var COMMAND_APPLY = '$apply';

var ALL_COMMANDS_LIST = [COMMAND_PUSH, COMMAND_UNSHIFT, COMMAND_SPLICE, COMMAND_SET, COMMAND_MERGE, COMMAND_APPLY];

var ALL_COMMANDS_SET = {};

ALL_COMMANDS_LIST.forEach(function (command) {
  ALL_COMMANDS_SET[command] = true;
});

function invariantArrayCase(value, spec, command) {
  !Array.isArray(value) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'update(): expected target of %s to be an array; got %s.', command, value) : _prodInvariant('1', command, value) : void 0;
  var specValue = spec[command];
  !Array.isArray(specValue) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'update(): expected spec of %s to be an array; got %s. Did you forget to wrap your parameter in an array?', command, specValue) : _prodInvariant('2', command, specValue) : void 0;
}

function update(value, spec) {
  !(typeof spec === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'update(): You provided a key path to update() that did not contain one of %s. Did you forget to include {%s: ...}?', ALL_COMMANDS_LIST.join(', '), COMMAND_SET) : _prodInvariant('3', ALL_COMMANDS_LIST.join(', '), COMMAND_SET) : void 0;

  if (hasOwnProperty.call(spec, COMMAND_SET)) {
    !(Object.keys(spec).length === 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot have more than one key in an object with %s', COMMAND_SET) : _prodInvariant('4', COMMAND_SET) : void 0;

    return spec[COMMAND_SET];
  }

  var nextValue = shallowCopy(value);

  if (hasOwnProperty.call(spec, COMMAND_MERGE)) {
    var mergeObj = spec[COMMAND_MERGE];
    !(mergeObj && typeof mergeObj === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'update(): %s expects a spec of type \'object\'; got %s', COMMAND_MERGE, mergeObj) : _prodInvariant('5', COMMAND_MERGE, mergeObj) : void 0;
    !(nextValue && typeof nextValue === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'update(): %s expects a target of type \'object\'; got %s', COMMAND_MERGE, nextValue) : _prodInvariant('6', COMMAND_MERGE, nextValue) : void 0;
    _assign(nextValue, spec[COMMAND_MERGE]);
  }

  if (hasOwnProperty.call(spec, COMMAND_PUSH)) {
    invariantArrayCase(value, spec, COMMAND_PUSH);
    spec[COMMAND_PUSH].forEach(function (item) {
      nextValue.push(item);
    });
  }

  if (hasOwnProperty.call(spec, COMMAND_UNSHIFT)) {
    invariantArrayCase(value, spec, COMMAND_UNSHIFT);
    spec[COMMAND_UNSHIFT].forEach(function (item) {
      nextValue.unshift(item);
    });
  }

  if (hasOwnProperty.call(spec, COMMAND_SPLICE)) {
    !Array.isArray(value) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s target to be an array; got %s', COMMAND_SPLICE, value) : _prodInvariant('7', COMMAND_SPLICE, value) : void 0;
    !Array.isArray(spec[COMMAND_SPLICE]) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'update(): expected spec of %s to be an array of arrays; got %s. Did you forget to wrap your parameters in an array?', COMMAND_SPLICE, spec[COMMAND_SPLICE]) : _prodInvariant('8', COMMAND_SPLICE, spec[COMMAND_SPLICE]) : void 0;
    spec[COMMAND_SPLICE].forEach(function (args) {
      !Array.isArray(args) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'update(): expected spec of %s to be an array of arrays; got %s. Did you forget to wrap your parameters in an array?', COMMAND_SPLICE, spec[COMMAND_SPLICE]) : _prodInvariant('8', COMMAND_SPLICE, spec[COMMAND_SPLICE]) : void 0;
      nextValue.splice.apply(nextValue, args);
    });
  }

  if (hasOwnProperty.call(spec, COMMAND_APPLY)) {
    !(typeof spec[COMMAND_APPLY] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'update(): expected spec of %s to be a function; got %s.', COMMAND_APPLY, spec[COMMAND_APPLY]) : _prodInvariant('9', COMMAND_APPLY, spec[COMMAND_APPLY]) : void 0;
    nextValue = spec[COMMAND_APPLY](nextValue);
  }

  for (var k in spec) {
    if (!(ALL_COMMANDS_SET.hasOwnProperty(k) && ALL_COMMANDS_SET[k])) {
      nextValue[k] = update(value[k], spec[k]);
    }
  }

  return nextValue;
}

module.exports = update;
}, 399, null, "react/lib/update.js");
__d(/* throwOnWrongReactAPI */function(global, require, module, exports) {

'use strict';

function throwOnWrongReactAPI(key) {
  throw new Error('Seems you\'re trying to access \'ReactNative.' + key + '\' from the \'react-native\' package. Perhaps you meant to access \'React.' + key + '\' from the \'react\' package instead?\n\nFor example, instead of:\n\n  import React, { Component, View } from \'react-native\';\n\nYou should now do:\n\n  import React, { Component } from \'react\';\n  import { View } from \'react-native\';\n\nCheck the release notes on how to upgrade your code - https://github.com/facebook/react-native/releases/tag/v0.25.1\n');
}

module.exports = throwOnWrongReactAPI;
}, 400, null, "throwOnWrongReactAPI");
__d(/* Runner_SNA/src/App.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
	value: true
});

var _react = require(282    ); // 282 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactRedux = require(402          ); // 402 = react-redux

var _redux = require(413    ); // 413 = redux

var _reduxThunk = require(439          ); // 439 = redux-thunk

var _reduxThunk2 = babelHelpers.interopRequireDefault(_reduxThunk);

var _reactNative = require(12            ); // 12 = react-native

var _firebase = require(440       ); // 440 = firebase

var _firebase2 = babelHelpers.interopRequireDefault(_firebase);

var _reducers = require(445         ); // 445 = ./reducers

var _reducers2 = babelHelpers.interopRequireDefault(_reducers);

var _config = require(449        ); // 449 = ../config

var _LoginForm = require(450                     ); // 450 = ./components/LoginForm

var _LoginForm2 = babelHelpers.interopRequireDefault(_LoginForm);

var _Router = require(557       ); // 557 = ./Router

var _Router2 = babelHelpers.interopRequireDefault(_Router);

var App = function (_Component) {
	babelHelpers.inherits(App, _Component);

	function App() {
		babelHelpers.classCallCheck(this, App);
		return babelHelpers.possibleConstructorReturn(this, (App.__proto__ || Object.getPrototypeOf(App)).apply(this, arguments));
	}

	babelHelpers.createClass(App, [{
		key: 'componentWillMount',
		value: function componentWillMount() {

			_firebase2.default.initializeApp(_config.config);
		}
	}, {
		key: 'render',
		value: function render() {

			var store = (0, _redux.createStore)(_reducers2.default, {}, (0, _redux.applyMiddleware)(_reduxThunk2.default));
			return _react2.default.createElement(
				_reactRedux.Provider,
				{ store: store },
				_react2.default.createElement(_Router2.default, null)
			);
		}
	}]);
	return App;
}(_react.Component);

exports.default = App;
}, 401, null, "Runner_SNA/src/App.js");
__d(/* react-redux/lib/index.js */function(global, require, module, exports) {'use strict';

exports.__esModule = true;
exports.connect = exports.connectAdvanced = exports.Provider = undefined;

var _Provider = require(403                    ); // 403 = ./components/Provider

var _Provider2 = _interopRequireDefault(_Provider);

var _connectAdvanced = require(406                           ); // 406 = ./components/connectAdvanced

var _connectAdvanced2 = _interopRequireDefault(_connectAdvanced);

var _connect = require(410                ); // 410 = ./connect/connect

var _connect2 = _interopRequireDefault(_connect);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

exports.Provider = _Provider2.default;
exports.connectAdvanced = _connectAdvanced2.default;
exports.connect = _connect2.default;
}, 402, null, "react-redux/lib/index.js");
__d(/* react-redux/lib/components/Provider.js */function(global, require, module, exports) {'use strict';

exports.__esModule = true;
exports.default = undefined;

var _react = require(282    ); // 282 = react

var _PropTypes = require(404                 ); // 404 = ../utils/PropTypes

var _warning = require(405               ); // 405 = ../utils/warning

var _warning2 = _interopRequireDefault(_warning);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var didWarnAboutReceivingStore = false;
function warnAboutReceivingStore() {
  if (didWarnAboutReceivingStore) {
    return;
  }
  didWarnAboutReceivingStore = true;

  (0, _warning2.default)('<Provider> does not support changing `store` on the fly. ' + 'It is most likely that you see this error because you updated to ' + 'Redux 2.x and React Redux 2.x which no longer hot reload reducers ' + 'automatically. See https://github.com/reactjs/react-redux/releases/' + 'tag/v2.0.0 for the migration instructions.');
}

var Provider = function (_Component) {
  _inherits(Provider, _Component);

  Provider.prototype.getChildContext = function getChildContext() {
    return { store: this.store, storeSubscription: null };
  };

  function Provider(props, context) {
    _classCallCheck(this, Provider);

    var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));

    _this.store = props.store;
    return _this;
  }

  Provider.prototype.render = function render() {
    return _react.Children.only(this.props.children);
  };

  return Provider;
}(_react.Component);

exports.default = Provider;

if (process.env.NODE_ENV !== 'production') {
  Provider.prototype.componentWillReceiveProps = function (nextProps) {
    var store = this.store;
    var nextStore = nextProps.store;

    if (store !== nextStore) {
      warnAboutReceivingStore();
    }
  };
}

Provider.propTypes = {
  store: _PropTypes.storeShape.isRequired,
  children: _react.PropTypes.element.isRequired
};
Provider.childContextTypes = {
  store: _PropTypes.storeShape.isRequired,
  storeSubscription: _PropTypes.subscriptionShape
};
Provider.displayName = 'Provider';
}, 403, null, "react-redux/lib/components/Provider.js");
__d(/* react-redux/lib/utils/PropTypes.js */function(global, require, module, exports) {'use strict';

exports.__esModule = true;
exports.storeShape = exports.subscriptionShape = undefined;

var _react = require(282    ); // 282 = react

var subscriptionShape = exports.subscriptionShape = _react.PropTypes.shape({
  trySubscribe: _react.PropTypes.func.isRequired,
  tryUnsubscribe: _react.PropTypes.func.isRequired,
  notifyNestedSubs: _react.PropTypes.func.isRequired,
  isSubscribed: _react.PropTypes.func.isRequired
});

var storeShape = exports.storeShape = _react.PropTypes.shape({
  subscribe: _react.PropTypes.func.isRequired,
  dispatch: _react.PropTypes.func.isRequired,
  getState: _react.PropTypes.func.isRequired
});
}, 404, null, "react-redux/lib/utils/PropTypes.js");
__d(/* react-redux/lib/utils/warning.js */function(global, require, module, exports) {'use strict';

exports.__esModule = true;
exports.default = warning;

function warning(message) {
  if (typeof console !== 'undefined' && typeof console.error === 'function') {
    console.error(message);
  }

  try {
    throw new Error(message);
  } catch (e) {}
}
}, 405, null, "react-redux/lib/utils/warning.js");
__d(/* react-redux/lib/components/connectAdvanced.js */function(global, require, module, exports) {'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

exports.default = connectAdvanced;

var _hoistNonReactStatics = require(407                      ); // 407 = hoist-non-react-statics

var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);

var _invariant = require(408        ); // 408 = invariant

var _invariant2 = _interopRequireDefault(_invariant);

var _react = require(282    ); // 282 = react

var _Subscription = require(409                    ); // 409 = ../utils/Subscription

var _Subscription2 = _interopRequireDefault(_Subscription);

var _PropTypes = require(404                 ); // 404 = ../utils/PropTypes

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

function _objectWithoutProperties(obj, keys) {
  var target = {};for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
  }return target;
}

var hotReloadingVersion = 0;
var dummyState = {};
function noop() {}
function makeSelectorStateful(sourceSelector, store) {
  var selector = {
    run: function runComponentSelector(props) {
      try {
        var nextProps = sourceSelector(store.getState(), props);
        if (nextProps !== selector.props || selector.error) {
          selector.shouldComponentUpdate = true;
          selector.props = nextProps;
          selector.error = null;
        }
      } catch (error) {
        selector.shouldComponentUpdate = true;
        selector.error = error;
      }
    }
  };

  return selector;
}

function connectAdvanced(selectorFactory) {
  var _contextTypes, _childContextTypes;

  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$getDisplayName = _ref.getDisplayName,
      getDisplayName = _ref$getDisplayName === undefined ? function (name) {
    return 'ConnectAdvanced(' + name + ')';
  } : _ref$getDisplayName,
      _ref$methodName = _ref.methodName,
      methodName = _ref$methodName === undefined ? 'connectAdvanced' : _ref$methodName,
      _ref$renderCountProp = _ref.renderCountProp,
      renderCountProp = _ref$renderCountProp === undefined ? undefined : _ref$renderCountProp,
      _ref$shouldHandleStat = _ref.shouldHandleStateChanges,
      shouldHandleStateChanges = _ref$shouldHandleStat === undefined ? true : _ref$shouldHandleStat,
      _ref$storeKey = _ref.storeKey,
      storeKey = _ref$storeKey === undefined ? 'store' : _ref$storeKey,
      _ref$withRef = _ref.withRef,
      withRef = _ref$withRef === undefined ? false : _ref$withRef,
      connectOptions = _objectWithoutProperties(_ref, ['getDisplayName', 'methodName', 'renderCountProp', 'shouldHandleStateChanges', 'storeKey', 'withRef']);

  var subscriptionKey = storeKey + 'Subscription';
  var version = hotReloadingVersion++;

  var contextTypes = (_contextTypes = {}, _contextTypes[storeKey] = _PropTypes.storeShape, _contextTypes[subscriptionKey] = _PropTypes.subscriptionShape, _contextTypes);
  var childContextTypes = (_childContextTypes = {}, _childContextTypes[subscriptionKey] = _PropTypes.subscriptionShape, _childContextTypes);

  return function wrapWithConnect(WrappedComponent) {
    (0, _invariant2.default)(typeof WrappedComponent == 'function', 'You must pass a component to the function returned by ' + ('connect. Instead received ' + JSON.stringify(WrappedComponent)));

    var wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || 'Component';

    var displayName = getDisplayName(wrappedComponentName);

    var selectorFactoryOptions = _extends({}, connectOptions, {
      getDisplayName: getDisplayName,
      methodName: methodName,
      renderCountProp: renderCountProp,
      shouldHandleStateChanges: shouldHandleStateChanges,
      storeKey: storeKey,
      withRef: withRef,
      displayName: displayName,
      wrappedComponentName: wrappedComponentName,
      WrappedComponent: WrappedComponent
    });

    var Connect = function (_Component) {
      _inherits(Connect, _Component);

      function Connect(props, context) {
        _classCallCheck(this, Connect);

        var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));

        _this.version = version;
        _this.state = {};
        _this.renderCount = 0;
        _this.store = props[storeKey] || context[storeKey];
        _this.propsMode = Boolean(props[storeKey]);
        _this.setWrappedInstance = _this.setWrappedInstance.bind(_this);

        (0, _invariant2.default)(_this.store, 'Could not find "' + storeKey + '" in either the context or props of ' + ('"' + displayName + '". Either wrap the root component in a <Provider>, ') + ('or explicitly pass "' + storeKey + '" as a prop to "' + displayName + '".'));

        _this.initSelector();
        _this.initSubscription();
        return _this;
      }

      Connect.prototype.getChildContext = function getChildContext() {
        var _ref2;

        var subscription = this.propsMode ? null : this.subscription;
        return _ref2 = {}, _ref2[subscriptionKey] = subscription || this.context[subscriptionKey], _ref2;
      };

      Connect.prototype.componentDidMount = function componentDidMount() {
        if (!shouldHandleStateChanges) return;

        this.subscription.trySubscribe();
        this.selector.run(this.props);
        if (this.selector.shouldComponentUpdate) this.forceUpdate();
      };

      Connect.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        this.selector.run(nextProps);
      };

      Connect.prototype.shouldComponentUpdate = function shouldComponentUpdate() {
        return this.selector.shouldComponentUpdate;
      };

      Connect.prototype.componentWillUnmount = function componentWillUnmount() {
        if (this.subscription) this.subscription.tryUnsubscribe();
        this.subscription = null;
        this.notifyNestedSubs = noop;
        this.store = null;
        this.selector.run = noop;
        this.selector.shouldComponentUpdate = false;
      };

      Connect.prototype.getWrappedInstance = function getWrappedInstance() {
        (0, _invariant2.default)(withRef, 'To access the wrapped instance, you need to specify ' + ('{ withRef: true } in the options argument of the ' + methodName + '() call.'));
        return this.wrappedInstance;
      };

      Connect.prototype.setWrappedInstance = function setWrappedInstance(ref) {
        this.wrappedInstance = ref;
      };

      Connect.prototype.initSelector = function initSelector() {
        var sourceSelector = selectorFactory(this.store.dispatch, selectorFactoryOptions);
        this.selector = makeSelectorStateful(sourceSelector, this.store);
        this.selector.run(this.props);
      };

      Connect.prototype.initSubscription = function initSubscription() {
        if (!shouldHandleStateChanges) return;

        var parentSub = (this.propsMode ? this.props : this.context)[subscriptionKey];
        this.subscription = new _Subscription2.default(this.store, parentSub, this.onStateChange.bind(this));

        this.notifyNestedSubs = this.subscription.notifyNestedSubs.bind(this.subscription);
      };

      Connect.prototype.onStateChange = function onStateChange() {
        this.selector.run(this.props);

        if (!this.selector.shouldComponentUpdate) {
          this.notifyNestedSubs();
        } else {
          this.componentDidUpdate = this.notifyNestedSubsOnComponentDidUpdate;
          this.setState(dummyState);
        }
      };

      Connect.prototype.notifyNestedSubsOnComponentDidUpdate = function notifyNestedSubsOnComponentDidUpdate() {
        this.componentDidUpdate = undefined;
        this.notifyNestedSubs();
      };

      Connect.prototype.isSubscribed = function isSubscribed() {
        return Boolean(this.subscription) && this.subscription.isSubscribed();
      };

      Connect.prototype.addExtraProps = function addExtraProps(props) {
        if (!withRef && !renderCountProp && !(this.propsMode && this.subscription)) return props;

        var withExtras = _extends({}, props);
        if (withRef) withExtras.ref = this.setWrappedInstance;
        if (renderCountProp) withExtras[renderCountProp] = this.renderCount++;
        if (this.propsMode && this.subscription) withExtras[subscriptionKey] = this.subscription;
        return withExtras;
      };

      Connect.prototype.render = function render() {
        var selector = this.selector;
        selector.shouldComponentUpdate = false;

        if (selector.error) {
          throw selector.error;
        } else {
          return (0, _react.createElement)(WrappedComponent, this.addExtraProps(selector.props));
        }
      };

      return Connect;
    }(_react.Component);

    Connect.WrappedComponent = WrappedComponent;
    Connect.displayName = displayName;
    Connect.childContextTypes = childContextTypes;
    Connect.contextTypes = contextTypes;
    Connect.propTypes = contextTypes;

    if (process.env.NODE_ENV !== 'production') {
      Connect.prototype.componentWillUpdate = function componentWillUpdate() {
        if (this.version !== version) {
          this.version = version;
          this.initSelector();

          if (this.subscription) this.subscription.tryUnsubscribe();
          this.initSubscription();
          if (shouldHandleStateChanges) this.subscription.trySubscribe();
        }
      };
    }

    return (0, _hoistNonReactStatics2.default)(Connect, WrappedComponent);
  };
}
}, 406, null, "react-redux/lib/components/connectAdvanced.js");
__d(/* hoist-non-react-statics/index.js */function(global, require, module, exports) {
'use strict';

var REACT_STATICS = {
    childContextTypes: true,
    contextTypes: true,
    defaultProps: true,
    displayName: true,
    getDefaultProps: true,
    mixins: true,
    propTypes: true,
    type: true
};

var KNOWN_STATICS = {
    name: true,
    length: true,
    prototype: true,
    caller: true,
    arguments: true,
    arity: true
};

var isGetOwnPropertySymbolsAvailable = typeof Object.getOwnPropertySymbols === 'function';

module.exports = function hoistNonReactStatics(targetComponent, sourceComponent, customStatics) {
    if (typeof sourceComponent !== 'string') {
        var keys = Object.getOwnPropertyNames(sourceComponent);

        if (isGetOwnPropertySymbolsAvailable) {
            keys = keys.concat(Object.getOwnPropertySymbols(sourceComponent));
        }

        for (var i = 0; i < keys.length; ++i) {
            if (!REACT_STATICS[keys[i]] && !KNOWN_STATICS[keys[i]] && (!customStatics || !customStatics[keys[i]])) {
                try {
                    targetComponent[keys[i]] = sourceComponent[keys[i]];
                } catch (error) {}
            }
        }
    }

    return targetComponent;
};
}, 407, null, "hoist-non-react-statics/index.js");
__d(/* invariant/browser.js */function(global, require, module, exports) {

'use strict';

var invariant = function invariant(condition, format, a, b, c, d, e, f) {
  if (process.env.NODE_ENV !== 'production') {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  }

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1;
    throw error;
  }
};

module.exports = invariant;
}, 408, null, "invariant/browser.js");
__d(/* react-redux/lib/utils/Subscription.js */function(global, require, module, exports) {"use strict";

exports.__esModule = true;

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

var CLEARED = null;
var nullListeners = {
  notify: function notify() {}
};

function createListenerCollection() {
  var current = [];
  var next = [];

  return {
    clear: function clear() {
      next = CLEARED;
      current = CLEARED;
    },
    notify: function notify() {
      var listeners = current = next;
      for (var i = 0; i < listeners.length; i++) {
        listeners[i]();
      }
    },
    subscribe: function subscribe(listener) {
      var isSubscribed = true;
      if (next === current) next = current.slice();
      next.push(listener);

      return function unsubscribe() {
        if (!isSubscribed || current === CLEARED) return;
        isSubscribed = false;

        if (next === current) next = current.slice();
        next.splice(next.indexOf(listener), 1);
      };
    }
  };
}

var Subscription = function () {
  function Subscription(store, parentSub, onStateChange) {
    _classCallCheck(this, Subscription);

    this.store = store;
    this.parentSub = parentSub;
    this.onStateChange = onStateChange;
    this.unsubscribe = null;
    this.listeners = nullListeners;
  }

  Subscription.prototype.addNestedSub = function addNestedSub(listener) {
    this.trySubscribe();
    return this.listeners.subscribe(listener);
  };

  Subscription.prototype.notifyNestedSubs = function notifyNestedSubs() {
    this.listeners.notify();
  };

  Subscription.prototype.isSubscribed = function isSubscribed() {
    return Boolean(this.unsubscribe);
  };

  Subscription.prototype.trySubscribe = function trySubscribe() {
    if (!this.unsubscribe) {
      this.unsubscribe = this.parentSub ? this.parentSub.addNestedSub(this.onStateChange) : this.store.subscribe(this.onStateChange);

      this.listeners = createListenerCollection();
    }
  };

  Subscription.prototype.tryUnsubscribe = function tryUnsubscribe() {
    if (this.unsubscribe) {
      this.unsubscribe();
      this.unsubscribe = null;
      this.listeners.clear();
      this.listeners = nullListeners;
    }
  };

  return Subscription;
}();

exports.default = Subscription;
}, 409, null, "react-redux/lib/utils/Subscription.js");
__d(/* react-redux/lib/connect/connect.js */function(global, require, module, exports) {'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

exports.createConnect = createConnect;

var _connectAdvanced = require(406                            ); // 406 = ../components/connectAdvanced

var _connectAdvanced2 = _interopRequireDefault(_connectAdvanced);

var _shallowEqual = require(411                    ); // 411 = ../utils/shallowEqual

var _shallowEqual2 = _interopRequireDefault(_shallowEqual);

var _mapDispatchToProps = require(412                   ); // 412 = ./mapDispatchToProps

var _mapDispatchToProps2 = _interopRequireDefault(_mapDispatchToProps);

var _mapStateToProps = require(435                ); // 435 = ./mapStateToProps

var _mapStateToProps2 = _interopRequireDefault(_mapStateToProps);

var _mergeProps = require(436           ); // 436 = ./mergeProps

var _mergeProps2 = _interopRequireDefault(_mergeProps);

var _selectorFactory = require(437                ); // 437 = ./selectorFactory

var _selectorFactory2 = _interopRequireDefault(_selectorFactory);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _objectWithoutProperties(obj, keys) {
  var target = {};for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
  }return target;
}

function match(arg, factories, name) {
  for (var i = factories.length - 1; i >= 0; i--) {
    var result = factories[i](arg);
    if (result) return result;
  }

  return function (dispatch, options) {
    throw new Error('Invalid value of type ' + typeof arg + ' for ' + name + ' argument when connecting component ' + options.wrappedComponentName + '.');
  };
}

function strictEqual(a, b) {
  return a === b;
}

function createConnect() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$connectHOC = _ref.connectHOC,
      connectHOC = _ref$connectHOC === undefined ? _connectAdvanced2.default : _ref$connectHOC,
      _ref$mapStateToPropsF = _ref.mapStateToPropsFactories,
      mapStateToPropsFactories = _ref$mapStateToPropsF === undefined ? _mapStateToProps2.default : _ref$mapStateToPropsF,
      _ref$mapDispatchToPro = _ref.mapDispatchToPropsFactories,
      mapDispatchToPropsFactories = _ref$mapDispatchToPro === undefined ? _mapDispatchToProps2.default : _ref$mapDispatchToPro,
      _ref$mergePropsFactor = _ref.mergePropsFactories,
      mergePropsFactories = _ref$mergePropsFactor === undefined ? _mergeProps2.default : _ref$mergePropsFactor,
      _ref$selectorFactory = _ref.selectorFactory,
      selectorFactory = _ref$selectorFactory === undefined ? _selectorFactory2.default : _ref$selectorFactory;

  return function connect(mapStateToProps, mapDispatchToProps, mergeProps) {
    var _ref2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},
        _ref2$pure = _ref2.pure,
        pure = _ref2$pure === undefined ? true : _ref2$pure,
        _ref2$areStatesEqual = _ref2.areStatesEqual,
        areStatesEqual = _ref2$areStatesEqual === undefined ? strictEqual : _ref2$areStatesEqual,
        _ref2$areOwnPropsEqua = _ref2.areOwnPropsEqual,
        areOwnPropsEqual = _ref2$areOwnPropsEqua === undefined ? _shallowEqual2.default : _ref2$areOwnPropsEqua,
        _ref2$areStatePropsEq = _ref2.areStatePropsEqual,
        areStatePropsEqual = _ref2$areStatePropsEq === undefined ? _shallowEqual2.default : _ref2$areStatePropsEq,
        _ref2$areMergedPropsE = _ref2.areMergedPropsEqual,
        areMergedPropsEqual = _ref2$areMergedPropsE === undefined ? _shallowEqual2.default : _ref2$areMergedPropsE,
        extraOptions = _objectWithoutProperties(_ref2, ['pure', 'areStatesEqual', 'areOwnPropsEqual', 'areStatePropsEqual', 'areMergedPropsEqual']);

    var initMapStateToProps = match(mapStateToProps, mapStateToPropsFactories, 'mapStateToProps');
    var initMapDispatchToProps = match(mapDispatchToProps, mapDispatchToPropsFactories, 'mapDispatchToProps');
    var initMergeProps = match(mergeProps, mergePropsFactories, 'mergeProps');

    return connectHOC(selectorFactory, _extends({
      methodName: 'connect',

      getDisplayName: function getDisplayName(name) {
        return 'Connect(' + name + ')';
      },

      shouldHandleStateChanges: Boolean(mapStateToProps),

      initMapStateToProps: initMapStateToProps,
      initMapDispatchToProps: initMapDispatchToProps,
      initMergeProps: initMergeProps,
      pure: pure,
      areStatesEqual: areStatesEqual,
      areOwnPropsEqual: areOwnPropsEqual,
      areStatePropsEqual: areStatePropsEqual,
      areMergedPropsEqual: areMergedPropsEqual

    }, extraOptions));
  };
}

exports.default = createConnect();
}, 410, null, "react-redux/lib/connect/connect.js");
__d(/* react-redux/lib/utils/shallowEqual.js */function(global, require, module, exports) {'use strict';

exports.__esModule = true;
exports.default = shallowEqual;
var hasOwn = Object.prototype.hasOwnProperty;

function is(x, y) {
  if (x === y) {
    return x !== 0 || y !== 0 || 1 / x === 1 / y;
  } else {
    return x !== x && y !== y;
  }
}

function shallowEqual(objA, objB) {
  if (is(objA, objB)) return true;

  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) return false;

  for (var i = 0; i < keysA.length; i++) {
    if (!hasOwn.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
      return false;
    }
  }

  return true;
}
}, 411, null, "react-redux/lib/utils/shallowEqual.js");
__d(/* react-redux/lib/connect/mapDispatchToProps.js */function(global, require, module, exports) {'use strict';

exports.__esModule = true;
exports.whenMapDispatchToPropsIsFunction = whenMapDispatchToPropsIsFunction;
exports.whenMapDispatchToPropsIsMissing = whenMapDispatchToPropsIsMissing;
exports.whenMapDispatchToPropsIsObject = whenMapDispatchToPropsIsObject;

var _redux = require(413    ); // 413 = redux

var _wrapMapToProps = require(433               ); // 433 = ./wrapMapToProps

function whenMapDispatchToPropsIsFunction(mapDispatchToProps) {
  return typeof mapDispatchToProps === 'function' ? (0, _wrapMapToProps.wrapMapToPropsFunc)(mapDispatchToProps, 'mapDispatchToProps') : undefined;
}

function whenMapDispatchToPropsIsMissing(mapDispatchToProps) {
  return !mapDispatchToProps ? (0, _wrapMapToProps.wrapMapToPropsConstant)(function (dispatch) {
    return { dispatch: dispatch };
  }) : undefined;
}

function whenMapDispatchToPropsIsObject(mapDispatchToProps) {
  return mapDispatchToProps && typeof mapDispatchToProps === 'object' ? (0, _wrapMapToProps.wrapMapToPropsConstant)(function (dispatch) {
    return (0, _redux.bindActionCreators)(mapDispatchToProps, dispatch);
  }) : undefined;
}

exports.default = [whenMapDispatchToPropsIsFunction, whenMapDispatchToPropsIsMissing, whenMapDispatchToPropsIsObject];
}, 412, null, "react-redux/lib/connect/mapDispatchToProps.js");
__d(/* redux/lib/index.js */function(global, require, module, exports) {'use strict';

exports.__esModule = true;
exports.compose = exports.applyMiddleware = exports.bindActionCreators = exports.combineReducers = exports.createStore = undefined;

var _createStore = require(414            ); // 414 = ./createStore

var _createStore2 = _interopRequireDefault(_createStore);

var _combineReducers = require(428                ); // 428 = ./combineReducers

var _combineReducers2 = _interopRequireDefault(_combineReducers);

var _bindActionCreators = require(430                   ); // 430 = ./bindActionCreators

var _bindActionCreators2 = _interopRequireDefault(_bindActionCreators);

var _applyMiddleware = require(431                ); // 431 = ./applyMiddleware

var _applyMiddleware2 = _interopRequireDefault(_applyMiddleware);

var _compose = require(432        ); // 432 = ./compose

var _compose2 = _interopRequireDefault(_compose);

var _warning = require(429              ); // 429 = ./utils/warning

var _warning2 = _interopRequireDefault(_warning);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { 'default': obj };
}

function isCrushed() {}

if (process.env.NODE_ENV !== 'production' && typeof isCrushed.name === 'string' && isCrushed.name !== 'isCrushed') {
  (0, _warning2['default'])('You are currently using minified code outside of NODE_ENV === \'production\'. ' + 'This means that you are running a slower development build of Redux. ' + 'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' + 'or DefinePlugin for webpack (http://stackoverflow.com/questions/30030031) ' + 'to ensure you have the correct code for your production build.');
}

exports.createStore = _createStore2['default'];
exports.combineReducers = _combineReducers2['default'];
exports.bindActionCreators = _bindActionCreators2['default'];
exports.applyMiddleware = _applyMiddleware2['default'];
exports.compose = _compose2['default'];
}, 413, null, "redux/lib/index.js");
__d(/* redux/lib/createStore.js */function(global, require, module, exports) {'use strict';

exports.__esModule = true;
exports.ActionTypes = undefined;
exports['default'] = createStore;

var _isPlainObject = require(415                   ); // 415 = lodash/isPlainObject

var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

var _symbolObservable = require(425                ); // 425 = symbol-observable

var _symbolObservable2 = _interopRequireDefault(_symbolObservable);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { 'default': obj };
}

var ActionTypes = exports.ActionTypes = {
  INIT: '@@redux/INIT'
};

function createStore(reducer, preloadedState, enhancer) {
  var _ref2;

  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {
    enhancer = preloadedState;
    preloadedState = undefined;
  }

  if (typeof enhancer !== 'undefined') {
    if (typeof enhancer !== 'function') {
      throw new Error('Expected the enhancer to be a function.');
    }

    return enhancer(createStore)(reducer, preloadedState);
  }

  if (typeof reducer !== 'function') {
    throw new Error('Expected the reducer to be a function.');
  }

  var currentReducer = reducer;
  var currentState = preloadedState;
  var currentListeners = [];
  var nextListeners = currentListeners;
  var isDispatching = false;

  function ensureCanMutateNextListeners() {
    if (nextListeners === currentListeners) {
      nextListeners = currentListeners.slice();
    }
  }

  function getState() {
    return currentState;
  }

  function subscribe(listener) {
    if (typeof listener !== 'function') {
      throw new Error('Expected listener to be a function.');
    }

    var isSubscribed = true;

    ensureCanMutateNextListeners();
    nextListeners.push(listener);

    return function unsubscribe() {
      if (!isSubscribed) {
        return;
      }

      isSubscribed = false;

      ensureCanMutateNextListeners();
      var index = nextListeners.indexOf(listener);
      nextListeners.splice(index, 1);
    };
  }

  function dispatch(action) {
    if (!(0, _isPlainObject2['default'])(action)) {
      throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');
    }

    if (typeof action.type === 'undefined') {
      throw new Error('Actions may not have an undefined "type" property. ' + 'Have you misspelled a constant?');
    }

    if (isDispatching) {
      throw new Error('Reducers may not dispatch actions.');
    }

    try {
      isDispatching = true;
      currentState = currentReducer(currentState, action);
    } finally {
      isDispatching = false;
    }

    var listeners = currentListeners = nextListeners;
    for (var i = 0; i < listeners.length; i++) {
      listeners[i]();
    }

    return action;
  }

  function replaceReducer(nextReducer) {
    if (typeof nextReducer !== 'function') {
      throw new Error('Expected the nextReducer to be a function.');
    }

    currentReducer = nextReducer;
    dispatch({ type: ActionTypes.INIT });
  }

  function observable() {
    var _ref;

    var outerSubscribe = subscribe;
    return _ref = {
      subscribe: function subscribe(observer) {
        if (typeof observer !== 'object') {
          throw new TypeError('Expected the observer to be an object.');
        }

        function observeState() {
          if (observer.next) {
            observer.next(getState());
          }
        }

        observeState();
        var unsubscribe = outerSubscribe(observeState);
        return { unsubscribe: unsubscribe };
      }
    }, _ref[_symbolObservable2['default']] = function () {
      return this;
    }, _ref;
  }

  dispatch({ type: ActionTypes.INIT });

  return _ref2 = {
    dispatch: dispatch,
    subscribe: subscribe,
    getState: getState,
    replaceReducer: replaceReducer
  }, _ref2[_symbolObservable2['default']] = observable, _ref2;
}
}, 414, null, "redux/lib/createStore.js");
__d(/* lodash/isPlainObject.js */function(global, require, module, exports) {var baseGetTag = require(416            ), // 416 = ./_baseGetTag
    getPrototype = require(422              ), // 422 = ./_getPrototype
    isObjectLike = require(424             ); // 424 = ./isObjectLike

var objectTag = '[object Object]';

var funcProto = Function.prototype,
    objectProto = Object.prototype;

var funcToString = funcProto.toString;

var hasOwnProperty = objectProto.hasOwnProperty;

var objectCtorString = funcToString.call(Object);

function isPlainObject(value) {
  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
    return false;
  }
  var proto = getPrototype(value);
  if (proto === null) {
    return true;
  }
  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
  return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
}

module.exports = isPlainObject;
}, 415, null, "lodash/isPlainObject.js");
__d(/* lodash/_baseGetTag.js */function(global, require, module, exports) {var Symbol = require(417        ), // 417 = ./_Symbol
    getRawTag = require(420           ), // 420 = ./_getRawTag
    objectToString = require(421                ); // 421 = ./_objectToString

var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

var symToStringTag = Symbol ? typeof Symbol === 'function' ? Symbol.toStringTag : '@@toStringTag' : undefined;

function baseGetTag(value) {
    if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
    }
    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
}

module.exports = baseGetTag;
}, 416, null, "lodash/_baseGetTag.js");
__d(/* lodash/_Symbol.js */function(global, require, module, exports) {var root = require(418      ); // 418 = ./_root

var Symbol = root.Symbol;

module.exports = Symbol;
}, 417, null, "lodash/_Symbol.js");
__d(/* lodash/_root.js */function(global, require, module, exports) {var freeGlobal = require(419            ); // 419 = ./_freeGlobal

var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

var root = freeGlobal || freeSelf || Function('return this')();

module.exports = root;
}, 418, null, "lodash/_root.js");
__d(/* lodash/_freeGlobal.js */function(global, require, module, exports) {
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

module.exports = freeGlobal;
}, 419, null, "lodash/_freeGlobal.js");
__d(/* lodash/_getRawTag.js */function(global, require, module, exports) {var Symbol = require(417        ); // 417 = ./_Symbol

var objectProto = Object.prototype;

var hasOwnProperty = objectProto.hasOwnProperty;

var nativeObjectToString = objectProto.toString;

var symToStringTag = Symbol ? typeof Symbol === 'function' ? Symbol.toStringTag : '@@toStringTag' : undefined;

function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

module.exports = getRawTag;
}, 420, null, "lodash/_getRawTag.js");
__d(/* lodash/_objectToString.js */function(global, require, module, exports) {
var objectProto = Object.prototype;

var nativeObjectToString = objectProto.toString;

function objectToString(value) {
  return nativeObjectToString.call(value);
}

module.exports = objectToString;
}, 421, null, "lodash/_objectToString.js");
__d(/* lodash/_getPrototype.js */function(global, require, module, exports) {var overArg = require(423         ); // 423 = ./_overArg

var getPrototype = overArg(Object.getPrototypeOf, Object);

module.exports = getPrototype;
}, 422, null, "lodash/_getPrototype.js");
__d(/* lodash/_overArg.js */function(global, require, module, exports) {
function overArg(func, transform) {
  return function (arg) {
    return func(transform(arg));
  };
}

module.exports = overArg;
}, 423, null, "lodash/_overArg.js");
__d(/* lodash/isObjectLike.js */function(global, require, module, exports) {
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

module.exports = isObjectLike;
}, 424, null, "lodash/isObjectLike.js");
__d(/* symbol-observable/index.js */function(global, require, module, exports) {module.exports = require(426          ); // 426 = ./lib/index
}, 425, null, "symbol-observable/index.js");
__d(/* symbol-observable/lib/index.js */function(global, require, module, exports) {'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ponyfill = require(427         ); // 427 = ./ponyfill

var _ponyfill2 = _interopRequireDefault(_ponyfill);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { 'default': obj };
}

var root;

if (typeof self !== 'undefined') {
  root = self;
} else if (typeof window !== 'undefined') {
  root = window;
} else if (typeof global !== 'undefined') {
  root = global;
} else if (typeof module !== 'undefined') {
  root = module;
} else {
  root = Function('return this')();
}

var result = (0, _ponyfill2['default'])(root);
exports['default'] = result;
}, 426, null, "symbol-observable/lib/index.js");
__d(/* symbol-observable/lib/ponyfill.js */function(global, require, module, exports) {'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports['default'] = symbolObservablePonyfill;
function symbolObservablePonyfill(root) {
	var result;
	var _Symbol = root.Symbol;

	if (typeof _Symbol === 'function') {
		if (_Symbol.observable) {
			result = _Symbol.observable;
		} else {
			result = _Symbol('observable');
			_Symbol.observable = result;
		}
	} else {
		result = '@@observable';
	}

	return result;
};
}, 427, null, "symbol-observable/lib/ponyfill.js");
__d(/* redux/lib/combineReducers.js */function(global, require, module, exports) {'use strict';

exports.__esModule = true;
exports['default'] = combineReducers;

var _createStore = require(414            ); // 414 = ./createStore

var _isPlainObject = require(415                   ); // 415 = lodash/isPlainObject

var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

var _warning = require(429              ); // 429 = ./utils/warning

var _warning2 = _interopRequireDefault(_warning);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { 'default': obj };
}

function getUndefinedStateErrorMessage(key, action) {
  var actionType = action && action.type;
  var actionName = actionType && '"' + actionType.toString() + '"' || 'an action';

  return 'Given action ' + actionName + ', reducer "' + key + '" returned undefined. ' + 'To ignore an action, you must explicitly return the previous state.';
}

function getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {
  var reducerKeys = Object.keys(reducers);
  var argumentName = action && action.type === _createStore.ActionTypes.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';

  if (reducerKeys.length === 0) {
    return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';
  }

  if (!(0, _isPlainObject2['default'])(inputState)) {
    return 'The ' + argumentName + ' has unexpected type of "' + {}.toString.call(inputState).match(/\s([a-z|A-Z]+)/)[1] + '". Expected argument to be an object with the following ' + ('keys: "' + reducerKeys.join('", "') + '"');
  }

  var unexpectedKeys = Object.keys(inputState).filter(function (key) {
    return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];
  });

  unexpectedKeys.forEach(function (key) {
    unexpectedKeyCache[key] = true;
  });

  if (unexpectedKeys.length > 0) {
    return 'Unexpected ' + (unexpectedKeys.length > 1 ? 'keys' : 'key') + ' ' + ('"' + unexpectedKeys.join('", "') + '" found in ' + argumentName + '. ') + 'Expected to find one of the known reducer keys instead: ' + ('"' + reducerKeys.join('", "') + '". Unexpected keys will be ignored.');
  }
}

function assertReducerSanity(reducers) {
  Object.keys(reducers).forEach(function (key) {
    var reducer = reducers[key];
    var initialState = reducer(undefined, { type: _createStore.ActionTypes.INIT });

    if (typeof initialState === 'undefined') {
      throw new Error('Reducer "' + key + '" returned undefined during initialization. ' + 'If the state passed to the reducer is undefined, you must ' + 'explicitly return the initial state. The initial state may ' + 'not be undefined.');
    }

    var type = '@@redux/PROBE_UNKNOWN_ACTION_' + Math.random().toString(36).substring(7).split('').join('.');
    if (typeof reducer(undefined, { type: type }) === 'undefined') {
      throw new Error('Reducer "' + key + '" returned undefined when probed with a random type. ' + ('Don\'t try to handle ' + _createStore.ActionTypes.INIT + ' or other actions in "redux/*" ') + 'namespace. They are considered private. Instead, you must return the ' + 'current state for any unknown actions, unless it is undefined, ' + 'in which case you must return the initial state, regardless of the ' + 'action type. The initial state may not be undefined.');
    }
  });
}

function combineReducers(reducers) {
  var reducerKeys = Object.keys(reducers);
  var finalReducers = {};
  for (var i = 0; i < reducerKeys.length; i++) {
    var key = reducerKeys[i];

    if (process.env.NODE_ENV !== 'production') {
      if (typeof reducers[key] === 'undefined') {
        (0, _warning2['default'])('No reducer provided for key "' + key + '"');
      }
    }

    if (typeof reducers[key] === 'function') {
      finalReducers[key] = reducers[key];
    }
  }
  var finalReducerKeys = Object.keys(finalReducers);

  if (process.env.NODE_ENV !== 'production') {
    var unexpectedKeyCache = {};
  }

  var sanityError;
  try {
    assertReducerSanity(finalReducers);
  } catch (e) {
    sanityError = e;
  }

  return function combination() {
    var state = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    var action = arguments[1];

    if (sanityError) {
      throw sanityError;
    }

    if (process.env.NODE_ENV !== 'production') {
      var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);
      if (warningMessage) {
        (0, _warning2['default'])(warningMessage);
      }
    }

    var hasChanged = false;
    var nextState = {};
    for (var i = 0; i < finalReducerKeys.length; i++) {
      var key = finalReducerKeys[i];
      var reducer = finalReducers[key];
      var previousStateForKey = state[key];
      var nextStateForKey = reducer(previousStateForKey, action);
      if (typeof nextStateForKey === 'undefined') {
        var errorMessage = getUndefinedStateErrorMessage(key, action);
        throw new Error(errorMessage);
      }
      nextState[key] = nextStateForKey;
      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
    }
    return hasChanged ? nextState : state;
  };
}
}, 428, null, "redux/lib/combineReducers.js");
__d(/* redux/lib/utils/warning.js */function(global, require, module, exports) {'use strict';

exports.__esModule = true;
exports['default'] = warning;

function warning(message) {
  if (typeof console !== 'undefined' && typeof console.error === 'function') {
    console.error(message);
  }

  try {
    throw new Error(message);
  } catch (e) {}
}
}, 429, null, "redux/lib/utils/warning.js");
__d(/* redux/lib/bindActionCreators.js */function(global, require, module, exports) {'use strict';

exports.__esModule = true;
exports['default'] = bindActionCreators;
function bindActionCreator(actionCreator, dispatch) {
  return function () {
    return dispatch(actionCreator.apply(undefined, arguments));
  };
}

function bindActionCreators(actionCreators, dispatch) {
  if (typeof actionCreators === 'function') {
    return bindActionCreator(actionCreators, dispatch);
  }

  if (typeof actionCreators !== 'object' || actionCreators === null) {
    throw new Error('bindActionCreators expected an object or a function, instead received ' + (actionCreators === null ? 'null' : typeof actionCreators) + '. ' + 'Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');
  }

  var keys = Object.keys(actionCreators);
  var boundActionCreators = {};
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    var actionCreator = actionCreators[key];
    if (typeof actionCreator === 'function') {
      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);
    }
  }
  return boundActionCreators;
}
}, 430, null, "redux/lib/bindActionCreators.js");
__d(/* redux/lib/applyMiddleware.js */function(global, require, module, exports) {'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

exports['default'] = applyMiddleware;

var _compose = require(432        ); // 432 = ./compose

var _compose2 = _interopRequireDefault(_compose);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { 'default': obj };
}

function applyMiddleware() {
  for (var _len = arguments.length, middlewares = Array(_len), _key = 0; _key < _len; _key++) {
    middlewares[_key] = arguments[_key];
  }

  return function (createStore) {
    return function (reducer, preloadedState, enhancer) {
      var store = createStore(reducer, preloadedState, enhancer);
      var _dispatch = store.dispatch;
      var chain = [];

      var middlewareAPI = {
        getState: store.getState,
        dispatch: function dispatch(action) {
          return _dispatch(action);
        }
      };
      chain = middlewares.map(function (middleware) {
        return middleware(middlewareAPI);
      });
      _dispatch = _compose2['default'].apply(undefined, chain)(store.dispatch);

      return _extends({}, store, {
        dispatch: _dispatch
      });
    };
  };
}
}, 431, null, "redux/lib/applyMiddleware.js");
__d(/* redux/lib/compose.js */function(global, require, module, exports) {"use strict";

exports.__esModule = true;
exports["default"] = compose;


function compose() {
  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {
    funcs[_key] = arguments[_key];
  }

  if (funcs.length === 0) {
    return function (arg) {
      return arg;
    };
  }

  if (funcs.length === 1) {
    return funcs[0];
  }

  var last = funcs[funcs.length - 1];
  var rest = funcs.slice(0, -1);
  return function () {
    return rest.reduceRight(function (composed, f) {
      return f(composed);
    }, last.apply(undefined, arguments));
  };
}
}, 432, null, "redux/lib/compose.js");
__d(/* react-redux/lib/connect/wrapMapToProps.js */function(global, require, module, exports) {'use strict';

exports.__esModule = true;
exports.wrapMapToPropsConstant = wrapMapToPropsConstant;
exports.getDependsOnOwnProps = getDependsOnOwnProps;
exports.wrapMapToPropsFunc = wrapMapToPropsFunc;

var _verifyPlainObject = require(434                         ); // 434 = ../utils/verifyPlainObject

var _verifyPlainObject2 = _interopRequireDefault(_verifyPlainObject);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function wrapMapToPropsConstant(getConstant) {
  return function initConstantSelector(dispatch, options) {
    var constant = getConstant(dispatch, options);

    function constantSelector() {
      return constant;
    }
    constantSelector.dependsOnOwnProps = false;
    return constantSelector;
  };
}

function getDependsOnOwnProps(mapToProps) {
  return mapToProps.dependsOnOwnProps !== null && mapToProps.dependsOnOwnProps !== undefined ? Boolean(mapToProps.dependsOnOwnProps) : mapToProps.length !== 1;
}

function wrapMapToPropsFunc(mapToProps, methodName) {
  return function initProxySelector(dispatch, _ref) {
    var displayName = _ref.displayName;

    var proxy = function mapToPropsProxy(stateOrDispatch, ownProps) {
      return proxy.dependsOnOwnProps ? proxy.mapToProps(stateOrDispatch, ownProps) : proxy.mapToProps(stateOrDispatch);
    };

    proxy.dependsOnOwnProps = true;

    proxy.mapToProps = function detectFactoryAndVerify(stateOrDispatch, ownProps) {
      proxy.mapToProps = mapToProps;
      proxy.dependsOnOwnProps = getDependsOnOwnProps(mapToProps);
      var props = proxy(stateOrDispatch, ownProps);

      if (typeof props === 'function') {
        proxy.mapToProps = props;
        proxy.dependsOnOwnProps = getDependsOnOwnProps(props);
        props = proxy(stateOrDispatch, ownProps);
      }

      if (process.env.NODE_ENV !== 'production') (0, _verifyPlainObject2.default)(props, displayName, methodName);

      return props;
    };

    return proxy;
  };
}
}, 433, null, "react-redux/lib/connect/wrapMapToProps.js");
__d(/* react-redux/lib/utils/verifyPlainObject.js */function(global, require, module, exports) {'use strict';

exports.__esModule = true;
exports.default = verifyPlainObject;

var _isPlainObject = require(415                   ); // 415 = lodash/isPlainObject

var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

var _warning = require(405        ); // 405 = ./warning

var _warning2 = _interopRequireDefault(_warning);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function verifyPlainObject(value, displayName, methodName) {
  if (!(0, _isPlainObject2.default)(value)) {
    (0, _warning2.default)(methodName + '() in ' + displayName + ' must return a plain object. Instead received ' + value + '.');
  }
}
}, 434, null, "react-redux/lib/utils/verifyPlainObject.js");
__d(/* react-redux/lib/connect/mapStateToProps.js */function(global, require, module, exports) {'use strict';

exports.__esModule = true;
exports.whenMapStateToPropsIsFunction = whenMapStateToPropsIsFunction;
exports.whenMapStateToPropsIsMissing = whenMapStateToPropsIsMissing;

var _wrapMapToProps = require(433               ); // 433 = ./wrapMapToProps

function whenMapStateToPropsIsFunction(mapStateToProps) {
  return typeof mapStateToProps === 'function' ? (0, _wrapMapToProps.wrapMapToPropsFunc)(mapStateToProps, 'mapStateToProps') : undefined;
}

function whenMapStateToPropsIsMissing(mapStateToProps) {
  return !mapStateToProps ? (0, _wrapMapToProps.wrapMapToPropsConstant)(function () {
    return {};
  }) : undefined;
}

exports.default = [whenMapStateToPropsIsFunction, whenMapStateToPropsIsMissing];
}, 435, null, "react-redux/lib/connect/mapStateToProps.js");
__d(/* react-redux/lib/connect/mergeProps.js */function(global, require, module, exports) {'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

exports.defaultMergeProps = defaultMergeProps;
exports.wrapMergePropsFunc = wrapMergePropsFunc;
exports.whenMergePropsIsFunction = whenMergePropsIsFunction;
exports.whenMergePropsIsOmitted = whenMergePropsIsOmitted;

var _verifyPlainObject = require(434                         ); // 434 = ../utils/verifyPlainObject

var _verifyPlainObject2 = _interopRequireDefault(_verifyPlainObject);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function defaultMergeProps(stateProps, dispatchProps, ownProps) {
  return _extends({}, ownProps, stateProps, dispatchProps);
}

function wrapMergePropsFunc(mergeProps) {
  return function initMergePropsProxy(dispatch, _ref) {
    var displayName = _ref.displayName,
        pure = _ref.pure,
        areMergedPropsEqual = _ref.areMergedPropsEqual;

    var hasRunOnce = false;
    var mergedProps = void 0;

    return function mergePropsProxy(stateProps, dispatchProps, ownProps) {
      var nextMergedProps = mergeProps(stateProps, dispatchProps, ownProps);

      if (hasRunOnce) {
        if (!pure || !areMergedPropsEqual(nextMergedProps, mergedProps)) mergedProps = nextMergedProps;
      } else {
        hasRunOnce = true;
        mergedProps = nextMergedProps;

        if (process.env.NODE_ENV !== 'production') (0, _verifyPlainObject2.default)(mergedProps, displayName, 'mergeProps');
      }

      return mergedProps;
    };
  };
}

function whenMergePropsIsFunction(mergeProps) {
  return typeof mergeProps === 'function' ? wrapMergePropsFunc(mergeProps) : undefined;
}

function whenMergePropsIsOmitted(mergeProps) {
  return !mergeProps ? function () {
    return defaultMergeProps;
  } : undefined;
}

exports.default = [whenMergePropsIsFunction, whenMergePropsIsOmitted];
}, 436, null, "react-redux/lib/connect/mergeProps.js");
__d(/* react-redux/lib/connect/selectorFactory.js */function(global, require, module, exports) {'use strict';

exports.__esModule = true;
exports.impureFinalPropsSelectorFactory = impureFinalPropsSelectorFactory;
exports.pureFinalPropsSelectorFactory = pureFinalPropsSelectorFactory;
exports.default = finalPropsSelectorFactory;

var _verifySubselectors = require(438                   ); // 438 = ./verifySubselectors

var _verifySubselectors2 = _interopRequireDefault(_verifySubselectors);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _objectWithoutProperties(obj, keys) {
  var target = {};for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
  }return target;
}

function impureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch) {
  return function impureFinalPropsSelector(state, ownProps) {
    return mergeProps(mapStateToProps(state, ownProps), mapDispatchToProps(dispatch, ownProps), ownProps);
  };
}

function pureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, _ref) {
  var areStatesEqual = _ref.areStatesEqual,
      areOwnPropsEqual = _ref.areOwnPropsEqual,
      areStatePropsEqual = _ref.areStatePropsEqual;

  var hasRunAtLeastOnce = false;
  var state = void 0;
  var ownProps = void 0;
  var stateProps = void 0;
  var dispatchProps = void 0;
  var mergedProps = void 0;

  function handleFirstCall(firstState, firstOwnProps) {
    state = firstState;
    ownProps = firstOwnProps;
    stateProps = mapStateToProps(state, ownProps);
    dispatchProps = mapDispatchToProps(dispatch, ownProps);
    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
    hasRunAtLeastOnce = true;
    return mergedProps;
  }

  function handleNewPropsAndNewState() {
    stateProps = mapStateToProps(state, ownProps);

    if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);

    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
    return mergedProps;
  }

  function handleNewProps() {
    if (mapStateToProps.dependsOnOwnProps) stateProps = mapStateToProps(state, ownProps);

    if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);

    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
    return mergedProps;
  }

  function handleNewState() {
    var nextStateProps = mapStateToProps(state, ownProps);
    var statePropsChanged = !areStatePropsEqual(nextStateProps, stateProps);
    stateProps = nextStateProps;

    if (statePropsChanged) mergedProps = mergeProps(stateProps, dispatchProps, ownProps);

    return mergedProps;
  }

  function handleSubsequentCalls(nextState, nextOwnProps) {
    var propsChanged = !areOwnPropsEqual(nextOwnProps, ownProps);
    var stateChanged = !areStatesEqual(nextState, state);
    state = nextState;
    ownProps = nextOwnProps;

    if (propsChanged && stateChanged) return handleNewPropsAndNewState();
    if (propsChanged) return handleNewProps();
    if (stateChanged) return handleNewState();
    return mergedProps;
  }

  return function pureFinalPropsSelector(nextState, nextOwnProps) {
    return hasRunAtLeastOnce ? handleSubsequentCalls(nextState, nextOwnProps) : handleFirstCall(nextState, nextOwnProps);
  };
}

function finalPropsSelectorFactory(dispatch, _ref2) {
  var initMapStateToProps = _ref2.initMapStateToProps,
      initMapDispatchToProps = _ref2.initMapDispatchToProps,
      initMergeProps = _ref2.initMergeProps,
      options = _objectWithoutProperties(_ref2, ['initMapStateToProps', 'initMapDispatchToProps', 'initMergeProps']);

  var mapStateToProps = initMapStateToProps(dispatch, options);
  var mapDispatchToProps = initMapDispatchToProps(dispatch, options);
  var mergeProps = initMergeProps(dispatch, options);

  if (process.env.NODE_ENV !== 'production') {
    (0, _verifySubselectors2.default)(mapStateToProps, mapDispatchToProps, mergeProps, options.displayName);
  }

  var selectorFactory = options.pure ? pureFinalPropsSelectorFactory : impureFinalPropsSelectorFactory;

  return selectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, options);
}
}, 437, null, "react-redux/lib/connect/selectorFactory.js");
__d(/* react-redux/lib/connect/verifySubselectors.js */function(global, require, module, exports) {'use strict';

exports.__esModule = true;
exports.default = verifySubselectors;

var _warning = require(405               ); // 405 = ../utils/warning

var _warning2 = _interopRequireDefault(_warning);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function verify(selector, methodName, displayName) {
  if (!selector) {
    throw new Error('Unexpected value for ' + methodName + ' in ' + displayName + '.');
  } else if (methodName === 'mapStateToProps' || methodName === 'mapDispatchToProps') {
    if (!selector.hasOwnProperty('dependsOnOwnProps')) {
      (0, _warning2.default)('The selector for ' + methodName + ' of ' + displayName + ' did not specify a value for dependsOnOwnProps.');
    }
  }
}

function verifySubselectors(mapStateToProps, mapDispatchToProps, mergeProps, displayName) {
  verify(mapStateToProps, 'mapStateToProps', displayName);
  verify(mapDispatchToProps, 'mapDispatchToProps', displayName);
  verify(mergeProps, 'mergeProps', displayName);
}
}, 438, null, "react-redux/lib/connect/verifySubselectors.js");
__d(/* redux-thunk/lib/index.js */function(global, require, module, exports) {'use strict';

exports.__esModule = true;
function createThunkMiddleware(extraArgument) {
  return function (_ref) {
    var dispatch = _ref.dispatch,
        getState = _ref.getState;
    return function (next) {
      return function (action) {
        if (typeof action === 'function') {
          return action(dispatch, getState, extraArgument);
        }

        return next(action);
      };
    };
  };
}

var thunk = createThunkMiddleware();
thunk.withExtraArgument = createThunkMiddleware;

exports['default'] = thunk;
}, 439, null, "redux-thunk/lib/index.js");
__d(/* firebase/firebase-react-native.js */function(global, require, module, exports) {/*! @license Firebase v3.9.0
Build: rev-cc77c9e
Terms: https://firebase.google.com/terms/ */

'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
var firebase = require(441    ); // 441 = ./app
require(442     ); // 442 = ./auth
var Storage, XMLHttpRequest;

require(443         ); // 443 = ./database
require(444        ); // 444 = ./storage

var AsyncStorage = require(12            ).AsyncStorage; // 12 = react-native
firebase.INTERNAL.extendNamespace({
    'INTERNAL': {
        'reactNative': {
            'AsyncStorage': AsyncStorage
        }
    }
});

exports.default = firebase;
module.exports = exports['default'];
}, 440, null, "firebase/firebase-react-native.js");
__d(/* firebase/app.js */function(global, require, module, exports) {/*! @license Firebase v3.9.0
Build: rev-cc77c9e
Terms: https://firebase.google.com/terms/ */

var firebase = function (e) {
  function t(r) {
    if (n[r]) return n[r].exports;var i = n[r] = { i: r, l: !1, exports: {} };return e[r].call(i.exports, i, i.exports, t), i.l = !0, i.exports;
  }var n = {};return t.m = e, t.c = n, t.i = function (e) {
    return e;
  }, t.d = function (e, n, r) {
    t.o(e, n) || Object.defineProperty(e, n, { configurable: !1, enumerable: !0, get: r });
  }, t.n = function (e) {
    var n = e && e.__esModule ? function () {
      return e.default;
    } : function () {
      return e;
    };return t.d(n, "a", n), n;
  }, t.o = function (e, t) {
    return Object.prototype.hasOwnProperty.call(e, t);
  }, t.p = "", t(t.s = 11);
}([function (e, t, n) {
  "use strict";
  (function (e) {
    Object.defineProperty(t, "__esModule", { value: !0 });var r = void 0;if (void 0 !== e) r = e;else if ("undefined" != typeof self) r = self;else try {
      r = Function("return this")();
    } catch (e) {
      throw new Error("polyfill failed because global object is unavailable in this environment");
    }var i = r.Promise || n(8);t.local = { Promise: i, GoogPromise: i };
  }).call(t, n(1));
}, function (e, t) {
  var n;n = function () {
    return this;
  }();try {
    n = n || Function("return this")() || (0, eval)("this");
  } catch (e) {
    "object" == typeof window && (n = window);
  }e.exports = n;
}, function (e, t, n) {
  "use strict";
  Object.defineProperty(t, "__esModule", { value: !0 });var r = n(5),
      i = (0, r.createFirebaseNamespace)();t.default = i, e.exports = t.default;
}, function (e, t, n) {
  "use strict";
  function r(e) {
    return i(void 0, e);
  }function i(e, t) {
    if (!(t instanceof Object)) return t;switch (t.constructor) {case Date:
        return new Date(t.getTime());case Object:
        void 0 === e && (e = {});break;case Array:
        e = [];break;default:
        return t;}for (var n in t) {
      t.hasOwnProperty(n) && (e[n] = i(e[n], t[n]));
    }return e;
  }function o(e, t, n) {
    e[t] = n;
  }Object.defineProperty(t, "__esModule", { value: !0 }), t.deepCopy = r, t.deepExtend = i, t.patchProperty = o;
}, function (e, t, n) {
  "use strict";
  function r(e, t) {
    if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
  }function i(e) {
    var t = a;return a = e, t;
  }Object.defineProperty(t, "__esModule", { value: !0 });var o = function () {
    function e(e, t) {
      for (var n = 0; n < t.length; n++) {
        var r = t[n];r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);
      }
    }return function (t, n, r) {
      return n && e(t.prototype, n), r && e(t, r), t;
    };
  }();t.patchCapture = i;var a = Error.captureStackTrace,
      c = function e(t, n) {
    if (r(this, e), this.code = t, this.message = n, a) a(this, s.prototype.create);else {
      var i = Error.apply(this, arguments);this.name = "FirebaseError", Object.defineProperty(this, "stack", { get: function get() {
          return i.stack;
        } });
    }
  };c.prototype = Object.create(Error.prototype), c.prototype.constructor = c, c.prototype.name = "FirebaseError";var s = t.ErrorFactory = function () {
    function e(t, n, i) {
      r(this, e), this.service = t, this.serviceName = n, this.errors = i, this.pattern = /\{\$([^}]+)}/g;
    }return o(e, [{ key: "create", value: function value(e, t) {
        void 0 === t && (t = {});var n = this.errors[e],
            r = this.service + "/" + e,
            i = void 0;i = void 0 === n ? "Error" : n.replace(this.pattern, function (e, n) {
          var r = t[n];return void 0 !== r ? r.toString() : "<" + n + "?>";
        }), i = this.serviceName + ": " + i + " (" + r + ").";var o = new c(r, i);for (var a in t) {
          t.hasOwnProperty(a) && "_" !== a.slice(-1) && (o[a] = t[a]);
        }return o;
      } }]), e;
  }();
}, function (e, t, n) {
  "use strict";
  function r(e, t) {
    if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
  }function i() {
    function e(e) {
      e = e || d;var t = r[e];return void 0 === t && o("no-app", { name: e }), t;
    }function t(e, t) {
      Object.keys(a).forEach(function (r) {
        var i = n(e, r);null !== i && h[i] && h[i](t, e);
      });
    }function n(e, t) {
      if ("serverAuth" === t) return null;var n = t,
          r = e.options;return "auth" === t && (r.serviceAccount || r.credential) && (n = "serverAuth", "serverAuth" in a || o("sa-not-supported")), n;
    }var r = {},
        a = {},
        h = {},
        v = { __esModule: !0, initializeApp: function initializeApp(e, n) {
        void 0 === n ? n = d : "string" == typeof n && "" !== n || o("bad-app-name", { name: n + "" }), void 0 !== r[n] && o("duplicate-app", { name: n });var i = new p(e, n, v);return r[n] = i, t(i, "create"), void 0 != i.INTERNAL && void 0 != i.INTERNAL.getToken || (0, c.deepExtend)(i, { INTERNAL: { getUid: function getUid() {
              return null;
            }, getToken: function getToken() {
              return l.resolve(null);
            }, addAuthTokenListener: function addAuthTokenListener() {}, removeAuthTokenListener: function removeAuthTokenListener() {} } }), i;
      }, app: e, apps: null, Promise: l, SDK_VERSION: "3.9.0", INTERNAL: { registerService: function registerService(t, n, r, i, s) {
          a[t] && o("duplicate-service", { name: t }), a[t] = s ? n : function (e, t) {
            return n(e, t, d);
          }, i && (h[t] = i);var u = void 0;return u = function u(n) {
            return void 0 === n && (n = e()), "function" != typeof n[t] && o("invalid-app-argument", { name: t }), n[t]();
          }, void 0 !== r && (0, c.deepExtend)(u, r), v[t] = u, u;
        }, createFirebaseNamespace: i, extendNamespace: function extendNamespace(e) {
          (0, c.deepExtend)(v, e);
        }, createSubscribe: s.createSubscribe, ErrorFactory: u.ErrorFactory, removeApp: function removeApp(e) {
          t(r[e], "delete"), delete r[e];
        }, factories: a, useAsService: n, Promise: f.local.GoogPromise, deepExtend: c.deepExtend } };return (0, c.patchProperty)(v, "default", v), Object.defineProperty(v, "apps", { get: function get() {
        return Object.keys(r).map(function (e) {
          return r[e];
        });
      } }), (0, c.patchProperty)(e, "App", p), v;
  }function o(e, t) {
    throw v.create(e, t);
  }Object.defineProperty(t, "__esModule", { value: !0 });var a = function () {
    function e(e, t) {
      for (var n = 0; n < t.length; n++) {
        var r = t[n];r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);
      }
    }return function (t, n, r) {
      return n && e(t.prototype, n), r && e(t, r), t;
    };
  }();t.createFirebaseNamespace = i;var c = n(3),
      s = n(6),
      u = n(4),
      f = n(0),
      l = f.local.Promise,
      d = "[DEFAULT]",
      p = function () {
    function e(t, n, i) {
      var o = this;r(this, e), this.firebase_ = i, this.isDeleted_ = !1, this.services_ = {}, this.name_ = n, this.options_ = (0, c.deepCopy)(t);var a = "credential" in this.options_,
          s = "serviceAccount" in this.options_;if (a || s) {
        var u = s ? "serviceAccount" : "credential";"undefined" != typeof console && console.log("The '" + u + "' property specified in the first argument to initializeApp() is deprecated and will be removed in the next major version. You should instead use the 'firebase-admin' package. See https://firebase.google.com/docs/admin/setup for details on how to get started.");
      }Object.keys(i.INTERNAL.factories).forEach(function (e) {
        var t = i.INTERNAL.useAsService(o, e);if (null !== t) {
          var n = o.getService.bind(o, t);(0, c.patchProperty)(o, e, n);
        }
      });
    }return a(e, [{ key: "delete", value: function value() {
        var e = this;return new l(function (t) {
          e.checkDestroyed_(), t();
        }).then(function () {
          e.firebase_.INTERNAL.removeApp(e.name_);var t = [];return Object.keys(e.services_).forEach(function (n) {
            Object.keys(e.services_[n]).forEach(function (r) {
              t.push(e.services_[n][r]);
            });
          }), l.all(t.map(function (e) {
            return e.INTERNAL.delete();
          }));
        }).then(function () {
          e.isDeleted_ = !0, e.services_ = {};
        });
      } }, { key: "getService", value: function value(e, t) {
        this.checkDestroyed_(), void 0 === this.services_[e] && (this.services_[e] = {});var n = t || d;if (void 0 === this.services_[e][n]) {
          var r = this.firebase_.INTERNAL.factories[e](this, this.extendApp.bind(this), t);return this.services_[e][n] = r, r;
        }return this.services_[e][n];
      } }, { key: "extendApp", value: function value(e) {
        (0, c.deepExtend)(this, e);
      } }, { key: "checkDestroyed_", value: function value() {
        this.isDeleted_ && o("app-deleted", { name: this.name_ });
      } }, { key: "name", get: function get() {
        return this.checkDestroyed_(), this.name_;
      } }, { key: "options", get: function get() {
        return this.checkDestroyed_(), this.options_;
      } }]), e;
  }();p.prototype.name && p.prototype.options || p.prototype.delete || console.log("dc");var h = { "no-app": "No Firebase App '{$name}' has been created - call Firebase App.initializeApp()", "bad-app-name": "Illegal App name: '{$name}", "duplicate-app": "Firebase App named '{$name}' already exists", "app-deleted": "Firebase App named '{$name}' already deleted", "duplicate-service": "Firebase service named '{$name}' already registered", "sa-not-supported": "Initializing the Firebase SDK with a service account is only allowed in a Node.js environment. On client devices, you should instead initialize the SDK with an api key and auth domain", "invalid-app-argument": "firebase.{$name}() takes either no argument or a Firebase App instance." },
      v = new u.ErrorFactory("app", "Firebase", h);
}, function (e, t, n) {
  "use strict";
  function r(e, t) {
    if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
  }function i(e, t) {
    var n = new d(e, t);return n.subscribe.bind(n);
  }function o(e, t) {
    return function () {
      for (var n = arguments.length, r = Array(n), i = 0; i < n; i++) {
        r[i] = arguments[i];
      }l.resolve(!0).then(function () {
        e.apply(void 0, r);
      }).catch(function (e) {
        t && t(e);
      });
    };
  }function a(e, t) {
    if ("object" !== (void 0 === e ? "undefined" : s(e)) || null === e) return !1;var n = !0,
        r = !1,
        i = void 0;try {
      for (var o, a = t[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"](); !(n = (o = a.next()).done); n = !0) {
        var c = o.value;if (c in e && "function" == typeof e[c]) return !0;
      }
    } catch (e) {
      r = !0, i = e;
    } finally {
      try {
        !n && a.return && a.return();
      } finally {
        if (r) throw i;
      }
    }return !1;
  }function c() {}Object.defineProperty(t, "__esModule", { value: !0 });var s = "function" == typeof Symbol && "symbol" == typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") ? function (e) {
    return typeof e;
  } : function (e) {
    return e && "function" == typeof Symbol && e.constructor === Symbol && e !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof e;
  },
      u = function () {
    function e(e, t) {
      for (var n = 0; n < t.length; n++) {
        var r = t[n];r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);
      }
    }return function (t, n, r) {
      return n && e(t.prototype, n), r && e(t, r), t;
    };
  }();t.createSubscribe = i, t.async = o;var f = n(0),
      l = f.local.Promise,
      d = function () {
    function e(t, n) {
      var i = this;r(this, e), this.observers = [], this.unsubscribes = [], this.observerCount = 0, this.task = l.resolve(), this.finalized = !1, this.onNoObservers = n, this.task.then(function () {
        t(i);
      }).catch(function (e) {
        i.error(e);
      });
    }return u(e, [{ key: "next", value: function value(e) {
        this.forEachObserver(function (t) {
          t.next(e);
        });
      } }, { key: "error", value: function value(e) {
        this.forEachObserver(function (t) {
          t.error(e);
        }), this.close(e);
      } }, { key: "complete", value: function value() {
        this.forEachObserver(function (e) {
          e.complete();
        }), this.close();
      } }, { key: "subscribe", value: function value(e, t, n) {
        var r = this,
            i = void 0;if (void 0 === e && void 0 === t && void 0 === n) throw new Error("Missing Observer.");i = a(e, ["next", "error", "complete"]) ? e : { next: e, error: t, complete: n }, void 0 === i.next && (i.next = c), void 0 === i.error && (i.error = c), void 0 === i.complete && (i.complete = c);var o = this.unsubscribeOne.bind(this, this.observers.length);return this.finalized && this.task.then(function () {
          try {
            r.finalError ? i.error(r.finalError) : i.complete();
          } catch (e) {}
        }), this.observers.push(i), o;
      } }, { key: "unsubscribeOne", value: function value(e) {
        void 0 !== this.observers && void 0 !== this.observers[e] && (delete this.observers[e], this.observerCount -= 1, 0 === this.observerCount && void 0 !== this.onNoObservers && this.onNoObservers(this));
      } }, { key: "forEachObserver", value: function value(e) {
        if (!this.finalized) for (var t = 0; t < this.observers.length; t++) {
          this.sendOne(t, e);
        }
      } }, { key: "sendOne", value: function value(e, t) {
        var n = this;this.task.then(function () {
          if (void 0 !== n.observers && void 0 !== n.observers[e]) try {
            t(n.observers[e]);
          } catch (e) {
            "undefined" != typeof console && console.error && console.error(e);
          }
        });
      } }, { key: "close", value: function value(e) {
        var t = this;this.finalized || (this.finalized = !0, void 0 !== e && (this.finalError = e), this.task.then(function () {
          t.observers = void 0, t.onNoObservers = void 0;
        }));
      } }]), e;
  }();
}, function (e, t) {
  function n() {
    throw new Error("setTimeout has not been defined");
  }function r() {
    throw new Error("clearTimeout has not been defined");
  }function i(e) {
    if (f === setTimeout) return setTimeout(e, 0);if ((f === n || !f) && setTimeout) return f = setTimeout, setTimeout(e, 0);try {
      return f(e, 0);
    } catch (t) {
      try {
        return f.call(null, e, 0);
      } catch (t) {
        return f.call(this, e, 0);
      }
    }
  }function o(e) {
    if (l === clearTimeout) return clearTimeout(e);if ((l === r || !l) && clearTimeout) return l = clearTimeout, clearTimeout(e);try {
      return l(e);
    } catch (t) {
      try {
        return l.call(null, e);
      } catch (t) {
        return l.call(this, e);
      }
    }
  }function a() {
    v && p && (v = !1, p.length ? h = p.concat(h) : m = -1, h.length && c());
  }function c() {
    if (!v) {
      var e = i(a);v = !0;for (var t = h.length; t;) {
        for (p = h, h = []; ++m < t;) {
          p && p[m].run();
        }m = -1, t = h.length;
      }p = null, v = !1, o(e);
    }
  }function s(e, t) {
    this.fun = e, this.array = t;
  }function u() {}var f,
      l,
      d = e.exports = {};!function () {
    try {
      f = "function" == typeof setTimeout ? setTimeout : n;
    } catch (e) {
      f = n;
    }try {
      l = "function" == typeof clearTimeout ? clearTimeout : r;
    } catch (e) {
      l = r;
    }
  }();var p,
      h = [],
      v = !1,
      m = -1;d.nextTick = function (e) {
    var t = new Array(arguments.length - 1);if (arguments.length > 1) for (var n = 1; n < arguments.length; n++) {
      t[n - 1] = arguments[n];
    }h.push(new s(e, t)), 1 !== h.length || v || i(c);
  }, s.prototype.run = function () {
    this.fun.apply(null, this.array);
  }, d.title = "browser", d.browser = !0, d.env = {}, d.argv = [], d.version = "", d.versions = {}, d.on = u, d.addListener = u, d.once = u, d.off = u, d.removeListener = u, d.removeAllListeners = u, d.emit = u, d.binding = function (e) {
    throw new Error("process.binding is not supported");
  }, d.cwd = function () {
    return "/";
  }, d.chdir = function (e) {
    throw new Error("process.chdir is not supported");
  }, d.umask = function () {
    return 0;
  };
}, function (e, t, n) {
  (function (t) {
    !function (n) {
      function r() {}function i(e, t) {
        return function () {
          e.apply(t, arguments);
        };
      }function o(e) {
        if ("object" != typeof this) throw new TypeError("Promises must be constructed via new");if ("function" != typeof e) throw new TypeError("not a function");this._state = 0, this._handled = !1, this._value = void 0, this._deferreds = [], l(e, this);
      }function a(e, t) {
        for (; 3 === e._state;) {
          e = e._value;
        }if (0 === e._state) return void e._deferreds.push(t);e._handled = !0, o._immediateFn(function () {
          var n = 1 === e._state ? t.onFulfilled : t.onRejected;if (null === n) return void (1 === e._state ? c : s)(t.promise, e._value);var r;try {
            r = n(e._value);
          } catch (e) {
            return void s(t.promise, e);
          }c(t.promise, r);
        });
      }function c(e, t) {
        try {
          if (t === e) throw new TypeError("A promise cannot be resolved with itself.");if (t && ("object" == typeof t || "function" == typeof t)) {
            var n = t.then;if (t instanceof o) return e._state = 3, e._value = t, void u(e);if ("function" == typeof n) return void l(i(n, t), e);
          }e._state = 1, e._value = t, u(e);
        } catch (t) {
          s(e, t);
        }
      }function s(e, t) {
        e._state = 2, e._value = t, u(e);
      }function u(e) {
        2 === e._state && 0 === e._deferreds.length && o._immediateFn(function () {
          e._handled || o._unhandledRejectionFn(e._value);
        });for (var t = 0, n = e._deferreds.length; t < n; t++) {
          a(e, e._deferreds[t]);
        }e._deferreds = null;
      }function f(e, t, n) {
        this.onFulfilled = "function" == typeof e ? e : null, this.onRejected = "function" == typeof t ? t : null, this.promise = n;
      }function l(e, t) {
        var n = !1;try {
          e(function (e) {
            n || (n = !0, c(t, e));
          }, function (e) {
            n || (n = !0, s(t, e));
          });
        } catch (e) {
          if (n) return;n = !0, s(t, e);
        }
      }var d = setTimeout;o.prototype.catch = function (e) {
        return this.then(null, e);
      }, o.prototype.then = function (e, t) {
        var n = new this.constructor(r);return a(this, new f(e, t, n)), n;
      }, o.all = function (e) {
        var t = Array.prototype.slice.call(e);return new o(function (e, n) {
          function r(o, a) {
            try {
              if (a && ("object" == typeof a || "function" == typeof a)) {
                var c = a.then;if ("function" == typeof c) return void c.call(a, function (e) {
                  r(o, e);
                }, n);
              }t[o] = a, 0 == --i && e(t);
            } catch (e) {
              n(e);
            }
          }if (0 === t.length) return e([]);for (var i = t.length, o = 0; o < t.length; o++) {
            r(o, t[o]);
          }
        });
      }, o.resolve = function (e) {
        return e && "object" == typeof e && e.constructor === o ? e : new o(function (t) {
          t(e);
        });
      }, o.reject = function (e) {
        return new o(function (t, n) {
          n(e);
        });
      }, o.race = function (e) {
        return new o(function (t, n) {
          for (var r = 0, i = e.length; r < i; r++) {
            e[r].then(t, n);
          }
        });
      }, o._immediateFn = "function" == typeof t && function (e) {
        t(e);
      } || function (e) {
        d(e, 0);
      }, o._unhandledRejectionFn = function (e) {
        "undefined" != typeof console && console && console.warn("Possible Unhandled Promise Rejection:", e);
      }, o._setImmediateFn = function (e) {
        o._immediateFn = e;
      }, o._setUnhandledRejectionFn = function (e) {
        o._unhandledRejectionFn = e;
      }, void 0 !== e && e.exports ? e.exports = o : n.Promise || (n.Promise = o);
    }(this);
  }).call(t, n(10).setImmediate);
}, function (e, t, n) {
  (function (e, t) {
    !function (e, n) {
      "use strict";
      function r(e) {
        "function" != typeof e && (e = new Function("" + e));for (var t = new Array(arguments.length - 1), n = 0; n < t.length; n++) {
          t[n] = arguments[n + 1];
        }var r = { callback: e, args: t };return u[s] = r, c(s), s++;
      }function i(e) {
        delete u[e];
      }function o(e) {
        var t = e.callback,
            r = e.args;switch (r.length) {case 0:
            t();break;case 1:
            t(r[0]);break;case 2:
            t(r[0], r[1]);break;case 3:
            t(r[0], r[1], r[2]);break;default:
            t.apply(n, r);}
      }function a(e) {
        if (f) setTimeout(a, 0, e);else {
          var t = u[e];if (t) {
            f = !0;try {
              o(t);
            } finally {
              i(e), f = !1;
            }
          }
        }
      }if (!e.setImmediate) {
        var c,
            s = 1,
            u = {},
            f = !1,
            l = e.document,
            d = Object.getPrototypeOf && Object.getPrototypeOf(e);d = d && d.setTimeout ? d : e, "[object process]" === {}.toString.call(e.process) ? function () {
          c = function c(e) {
            t.nextTick(function () {
              a(e);
            });
          };
        }() : function () {
          if (e.postMessage && !e.importScripts) {
            var t = !0,
                n = e.onmessage;return e.onmessage = function () {
              t = !1;
            }, e.postMessage("", "*"), e.onmessage = n, t;
          }
        }() ? function () {
          var t = "setImmediate$" + Math.random() + "$",
              n = function n(_n) {
            _n.source === e && "string" == typeof _n.data && 0 === _n.data.indexOf(t) && a(+_n.data.slice(t.length));
          };e.addEventListener ? e.addEventListener("message", n, !1) : e.attachEvent("onmessage", n), c = function c(n) {
            e.postMessage(t + n, "*");
          };
        }() : e.MessageChannel ? function () {
          var e = new MessageChannel();e.port1.onmessage = function (e) {
            a(e.data);
          }, c = function c(t) {
            e.port2.postMessage(t);
          };
        }() : l && "onreadystatechange" in l.createElement("script") ? function () {
          var e = l.documentElement;c = function c(t) {
            var n = l.createElement("script");n.onreadystatechange = function () {
              a(t), n.onreadystatechange = null, e.removeChild(n), n = null;
            }, e.appendChild(n);
          };
        }() : function () {
          c = function c(e) {
            setTimeout(a, 0, e);
          };
        }(), d.setImmediate = r, d.clearImmediate = i;
      }
    }("undefined" == typeof self ? void 0 === e ? this : e : self);
  }).call(t, n(1), n(7));
}, function (e, t, n) {
  function r(e, t) {
    this._id = e, this._clearFn = t;
  }var i = Function.prototype.apply;t.setTimeout = function () {
    return new r(i.call(setTimeout, window, arguments), clearTimeout);
  }, t.setInterval = function () {
    return new r(i.call(setInterval, window, arguments), clearInterval);
  }, t.clearTimeout = t.clearInterval = function (e) {
    e && e.close();
  }, r.prototype.unref = r.prototype.ref = function () {}, r.prototype.close = function () {
    this._clearFn.call(window, this._id);
  }, t.enroll = function (e, t) {
    clearTimeout(e._idleTimeoutId), e._idleTimeout = t;
  }, t.unenroll = function (e) {
    clearTimeout(e._idleTimeoutId), e._idleTimeout = -1;
  }, t._unrefActive = t.active = function (e) {
    clearTimeout(e._idleTimeoutId);var t = e._idleTimeout;t >= 0 && (e._idleTimeoutId = setTimeout(function () {
      e._onTimeout && e._onTimeout();
    }, t));
  }, n(9), t.setImmediate = setImmediate, t.clearImmediate = clearImmediate;
}, function (e, t, n) {
  e.exports = n(2);
}]);module.exports = firebase;
}, 441, null, "firebase/app.js");
__d(/* firebase/auth.js */function(global, require, module, exports) {/*! @license Firebase v3.9.0
Build: rev-cc77c9e
Terms: https://firebase.google.com/terms/ */

var firebase = require(441    ); // 441 = ./app
(function () {
  (function () {
    var h,
        aa = aa || {},
        l = this,
        ba = function ba() {},
        ca = function ca(a) {
      var b = typeof a;if ("object" == b) {
        if (a) {
          if (a instanceof Array) return "array";if (a instanceof Object) return b;var c = Object.prototype.toString.call(a);if ("[object Window]" == c) return "object";if ("[object Array]" == c || "number" == typeof a.length && "undefined" != typeof a.splice && "undefined" != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable("splice")) return "array";if ("[object Function]" == c || "undefined" != typeof a.call && "undefined" != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable("call")) return "function";
        } else return "null";
      } else if ("function" == b && "undefined" == typeof a.call) return "object";return b;
    },
        da = function da(a) {
      return null === a;
    },
        ea = function ea(a) {
      return "array" == ca(a);
    },
        fa = function fa(a) {
      var b = ca(a);return "array" == b || "object" == b && "number" == typeof a.length;
    },
        m = function m(a) {
      return "string" == typeof a;
    },
        ga = function ga(a) {
      return "number" == typeof a;
    },
        p = function p(a) {
      return "function" == ca(a);
    },
        ha = function ha(a) {
      var b = typeof a;return "object" == b && null != a || "function" == b;
    },
        ia = function ia(a, b, c) {
      return a.call.apply(a.bind, arguments);
    },
        ja = function ja(a, b, c) {
      if (!a) throw Error();if (2 < arguments.length) {
        var d = Array.prototype.slice.call(arguments, 2);return function () {
          var c = Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(c, d);return a.apply(b, c);
        };
      }return function () {
        return a.apply(b, arguments);
      };
    },
        _q = function q(a, b, c) {
      _q = Function.prototype.bind && -1 != Function.prototype.bind.toString().indexOf("native code") ? ia : ja;return _q.apply(null, arguments);
    },
        ka = function ka(a, b) {
      var c = Array.prototype.slice.call(arguments, 1);return function () {
        var b = c.slice();b.push.apply(b, arguments);return a.apply(this, b);
      };
    },
        la = Date.now || function () {
      return +new Date();
    },
        r = function r(a, b) {
      function c() {}c.prototype = b.prototype;a.xd = b.prototype;a.prototype = new c();a.prototype.constructor = a;a.Tf = function (a, c, f) {
        for (var d = Array(arguments.length - 2), e = 2; e < arguments.length; e++) {
          d[e - 2] = arguments[e];
        }return b.prototype[c].apply(a, d);
      };
    };var t = function t(a) {
      if (Error.captureStackTrace) Error.captureStackTrace(this, t);else {
        var b = Error().stack;b && (this.stack = b);
      }a && (this.message = String(a));
    };r(t, Error);t.prototype.name = "CustomError";var ma = function ma(a, b) {
      for (var c = a.split("%s"), d = "", e = Array.prototype.slice.call(arguments, 1); e.length && 1 < c.length;) {
        d += c.shift() + e.shift();
      }return d + c.join("%s");
    },
        na = String.prototype.trim ? function (a) {
      return a.trim();
    } : function (a) {
      return a.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
    },
        oa = /&/g,
        pa = /</g,
        qa = />/g,
        ra = /"/g,
        sa = /'/g,
        ta = /\x00/g,
        ua = /[\x00&<>"']/,
        u = function u(a, b) {
      return -1 != a.indexOf(b);
    },
        va = function va(a, b) {
      return a < b ? -1 : a > b ? 1 : 0;
    };var wa = function wa(a, b) {
      b.unshift(a);t.call(this, ma.apply(null, b));b.shift();
    };r(wa, t);wa.prototype.name = "AssertionError";
    var xa = function xa(a, b, c, d) {
      var e = "Assertion failed";if (c) var e = e + (": " + c),
          f = d;else a && (e += ": " + a, f = b);throw new wa("" + e, f || []);
    },
        v = function v(a, b, c) {
      a || xa("", null, b, Array.prototype.slice.call(arguments, 2));
    },
        ya = function ya(a, b) {
      throw new wa("Failure" + (a ? ": " + a : ""), Array.prototype.slice.call(arguments, 1));
    },
        za = function za(a, b, c) {
      ga(a) || xa("Expected number but got %s: %s.", [ca(a), a], b, Array.prototype.slice.call(arguments, 2));return a;
    },
        Aa = function Aa(a, b, c) {
      m(a) || xa("Expected string but got %s: %s.", [ca(a), a], b, Array.prototype.slice.call(arguments, 2));
    },
        Ba = function Ba(a, b, c) {
      p(a) || xa("Expected function but got %s: %s.", [ca(a), a], b, Array.prototype.slice.call(arguments, 2));
    };var Ca = Array.prototype.indexOf ? function (a, b, c) {
      v(null != a.length);return Array.prototype.indexOf.call(a, b, c);
    } : function (a, b, c) {
      c = null == c ? 0 : 0 > c ? Math.max(0, a.length + c) : c;if (m(a)) return m(b) && 1 == b.length ? a.indexOf(b, c) : -1;for (; c < a.length; c++) {
        if (c in a && a[c] === b) return c;
      }return -1;
    },
        w = Array.prototype.forEach ? function (a, b, c) {
      v(null != a.length);Array.prototype.forEach.call(a, b, c);
    } : function (a, b, c) {
      for (var d = a.length, e = m(a) ? a.split("") : a, f = 0; f < d; f++) {
        f in e && b.call(c, e[f], f, a);
      }
    },
        Da = function Da(a, b) {
      for (var c = m(a) ? a.split("") : a, d = a.length - 1; 0 <= d; --d) {
        d in c && b.call(void 0, c[d], d, a);
      }
    },
        Ea = Array.prototype.map ? function (a, b, c) {
      v(null != a.length);return Array.prototype.map.call(a, b, c);
    } : function (a, b, c) {
      for (var d = a.length, e = Array(d), f = m(a) ? a.split("") : a, g = 0; g < d; g++) {
        g in f && (e[g] = b.call(c, f[g], g, a));
      }return e;
    },
        Fa = Array.prototype.some ? function (a, b, c) {
      v(null != a.length);return Array.prototype.some.call(a, b, c);
    } : function (a, b, c) {
      for (var d = a.length, e = m(a) ? a.split("") : a, f = 0; f < d; f++) {
        if (f in e && b.call(c, e[f], f, a)) return !0;
      }return !1;
    },
        Ha = function Ha(a) {
      var b;a: {
        b = Ga;for (var c = a.length, d = m(a) ? a.split("") : a, e = 0; e < c; e++) {
          if (e in d && b.call(void 0, d[e], e, a)) {
            b = e;break a;
          }
        }b = -1;
      }return 0 > b ? null : m(a) ? a.charAt(b) : a[b];
    },
        Ia = function Ia(a, b) {
      return 0 <= Ca(a, b);
    },
        Ka = function Ka(a, b) {
      b = Ca(a, b);var c;(c = 0 <= b) && Ja(a, b);return c;
    },
        Ja = function Ja(a, b) {
      v(null != a.length);return 1 == Array.prototype.splice.call(a, b, 1).length;
    },
        La = function La(a, b) {
      var c = 0;Da(a, function (d, e) {
        b.call(void 0, d, e, a) && Ja(a, e) && c++;
      });
    },
        Ma = function Ma(a) {
      return Array.prototype.concat.apply([], arguments);
    },
        Na = function Na(a) {
      var b = a.length;if (0 < b) {
        for (var c = Array(b), d = 0; d < b; d++) {
          c[d] = a[d];
        }return c;
      }return [];
    };var Oa = function Oa(a) {
      return Ea(a, function (a) {
        a = a.toString(16);return 1 < a.length ? a : "0" + a;
      }).join("");
    };var Pa;a: {
      var Qa = l.navigator;if (Qa) {
        var Ra = Qa.userAgent;if (Ra) {
          Pa = Ra;break a;
        }
      }Pa = "";
    }var x = function x(a) {
      return u(Pa, a);
    };var Sa = function Sa(a, b) {
      for (var c in a) {
        b.call(void 0, a[c], c, a);
      }
    },
        Ta = function Ta(a) {
      var b = [],
          c = 0,
          d;for (d in a) {
        b[c++] = a[d];
      }return b;
    },
        Ua = function Ua(a) {
      var b = [],
          c = 0,
          d;for (d in a) {
        b[c++] = d;
      }return b;
    },
        Va = function Va(a) {
      for (var b in a) {
        return !1;
      }return !0;
    },
        Wa = function Wa(a, b) {
      for (var c in a) {
        if (!(c in b) || a[c] !== b[c]) return !1;
      }for (c in b) {
        if (!(c in a)) return !1;
      }return !0;
    },
        Xa = function Xa(a) {
      var b = {},
          c;for (c in a) {
        b[c] = a[c];
      }return b;
    },
        Ya = "constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" "),
        Za = function Za(a, b) {
      for (var c, d, e = 1; e < arguments.length; e++) {
        d = arguments[e];for (c in d) {
          a[c] = d[c];
        }for (var f = 0; f < Ya.length; f++) {
          c = Ya[f], Object.prototype.hasOwnProperty.call(d, c) && (a[c] = d[c]);
        }
      }
    };var $a = function $a(a) {
      $a[" "](a);return a;
    };$a[" "] = ba;var bb = function bb(a, b) {
      var c = ab;return Object.prototype.hasOwnProperty.call(c, a) ? c[a] : c[a] = b(a);
    };var cb = x("Opera"),
        y = x("Trident") || x("MSIE"),
        eb = x("Edge"),
        fb = eb || y,
        gb = x("Gecko") && !(u(Pa.toLowerCase(), "webkit") && !x("Edge")) && !(x("Trident") || x("MSIE")) && !x("Edge"),
        hb = u(Pa.toLowerCase(), "webkit") && !x("Edge"),
        ib = function ib() {
      var a = l.document;return a ? a.documentMode : void 0;
    },
        jb;
    a: {
      var kb = "",
          lb = function () {
        var a = Pa;if (gb) return (/rv\:([^\);]+)(\)|;)/.exec(a)
        );if (eb) return (/Edge\/([\d\.]+)/.exec(a)
        );if (y) return (/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a)
        );if (hb) return (/WebKit\/(\S+)/.exec(a)
        );if (cb) return (/(?:Version)[ \/]?(\S+)/.exec(a)
        );
      }();lb && (kb = lb ? lb[1] : "");if (y) {
        var mb = ib();if (null != mb && mb > parseFloat(kb)) {
          jb = String(mb);break a;
        }
      }jb = kb;
    }
    var nb = jb,
        ab = {},
        z = function z(a) {
      return bb(a, function () {
        for (var b = 0, c = na(String(nb)).split("."), d = na(String(a)).split("."), e = Math.max(c.length, d.length), f = 0; 0 == b && f < e; f++) {
          var g = c[f] || "",
              k = d[f] || "";do {
            g = /(\d*)(\D*)(.*)/.exec(g) || ["", "", "", ""];k = /(\d*)(\D*)(.*)/.exec(k) || ["", "", "", ""];if (0 == g[0].length && 0 == k[0].length) break;b = va(0 == g[1].length ? 0 : parseInt(g[1], 10), 0 == k[1].length ? 0 : parseInt(k[1], 10)) || va(0 == g[2].length, 0 == k[2].length) || va(g[2], k[2]);g = g[3];k = k[3];
          } while (0 == b);
        }return 0 <= b;
      });
    },
        ob;var pb = l.document;
    ob = pb && y ? ib() || ("CSS1Compat" == pb.compatMode ? parseInt(nb, 10) : 5) : void 0;var qb = null,
        rb = null,
        tb = function tb(a) {
      var b = "";sb(a, function (a) {
        b += String.fromCharCode(a);
      });return b;
    },
        sb = function sb(a, b) {
      function c(b) {
        for (; d < a.length;) {
          var c = a.charAt(d++),
              e = rb[c];if (null != e) return e;if (!/^[\s\xa0]*$/.test(c)) throw Error("Unknown base64 encoding at char: " + c);
        }return b;
      }ub();for (var d = 0;;) {
        var e = c(-1),
            f = c(0),
            g = c(64),
            k = c(64);if (64 === k && -1 === e) break;b(e << 2 | f >> 4);64 != g && (b(f << 4 & 240 | g >> 2), 64 != k && b(g << 6 & 192 | k));
      }
    },
        ub = function ub() {
      if (!qb) {
        qb = {};rb = {};for (var a = 0; 65 > a; a++) {
          qb[a] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(a), rb[qb[a]] = a, 62 <= a && (rb["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_.".charAt(a)] = a);
        }
      }
    };var vb = function vb() {
      this.Da = -1;
    };var yb = function yb(a, b) {
      this.Da = 64;this.ec = l.Uint8Array ? new Uint8Array(this.Da) : Array(this.Da);this.Fc = this.hb = 0;this.h = [];this.lf = a;this.Wd = b;this.Mf = l.Int32Array ? new Int32Array(64) : Array(64);void 0 !== wb || (wb = l.Int32Array ? new Int32Array(xb) : xb);this.reset();
    },
        wb;r(yb, vb);for (var zb = [], Ab = 0; 63 > Ab; Ab++) {
      zb[Ab] = 0;
    }var Bb = Ma(128, zb);yb.prototype.reset = function () {
      this.Fc = this.hb = 0;this.h = l.Int32Array ? new Int32Array(this.Wd) : Na(this.Wd);
    };
    var Cb = function Cb(a) {
      var b = a.ec;v(b.length == a.Da);for (var c = a.Mf, d = 0, e = 0; e < b.length;) {
        c[d++] = b[e] << 24 | b[e + 1] << 16 | b[e + 2] << 8 | b[e + 3], e = 4 * d;
      }for (b = 16; 64 > b; b++) {
        var e = c[b - 15] | 0,
            d = c[b - 2] | 0,
            f = (c[b - 16] | 0) + ((e >>> 7 | e << 25) ^ (e >>> 18 | e << 14) ^ e >>> 3) | 0,
            g = (c[b - 7] | 0) + ((d >>> 17 | d << 15) ^ (d >>> 19 | d << 13) ^ d >>> 10) | 0;c[b] = f + g | 0;
      }for (var d = a.h[0] | 0, e = a.h[1] | 0, k = a.h[2] | 0, n = a.h[3] | 0, C = a.h[4] | 0, db = a.h[5] | 0, Pb = a.h[6] | 0, f = a.h[7] | 0, b = 0; 64 > b; b++) {
        var Ah = ((d >>> 2 | d << 30) ^ (d >>> 13 | d << 19) ^ (d >>> 22 | d << 10)) + (d & e ^ d & k ^ e & k) | 0,
            g = C & db ^ ~C & Pb,
            f = f + ((C >>> 6 | C << 26) ^ (C >>> 11 | C << 21) ^ (C >>> 25 | C << 7)) | 0,
            g = g + (wb[b] | 0) | 0,
            g = f + (g + (c[b] | 0) | 0) | 0,
            f = Pb,
            Pb = db,
            db = C,
            C = n + g | 0,
            n = k,
            k = e,
            e = d,
            d = g + Ah | 0;
      }a.h[0] = a.h[0] + d | 0;a.h[1] = a.h[1] + e | 0;a.h[2] = a.h[2] + k | 0;a.h[3] = a.h[3] + n | 0;a.h[4] = a.h[4] + C | 0;a.h[5] = a.h[5] + db | 0;a.h[6] = a.h[6] + Pb | 0;a.h[7] = a.h[7] + f | 0;
    };
    yb.prototype.update = function (a, b) {
      void 0 === b && (b = a.length);var c = 0,
          d = this.hb;if (m(a)) for (; c < b;) {
        this.ec[d++] = a.charCodeAt(c++), d == this.Da && (Cb(this), d = 0);
      } else if (fa(a)) for (; c < b;) {
        var e = a[c++];if (!("number" == typeof e && 0 <= e && 255 >= e && e == (e | 0))) throw Error("message must be a byte array");this.ec[d++] = e;d == this.Da && (Cb(this), d = 0);
      } else throw Error("message must be string or array");this.hb = d;this.Fc += b;
    };
    yb.prototype.digest = function () {
      var a = [],
          b = 8 * this.Fc;56 > this.hb ? this.update(Bb, 56 - this.hb) : this.update(Bb, this.Da - (this.hb - 56));for (var c = 63; 56 <= c; c--) {
        this.ec[c] = b & 255, b /= 256;
      }Cb(this);for (c = b = 0; c < this.lf; c++) {
        for (var d = 24; 0 <= d; d -= 8) {
          a[b++] = this.h[c] >> d & 255;
        }
      }return a;
    };
    var xb = [1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298];var Eb = function Eb() {
      yb.call(this, 8, Db);
    };r(Eb, yb);var Db = [1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225];var Fb = function Fb() {
      this.Ga = this.Ga;this.tc = this.tc;
    };Fb.prototype.Ga = !1;Fb.prototype.isDisposed = function () {
      return this.Ga;
    };Fb.prototype.cb = function () {
      if (this.tc) for (; this.tc.length;) {
        this.tc.shift()();
      }
    };var Gb = !y || 9 <= Number(ob),
        Hb = y && !z("9");!hb || z("528");gb && z("1.9b") || y && z("8") || cb && z("9.5") || hb && z("528");gb && !z("8") || y && z("9");var Ib = function Ib(a, b) {
      this.type = a;this.currentTarget = this.target = b;this.defaultPrevented = this.nb = !1;this.ee = !0;
    };Ib.prototype.preventDefault = function () {
      this.defaultPrevented = !0;this.ee = !1;
    };var Jb = function Jb(a, b) {
      Ib.call(this, a ? a.type : "");this.relatedTarget = this.currentTarget = this.target = null;this.button = this.screenY = this.screenX = this.clientY = this.clientX = this.offsetY = this.offsetX = 0;this.key = "";this.charCode = this.keyCode = 0;this.metaKey = this.shiftKey = this.altKey = this.ctrlKey = !1;this.eb = this.state = null;a && this.init(a, b);
    };r(Jb, Ib);
    Jb.prototype.init = function (a, b) {
      var c = this.type = a.type,
          d = a.changedTouches ? a.changedTouches[0] : null;this.target = a.target || a.srcElement;this.currentTarget = b;if (b = a.relatedTarget) {
        if (gb) {
          var e;a: {
            try {
              $a(b.nodeName);e = !0;break a;
            } catch (f) {}e = !1;
          }e || (b = null);
        }
      } else "mouseover" == c ? b = a.fromElement : "mouseout" == c && (b = a.toElement);this.relatedTarget = b;null === d ? (this.offsetX = hb || void 0 !== a.offsetX ? a.offsetX : a.layerX, this.offsetY = hb || void 0 !== a.offsetY ? a.offsetY : a.layerY, this.clientX = void 0 !== a.clientX ? a.clientX : a.pageX, this.clientY = void 0 !== a.clientY ? a.clientY : a.pageY, this.screenX = a.screenX || 0, this.screenY = a.screenY || 0) : (this.clientX = void 0 !== d.clientX ? d.clientX : d.pageX, this.clientY = void 0 !== d.clientY ? d.clientY : d.pageY, this.screenX = d.screenX || 0, this.screenY = d.screenY || 0);this.button = a.button;this.keyCode = a.keyCode || 0;this.key = a.key || "";this.charCode = a.charCode || ("keypress" == c ? a.keyCode : 0);this.ctrlKey = a.ctrlKey;this.altKey = a.altKey;this.shiftKey = a.shiftKey;this.metaKey = a.metaKey;this.state = a.state;this.eb = a;a.defaultPrevented && this.preventDefault();
    };Jb.prototype.preventDefault = function () {
      Jb.xd.preventDefault.call(this);var a = this.eb;if (a.preventDefault) a.preventDefault();else if (a.returnValue = !1, Hb) try {
        if (a.ctrlKey || 112 <= a.keyCode && 123 >= a.keyCode) a.keyCode = -1;
      } catch (b) {}
    };Jb.prototype.Pe = function () {
      return this.eb;
    };var Kb = "closure_listenable_" + (1E6 * Math.random() | 0),
        Lb = 0;var Mb = function Mb(a, b, c, d, e) {
      this.listener = a;this.xc = null;this.src = b;this.type = c;this.capture = !!d;this.kc = e;this.key = ++Lb;this.rb = this.dc = !1;
    },
        Nb = function Nb(a) {
      a.rb = !0;a.listener = null;a.xc = null;a.src = null;a.kc = null;
    };var Ob = function Ob(a) {
      this.src = a;this.G = {};this.$b = 0;
    };Ob.prototype.add = function (a, b, c, d, e) {
      var f = a.toString();a = this.G[f];a || (a = this.G[f] = [], this.$b++);var g = Qb(a, b, d, e);-1 < g ? (b = a[g], c || (b.dc = !1)) : (b = new Mb(b, this.src, f, !!d, e), b.dc = c, a.push(b));return b;
    };Ob.prototype.remove = function (a, b, c, d) {
      a = a.toString();if (!(a in this.G)) return !1;var e = this.G[a];b = Qb(e, b, c, d);return -1 < b ? (Nb(e[b]), Ja(e, b), 0 == e.length && (delete this.G[a], this.$b--), !0) : !1;
    };
    var Rb = function Rb(a, b) {
      var c = b.type;c in a.G && Ka(a.G[c], b) && (Nb(b), 0 == a.G[c].length && (delete a.G[c], a.$b--));
    };Ob.prototype.Uc = function (a, b, c, d) {
      a = this.G[a.toString()];var e = -1;a && (e = Qb(a, b, c, d));return -1 < e ? a[e] : null;
    };var Qb = function Qb(a, b, c, d) {
      for (var e = 0; e < a.length; ++e) {
        var f = a[e];if (!f.rb && f.listener == b && f.capture == !!c && f.kc == d) return e;
      }return -1;
    };var Sb = "closure_lm_" + (1E6 * Math.random() | 0),
        Tb = {},
        Ub = 0,
        Vb = function Vb(a, b, c, d, e) {
      if (ea(b)) for (var f = 0; f < b.length; f++) {
        Vb(a, b[f], c, d, e);
      } else c = Wb(c), a && a[Kb] ? a.listen(b, c, d, e) : Xb(a, b, c, !1, d, e);
    },
        Xb = function Xb(a, b, c, d, e, f) {
      if (!b) throw Error("Invalid event type");var g = !!e,
          k = Yb(a);k || (a[Sb] = k = new Ob(a));c = k.add(b, c, d, e, f);if (!c.xc) {
        d = Zb();c.xc = d;d.src = a;d.listener = c;if (a.addEventListener) a.addEventListener(b.toString(), d, g);else if (a.attachEvent) a.attachEvent($b(b.toString()), d);else throw Error("addEventListener and attachEvent are unavailable.");
        Ub++;
      }
    },
        Zb = function Zb() {
      var a = ac,
          b = Gb ? function (c) {
        return a.call(b.src, b.listener, c);
      } : function (c) {
        c = a.call(b.src, b.listener, c);if (!c) return c;
      };return b;
    },
        bc = function bc(a, b, c, d, e) {
      if (ea(b)) for (var f = 0; f < b.length; f++) {
        bc(a, b[f], c, d, e);
      } else c = Wb(c), a && a[Kb] ? cc(a, b, c, d, e) : Xb(a, b, c, !0, d, e);
    },
        dc = function dc(a, b, c, d, e) {
      if (ea(b)) for (var f = 0; f < b.length; f++) {
        dc(a, b[f], c, d, e);
      } else c = Wb(c), a && a[Kb] ? a.fa.remove(String(b), c, d, e) : a && (a = Yb(a)) && (b = a.Uc(b, c, !!d, e)) && ec(b);
    },
        ec = function ec(a) {
      if (!ga(a) && a && !a.rb) {
        var b = a.src;if (b && b[Kb]) Rb(b.fa, a);else {
          var c = a.type,
              d = a.xc;b.removeEventListener ? b.removeEventListener(c, d, a.capture) : b.detachEvent && b.detachEvent($b(c), d);Ub--;(c = Yb(b)) ? (Rb(c, a), 0 == c.$b && (c.src = null, b[Sb] = null)) : Nb(a);
        }
      }
    },
        $b = function $b(a) {
      return a in Tb ? Tb[a] : Tb[a] = "on" + a;
    },
        gc = function gc(a, b, c, d) {
      var e = !0;if (a = Yb(a)) if (b = a.G[b.toString()]) for (b = b.concat(), a = 0; a < b.length; a++) {
        var f = b[a];f && f.capture == c && !f.rb && (f = fc(f, d), e = e && !1 !== f);
      }return e;
    },
        fc = function fc(a, b) {
      var c = a.listener,
          d = a.kc || a.src;a.dc && ec(a);return c.call(d, b);
    },
        ac = function ac(a, b) {
      if (a.rb) return !0;if (!Gb) {
        if (!b) a: {
          b = ["window", "event"];for (var c = l, d; d = b.shift();) {
            if (null != c[d]) c = c[d];else {
              b = null;break a;
            }
          }b = c;
        }d = b;b = new Jb(d, this);c = !0;if (!(0 > d.keyCode || void 0 != d.returnValue)) {
          a: {
            var e = !1;if (0 == d.keyCode) try {
              d.keyCode = -1;break a;
            } catch (g) {
              e = !0;
            }if (e || void 0 == d.returnValue) d.returnValue = !0;
          }d = [];for (e = b.currentTarget; e; e = e.parentNode) {
            d.push(e);
          }a = a.type;for (e = d.length - 1; !b.nb && 0 <= e; e--) {
            b.currentTarget = d[e];var f = gc(d[e], a, !0, b),
                c = c && f;
          }for (e = 0; !b.nb && e < d.length; e++) {
            b.currentTarget = d[e], f = gc(d[e], a, !1, b), c = c && f;
          }
        }return c;
      }return fc(a, new Jb(b, this));
    },
        Yb = function Yb(a) {
      a = a[Sb];return a instanceof Ob ? a : null;
    },
        hc = "__closure_events_fn_" + (1E9 * Math.random() >>> 0),
        Wb = function Wb(a) {
      v(a, "Listener can not be null.");if (p(a)) return a;v(a.handleEvent, "An object listener must have handleEvent method.");a[hc] || (a[hc] = function (b) {
        return a.handleEvent(b);
      });return a[hc];
    };var ic = /^[+a-zA-Z0-9_.!#$%&'*\/=?^`{|}~-]+@([a-zA-Z0-9-]+\.)+[a-zA-Z0-9]{2,63}$/;var kc = function kc() {
      this.Cc = "";this.we = jc;
    };kc.prototype.Eb = !0;kc.prototype.Bb = function () {
      return this.Cc;
    };kc.prototype.toString = function () {
      return "Const{" + this.Cc + "}";
    };var lc = function lc(a) {
      if (a instanceof kc && a.constructor === kc && a.we === jc) return a.Cc;ya("expected object of type Const, got '" + a + "'");return "type_error:Const";
    },
        jc = {},
        mc = function mc(a) {
      var b = new kc();b.Cc = a;return b;
    };mc("");var oc = function oc() {
      this.wc = "";this.xe = nc;
    };oc.prototype.Eb = !0;oc.prototype.Bb = function () {
      return this.wc;
    };oc.prototype.toString = function () {
      return "TrustedResourceUrl{" + this.wc + "}";
    };var nc = {};var qc = function qc() {
      this.pa = "";this.ve = pc;
    };qc.prototype.Eb = !0;qc.prototype.Bb = function () {
      return this.pa;
    };qc.prototype.toString = function () {
      return "SafeUrl{" + this.pa + "}";
    };
    var rc = function rc(a) {
      if (a instanceof qc && a.constructor === qc && a.ve === pc) return a.pa;ya("expected object of type SafeUrl, got '" + a + "' of type " + ca(a));return "type_error:SafeUrl";
    },
        sc = /^(?:(?:https?|mailto|ftp):|[^&:/?#]*(?:[/?#]|$))/i,
        uc = function uc(a) {
      if (a instanceof qc) return a;a = a.Eb ? a.Bb() : String(a);sc.test(a) || (a = "about:invalid#zClosurez");return tc(a);
    },
        pc = {},
        tc = function tc(a) {
      var b = new qc();b.pa = a;return b;
    };tc("about:blank");var xc = function xc(a) {
      var b = [];vc(new wc(), a, b);return b.join("");
    },
        wc = function wc() {
      this.yc = void 0;
    },
        vc = function vc(a, b, c) {
      if (null == b) c.push("null");else {
        if ("object" == typeof b) {
          if (ea(b)) {
            var d = b;b = d.length;c.push("[");for (var e = "", f = 0; f < b; f++) {
              c.push(e), e = d[f], vc(a, a.yc ? a.yc.call(d, String(f), e) : e, c), e = ",";
            }c.push("]");return;
          }if (b instanceof String || b instanceof Number || b instanceof Boolean) b = b.valueOf();else {
            c.push("{");f = "";for (d in b) {
              Object.prototype.hasOwnProperty.call(b, d) && (e = b[d], "function" != typeof e && (c.push(f), yc(d, c), c.push(":"), vc(a, a.yc ? a.yc.call(b, d, e) : e, c), f = ","));
            }c.push("}");return;
          }
        }switch (typeof b) {case "string":
            yc(b, c);break;case "number":
            c.push(isFinite(b) && !isNaN(b) ? String(b) : "null");break;case "boolean":
            c.push(String(b));break;case "function":
            c.push("null");break;default:
            throw Error("Unknown type: " + typeof b);}
      }
    },
        zc = { '"': '\\"', "\\": "\\\\", "/": "\\/", "\b": "\\b", "\f": "\\f", "\n": "\\n", "\r": "\\r", "\t": "\\t", "\x0B": "\\u000b" },
        Ac = /\uffff/.test("\uFFFF") ? /[\\\"\x00-\x1f\x7f-\uffff]/g : /[\\\"\x00-\x1f\x7f-\xff]/g,
        yc = function yc(a, b) {
      b.push('"', a.replace(Ac, function (a) {
        var b = zc[a];b || (b = "\\u" + (a.charCodeAt(0) | 65536).toString(16).substr(1), zc[a] = b);return b;
      }), '"');
    };var Bc = function Bc() {};Bc.prototype.Dd = null;var Cc = function Cc(a) {
      return a.Dd || (a.Dd = a.$c());
    };var Dc,
        Ec = function Ec() {};r(Ec, Bc);Ec.prototype.fc = function () {
      var a = Fc(this);return a ? new ActiveXObject(a) : new XMLHttpRequest();
    };Ec.prototype.$c = function () {
      var a = {};Fc(this) && (a[0] = !0, a[1] = !0);return a;
    };
    var Fc = function Fc(a) {
      if (!a.Vd && "undefined" == typeof XMLHttpRequest && "undefined" != typeof ActiveXObject) {
        for (var b = ["MSXML2.XMLHTTP.6.0", "MSXML2.XMLHTTP.3.0", "MSXML2.XMLHTTP", "Microsoft.XMLHTTP"], c = 0; c < b.length; c++) {
          var d = b[c];try {
            return new ActiveXObject(d), a.Vd = d;
          } catch (e) {}
        }throw Error("Could not create ActiveXObject. ActiveX might be disabled, or MSXML might not be installed");
      }return a.Vd;
    };Dc = new Ec();var Gc = function Gc() {};r(Gc, Bc);Gc.prototype.fc = function () {
      var a = new XMLHttpRequest();if ("withCredentials" in a) return a;if ("undefined" != typeof XDomainRequest) return new Hc();throw Error("Unsupported browser");
    };Gc.prototype.$c = function () {
      return {};
    };
    var Hc = function Hc() {
      this.ua = new XDomainRequest();this.readyState = 0;this.onreadystatechange = null;this.responseText = "";this.status = -1;this.statusText = this.responseXML = null;this.ua.onload = _q(this.Re, this);this.ua.onerror = _q(this.Sd, this);this.ua.onprogress = _q(this.Se, this);this.ua.ontimeout = _q(this.Te, this);
    };h = Hc.prototype;h.open = function (a, b, c) {
      if (null != c && !c) throw Error("Only async requests are supported.");this.ua.open(a, b);
    };
    h.send = function (a) {
      if (a) {
        if ("string" == typeof a) this.ua.send(a);else throw Error("Only string data is supported");
      } else this.ua.send();
    };h.abort = function () {
      this.ua.abort();
    };h.setRequestHeader = function () {};h.Re = function () {
      this.status = 200;this.responseText = this.ua.responseText;Ic(this, 4);
    };h.Sd = function () {
      this.status = 500;this.responseText = "";Ic(this, 4);
    };h.Te = function () {
      this.Sd();
    };h.Se = function () {
      this.status = 200;Ic(this, 1);
    };var Ic = function Ic(a, b) {
      a.readyState = b;if (a.onreadystatechange) a.onreadystatechange();
    };var Jc = function Jc(a, b, c) {
      this.ef = c;this.Fe = a;this.wf = b;this.sc = 0;this.lc = null;
    };Jc.prototype.get = function () {
      var a;0 < this.sc ? (this.sc--, a = this.lc, this.lc = a.next, a.next = null) : a = this.Fe();return a;
    };Jc.prototype.put = function (a) {
      this.wf(a);this.sc < this.ef && (this.sc++, a.next = this.lc, this.lc = a);
    };var Kc = function Kc(a) {
      l.setTimeout(function () {
        throw a;
      }, 0);
    },
        Lc,
        Mc = function Mc() {
      var a = l.MessageChannel;"undefined" === typeof a && "undefined" !== typeof window && window.postMessage && window.addEventListener && !x("Presto") && (a = function a() {
        var a = document.createElement("IFRAME");a.style.display = "none";a.src = "";document.documentElement.appendChild(a);var b = a.contentWindow,
            a = b.document;a.open();a.write("");a.close();var c = "callImmediate" + Math.random(),
            d = "file:" == b.location.protocol ? "*" : b.location.protocol + "//" + b.location.host,
            a = _q(function (a) {
          if (("*" == d || a.origin == d) && a.data == c) this.port1.onmessage();
        }, this);b.addEventListener("message", a, !1);this.port1 = {};this.port2 = { postMessage: function postMessage() {
            b.postMessage(c, d);
          } };
      });if ("undefined" !== typeof a && !x("Trident") && !x("MSIE")) {
        var b = new a(),
            c = {},
            d = c;b.port1.onmessage = function () {
          if (void 0 !== c.next) {
            c = c.next;var a = c.Gd;c.Gd = null;a();
          }
        };return function (a) {
          d.next = { Gd: a };d = d.next;b.port2.postMessage(0);
        };
      }return "undefined" !== typeof document && "onreadystatechange" in document.createElement("SCRIPT") ? function (a) {
        var b = document.createElement("SCRIPT");b.onreadystatechange = function () {
          b.onreadystatechange = null;b.parentNode.removeChild(b);b = null;a();a = null;
        };document.documentElement.appendChild(b);
      } : function (a) {
        l.setTimeout(a, 0);
      };
    };var Nc = function Nc() {
      this.Jc = this.Za = null;
    },
        Pc = new Jc(function () {
      return new Oc();
    }, function (a) {
      a.reset();
    }, 100);Nc.prototype.add = function (a, b) {
      var c = Pc.get();c.set(a, b);this.Jc ? this.Jc.next = c : (v(!this.Za), this.Za = c);this.Jc = c;
    };Nc.prototype.remove = function () {
      var a = null;this.Za && (a = this.Za, this.Za = this.Za.next, this.Za || (this.Jc = null), a.next = null);return a;
    };var Oc = function Oc() {
      this.next = this.scope = this.Tc = null;
    };Oc.prototype.set = function (a, b) {
      this.Tc = a;this.scope = b;this.next = null;
    };
    Oc.prototype.reset = function () {
      this.next = this.scope = this.Tc = null;
    };var Uc = function Uc(a, b) {
      Qc || Rc();Sc || (Qc(), Sc = !0);Tc.add(a, b);
    },
        Qc,
        Rc = function Rc() {
      if (-1 != String(l.Promise).indexOf("[native code]")) {
        var a = l.Promise.resolve(void 0);Qc = function Qc() {
          a.then(Vc);
        };
      } else Qc = function Qc() {
        var a = Vc;!p(l.setImmediate) || l.Window && l.Window.prototype && !x("Edge") && l.Window.prototype.setImmediate == l.setImmediate ? (Lc || (Lc = Mc()), Lc(a)) : l.setImmediate(a);
      };
    },
        Sc = !1,
        Tc = new Nc(),
        Vc = function Vc() {
      for (var a; a = Tc.remove();) {
        try {
          a.Tc.call(a.scope);
        } catch (b) {
          Kc(b);
        }Pc.put(a);
      }Sc = !1;
    };!gb && !y || y && 9 <= Number(ob) || gb && z("1.9.1");y && z("9");var Xc = function Xc() {
      this.pa = "";this.ue = Wc;
    };Xc.prototype.Eb = !0;Xc.prototype.Bb = function () {
      return this.pa;
    };Xc.prototype.toString = function () {
      return "SafeHtml{" + this.pa + "}";
    };var Yc = function Yc(a) {
      if (a instanceof Xc && a.constructor === Xc && a.ue === Wc) return a.pa;ya("expected object of type SafeHtml, got '" + a + "' of type " + ca(a));return "type_error:SafeHtml";
    },
        Wc = {};Xc.prototype.$e = function (a) {
      this.pa = a;return this;
    };var $c = function $c(a, b) {
      Sa(b, function (b, d) {
        b && b.Eb && (b = b.Bb());"style" == d ? a.style.cssText = b : "class" == d ? a.className = b : "for" == d ? a.htmlFor = b : Zc.hasOwnProperty(d) ? a.setAttribute(Zc[d], b) : 0 == d.lastIndexOf("aria-", 0) || 0 == d.lastIndexOf("data-", 0) ? a.setAttribute(d, b) : a[d] = b;
      });
    },
        Zc = { cellpadding: "cellPadding", cellspacing: "cellSpacing", colspan: "colSpan", frameborder: "frameBorder", height: "height", maxlength: "maxLength", nonce: "nonce", role: "role", rowspan: "rowSpan", type: "type", usemap: "useMap", valign: "vAlign", width: "width" };var ad = function ad(a) {
      a.prototype.then = a.prototype.then;a.prototype.$goog_Thenable = !0;
    },
        bd = function bd(a) {
      if (!a) return !1;try {
        return !!a.$goog_Thenable;
      } catch (b) {
        return !1;
      }
    };var A = function A(a, b) {
      this.N = 0;this.ra = void 0;this.bb = this.na = this.s = null;this.jc = this.Sc = !1;if (a != ba) try {
        var c = this;a.call(b, function (a) {
          cd(c, 2, a);
        }, function (a) {
          if (!(a instanceof dd)) try {
            if (a instanceof Error) throw a;throw Error("Promise rejected.");
          } catch (e) {}cd(c, 3, a);
        });
      } catch (d) {
        cd(this, 3, d);
      }
    },
        ed = function ed() {
      this.next = this.context = this.jb = this.Oa = this.child = null;this.xb = !1;
    };ed.prototype.reset = function () {
      this.context = this.jb = this.Oa = this.child = null;this.xb = !1;
    };
    var fd = new Jc(function () {
      return new ed();
    }, function (a) {
      a.reset();
    }, 100),
        gd = function gd(a, b, c) {
      var d = fd.get();d.Oa = a;d.jb = b;d.context = c;return d;
    },
        B = function B(a) {
      if (a instanceof A) return a;var b = new A(ba);cd(b, 2, a);return b;
    },
        D = function D(a) {
      return new A(function (b, c) {
        c(a);
      });
    },
        id = function id(a, b, c) {
      hd(a, b, c, null) || Uc(ka(b, a));
    },
        jd = function jd(a) {
      return new A(function (b) {
        var c = a.length,
            d = [];if (c) for (var e = function e(a, _e, f) {
          c--;d[a] = _e ? { Ne: !0, value: f } : { Ne: !1, reason: f };0 == c && b(d);
        }, f = 0, g; f < a.length; f++) {
          g = a[f], id(g, ka(e, f, !0), ka(e, f, !1));
        } else b(d);
      });
    };A.prototype.then = function (a, b, c) {
      null != a && Ba(a, "opt_onFulfilled should be a function.");null != b && Ba(b, "opt_onRejected should be a function. Did you pass opt_context as the second argument instead of the third?");return kd(this, p(a) ? a : null, p(b) ? b : null, c);
    };ad(A);var md = function md(a, b) {
      b = gd(b, b, void 0);b.xb = !0;ld(a, b);return a;
    };A.prototype.f = function (a, b) {
      return kd(this, null, a, b);
    };A.prototype.cancel = function (a) {
      0 == this.N && Uc(function () {
        var b = new dd(a);nd(this, b);
      }, this);
    };
    var nd = function nd(a, b) {
      if (0 == a.N) if (a.s) {
        var c = a.s;if (c.na) {
          for (var d = 0, e = null, f = null, g = c.na; g && (g.xb || (d++, g.child == a && (e = g), !(e && 1 < d))); g = g.next) {
            e || (f = g);
          }e && (0 == c.N && 1 == d ? nd(c, b) : (f ? (d = f, v(c.na), v(null != d), d.next == c.bb && (c.bb = d), d.next = d.next.next) : od(c), pd(c, e, 3, b)));
        }a.s = null;
      } else cd(a, 3, b);
    },
        ld = function ld(a, b) {
      a.na || 2 != a.N && 3 != a.N || qd(a);v(null != b.Oa);a.bb ? a.bb.next = b : a.na = b;a.bb = b;
    },
        kd = function kd(a, b, c, d) {
      var e = gd(null, null, null);e.child = new A(function (a, g) {
        e.Oa = b ? function (c) {
          try {
            var e = b.call(d, c);a(e);
          } catch (C) {
            g(C);
          }
        } : a;e.jb = c ? function (b) {
          try {
            var e = c.call(d, b);void 0 === e && b instanceof dd ? g(b) : a(e);
          } catch (C) {
            g(C);
          }
        } : g;
      });e.child.s = a;ld(a, e);return e.child;
    };A.prototype.Jf = function (a) {
      v(1 == this.N);this.N = 0;cd(this, 2, a);
    };A.prototype.Kf = function (a) {
      v(1 == this.N);this.N = 0;cd(this, 3, a);
    };
    var cd = function cd(a, b, c) {
      0 == a.N && (a === c && (b = 3, c = new TypeError("Promise cannot resolve to itself")), a.N = 1, hd(c, a.Jf, a.Kf, a) || (a.ra = c, a.N = b, a.s = null, qd(a), 3 != b || c instanceof dd || rd(a, c)));
    },
        hd = function hd(a, b, c, d) {
      if (a instanceof A) return null != b && Ba(b, "opt_onFulfilled should be a function."), null != c && Ba(c, "opt_onRejected should be a function. Did you pass opt_context as the second argument instead of the third?"), ld(a, gd(b || ba, c || null, d)), !0;if (bd(a)) return a.then(b, c, d), !0;if (ha(a)) try {
        var e = a.then;if (p(e)) return sd(a, e, b, c, d), !0;
      } catch (f) {
        return c.call(d, f), !0;
      }return !1;
    },
        sd = function sd(a, b, c, d, e) {
      var f = !1,
          g = function g(a) {
        f || (f = !0, c.call(e, a));
      },
          k = function k(a) {
        f || (f = !0, d.call(e, a));
      };try {
        b.call(a, g, k);
      } catch (n) {
        k(n);
      }
    },
        qd = function qd(a) {
      a.Sc || (a.Sc = !0, Uc(a.Je, a));
    },
        od = function od(a) {
      var b = null;a.na && (b = a.na, a.na = b.next, b.next = null);a.na || (a.bb = null);null != b && v(null != b.Oa);return b;
    };A.prototype.Je = function () {
      for (var a; a = od(this);) {
        pd(this, a, this.N, this.ra);
      }this.Sc = !1;
    };
    var pd = function pd(a, b, c, d) {
      if (3 == c && b.jb && !b.xb) for (; a && a.jc; a = a.s) {
        a.jc = !1;
      }if (b.child) b.child.s = null, td(b, c, d);else try {
        b.xb ? b.Oa.call(b.context) : td(b, c, d);
      } catch (e) {
        ud.call(null, e);
      }fd.put(b);
    },
        td = function td(a, b, c) {
      2 == b ? a.Oa.call(a.context, c) : a.jb && a.jb.call(a.context, c);
    },
        rd = function rd(a, b) {
      a.jc = !0;Uc(function () {
        a.jc && ud.call(null, b);
      });
    },
        ud = Kc,
        dd = function dd(a) {
      t.call(this, a);
    };r(dd, t);dd.prototype.name = "cancel";
    var vd = function vd(a, b) {
      this.zc = [];this.$d = a;this.Jd = b || null;this.Cb = this.fb = !1;this.ra = void 0;this.ud = this.Cd = this.Nc = !1;this.Gc = 0;this.s = null;this.Oc = 0;
    };vd.prototype.cancel = function (a) {
      if (this.fb) this.ra instanceof vd && this.ra.cancel();else {
        if (this.s) {
          var b = this.s;delete this.s;a ? b.cancel(a) : (b.Oc--, 0 >= b.Oc && b.cancel());
        }this.$d ? this.$d.call(this.Jd, this) : this.ud = !0;this.fb || wd(this, new xd());
      }
    };vd.prototype.Hd = function (a, b) {
      this.Nc = !1;yd(this, a, b);
    };
    var yd = function yd(a, b, c) {
      a.fb = !0;a.ra = c;a.Cb = !b;zd(a);
    },
        Bd = function Bd(a) {
      if (a.fb) {
        if (!a.ud) throw new Ad();a.ud = !1;
      }
    };vd.prototype.callback = function (a) {
      Bd(this);Cd(a);yd(this, !0, a);
    };
    var wd = function wd(a, b) {
      Bd(a);Cd(b);yd(a, !1, b);
    },
        Cd = function Cd(a) {
      v(!(a instanceof vd), "An execution sequence may not be initiated with a blocking Deferred.");
    },
        Gd = function Gd(a) {
      var b = Dd("https://apis.google.com/js/client.js?onload=" + Ed);Fd(b, null, a, void 0);
    },
        Fd = function Fd(a, b, c, d) {
      v(!a.Cd, "Blocking Deferreds can not be re-used");a.zc.push([b, c, d]);a.fb && zd(a);
    };vd.prototype.then = function (a, b, c) {
      var d,
          e,
          f = new A(function (a, b) {
        d = a;e = b;
      });Fd(this, d, function (a) {
        a instanceof xd ? f.cancel() : e(a);
      });return f.then(a, b, c);
    };
    ad(vd);
    var Hd = function Hd(a) {
      return Fa(a.zc, function (a) {
        return p(a[1]);
      });
    },
        zd = function zd(a) {
      if (a.Gc && a.fb && Hd(a)) {
        var b = a.Gc,
            c = Id[b];c && (l.clearTimeout(c.Db), delete Id[b]);a.Gc = 0;
      }a.s && (a.s.Oc--, delete a.s);for (var b = a.ra, d = c = !1; a.zc.length && !a.Nc;) {
        var e = a.zc.shift(),
            f = e[0],
            g = e[1],
            e = e[2];if (f = a.Cb ? g : f) try {
          var k = f.call(e || a.Jd, b);void 0 !== k && (a.Cb = a.Cb && (k == b || k instanceof Error), a.ra = b = k);if (bd(b) || "function" === typeof l.Promise && b instanceof l.Promise) d = !0, a.Nc = !0;
        } catch (n) {
          b = n, a.Cb = !0, Hd(a) || (c = !0);
        }
      }a.ra = b;d && (k = _q(a.Hd, a, !0), d = _q(a.Hd, a, !1), b instanceof vd ? (Fd(b, k, d), b.Cd = !0) : b.then(k, d));c && (b = new Jd(b), Id[b.Db] = b, a.Gc = b.Db);
    },
        Ad = function Ad() {
      t.call(this);
    };r(Ad, t);Ad.prototype.message = "Deferred has already fired";Ad.prototype.name = "AlreadyCalledError";var xd = function xd() {
      t.call(this);
    };r(xd, t);xd.prototype.message = "Deferred was canceled";xd.prototype.name = "CanceledError";var Jd = function Jd(a) {
      this.Db = l.setTimeout(_q(this.If, this), 0);this.P = a;
    };
    Jd.prototype.If = function () {
      v(Id[this.Db], "Cannot throw an error that is not scheduled.");delete Id[this.Db];throw this.P;
    };var Id = {};var Dd = function Dd(a) {
      var b = new oc();b.wc = a;return Kd(b);
    },
        Kd = function Kd(a) {
      var b = {},
          c = b.document || document,
          d;a instanceof oc && a.constructor === oc && a.xe === nc ? d = a.wc : (ya("expected object of type TrustedResourceUrl, got '" + a + "' of type " + ca(a)), d = "type_error:TrustedResourceUrl");var e = document.createElement("SCRIPT");a = { fe: e, Zb: void 0 };var f = new vd(Ld, a),
          g = null,
          k = null != b.timeout ? b.timeout : 5E3;0 < k && (g = window.setTimeout(function () {
        Md(e, !0);wd(f, new Nd(1, "Timeout reached for loading script " + d));
      }, k), a.Zb = g);e.onload = e.onreadystatechange = function () {
        e.readyState && "loaded" != e.readyState && "complete" != e.readyState || (Md(e, b.Uf || !1, g), f.callback(null));
      };e.onerror = function () {
        Md(e, !0, g);wd(f, new Nd(0, "Error while loading script " + d));
      };a = b.attributes || {};Za(a, { type: "text/javascript", charset: "UTF-8", src: d });$c(e, a);Od(c).appendChild(e);return f;
    },
        Od = function Od(a) {
      var b;return (b = (a || document).getElementsByTagName("HEAD")) && 0 != b.length ? b[0] : a.documentElement;
    },
        Ld = function Ld() {
      if (this && this.fe) {
        var a = this.fe;a && "SCRIPT" == a.tagName && Md(a, !0, this.Zb);
      }
    },
        Md = function Md(a, b, c) {
      null != c && l.clearTimeout(c);a.onload = ba;a.onerror = ba;a.onreadystatechange = ba;b && window.setTimeout(function () {
        a && a.parentNode && a.parentNode.removeChild(a);
      }, 0);
    },
        Nd = function Nd(a, b) {
      var c = "Jsloader error (code #" + a + ")";b && (c += ": " + b);t.call(this, c);this.code = a;
    };r(Nd, t);var Pd = "StopIteration" in l ? l.StopIteration : { message: "StopIteration", stack: "" },
        Qd = function Qd() {};Qd.prototype.next = function () {
      throw Pd;
    };Qd.prototype.ye = function () {
      return this;
    };var Rd = function Rd(a, b) {
      this.ga = {};this.w = [];this.wb = this.o = 0;var c = arguments.length;if (1 < c) {
        if (c % 2) throw Error("Uneven number of arguments");for (var d = 0; d < c; d += 2) {
          this.set(arguments[d], arguments[d + 1]);
        }
      } else a && this.addAll(a);
    };Rd.prototype.Z = function () {
      Sd(this);for (var a = [], b = 0; b < this.w.length; b++) {
        a.push(this.ga[this.w[b]]);
      }return a;
    };Rd.prototype.oa = function () {
      Sd(this);return this.w.concat();
    };Rd.prototype.yb = function (a) {
      return Td(this.ga, a);
    };
    Rd.prototype.remove = function (a) {
      return Td(this.ga, a) ? (delete this.ga[a], this.o--, this.wb++, this.w.length > 2 * this.o && Sd(this), !0) : !1;
    };var Sd = function Sd(a) {
      if (a.o != a.w.length) {
        for (var b = 0, c = 0; b < a.w.length;) {
          var d = a.w[b];Td(a.ga, d) && (a.w[c++] = d);b++;
        }a.w.length = c;
      }if (a.o != a.w.length) {
        for (var e = {}, c = b = 0; b < a.w.length;) {
          d = a.w[b], Td(e, d) || (a.w[c++] = d, e[d] = 1), b++;
        }a.w.length = c;
      }
    };h = Rd.prototype;h.get = function (a, b) {
      return Td(this.ga, a) ? this.ga[a] : b;
    };
    h.set = function (a, b) {
      Td(this.ga, a) || (this.o++, this.w.push(a), this.wb++);this.ga[a] = b;
    };h.addAll = function (a) {
      var b;a instanceof Rd ? (b = a.oa(), a = a.Z()) : (b = Ua(a), a = Ta(a));for (var c = 0; c < b.length; c++) {
        this.set(b[c], a[c]);
      }
    };h.forEach = function (a, b) {
      for (var c = this.oa(), d = 0; d < c.length; d++) {
        var e = c[d],
            f = this.get(e);a.call(b, f, e, this);
      }
    };h.clone = function () {
      return new Rd(this);
    };
    h.ye = function (a) {
      Sd(this);var b = 0,
          c = this.wb,
          d = this,
          e = new Qd();e.next = function () {
        if (c != d.wb) throw Error("The map has changed since the iterator was created");if (b >= d.w.length) throw Pd;var e = d.w[b++];return a ? e : d.ga[e];
      };return e;
    };var Td = function Td(a, b) {
      return Object.prototype.hasOwnProperty.call(a, b);
    };var Ud = function Ud(a) {
      if (a.Z && "function" == typeof a.Z) return a.Z();if (m(a)) return a.split("");if (fa(a)) {
        for (var b = [], c = a.length, d = 0; d < c; d++) {
          b.push(a[d]);
        }return b;
      }return Ta(a);
    },
        Vd = function Vd(a) {
      if (a.oa && "function" == typeof a.oa) return a.oa();if (!a.Z || "function" != typeof a.Z) {
        if (fa(a) || m(a)) {
          var b = [];a = a.length;for (var c = 0; c < a; c++) {
            b.push(c);
          }return b;
        }return Ua(a);
      }
    },
        Wd = function Wd(a, b) {
      if (a.forEach && "function" == typeof a.forEach) a.forEach(b, void 0);else if (fa(a) || m(a)) w(a, b, void 0);else for (var c = Vd(a), d = Ud(a), e = d.length, f = 0; f < e; f++) {
        b.call(void 0, d[f], c && c[f], a);
      }
    };var Xd = function Xd(a, b, c, d, e) {
      this.reset(a, b, c, d, e);
    };Xd.prototype.Md = null;var Yd = 0;Xd.prototype.reset = function (a, b, c, d, e) {
      "number" == typeof e || Yd++;d || la();this.Ib = a;this.hf = b;delete this.Md;
    };Xd.prototype.ie = function (a) {
      this.Ib = a;
    };var Zd = function Zd(a) {
      this.jf = a;this.Td = this.Pc = this.Ib = this.s = null;
    },
        $d = function $d(a, b) {
      this.name = a;this.value = b;
    };$d.prototype.toString = function () {
      return this.name;
    };var ae = new $d("SEVERE", 1E3),
        be = new $d("CONFIG", 700),
        ce = new $d("FINE", 500);Zd.prototype.getParent = function () {
      return this.s;
    };Zd.prototype.ie = function (a) {
      this.Ib = a;
    };var de = function de(a) {
      if (a.Ib) return a.Ib;if (a.s) return de(a.s);ya("Root logger has no level set.");return null;
    };
    Zd.prototype.log = function (a, b, c) {
      if (a.value >= de(this).value) for (p(b) && (b = b()), a = new Xd(a, String(b), this.jf), c && (a.Md = c), c = "log:" + a.hf, l.console && (l.console.timeStamp ? l.console.timeStamp(c) : l.console.markTimeline && l.console.markTimeline(c)), l.msWriteProfilerMark && l.msWriteProfilerMark(c), c = this; c;) {
        var d = c,
            e = a;if (d.Td) for (var f = 0; b = d.Td[f]; f++) {
          b(e);
        }c = c.getParent();
      }
    };
    var ee = {},
        fe = null,
        ge = function ge(a) {
      fe || (fe = new Zd(""), ee[""] = fe, fe.ie(be));var b;if (!(b = ee[a])) {
        b = new Zd(a);var c = a.lastIndexOf("."),
            d = a.substr(c + 1),
            c = ge(a.substr(0, c));c.Pc || (c.Pc = {});c.Pc[d] = b;b.s = c;ee[a] = b;
      }return b;
    };var he = function he() {
      Fb.call(this);this.fa = new Ob(this);this.ze = this;this.hd = null;
    };r(he, Fb);he.prototype[Kb] = !0;h = he.prototype;h.addEventListener = function (a, b, c, d) {
      Vb(this, a, b, c, d);
    };h.removeEventListener = function (a, b, c, d) {
      dc(this, a, b, c, d);
    };
    h.dispatchEvent = function (a) {
      ie(this);var b,
          c = this.hd;if (c) {
        b = [];for (var d = 1; c; c = c.hd) {
          b.push(c), v(1E3 > ++d, "infinite loop");
        }
      }c = this.ze;d = a.type || a;if (m(a)) a = new Ib(a, c);else if (a instanceof Ib) a.target = a.target || c;else {
        var e = a;a = new Ib(d, c);Za(a, e);
      }var e = !0,
          f;if (b) for (var g = b.length - 1; !a.nb && 0 <= g; g--) {
        f = a.currentTarget = b[g], e = je(f, d, !0, a) && e;
      }a.nb || (f = a.currentTarget = c, e = je(f, d, !0, a) && e, a.nb || (e = je(f, d, !1, a) && e));if (b) for (g = 0; !a.nb && g < b.length; g++) {
        f = a.currentTarget = b[g], e = je(f, d, !1, a) && e;
      }return e;
    };
    h.cb = function () {
      he.xd.cb.call(this);if (this.fa) {
        var a = this.fa,
            b = 0,
            c;for (c in a.G) {
          for (var d = a.G[c], e = 0; e < d.length; e++) {
            ++b, Nb(d[e]);
          }delete a.G[c];a.$b--;
        }
      }this.hd = null;
    };h.listen = function (a, b, c, d) {
      ie(this);return this.fa.add(String(a), b, !1, c, d);
    };
    var cc = function cc(a, b, c, d, e) {
      a.fa.add(String(b), c, !0, d, e);
    },
        je = function je(a, b, c, d) {
      b = a.fa.G[String(b)];if (!b) return !0;b = b.concat();for (var e = !0, f = 0; f < b.length; ++f) {
        var g = b[f];if (g && !g.rb && g.capture == c) {
          var k = g.listener,
              n = g.kc || g.src;g.dc && Rb(a.fa, g);e = !1 !== k.call(n, d) && e;
        }
      }return e && 0 != d.ee;
    };he.prototype.Uc = function (a, b, c, d) {
      return this.fa.Uc(String(a), b, c, d);
    };var ie = function ie(a) {
      v(a.fa, "Event target is not initialized. Did you call the superclass (goog.events.EventTarget) constructor?");
    };var E = function E(a, b) {
      a && a.log(ce, b, void 0);
    };var ke = function ke(a, b, c) {
      if (p(a)) c && (a = _q(a, c));else if (a && "function" == typeof a.handleEvent) a = _q(a.handleEvent, a);else throw Error("Invalid listener argument");return 2147483647 < Number(b) ? -1 : l.setTimeout(a, b || 0);
    },
        le = function le(a) {
      var b = null;return new A(function (c, d) {
        b = ke(function () {
          c(void 0);
        }, a);-1 == b && d(Error("Failed to schedule timer."));
      }).f(function (a) {
        l.clearTimeout(b);throw a;
      });
    };var me = /^(?:([^:/?#.]+):)?(?:\/\/(?:([^/?#]*)@)?([^/#?]*?)(?::([0-9]+))?(?=[/#?]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/,
        ne = function ne(a, b) {
      if (a) {
        a = a.split("&");for (var c = 0; c < a.length; c++) {
          var d = a[c].indexOf("="),
              e,
              f = null;0 <= d ? (e = a[c].substring(0, d), f = a[c].substring(d + 1)) : e = a[c];b(e, f ? decodeURIComponent(f.replace(/\+/g, " ")) : "");
        }
      }
    };var F = function F(a) {
      he.call(this);this.headers = new Rd();this.Lc = a || null;this.va = !1;this.Kc = this.b = null;this.Hb = this.Zd = this.qc = "";this.Ka = this.Yc = this.oc = this.Rc = !1;this.sb = 0;this.Ec = null;this.de = "";this.Hc = this.sf = this.te = !1;
    };r(F, he);var oe = F.prototype,
        pe = ge("goog.net.XhrIo");oe.U = pe;var qe = /^https?$/i,
        re = ["POST", "PUT"];
    F.prototype.send = function (a, b, c, d) {
      if (this.b) throw Error("[goog.net.XhrIo] Object is active with another request=" + this.qc + "; newUri=" + a);b = b ? b.toUpperCase() : "GET";this.qc = a;this.Hb = "";this.Zd = b;this.Rc = !1;this.va = !0;this.b = this.Lc ? this.Lc.fc() : Dc.fc();this.Kc = this.Lc ? Cc(this.Lc) : Cc(Dc);this.b.onreadystatechange = _q(this.be, this);this.sf && "onprogress" in this.b && (this.b.onprogress = _q(function (a) {
        this.ae(a, !0);
      }, this), this.b.upload && (this.b.upload.onprogress = _q(this.ae, this)));try {
        E(this.U, se(this, "Opening Xhr")), this.Yc = !0, this.b.open(b, String(a), !0), this.Yc = !1;
      } catch (f) {
        E(this.U, se(this, "Error opening Xhr: " + f.message));this.P(5, f);return;
      }a = c || "";var e = this.headers.clone();d && Wd(d, function (a, b) {
        e.set(b, a);
      });d = Ha(e.oa());c = l.FormData && a instanceof l.FormData;!Ia(re, b) || d || c || e.set("Content-Type", "application/x-www-form-urlencoded;charset=utf-8");e.forEach(function (a, b) {
        this.b.setRequestHeader(b, a);
      }, this);this.de && (this.b.responseType = this.de);"withCredentials" in this.b && this.b.withCredentials !== this.te && (this.b.withCredentials = this.te);try {
        te(this), 0 < this.sb && (this.Hc = ue(this.b), E(this.U, se(this, "Will abort after " + this.sb + "ms if incomplete, xhr2 " + this.Hc)), this.Hc ? (this.b.timeout = this.sb, this.b.ontimeout = _q(this.Zb, this)) : this.Ec = ke(this.Zb, this.sb, this)), E(this.U, se(this, "Sending request")), this.oc = !0, this.b.send(a), this.oc = !1;
      } catch (f) {
        E(this.U, se(this, "Send error: " + f.message)), this.P(5, f);
      }
    };var ue = function ue(a) {
      return y && z(9) && ga(a.timeout) && void 0 !== a.ontimeout;
    },
        Ga = function Ga(a) {
      return "content-type" == a.toLowerCase();
    };
    F.prototype.Zb = function () {
      "undefined" != typeof aa && this.b && (this.Hb = "Timed out after " + this.sb + "ms, aborting", E(this.U, se(this, this.Hb)), this.dispatchEvent("timeout"), this.abort(8));
    };F.prototype.P = function (a, b) {
      this.va = !1;this.b && (this.Ka = !0, this.b.abort(), this.Ka = !1);this.Hb = b;ve(this);we(this);
    };var ve = function ve(a) {
      a.Rc || (a.Rc = !0, a.dispatchEvent("complete"), a.dispatchEvent("error"));
    };
    F.prototype.abort = function () {
      this.b && this.va && (E(this.U, se(this, "Aborting")), this.va = !1, this.Ka = !0, this.b.abort(), this.Ka = !1, this.dispatchEvent("complete"), this.dispatchEvent("abort"), we(this));
    };F.prototype.cb = function () {
      this.b && (this.va && (this.va = !1, this.Ka = !0, this.b.abort(), this.Ka = !1), we(this, !0));F.xd.cb.call(this);
    };F.prototype.be = function () {
      this.isDisposed() || (this.Yc || this.oc || this.Ka ? xe(this) : this.nf());
    };F.prototype.nf = function () {
      xe(this);
    };
    var xe = function xe(a) {
      if (a.va && "undefined" != typeof aa) if (a.Kc[1] && 4 == ye(a) && 2 == ze(a)) E(a.U, se(a, "Local request error detected and ignored"));else if (a.oc && 4 == ye(a)) ke(a.be, 0, a);else if (a.dispatchEvent("readystatechange"), 4 == ye(a)) {
        E(a.U, se(a, "Request complete"));a.va = !1;try {
          var b = ze(a),
              c;a: switch (b) {case 200:case 201:case 202:case 204:case 206:case 304:case 1223:
              c = !0;break a;default:
              c = !1;}var d;if (!(d = c)) {
            var e;if (e = 0 === b) {
              var f = String(a.qc).match(me)[1] || null;if (!f && l.self && l.self.location) var g = l.self.location.protocol,
                  f = g.substr(0, g.length - 1);e = !qe.test(f ? f.toLowerCase() : "");
            }d = e;
          }if (d) a.dispatchEvent("complete"), a.dispatchEvent("success");else {
            var k;try {
              k = 2 < ye(a) ? a.b.statusText : "";
            } catch (n) {
              E(a.U, "Can not get status: " + n.message), k = "";
            }a.Hb = k + " [" + ze(a) + "]";ve(a);
          }
        } finally {
          we(a);
        }
      }
    };F.prototype.ae = function (a, b) {
      v("progress" === a.type, "goog.net.EventType.PROGRESS is of the same type as raw XHR progress.");this.dispatchEvent(Ae(a, "progress"));this.dispatchEvent(Ae(a, b ? "downloadprogress" : "uploadprogress"));
    };
    var Ae = function Ae(a, b) {
      return { type: b, lengthComputable: a.lengthComputable, loaded: a.loaded, total: a.total };
    },
        we = function we(a, b) {
      if (a.b) {
        te(a);var c = a.b,
            d = a.Kc[0] ? ba : null;a.b = null;a.Kc = null;b || a.dispatchEvent("ready");try {
          c.onreadystatechange = d;
        } catch (e) {
          (a = a.U) && a.log(ae, "Problem encountered resetting onreadystatechange: " + e.message, void 0);
        }
      }
    },
        te = function te(a) {
      a.b && a.Hc && (a.b.ontimeout = null);ga(a.Ec) && (l.clearTimeout(a.Ec), a.Ec = null);
    },
        ye = function ye(a) {
      return a.b ? a.b.readyState : 0;
    },
        ze = function ze(a) {
      try {
        return 2 < ye(a) ? a.b.status : -1;
      } catch (b) {
        return -1;
      }
    },
        Be = function Be(a) {
      try {
        return a.b ? a.b.responseText : "";
      } catch (b) {
        return E(a.U, "Can not get responseText: " + b.message), "";
      }
    },
        se = function se(a, b) {
      return b + " [" + a.Zd + " " + a.qc + " " + ze(a) + "]";
    };var G = function G(a, b) {
      this.ea = this.Xa = this.ha = "";this.lb = null;this.Ja = this.xa = "";this.S = this.df = !1;var c;a instanceof G ? (this.S = void 0 !== b ? b : a.S, Ce(this, a.ha), c = a.Xa, H(this), this.Xa = c, De(this, a.ea), Ee(this, a.lb), Fe(this, a.xa), Ge(this, a.W.clone()), a = a.Ja, H(this), this.Ja = a) : a && (c = String(a).match(me)) ? (this.S = !!b, Ce(this, c[1] || "", !0), a = c[2] || "", H(this), this.Xa = He(a), De(this, c[3] || "", !0), Ee(this, c[4]), Fe(this, c[5] || "", !0), Ge(this, c[6] || "", !0), a = c[7] || "", H(this), this.Ja = He(a)) : (this.S = !!b, this.W = new I(null, 0, this.S));
    };G.prototype.toString = function () {
      var a = [],
          b = this.ha;b && a.push(Ie(b, Je, !0), ":");var c = this.ea;if (c || "file" == b) a.push("//"), (b = this.Xa) && a.push(Ie(b, Je, !0), "@"), a.push(encodeURIComponent(String(c)).replace(/%25([0-9a-fA-F]{2})/g, "%$1")), c = this.lb, null != c && a.push(":", String(c));if (c = this.xa) this.ea && "/" != c.charAt(0) && a.push("/"), a.push(Ie(c, "/" == c.charAt(0) ? Ke : Le, !0));(c = this.W.toString()) && a.push("?", c);(c = this.Ja) && a.push("#", Ie(c, Me));return a.join("");
    };
    G.prototype.resolve = function (a) {
      var b = this.clone(),
          c = !!a.ha;c ? Ce(b, a.ha) : c = !!a.Xa;if (c) {
        var d = a.Xa;H(b);b.Xa = d;
      } else c = !!a.ea;c ? De(b, a.ea) : c = null != a.lb;d = a.xa;if (c) Ee(b, a.lb);else if (c = !!a.xa) {
        if ("/" != d.charAt(0)) if (this.ea && !this.xa) d = "/" + d;else {
          var e = b.xa.lastIndexOf("/");-1 != e && (d = b.xa.substr(0, e + 1) + d);
        }e = d;if (".." == e || "." == e) d = "";else if (u(e, "./") || u(e, "/.")) {
          for (var d = 0 == e.lastIndexOf("/", 0), e = e.split("/"), f = [], g = 0; g < e.length;) {
            var k = e[g++];"." == k ? d && g == e.length && f.push("") : ".." == k ? ((1 < f.length || 1 == f.length && "" != f[0]) && f.pop(), d && g == e.length && f.push("")) : (f.push(k), d = !0);
          }d = f.join("/");
        } else d = e;
      }c ? Fe(b, d) : c = "" !== a.W.toString();c ? Ge(b, a.W.clone()) : c = !!a.Ja;c && (a = a.Ja, H(b), b.Ja = a);return b;
    };G.prototype.clone = function () {
      return new G(this);
    };
    var Ce = function Ce(a, b, c) {
      H(a);a.ha = c ? He(b, !0) : b;a.ha && (a.ha = a.ha.replace(/:$/, ""));
    },
        De = function De(a, b, c) {
      H(a);a.ea = c ? He(b, !0) : b;
    },
        Ee = function Ee(a, b) {
      H(a);if (b) {
        b = Number(b);if (isNaN(b) || 0 > b) throw Error("Bad port number " + b);a.lb = b;
      } else a.lb = null;
    },
        Fe = function Fe(a, b, c) {
      H(a);a.xa = c ? He(b, !0) : b;
    },
        Ge = function Ge(a, b, c) {
      H(a);b instanceof I ? (a.W = b, a.W.td(a.S)) : (c || (b = Ie(b, Ne)), a.W = new I(b, 0, a.S));
    },
        J = function J(a, b, c) {
      H(a);a.W.set(b, c);
    },
        Oe = function Oe(a, b) {
      return a.W.get(b);
    };
    G.prototype.removeParameter = function (a) {
      H(this);this.W.remove(a);return this;
    };var H = function H(a) {
      if (a.df) throw Error("Tried to modify a read-only Uri");
    };G.prototype.td = function (a) {
      this.S = a;this.W && this.W.td(a);return this;
    };
    var Pe = function Pe(a) {
      return a instanceof G ? a.clone() : new G(a, void 0);
    },
        Qe = function Qe(a, b) {
      var c = new G(null, void 0);Ce(c, "https");a && De(c, a);b && Fe(c, b);return c;
    },
        He = function He(a, b) {
      return a ? b ? decodeURI(a.replace(/%25/g, "%2525")) : decodeURIComponent(a) : "";
    },
        Ie = function Ie(a, b, c) {
      return m(a) ? (a = encodeURI(a).replace(b, Re), c && (a = a.replace(/%25([0-9a-fA-F]{2})/g, "%$1")), a) : null;
    },
        Re = function Re(a) {
      a = a.charCodeAt(0);return "%" + (a >> 4 & 15).toString(16) + (a & 15).toString(16);
    },
        Je = /[#\/\?@]/g,
        Le = /[\#\?:]/g,
        Ke = /[\#\?]/g,
        Ne = /[\#\?@]/g,
        Me = /#/g,
        I = function I(a, b, c) {
      this.o = this.l = null;this.O = a || null;this.S = !!c;
    },
        Se = function Se(a) {
      a.l || (a.l = new Rd(), a.o = 0, a.O && ne(a.O, function (b, c) {
        a.add(decodeURIComponent(b.replace(/\+/g, " ")), c);
      }));
    },
        Ue = function Ue(a) {
      var b = Vd(a);if ("undefined" == typeof b) throw Error("Keys are undefined");var c = new I(null, 0, void 0);a = Ud(a);for (var d = 0; d < b.length; d++) {
        var e = b[d],
            f = a[d];ea(f) ? Te(c, e, f) : c.add(e, f);
      }return c;
    };h = I.prototype;
    h.add = function (a, b) {
      Se(this);this.O = null;a = this.R(a);var c = this.l.get(a);c || this.l.set(a, c = []);c.push(b);this.o = za(this.o) + 1;return this;
    };h.remove = function (a) {
      Se(this);a = this.R(a);return this.l.yb(a) ? (this.O = null, this.o = za(this.o) - this.l.get(a).length, this.l.remove(a)) : !1;
    };h.yb = function (a) {
      Se(this);a = this.R(a);return this.l.yb(a);
    };h.oa = function () {
      Se(this);for (var a = this.l.Z(), b = this.l.oa(), c = [], d = 0; d < b.length; d++) {
        for (var e = a[d], f = 0; f < e.length; f++) {
          c.push(b[d]);
        }
      }return c;
    };
    h.Z = function (a) {
      Se(this);var b = [];if (m(a)) this.yb(a) && (b = Ma(b, this.l.get(this.R(a))));else {
        a = this.l.Z();for (var c = 0; c < a.length; c++) {
          b = Ma(b, a[c]);
        }
      }return b;
    };h.set = function (a, b) {
      Se(this);this.O = null;a = this.R(a);this.yb(a) && (this.o = za(this.o) - this.l.get(a).length);this.l.set(a, [b]);this.o = za(this.o) + 1;return this;
    };h.get = function (a, b) {
      a = a ? this.Z(a) : [];return 0 < a.length ? String(a[0]) : b;
    };var Te = function Te(a, b, c) {
      a.remove(b);0 < c.length && (a.O = null, a.l.set(a.R(b), Na(c)), a.o = za(a.o) + c.length);
    };
    I.prototype.toString = function () {
      if (this.O) return this.O;if (!this.l) return "";for (var a = [], b = this.l.oa(), c = 0; c < b.length; c++) {
        for (var d = b[c], e = encodeURIComponent(String(d)), d = this.Z(d), f = 0; f < d.length; f++) {
          var g = e;"" !== d[f] && (g += "=" + encodeURIComponent(String(d[f])));a.push(g);
        }
      }return this.O = a.join("&");
    };I.prototype.clone = function () {
      var a = new I();a.O = this.O;this.l && (a.l = this.l.clone(), a.o = this.o);return a;
    };I.prototype.R = function (a) {
      a = String(a);this.S && (a = a.toLowerCase());return a;
    };
    I.prototype.td = function (a) {
      a && !this.S && (Se(this), this.O = null, this.l.forEach(function (a, c) {
        var b = c.toLowerCase();c != b && (this.remove(c), Te(this, b, a));
      }, this));this.S = a;
    };var Ve = function Ve() {
      var a = K();return y && !!ob && 11 == ob || /Edge\/\d+/.test(a);
    },
        We = function We() {
      return l.window && l.window.location.href || "";
    },
        Xe = function Xe(a, b) {
      b = b || l.window;var c = "about:blank";a && (c = rc(uc(a)));b.location.href = c;
    },
        Ye = function Ye(a, b) {
      var c = [],
          d;for (d in a) {
        d in b ? typeof a[d] != typeof b[d] ? c.push(d) : ea(a[d]) ? Wa(a[d], b[d]) || c.push(d) : "object" == typeof a[d] && null != a[d] && null != b[d] ? 0 < Ye(a[d], b[d]).length && c.push(d) : a[d] !== b[d] && c.push(d) : c.push(d);
      }for (d in b) {
        d in a || c.push(d);
      }return c;
    },
        $e = function $e() {
      var a;
      a = K();a = "Chrome" != Ze(a) ? null : (a = a.match(/\sChrome\/(\d+)/i)) && 2 == a.length ? parseInt(a[1], 10) : null;return a && 30 > a ? !1 : !y || !ob || 9 < ob;
    },
        af = function af(a) {
      a = (a || K()).toLowerCase();return a.match(/android/) || a.match(/webos/) || a.match(/iphone|ipad|ipod/) || a.match(/blackberry/) || a.match(/windows phone/) || a.match(/iemobile/) ? !0 : !1;
    },
        bf = function bf(a) {
      a = a || l.window;try {
        a.close();
      } catch (b) {}
    },
        cf = function cf(a, b, c) {
      var d = Math.floor(1E9 * Math.random()).toString();b = b || 500;c = c || 600;var e = (window.screen.availHeight - c) / 2,
          f = (window.screen.availWidth - b) / 2;b = { width: b, height: c, top: 0 < e ? e : 0, left: 0 < f ? f : 0, location: !0, resizable: !0, statusbar: !0, toolbar: !1 };c = K().toLowerCase();d && (b.target = d, u(c, "crios/") && (b.target = "_blank"));"Firefox" == Ze(K()) && (a = a || "http://localhost", b.scrollbars = !0);var g;c = a || "about:blank";(d = b) || (d = {});a = window;b = c instanceof qc ? c : uc("undefined" != typeof c.href ? c.href : String(c));c = d.target || c.target;e = [];for (g in d) {
        switch (g) {case "width":case "height":case "top":case "left":
            e.push(g + "=" + d[g]);break;case "target":case "noreferrer":
            break;
          default:
            e.push(g + "=" + (d[g] ? 1 : 0));}
      }g = e.join(",");(x("iPhone") && !x("iPod") && !x("iPad") || x("iPad") || x("iPod")) && a.navigator && a.navigator.standalone && c && "_self" != c ? (g = a.document.createElement("A"), "undefined" != typeof HTMLAnchorElement && "undefined" != typeof Location && "undefined" != typeof Element && (e = g && (g instanceof HTMLAnchorElement || !(g instanceof Location || g instanceof Element)), f = ha(g) ? g.constructor.displayName || g.constructor.name || Object.prototype.toString.call(g) : void 0 === g ? "undefined" : null === g ? "null" : typeof g, v(e, "Argument is not a HTMLAnchorElement (or a non-Element mock); got: %s", f)), b = b instanceof qc ? b : uc(b), g.href = rc(b), g.setAttribute("target", c), d.noreferrer && g.setAttribute("rel", "noreferrer"), d = document.createEvent("MouseEvent"), d.initMouseEvent("click", !0, !0, a, 1), g.dispatchEvent(d), g = {}) : d.noreferrer ? (g = a.open("", c, g), d = rc(b), g && (fb && u(d, ";") && (d = "'" + d.replace(/'/g, "%27") + "'"), g.opener = null, a = mc("b/12014412, meta tag with sanitized URL"), ua.test(d) && (-1 != d.indexOf("&") && (d = d.replace(oa, "&amp;")), -1 != d.indexOf("<") && (d = d.replace(pa, "&lt;")), -1 != d.indexOf(">") && (d = d.replace(qa, "&gt;")), -1 != d.indexOf('"') && (d = d.replace(ra, "&quot;")), -1 != d.indexOf("'") && (d = d.replace(sa, "&#39;")), -1 != d.indexOf("\x00") && (d = d.replace(ta, "&#0;"))), d = '<META HTTP-EQUIV="refresh" content="0; url=' + d + '">', Aa(lc(a), "must provide justification"), v(!/^[\s\xa0]*$/.test(lc(a)), "must provide non-empty justification"), g.document.write(Yc(new Xc().$e(d))), g.document.close())) : g = a.open(rc(b), c, g);if (g) try {
        g.focus();
      } catch (k) {}return g;
    },
        df = function df(a) {
      return new A(function (b) {
        var c = function c() {
          le(2E3).then(function () {
            if (!a || a.closed) b();else return c();
          });
        };return c();
      });
    },
        ef = /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/,
        ff = function ff() {
      var a = null;return new A(function (b) {
        "complete" == l.document.readyState ? b() : (a = function a() {
          b();
        }, bc(window, "load", a));
      }).f(function (b) {
        dc(window, "load", a);throw b;
      });
    },
        hf = function hf() {
      return gf(void 0) ? ff().then(function () {
        return new A(function (a, b) {
          var c = l.document,
              d = setTimeout(function () {
            b(Error("Cordova framework is not ready."));
          }, 1E3);c.addEventListener("deviceready", function () {
            clearTimeout(d);a();
          }, !1);
        });
      }) : D(Error("Cordova must run in an Android or iOS file scheme."));
    },
        gf = function gf(a) {
      a = a || K();return !("file:" !== jf() || !a.toLowerCase().match(/iphone|ipad|ipod|android/));
    },
        kf = function kf() {
      var a = l.window;try {
        return !(!a || a == a.top);
      } catch (b) {
        return !1;
      }
    },
        L = function L() {
      return firebase.INTERNAL.hasOwnProperty("reactNative") ? "ReactNative" : firebase.INTERNAL.hasOwnProperty("node") ? "Node" : "Browser";
    },
        lf = function lf() {
      var a = L();return "ReactNative" === a || "Node" === a;
    },
        Ze = function Ze(a) {
      var b = a.toLowerCase();if (u(b, "opera/") || u(b, "opr/") || u(b, "opios/")) return "Opera";if (u(b, "iemobile")) return "IEMobile";if (u(b, "msie") || u(b, "trident/")) return "IE";if (u(b, "edge/")) return "Edge";if (u(b, "firefox/")) return "Firefox";if (u(b, "silk/")) return "Silk";if (u(b, "blackberry")) return "Blackberry";if (u(b, "webos")) return "Webos";if (!u(b, "safari/") || u(b, "chrome/") || u(b, "crios/") || u(b, "android")) {
        if (!u(b, "chrome/") && !u(b, "crios/") || u(b, "edge/")) {
          if (u(b, "android")) return "Android";
          if ((a = a.match(/([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/)) && 2 == a.length) return a[1];
        } else return "Chrome";
      } else return "Safari";return "Other";
    },
        mf = function mf(a) {
      var b = L();return ("Browser" === b ? Ze(K()) : b) + "/JsCore/" + a;
    },
        K = function K() {
      return l.navigator && l.navigator.userAgent || "";
    },
        M = function M(a, b) {
      a = a.split(".");b = b || l;for (var c = 0; c < a.length && "object" == typeof b && null != b; c++) {
        b = b[a[c]];
      }c != a.length && (b = void 0);return b;
    },
        pf = function pf() {
      var a;if (a = (nf() || "chrome-extension:" === jf() || gf()) && !lf()) a: {
        try {
          var b = l.localStorage,
              c = of();if (b) {
            b.setItem(c, "1");b.removeItem(c);a = Ve() ? !!l.indexedDB : !0;break a;
          }
        } catch (d) {}a = !1;
      }return a;
    },
        nf = function nf() {
      return "http:" === jf() || "https:" === jf();
    },
        jf = function jf() {
      return l.location && l.location.protocol || null;
    },
        qf = function qf(a) {
      a = a || K();return af(a) || "Firefox" == Ze(a) ? !1 : !0;
    },
        rf = function rf(a) {
      return "undefined" === typeof a ? null : xc(a);
    },
        sf = function sf(a) {
      var b = {},
          c;for (c in a) {
        a.hasOwnProperty(c) && null !== a[c] && void 0 !== a[c] && (b[c] = a[c]);
      }return b;
    },
        tf = function tf(a) {
      if (null !== a) return JSON.parse(a);
    },
        of = function of(a) {
      return a ? a : "" + Math.floor(1E9 * Math.random()).toString();
    },
        uf = function uf(a) {
      a = a || K();return "Safari" == Ze(a) || a.toLowerCase().match(/iphone|ipad|ipod/) ? !1 : !0;
    },
        vf = function vf() {
      var a = l.___jsl;if (a && a.H) for (var b in a.H) {
        if (a.H[b].r = a.H[b].r || [], a.H[b].L = a.H[b].L || [], a.H[b].r = a.H[b].L.concat(), a.CP) for (var c = 0; c < a.CP.length; c++) {
          a.CP[c] = null;
        }
      }
    },
        wf = function wf() {
      return l.navigator && "boolean" === typeof l.navigator.onLine ? l.navigator.onLine : !0;
    },
        xf = function xf(a, b, c, d) {
      if (a > b) throw Error("Short delay should be less than long delay!");
      this.Ff = a;this.gf = b;a = c || K();d = d || L();this.cf = af(a) || "ReactNative" === d;
    };xf.prototype.get = function () {
      return this.cf ? this.gf : this.Ff;
    };
    var yf = function yf() {
      var a = l.document;return a && "undefined" !== typeof a.visibilityState ? "visible" == a.visibilityState : !0;
    },
        zf = function zf() {
      var a = l.document,
          _b = null;return yf() || !a ? B() : new A(function (c) {
        _b = function b() {
          yf() && (a.removeEventListener("visibilitychange", _b, !1), c());
        };a.addEventListener("visibilitychange", _b, !1);
      }).f(function (c) {
        a.removeEventListener("visibilitychange", _b, !1);throw c;
      });
    };var Af = {},
        Bf = function Bf(a) {
      Af[a] || (Af[a] = !0, "undefined" !== typeof console && "function" === typeof console.warn && console.warn(a));
    };var Cf;try {
      var Df = {};Object.defineProperty(Df, "abcd", { configurable: !0, enumerable: !0, value: 1 });Object.defineProperty(Df, "abcd", { configurable: !0, enumerable: !0, value: 2 });Cf = 2 == Df.abcd;
    } catch (a) {
      Cf = !1;
    }
    var N = function N(a, b, c) {
      Cf ? Object.defineProperty(a, b, { configurable: !0, enumerable: !0, value: c }) : a[b] = c;
    },
        Ef = function Ef(a, b) {
      Cf ? Object.defineProperty(a, "provider", { configurable: !0, enumerable: !0, get: function get() {
          Bf("firebase.auth.AuthCredential.provider is deprecated. Please use the providerId field instead.");return b;
        } }) : a.provider = b;
    },
        Ff = function Ff(a, b) {
      if (b) for (var c in b) {
        b.hasOwnProperty(c) && N(a, c, b[c]);
      }
    },
        Gf = function Gf(a) {
      var b = {};Ff(b, a);return b;
    },
        Hf = function Hf(a) {
      var b = {},
          c;for (c in a) {
        a.hasOwnProperty(c) && (b[c] = a[c]);
      }return b;
    },
        If = function If(a, b) {
      if (!b || !b.length) return !0;if (!a) return !1;for (var c = 0; c < b.length; c++) {
        var d = a[b[c]];if (void 0 === d || null === d || "" === d) return !1;
      }return !0;
    },
        Jf = function Jf(a) {
      var b = a;if ("object" == typeof a && null != a) {
        var b = "length" in a ? [] : {},
            c;for (c in a) {
          N(b, c, Jf(a[c]));
        }
      }return b;
    };var Kf = "oauth_consumer_key oauth_nonce oauth_signature oauth_signature_method oauth_timestamp oauth_token oauth_version".split(" "),
        Lf = ["client_id", "response_type", "scope", "redirect_uri", "state"],
        Mf = { Pf: { Mb: 500, Lb: 600, providerId: "facebook.com", qd: Lf }, Qf: { Mb: 500, Lb: 620, providerId: "github.com", qd: Lf }, Rf: { Mb: 515, Lb: 680, providerId: "google.com", qd: Lf }, Sf: { Mb: 485, Lb: 705, providerId: "twitter.com", qd: Kf } },
        Nf = function Nf(a) {
      for (var b in Mf) {
        if (Mf[b].providerId == a) return Mf[b];
      }return null;
    };var O = function O(a, b) {
      this.code = "auth/" + a;this.message = b || Of[a] || "";
    };r(O, Error);O.prototype.C = function () {
      return { code: this.code, message: this.message };
    };O.prototype.toJSON = function () {
      return this.C();
    };
    var Pf = function Pf(a) {
      var b = a && a.code;return b ? new O(b.substring(5), a.message) : null;
    },
        Of = { "argument-error": "", "app-not-authorized": "This app, identified by the domain where it's hosted, is not authorized to use Firebase Authentication with the provided API key. Review your key configuration in the Google API console.", "app-not-installed": "The requested mobile application corresponding to the identifier (Android package name or iOS bundle ID) provided is not installed on this device.", "captcha-check-failed": "",
      "code-expired": "", "cordova-not-ready": "Cordova framework is not ready.", "cors-unsupported": "This browser is not supported.", "credential-already-in-use": "This credential is already associated with a different user account.", "custom-token-mismatch": "The custom token corresponds to a different audience.", "requires-recent-login": "This operation is sensitive and requires recent authentication. Log in again before retrying this request.", "dynamic-link-not-activated": "Please activate Dynamic Links in the Firebase Console and agree to the terms and conditions.",
      "email-already-in-use": "The email address is already in use by another account.", "expired-action-code": "The action code has expired. ", "cancelled-popup-request": "This operation has been cancelled due to another conflicting popup being opened.", "internal-error": "An internal error has occurred.", "invalid-app-credential": "", "invalid-app-id": "The mobile app identifier is not registed for the current project.", "invalid-user-token": "The user's credential is no longer valid. The user must sign in again.",
      "invalid-auth-event": "An internal error has occurred.", "invalid-verification-code": "", "invalid-cordova-configuration": "The following Cordova plugins must be installed to enable OAuth sign-in: cordova-plugin-buildinfo, cordova-universal-links-plugin, cordova-plugin-browsertab, cordova-plugin-inappbrowser and cordova-plugin-customurlscheme.", "invalid-custom-token": "The custom token format is incorrect. Please check the documentation.", "invalid-email": "The email address is badly formatted.", "invalid-api-key": "Your API key is invalid, please check you have copied it correctly.",
      "invalid-credential": "The supplied auth credential is malformed or has expired.", "invalid-message-payload": "The email template corresponding to this action contains invalid characters in its message. Please fix by going to the Auth email templates section in the Firebase Console.", "invalid-oauth-provider": "EmailAuthProvider is not supported for this operation. This operation only supports OAuth providers.", "unauthorized-domain": "This domain is not authorized for OAuth operations for your Firebase project. Edit the list of authorized domains from the Firebase console.",
      "invalid-action-code": "The action code is invalid. This can happen if the code is malformed, expired, or has already been used.", "wrong-password": "The password is invalid or the user does not have a password.", "invalid-identifier-number": "", "invalid-recipient-email": "The email corresponding to this action failed to send as the provided recipient email address is invalid.", "invalid-sender": "The email template corresponding to this action contains an invalid sender email or name. Please fix by going to the Auth email templates section in the Firebase Console.",
      "invalid-verification-id": "", "missing-iframe-start": "An internal error has occurred.", "auth-domain-config-required": "Be sure to include authDomain when calling firebase.initializeApp(), by following the instructions in the Firebase console.", "missing-app-credential": "", "missing-verification-code": "", "missing-identifier-number": "", "missing-verification-id": "", "app-deleted": "This instance of FirebaseApp has been deleted.", "account-exists-with-different-credential": "An account already exists with the same email address but different sign-in credentials. Sign in using a provider associated with this email address.",
      "network-request-failed": "A network error (such as timeout, interrupted connection or unreachable host) has occurred.", "no-auth-event": "An internal error has occurred.", "no-such-provider": "User was not linked to an account with the given provider.", "operation-not-allowed": "The given sign-in provider is disabled for this Firebase project. Enable it in the Firebase console, under the sign-in method tab of the Auth section.", "operation-not-supported-in-this-environment": 'This operation is not supported in the environment this application is running on. "location.protocol" must be http, https or chrome-extension and web storage must be enabled.',
      "popup-blocked": "Unable to establish a connection with the popup. It may have been blocked by the browser.", "popup-closed-by-user": "The popup has been closed by the user before finalizing the operation.", "provider-already-linked": "User can only be linked to one identity for the given provider.", "quota-exceeded": "", "redirect-cancelled-by-user": "The redirect operation has been cancelled by the user before finalizing.", "redirect-operation-pending": "A redirect sign-in operation is already pending.", timeout: "The operation has timed out.",
      "user-token-expired": "The user's credential is no longer valid. The user must sign in again.", "too-many-requests": "We have blocked all requests from this device due to unusual activity. Try again later.", "user-cancelled": "User did not grant your application the permissions it requested.", "user-not-found": "There is no user record corresponding to this identifier. The user may have been deleted.", "user-disabled": "The user account has been disabled by an administrator.", "user-mismatch": "The supplied credentials do not correspond to the previously signed in user.",
      "user-signed-out": "", "weak-password": "The password must be 6 characters long or more.", "web-storage-unsupported": "This browser is not supported or 3rd party cookies and data may be disabled." };var P = function P(a, b, c, d, e) {
      this.da = a;this.J = b || null;this.tb = c || null;this.sd = d || null;this.P = e || null;if (this.tb || this.P) {
        if (this.tb && this.P) throw new O("invalid-auth-event");if (this.tb && !this.sd) throw new O("invalid-auth-event");
      } else throw new O("invalid-auth-event");
    };P.prototype.ic = function () {
      return this.sd;
    };P.prototype.getError = function () {
      return this.P;
    };P.prototype.C = function () {
      return { type: this.da, eventId: this.J, urlResponse: this.tb, sessionId: this.sd, error: this.P && this.P.C() };
    };
    var Qf = function Qf(a) {
      a = a || {};return a.type ? new P(a.type, a.eventId, a.urlResponse, a.sessionId, a.error && Pf(a.error)) : null;
    };var Rf = function Rf(a) {
      var b = "unauthorized-domain",
          c = void 0,
          d = Pe(a);a = d.ea;d = d.ha;"chrome-extension" == d ? c = ma("This chrome extension ID (chrome-extension://%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.", a) : "http" == d || "https" == d ? c = ma("This domain (%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.", a) : b = "operation-not-supported-in-this-environment";O.call(this, b, c);
    };r(Rf, O);var Sf = function Sf(a) {
      this.ff = a.sub;la();this.gc = a.email || null;
    };var Tf = function Tf(a, b) {
      return a.then(function (a) {
        if (a.idToken) {
          var c;a: {
            var e = a.idToken.split(".");if (3 == e.length) {
              for (var e = e[1], f = (4 - e.length % 4) % 4, g = 0; g < f; g++) {
                e += ".";
              }try {
                var k = JSON.parse(tb(e));if (k.sub && k.iss && k.aud && k.exp) {
                  c = new Sf(k);break a;
                }
              } catch (n) {}
            }c = null;
          }if (!c || b != c.ff) throw new O("user-mismatch");return a;
        }throw new O("user-mismatch");
      }).f(function (a) {
        throw a && a.code && "auth/user-not-found" == a.code ? new O("user-mismatch") : a;
      });
    },
        Uf = function Uf(a, b) {
      if (b.idToken || b.accessToken) b.idToken && N(this, "idToken", b.idToken), b.accessToken && N(this, "accessToken", b.accessToken);else if (b.oauthToken && b.oauthTokenSecret) N(this, "accessToken", b.oauthToken), N(this, "secret", b.oauthTokenSecret);else throw new O("internal-error", "failed to construct a credential");Ef(this, a);N(this, "providerId", a);
    };Uf.prototype.Ab = function (a) {
      return Vf(a, Wf(this));
    };Uf.prototype.cd = function (a, b) {
      var c = Wf(this);c.idToken = b;return Xf(a, c);
    };Uf.prototype.ed = function (a, b) {
      var c = Wf(this);return Tf(Yf(a, c), b);
    };
    var Wf = function Wf(a) {
      var b = {};a.idToken && (b.id_token = a.idToken);a.accessToken && (b.access_token = a.accessToken);a.secret && (b.oauth_token_secret = a.secret);b.providerId = a.providerId;return { postBody: Ue(b).toString(), requestUri: "http://localhost" };
    };Uf.prototype.C = function () {
      var a = { providerId: this.providerId };this.idToken && (a.oauthIdToken = this.idToken);this.accessToken && (a.oauthAccessToken = this.accessToken);this.secret && (a.oauthTokenSecret = this.secret);return a;
    };
    var Zf = function Zf(a, b) {
      this.vf = b || [];Ff(this, { providerId: a, isOAuthProvider: !0 });this.Id = {};
    };Zf.prototype.setCustomParameters = function (a) {
      this.Id = Xa(a);return this;
    };var Q = function Q(a) {
      Zf.call(this, a, Lf);this.rd = [];
    };r(Q, Zf);Q.prototype.addScope = function (a) {
      Ia(this.rd, a) || this.rd.push(a);return this;
    };Q.prototype.Rd = function () {
      return Na(this.rd);
    };
    Q.prototype.credential = function (a, b) {
      if (!a && !b) throw new O("argument-error", "credential failed: must provide the ID token and/or the access token.");return new Uf(this.providerId, { idToken: a || null, accessToken: b || null });
    };var $f = function $f() {
      Q.call(this, "facebook.com");
    };r($f, Q);N($f, "PROVIDER_ID", "facebook.com");
    var ag = function ag(a) {
      if (!a) throw new O("argument-error", "credential failed: expected 1 argument (the OAuth access token).");var b = a;ha(a) && (b = a.accessToken);return new $f().credential(null, b);
    },
        bg = function bg() {
      Q.call(this, "github.com");
    };r(bg, Q);N(bg, "PROVIDER_ID", "github.com");
    var cg = function cg(a) {
      if (!a) throw new O("argument-error", "credential failed: expected 1 argument (the OAuth access token).");var b = a;ha(a) && (b = a.accessToken);return new bg().credential(null, b);
    },
        dg = function dg() {
      Q.call(this, "google.com");this.addScope("profile");
    };r(dg, Q);N(dg, "PROVIDER_ID", "google.com");var eg = function eg(a, b) {
      var c = a;ha(a) && (c = a.idToken, b = a.accessToken);return new dg().credential(c, b);
    },
        fg = function fg() {
      Zf.call(this, "twitter.com", Kf);
    };r(fg, Zf);N(fg, "PROVIDER_ID", "twitter.com");
    var gg = function gg(a, b) {
      var c = a;ha(c) || (c = { oauthToken: a, oauthTokenSecret: b });if (!c.oauthToken || !c.oauthTokenSecret) throw new O("argument-error", "credential failed: expected 2 arguments (the OAuth access token and secret).");return new Uf("twitter.com", c);
    },
        hg = function hg(a, b) {
      this.gc = a;this.jd = b;Ef(this, "password");N(this, "providerId", "password");
    };hg.prototype.Ab = function (a) {
      return R(a, ig, { email: this.gc, password: this.jd });
    };hg.prototype.cd = function (a, b) {
      return R(a, jg, { idToken: b, email: this.gc, password: this.jd });
    };
    hg.prototype.ed = function (a, b) {
      return Tf(this.Ab(a), b);
    };hg.prototype.C = function () {
      return { email: this.gc, password: this.jd };
    };var kg = function kg() {
      Ff(this, { providerId: "password", isOAuthProvider: !1 });
    };Ff(kg, { PROVIDER_ID: "password" });var lg = function lg(a) {
      if (!(a.Bd && a.Ad || a.Yb && a.ya)) throw new O("internal-error");this.I = a;N(this, "providerId", "identifier");
    };lg.prototype.Ab = function (a) {
      return a.se(mg(this));
    };lg.prototype.cd = function (a, b) {
      var c = mg(this);c.idToken = b;return R(a, ng, c);
    };
    lg.prototype.ed = function (a, b) {
      var c = mg(this);c.operation = "REAUTH";a = R(a, og, c);return Tf(a, b);
    };lg.prototype.C = function () {
      var a = { providerId: "identifier" };this.I.Bd && (a.verificationId = this.I.Bd);this.I.Ad && (a.verificationCode = this.I.Ad);this.I.Yb && (a.temporaryProof = this.I.Yb);this.I.ya && (a.identifierNumber = this.I.ya);return a;
    };
    var mg = function mg(a) {
      return a.I.Yb && a.I.ya ? { temporaryProof: a.I.Yb, identifierNumber: a.I.ya } : { sessionInfo: a.I.Bd, code: a.I.Ad };
    },
        pg = function pg(a) {
      try {
        this.Ce = a || firebase.auth();
      } catch (b) {
        throw new O("argument-error", "Either an instance of firebase.auth.Auth must be passed as an argument to the firebase.auth.identifierAuthProvider constructor, or the default firebase App instance must be initialized via firebase.initializeApp().");
      }Ff(this, { providerId: "identifier", isOAuthProvider: !1 });
    };
    pg.prototype.se = function (a, b) {
      var c = this.Ce.g;return B(b.verify()).then(function (d) {
        if (!m(d)) throw new O("argument-error", "An implementation of firebase.auth.ApplicationVerifier.prototype.verify() must return a firebase.Promise that resolves with a string.");switch (b.type) {case "recaptcha":
            return R(c, qg, { identifierNumber: a, recaptchaToken: d });default:
            throw new O("argument-error", 'Only firebase.auth.ApplicationVerifiers with type="recaptcha" are currently supported.');}
      });
    };Ff(pg, { PROVIDER_ID: "identifier" });
    var rg = function rg(a) {
      if (a.temporaryProof && a.identifierNumber) return new lg({ Yb: a.temporaryProof, ya: a.identifierNumber });var b = a && a.providerId;if (!b || "password" === b) return null;var c = a && a.oauthAccessToken,
          d = a && a.oauthTokenSecret;a = a && a.oauthIdToken;try {
        switch (b) {case "google.com":
            return eg(a, c);case "facebook.com":
            return ag(c);case "github.com":
            return cg(c);case "twitter.com":
            return gg(c, d);default:
            return new Q(b).credential(a, c);}
      } catch (e) {
        return null;
      }
    },
        sg = function sg(a) {
      if (!a.isOAuthProvider) throw new O("invalid-oauth-provider");
    };var tg = function tg(a, b, c) {
      O.call(this, a, c);a = b || {};a.email && N(this, "email", a.email);a.ya && N(this, "identifierNumber", a.ya);a.credential && N(this, "credential", a.credential);
    };r(tg, O);tg.prototype.C = function () {
      var a = { code: this.code, message: this.message };this.email && (a.email = this.email);this.identifierNumber && (a.identifierNumber = this.identifierNumber);var b = this.credential && this.credential.C();b && Za(a, b);return a;
    };tg.prototype.toJSON = function () {
      return this.C();
    };
    var ug = function ug(a) {
      if (a.code) {
        var b = a.code || "";0 == b.indexOf("auth/") && (b = b.substring(5));var c = { credential: rg(a) };if (a.email) c.email = a.email;else if (a.identifierNumber) c.ya = a.identifierNumber;else return new O(b, a.message || void 0);return new tg(b, c, a.message);
      }return null;
    };var vg = function vg(a) {
      this.Of = a;
    };r(vg, Bc);vg.prototype.fc = function () {
      return new this.Of();
    };vg.prototype.$c = function () {
      return {};
    };
    var S = function S(a, b, c) {
      var d;d = "Node" == L();d = l.XMLHttpRequest || d && firebase.INTERNAL.node && firebase.INTERNAL.node.XMLHttpRequest;if (!d) throw new O("internal-error", "The XMLHttpRequest compatibility library was not found.");this.j = a;a = b || {};this.Bf = a.secureTokenEndpoint || "https://securetoken.googleapis.com/v1/token";this.Cf = a.secureTokenTimeout || wg;this.ge = Xa(a.secureTokenHeaders || xg);this.Le = a.firebaseEndpoint || "https://www.googleapis.com/identitytoolkit/v3/relyingparty/";this.Me = a.firebaseTimeout || yg;this.Pd = Xa(a.firebaseHeaders || zg);c && (this.Pd["X-Client-Version"] = c, this.ge["X-Client-Version"] = c);this.Ee = new Gc();this.Nf = new vg(d);
    },
        Ag,
        wg = new xf(3E4, 6E4),
        xg = { "Content-Type": "application/x-www-form-urlencoded" },
        yg = new xf(3E4, 6E4),
        zg = { "Content-Type": "application/json" },
        Cg = function Cg(a, b, c, d, e, f, g) {
      wf() ? ($e() ? a = _q(a.Ef, a) : (Ag || (Ag = new A(function (a, b) {
        Bg(a, b);
      })), a = _q(a.Df, a)), a(b, c, d, e, f, g)) : c && c(null);
    };
    S.prototype.Ef = function (a, b, c, d, e, f) {
      var g = "Node" == L(),
          k = lf() ? g ? new F(this.Nf) : new F() : new F(this.Ee),
          n;f && (k.sb = Math.max(0, f), n = setTimeout(function () {
        k.dispatchEvent("timeout");
      }, f));k.listen("complete", function () {
        n && clearTimeout(n);var a = null;try {
          a = JSON.parse(Be(this)) || null;
        } catch (db) {
          a = null;
        }b && b(a);
      });cc(k, "ready", function () {
        n && clearTimeout(n);this.Ga || (this.Ga = !0, this.cb());
      });cc(k, "timeout", function () {
        n && clearTimeout(n);this.Ga || (this.Ga = !0, this.cb());b && b(null);
      });k.send(a, c, d, e);
    };
    var Ed = "__fcb" + Math.floor(1E6 * Math.random()).toString(),
        Bg = function Bg(a, b) {
      ((window.gapi || {}).client || {}).request ? a() : (l[Ed] = function () {
        ((window.gapi || {}).client || {}).request ? a() : b(Error("CORS_UNSUPPORTED"));
      }, Gd(function () {
        b(Error("CORS_UNSUPPORTED"));
      }));
    };
    S.prototype.Df = function (a, b, c, d, e) {
      var f = this;Ag.then(function () {
        window.gapi.client.setApiKey(f.j);var g = window.gapi.auth.getToken();window.gapi.auth.setToken(null);window.gapi.client.request({ path: a, method: c, body: d, headers: e, authType: "none", callback: function callback(a) {
            window.gapi.auth.setToken(g);b && b(a);
          } });
      }).f(function (a) {
        b && b({ error: { message: a && a.message || "CORS_UNSUPPORTED" } });
      });
    };
    var Eg = function Eg(a, b) {
      return new A(function (c, d) {
        "refresh_token" == b.grant_type && b.refresh_token || "authorization_code" == b.grant_type && b.code ? Cg(a, a.Bf + "?key=" + encodeURIComponent(a.j), function (a) {
          a ? a.error ? d(Dg(a)) : a.access_token && a.refresh_token ? c(a) : d(new O("internal-error")) : d(new O("network-request-failed"));
        }, "POST", Ue(b).toString(), a.ge, a.Cf.get()) : d(new O("internal-error"));
      });
    },
        Fg = function Fg(a, b, c, d, e, f) {
      var g = Pe(a.Le + b);J(g, "key", a.j);f && J(g, "cb", la().toString());var k = "GET" == c;if (k) for (var n in d) {
        d.hasOwnProperty(n) && J(g, n, d[n]);
      }return new A(function (b, f) {
        Cg(a, g.toString(), function (a) {
          a ? a.error ? f(Dg(a, e || {})) : b(a) : f(new O("network-request-failed"));
        }, c, k ? void 0 : xc(sf(d)), a.Pd, a.Me.get());
      });
    },
        Gg = function Gg(a) {
      if (!ic.test(a.email)) throw new O("invalid-email");
    },
        Hg = function Hg(a) {
      "email" in a && Gg(a);
    },
        Jg = function Jg(a, b) {
      return R(a, Ig, { identifier: b, continueUri: nf() ? We() : "http://localhost" }).then(function (a) {
        return a.allProviders || [];
      });
    },
        Lg = function Lg(a) {
      return R(a, Kg, {}).then(function (a) {
        return a.authorizedDomains || [];
      });
    },
        Mg = function Mg(a) {
      if (!a.idToken) throw new O("internal-error");
    },
        Ng = function Ng(a) {
      if (a.identifierNumber || a.temporaryProof) {
        if (!a.identifierNumber || !a.temporaryProof) throw new O("internal-error");
      } else {
        if (!a.sessionInfo) throw new O("missing-verification-id");if (!a.code) throw new O("missing-verification-code");
      }
    };S.prototype.signInAnonymously = function () {
      return R(this, Og, {});
    };S.prototype.updateEmail = function (a, b) {
      return R(this, Pg, { idToken: a, email: b });
    };S.prototype.updatePassword = function (a, b) {
      return R(this, jg, { idToken: a, password: b });
    };var Qg = { displayName: "DISPLAY_NAME", photoUrl: "PHOTO_URL" };
    S.prototype.updateProfile = function (a, b) {
      var c = { idToken: a },
          d = [];Sa(Qg, function (a, f) {
        var e = b[f];null === e ? d.push(a) : f in b && (c[f] = e);
      });d.length && (c.deleteAttribute = d);return R(this, Pg, c);
    };S.prototype.sendPasswordResetEmail = function (a) {
      return R(this, Rg, { requestType: "PASSWORD_RESET", email: a });
    };S.prototype.sendEmailVerification = function (a) {
      return R(this, Sg, { requestType: "VERIFY_EMAIL", idToken: a });
    };S.prototype.se = function (a) {
      return R(this, Tg, a);
    };
    var Vg = function Vg(a, b, c) {
      return R(a, Ug, { idToken: b, deleteProvider: c });
    },
        Wg = function Wg(a) {
      if (!a.requestUri || !a.sessionId && !a.postBody) throw new O("internal-error");
    },
        Xg = function Xg(a) {
      var b = null;a.needConfirmation ? (a.code = "account-exists-with-different-credential", b = ug(a)) : "FEDERATED_USER_ID_ALREADY_LINKED" == a.errorMessage ? (a.code = "credential-already-in-use", b = ug(a)) : "EMAIL_EXISTS" == a.errorMessage && (a.code = "email-already-in-use", b = ug(a));if (b) throw b;if (!a.idToken) throw new O("internal-error");
    },
        Vf = function Vf(a, b) {
      b.returnIdpCredential = !0;return R(a, Yg, b);
    },
        Xf = function Xf(a, b) {
      b.returnIdpCredential = !0;return R(a, Zg, b);
    },
        Yf = function Yf(a, b) {
      b.returnIdpCredential = !0;b.autoCreate = !1;return R(a, $g, b);
    },
        ah = function ah(a) {
      if (!a.oobCode) throw new O("invalid-action-code");
    };S.prototype.confirmPasswordReset = function (a, b) {
      return R(this, bh, { oobCode: a, newPassword: b });
    };S.prototype.checkActionCode = function (a) {
      return R(this, ch, { oobCode: a });
    };S.prototype.applyActionCode = function (a) {
      return R(this, dh, { oobCode: a });
    };
    var dh = { endpoint: "setAccountInfo", A: ah, Wa: "email" },
        ch = { endpoint: "resetPassword", A: ah, Y: function Y(a) {
        if (!a.email || !a.requestType) throw new O("internal-error");
      } },
        eh = { endpoint: "signupNewUser", A: function A(a) {
        Gg(a);if (!a.password) throw new O("weak-password");
      }, Y: Mg, sa: !0 },
        Ig = { endpoint: "createAuthUri" },
        fh = { endpoint: "deleteAccount", Ua: ["idToken"] },
        Ug = { endpoint: "setAccountInfo", Ua: ["idToken", "deleteProvider"], A: function A(a) {
        if (!ea(a.deleteProvider)) throw new O("internal-error");
      } },
        gh = { endpoint: "getAccountInfo" },
        Sg = { endpoint: "getOobConfirmationCode", Ua: ["idToken", "requestType"], A: function A(a) {
        if ("VERIFY_EMAIL" != a.requestType) throw new O("internal-error");
      }, Wa: "email" },
        Rg = { endpoint: "getOobConfirmationCode", Ua: ["requestType"], A: function A(a) {
        if ("PASSWORD_RESET" != a.requestType) throw new O("internal-error");Gg(a);
      }, Wa: "email" },
        Kg = { De: !0, endpoint: "getProjectConfig", We: "GET" },
        bh = { endpoint: "resetPassword", A: ah, Wa: "email" },
        qg = { endpoint: "sendVerificationCode", Ua: ["identifierNumber", "recaptchaToken"], Wa: "sessionInfo" },
        Pg = { endpoint: "setAccountInfo",
      Ua: ["idToken"], A: Hg, sa: !0 },
        jg = { endpoint: "setAccountInfo", Ua: ["idToken"], A: function A(a) {
        Hg(a);if (!a.password) throw new O("weak-password");
      }, Y: Mg, sa: !0 },
        Og = { endpoint: "signupNewUser", Y: Mg, sa: !0 },
        Yg = { endpoint: "verifyAssertion", A: Wg, Y: Xg, sa: !0 },
        $g = { endpoint: "verifyAssertion", A: Wg, Y: function Y(a) {
        if (a.errorMessage && "USER_NOT_FOUND" == a.errorMessage) throw new O("user-not-found");if (!a.idToken) throw new O("internal-error");
      }, sa: !0 },
        Zg = { endpoint: "verifyAssertion", A: function A(a) {
        Wg(a);if (!a.idToken) throw new O("internal-error");
      }, Y: Xg, sa: !0 },
        hh = { endpoint: "verifyCustomToken", A: function A(a) {
        if (!a.token) throw new O("invalid-custom-token");
      }, Y: Mg, sa: !0 },
        ig = { endpoint: "verifyPassword", A: function A(a) {
        Gg(a);if (!a.password) throw new O("wrong-password");
      }, Y: Mg, sa: !0 },
        Tg = { endpoint: "verifyidentifierNumber", A: Ng, Y: Mg },
        ng = { endpoint: "verifyidentifierNumber", A: function A(a) {
        if (!a.idToken) throw new O("internal-error");Ng(a);
      }, Y: function Y(a) {
        if (a.temporaryProof) throw a.code = "credential-already-in-use", ug(a);Mg(a);
      } },
        og = { Ge: { USER_NOT_FOUND: "user-not-found" },
      endpoint: "verifyidentifierNumber", A: Ng, Y: Mg },
        R = function R(a, b, c) {
      if (!If(c, b.Ua)) return D(new O("internal-error"));var d = b.We || "POST",
          e;return B(c).then(b.A).then(function () {
        b.sa && (c.returnSecureToken = !0);return Fg(a, b.endpoint, d, c, b.Ge, b.De || !1);
      }).then(function (a) {
        return e = a;
      }).then(b.Y).then(function () {
        if (!b.Wa) return e;if (!(b.Wa in e)) throw new O("internal-error");return e[b.Wa];
      });
    },
        Dg = function Dg(a, b) {
      var c;c = (a.error && a.error.errors && a.error.errors[0] || {}).reason || "";var d = { keyInvalid: "invalid-api-key", ipRefererBlocked: "app-not-authorized" };
      if (c = d[c] ? new O(d[c]) : null) return c;c = a.error && a.error.message || "";d = { INVALID_CUSTOM_TOKEN: "invalid-custom-token", CREDENTIAL_MISMATCH: "custom-token-mismatch", MISSING_CUSTOM_TOKEN: "internal-error", INVALID_IDENTIFIER: "invalid-email", MISSING_CONTINUE_URI: "internal-error", INVALID_EMAIL: "invalid-email", INVALID_PASSWORD: "wrong-password", USER_DISABLED: "user-disabled", MISSING_PASSWORD: "internal-error", EMAIL_EXISTS: "email-already-in-use", PASSWORD_LOGIN_DISABLED: "operation-not-allowed", INVALID_IDP_RESPONSE: "invalid-credential",
        FEDERATED_USER_ID_ALREADY_LINKED: "credential-already-in-use", INVALID_MESSAGE_PAYLOAD: "invalid-message-payload", INVALID_RECIPIENT_EMAIL: "invalid-recipient-email", INVALID_SENDER: "invalid-sender", EMAIL_NOT_FOUND: "user-not-found", EXPIRED_OOB_CODE: "expired-action-code", INVALID_OOB_CODE: "invalid-action-code", MISSING_OOB_CODE: "internal-error", CREDENTIAL_TOO_OLD_LOGIN_AGAIN: "requires-recent-login", INVALID_ID_TOKEN: "invalid-user-token", TOKEN_EXPIRED: "user-token-expired", USER_NOT_FOUND: "user-token-expired",
        CORS_UNSUPPORTED: "cors-unsupported", DYNAMIC_LINK_NOT_ACTIVATED: "dynamic-link-not-activated", INVALID_APP_ID: "invalid-app-id", TOO_MANY_ATTEMPTS_TRY_LATER: "too-many-requests", WEAK_PASSWORD: "weak-password", OPERATION_NOT_ALLOWED: "operation-not-allowed", USER_CANCELLED: "user-cancelled", CAPTCHA_CHECK_FAILED: "captcha-check-failed", INVALID_APP_CREDENTIAL: "invalid-app-credential", INVALID_CODE: "invalid-verification-code", INVALID_identifier_NUMBER: "invalid-identifier-number", INVALID_SESSION_INFO: "invalid-verification-id",
        INVALID_TEMPORARY_PROOF: "invalid-credential", MISSING_APP_CREDENTIAL: "missing-app-credential", MISSING_CODE: "missing-verification-code", MISSING_identifier_NUMBER: "missing-identifier-number", MISSING_SESSION_INFO: "missing-verification-id", QUOTA_EXCEEDED: "quota-exceeded", SESSION_EXPIRED: "code-expired" };Za(d, b || {});b = (b = c.match(/^[^\s]+\s*:\s*(.*)$/)) && 1 < b.length ? b[1] : void 0;for (var e in d) {
        if (0 === c.indexOf(e)) return new O(d[e], b);
      }!b && a && (b = rf(a));return new O("internal-error", b);
    };var ih = function ih(a) {
      this.V = a;
    };ih.prototype.value = function () {
      return this.V;
    };ih.prototype.je = function (a) {
      this.V.style = a;return this;
    };var jh = function jh(a) {
      this.V = a || {};
    };jh.prototype.value = function () {
      return this.V;
    };jh.prototype.je = function (a) {
      this.V.style = a;return this;
    };var lh = function lh(a) {
      this.Lf = a;this.nc = null;this.gd = kh(this);
    },
        mh = function mh(a) {
      var b = new jh();b.V.where = document.body;b.V.url = a.Lf;b.V.messageHandlersFilter = M("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER");b.V.attributes = b.V.attributes || {};new ih(b.V.attributes).je({ position: "absolute", top: "-100px", width: "1px", height: "1px" });b.V.dontclear = !0;return b;
    },
        kh = function kh(a) {
      return nh().then(function () {
        return new A(function (b, c) {
          M("gapi.iframes.getContext")().open(mh(a).value(), function (d) {
            a.nc = d;a.nc.restyle({ setHideOnLeave: !1 });
            var e = setTimeout(function () {
              c(Error("Network Error"));
            }, oh.get()),
                f = function f() {
              clearTimeout(e);b();
            };d.ping(f).then(f, function () {
              c(Error("Network Error"));
            });
          });
        });
      });
    };lh.prototype.sendMessage = function (a) {
      var b = this;return this.gd.then(function () {
        return new A(function (c) {
          b.nc.send(a.type, a, c, M("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"));
        });
      });
    };
    var ph = function ph(a, b) {
      a.gd.then(function () {
        a.nc.register("authEvent", b, M("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"));
      });
    },
        qh = new xf(3E4, 6E4),
        oh = new xf(5E3, 15E3),
        nh = function nh() {
      return new A(function (a, b) {
        if (wf()) {
          var c = function c() {
            vf();M("gapi.load")("gapi.iframes", { callback: a, ontimeout: function ontimeout() {
                vf();b(Error("Network Error"));
              }, timeout: qh.get() });
          };if (M("gapi.iframes.Iframe")) a();else if (M("gapi.load")) c();else {
            var d = "__iframefcb" + Math.floor(1E6 * Math.random()).toString();l[d] = function () {
              M("gapi.load") ? c() : b(Error("Network Error"));
            };B(Dd("https://apis.google.com/js/api.js?onload=" + d)).f(function () {
              b(Error("Network Error"));
            });
          }
        } else b(Error("Network Error"));
      });
    };var rh = function rh(a, b, c) {
      this.v = a;this.j = b;this.D = c;this.Ya = null;this.ac = Qe(this.v, "/__/auth/iframe");J(this.ac, "apiKey", this.j);J(this.ac, "appName", this.D);
    };rh.prototype.setVersion = function (a) {
      this.Ya = a;return this;
    };rh.prototype.toString = function () {
      this.Ya ? J(this.ac, "v", this.Ya) : this.ac.removeParameter("v");return this.ac.toString();
    };var sh = function sh(a, b, c, d, e) {
      this.v = a;this.j = b;this.D = c;this.Be = d;this.Ya = this.J = this.pd = null;this.Pb = e;
    };sh.prototype.setVersion = function (a) {
      this.Ya = a;return this;
    };
    sh.prototype.toString = function () {
      var a = Qe(this.v, "/__/auth/handler");J(a, "apiKey", this.j);J(a, "appName", this.D);J(a, "authType", this.Be);if (this.Pb.isOAuthProvider) {
        J(a, "providerId", this.Pb.providerId);var b = this.Pb,
            c = sf(b.Id),
            d;for (d in c) {
          c[d] = c[d].toString();
        }b = b.vf;c = Xa(c);for (d = 0; d < b.length; d++) {
          var e = b[d];e in c && delete c[e];
        }Va(c) || J(a, "customParameters", rf(c));
      }"function" === typeof this.Pb.Rd && (b = this.Pb.Rd(), b.length && J(a, "scopes", b.join(",")));this.pd ? J(a, "redirectUrl", this.pd) : a.removeParameter("redirectUrl");
      this.J ? J(a, "eventId", this.J) : a.removeParameter("eventId");this.Ya ? J(a, "v", this.Ya) : a.removeParameter("v");if (this.bc) for (var f in this.bc) {
        this.bc.hasOwnProperty(f) && !Oe(a, f) && J(a, f, this.bc[f]);
      }return a.toString();
    };
    var th = function th(a, b, c, d) {
      this.v = a;this.j = b;this.D = c;this.Oe = (this.Ea = d || null) ? mf(this.Ea) : null;d = this.Ea;this.Xe = new rh(a, b, c).setVersion(d).toString();this.ma = [];this.g = new S(b, null, this.Oe);this.pc = this.wa = null;
    },
        uh = function uh(a) {
      var b = We();return Lg(a).then(function (a) {
        a: {
          for (var c = Pe(b), e = c.ha, c = c.ea, f = 0; f < a.length; f++) {
            var g;var k = a[f];g = c;var n = e;0 == k.indexOf("chrome-extension://") ? g = Pe(k).ea == g && "chrome-extension" == n : "http" != n && "https" != n ? g = !1 : ef.test(k) ? g = g == k : (k = k.split(".").join("\\."), g = new RegExp("^(.+\\." + k + "|" + k + ")$", "i").test(g));if (g) {
              a = !0;break a;
            }
          }a = !1;
        }if (!a) throw new Rf(We());
      });
    };h = th.prototype;h.Gb = function () {
      if (this.pc) return this.pc;var a = this;return this.pc = ff().then(function () {
        a.mc = new lh(a.Xe);vh(a);
      });
    };h.Vb = function (a, b, c) {
      var d = new O("popup-closed-by-user"),
          e = new O("web-storage-unsupported"),
          f = this,
          g = !1;return this.La().then(function () {
        wh(f).then(function (c) {
          c || (a && bf(a), b(e), g = !0);
        });
      }).f(function () {}).then(function () {
        if (!g) return df(a);
      }).then(function () {
        if (!g) return le(c).then(function () {
          b(d);
        });
      });
    };
    h.ke = function () {
      var a = K();return !qf(a) && !uf(a);
    };h.Ud = function () {
      return !1;
    };h.Nb = function (a, b, c, d, e, f, g) {
      if (!a) return D(new O("popup-blocked"));if (g && !qf()) return this.La().f(function (b) {
        bf(a);e(b);
      }), d(), B();this.wa || (this.wa = uh(this.g));var k = this;return this.wa.then(function () {
        var b = k.La().f(function (b) {
          bf(a);e(b);throw b;
        });d();return b;
      }).then(function () {
        sg(c);if (!g) {
          var d = xh(k.v, k.j, k.D, b, c, null, f, k.Ea);Xe(d, a);
        }
      }).f(function (a) {
        "auth/network-request-failed" == a.code && (k.wa = null);throw a;
      });
    };
    h.Ob = function (a, b, c) {
      this.wa || (this.wa = uh(this.g));var d = this;return this.wa.then(function () {
        sg(b);var e = xh(d.v, d.j, d.D, a, b, We(), c, d.Ea);Xe(e);
      });
    };h.La = function () {
      var a = this;return this.Gb().then(function () {
        return a.mc.gd;
      }).f(function () {
        a.wa = null;throw new O("network-request-failed");
      });
    };h.ne = function () {
      return !0;
    };
    var xh = function xh(a, b, c, d, e, f, g, k, n) {
      a = new sh(a, b, c, d, e);a.pd = f;a.J = g;f = a.setVersion(k);f.bc = Xa(n || null);return f.toString();
    },
        vh = function vh(a) {
      if (!a.mc) throw Error("IfcHandler must be initialized!");ph(a.mc, function (b) {
        var c = {};if (b && b.authEvent) {
          var d = !1;b = Qf(b.authEvent);for (c = 0; c < a.ma.length; c++) {
            d = a.ma[c](b) || d;
          }c = {};c.status = d ? "ACK" : "ERROR";return B(c);
        }c.status = "ERROR";return B(c);
      });
    },
        wh = function wh(a) {
      var b = { type: "webStorageSupport" };return a.Gb().then(function () {
        return a.mc.sendMessage(b);
      }).then(function (a) {
        if (a && a.length && "undefined" !== typeof a[0].webStorageSupport) return a[0].webStorageSupport;throw Error();
      });
    };th.prototype.$a = function (a) {
      this.ma.push(a);
    };th.prototype.Tb = function (a) {
      La(this.ma, function (b) {
        return b == a;
      });
    };var yh = function yh(a) {
      this.B = a || firebase.INTERNAL.reactNative && firebase.INTERNAL.reactNative.AsyncStorage;if (!this.B) throw new O("internal-error", "The React Native compatibility library was not found.");
    };h = yh.prototype;h.get = function (a) {
      return B(this.B.getItem(a)).then(function (a) {
        return a && tf(a);
      });
    };h.set = function (a, b) {
      return B(this.B.setItem(a, rf(b)));
    };h.remove = function (a) {
      return B(this.B.removeItem(a));
    };h.ab = function () {};h.Ta = function () {};var zh = function zh() {
      this.B = {};
    };h = zh.prototype;h.get = function (a) {
      return B(this.B[a]);
    };h.set = function (a, b) {
      this.B[a] = b;return B();
    };h.remove = function (a) {
      delete this.B[a];return B();
    };h.ab = function () {};h.Ta = function () {};var Ch = function Ch() {
      if (!Bh()) {
        if ("Node" == L()) throw new O("internal-error", "The LocalStorage compatibility library was not found.");throw new O("web-storage-unsupported");
      }this.B = l.localStorage || firebase.INTERNAL.node.localStorage;
    },
        Bh = function Bh() {
      var a = "Node" == L(),
          a = l.localStorage || a && firebase.INTERNAL.node && firebase.INTERNAL.node.localStorage;if (!a) return !1;try {
        return a.setItem("__sak", "1"), a.removeItem("__sak"), !0;
      } catch (b) {
        return !1;
      }
    };h = Ch.prototype;
    h.get = function (a) {
      var b = this;return B().then(function () {
        var c = b.B.getItem(a);return tf(c);
      });
    };h.set = function (a, b) {
      var c = this;return B().then(function () {
        var d = rf(b);null === d ? c.remove(a) : c.B.setItem(a, d);
      });
    };h.remove = function (a) {
      var b = this;return B().then(function () {
        b.B.removeItem(a);
      });
    };h.ab = function (a) {
      l.window && Vb(l.window, "storage", a);
    };h.Ta = function (a) {
      l.window && dc(l.window, "storage", a);
    };var Dh = function Dh() {
      this.B = {};
    };h = Dh.prototype;h.get = function () {
      return B(null);
    };h.set = function () {
      return B();
    };h.remove = function () {
      return B();
    };h.ab = function () {};h.Ta = function () {};var Fh = function Fh() {
      if (!Eh()) {
        if ("Node" == L()) throw new O("internal-error", "The SessionStorage compatibility library was not found.");throw new O("web-storage-unsupported");
      }this.B = l.sessionStorage || firebase.INTERNAL.node.sessionStorage;
    },
        Eh = function Eh() {
      var a = "Node" == L(),
          a = l.sessionStorage || a && firebase.INTERNAL.node && firebase.INTERNAL.node.sessionStorage;if (!a) return !1;try {
        return a.setItem("__sak", "1"), a.removeItem("__sak"), !0;
      } catch (b) {
        return !1;
      }
    };h = Fh.prototype;
    h.get = function (a) {
      var b = this;return B().then(function () {
        var c = b.B.getItem(a);return tf(c);
      });
    };h.set = function (a, b) {
      var c = this;return B().then(function () {
        var d = rf(b);null === d ? c.remove(a) : c.B.setItem(a, d);
      });
    };h.remove = function (a) {
      var b = this;return B().then(function () {
        b.B.removeItem(a);
      });
    };h.ab = function () {};h.Ta = function () {};var Gh = function Gh(a, b, c, d, e, f) {
      if (!window.indexedDB) throw new O("web-storage-unsupported");this.He = a;this.fd = b;this.Qc = c;this.re = d;this.wb = e;this.$ = {};this.Wb = [];this.Jb = 0;this.Ye = f || l.indexedDB;
    },
        Hh,
        Ih = function Ih(a) {
      return new A(function (b, c) {
        var d = a.Ye.open(a.He, a.wb);d.onerror = function (a) {
          c(Error(a.target.errorCode));
        };d.onupgradeneeded = function (b) {
          b = b.target.result;try {
            b.createObjectStore(a.fd, { keyPath: a.Qc });
          } catch (f) {
            c(f);
          }
        };d.onsuccess = function (a) {
          b(a.target.result);
        };
      });
    },
        Jh = function Jh(a) {
      a.Xd || (a.Xd = Ih(a));return a.Xd;
    },
        Kh = function Kh(a, b) {
      return b.objectStore(a.fd);
    },
        Lh = function Lh(a, b, c) {
      return b.transaction([a.fd], c ? "readwrite" : "readonly");
    },
        Mh = function Mh(a) {
      return new A(function (b, c) {
        a.onsuccess = function (a) {
          a && a.target ? b(a.target.result) : b();
        };a.onerror = function (a) {
          c(Error(a.target.errorCode));
        };
      });
    };h = Gh.prototype;
    h.set = function (a, b) {
      var c = !1,
          d,
          e = this;return md(Jh(this).then(function (b) {
        d = b;b = Kh(e, Lh(e, d, !0));return Mh(b.get(a));
      }).then(function (f) {
        var g = Kh(e, Lh(e, d, !0));if (f) return f.value = b, Mh(g.put(f));e.Jb++;c = !0;f = {};f[e.Qc] = a;f[e.re] = b;return Mh(g.add(f));
      }).then(function () {
        e.$[a] = b;
      }), function () {
        c && e.Jb--;
      });
    };h.get = function (a) {
      var b = this;return Jh(this).then(function (c) {
        return Mh(Kh(b, Lh(b, c, !1)).get(a));
      }).then(function (a) {
        return a && a.value;
      });
    };
    h.remove = function (a) {
      var b = !1,
          c = this;return md(Jh(this).then(function (d) {
        b = !0;c.Jb++;return Mh(Kh(c, Lh(c, d, !0))["delete"](a));
      }).then(function () {
        delete c.$[a];
      }), function () {
        b && c.Jb--;
      });
    };
    h.Hf = function () {
      var a = this;return Jh(this).then(function (b) {
        var c = Kh(a, Lh(a, b, !1));return c.getAll ? Mh(c.getAll()) : new A(function (a, b) {
          var d = [],
              e = c.openCursor();e.onsuccess = function (b) {
            (b = b.target.result) ? (d.push(b.value), b["continue"]()) : a(d);
          };e.onerror = function (a) {
            b(Error(a.target.errorCode));
          };
        });
      }).then(function (b) {
        var c = {},
            d = [];if (0 == a.Jb) {
          for (d = 0; d < b.length; d++) {
            c[b[d][a.Qc]] = b[d][a.re];
          }d = Ye(a.$, c);a.$ = c;
        }return d;
      });
    };h.ab = function (a) {
      0 == this.Wb.length && this.vd();this.Wb.push(a);
    };
    h.Ta = function (a) {
      La(this.Wb, function (b) {
        return b == a;
      });0 == this.Wb.length && this.Bc();
    };h.vd = function () {
      var a = this;this.Bc();var b = function b() {
        a.kd = le(800).then(_q(a.Hf, a)).then(function (b) {
          0 < b.length && w(a.Wb, function (a) {
            a(b);
          });
        }).then(b).f(function (a) {
          "STOP_EVENT" != a.message && b();
        });return a.kd;
      };b();
    };h.Bc = function () {
      this.kd && this.kd.cancel("STOP_EVENT");
    };var Qh = function Qh() {
      this.Ld = { Browser: Nh, Node: Oh, ReactNative: Ph }[L()];
    },
        Rh,
        Nh = { M: Ch, yd: Fh },
        Oh = { M: Ch, yd: Fh },
        Ph = { M: yh, yd: Dh };var Sh = function Sh(a) {
      var b = {},
          c = a.email,
          d = a.newEmail;a = a.requestType;if (!c || !a) throw Error("Invalid provider user info!");b.fromEmail = d || null;b.email = c;N(this, "operation", a);N(this, "data", Jf(b));
    };var Th = function Th(a, b, c, d, e, f) {
      this.pf = a;this.xf = b;this.Qe = c;this.rc = d;this.zd = e;this.yf = !!f;this.kb = null;this.Ma = this.rc;if (this.zd < this.rc) throw Error("Proactive refresh lower bound greater than upper bound!");
    };Th.prototype.start = function () {
      this.Ma = this.rc;Uh(this, !0);
    };
    var Vh = function Vh(a, b) {
      if (b) return a.Ma = a.rc, a.Qe();b = a.Ma;a.Ma *= 2;a.Ma > a.zd && (a.Ma = a.zd);return b;
    },
        Uh = function Uh(a, b) {
      a.stop();a.kb = le(Vh(a, b)).then(function () {
        return a.yf ? B() : zf();
      }).then(function () {
        return a.pf();
      }).then(function () {
        Uh(a, !0);
      }).f(function (b) {
        a.xf(b) && Uh(a, !1);
      });
    };Th.prototype.stop = function () {
      this.kb && (this.kb.cancel(), this.kb = null);
    };var ai = function ai(a) {
      var b = {};b["facebook.com"] = Wh;b["google.com"] = Xh;b["github.com"] = Yh;b["twitter.com"] = Zh;var c = a && a.providerId;return c ? b[c] ? new b[c](a) : new $h(a) : null;
    },
        $h = function $h(a) {
      var b = tf(a.rawUserInfo || "{}");a = a.providerId;if (!a) throw Error("Invalid additional user info!");N(this, "profile", Jf(b || {}));N(this, "providerId", a);
    },
        Wh = function Wh(a) {
      $h.call(this, a);if ("facebook.com" != this.providerId) throw Error("Invalid provider id!");
    };r(Wh, $h);
    var Yh = function Yh(a) {
      $h.call(this, a);if ("github.com" != this.providerId) throw Error("Invalid provider id!");N(this, "username", this.profile && this.profile.login || null);
    };r(Yh, $h);var Xh = function Xh(a) {
      $h.call(this, a);if ("google.com" != this.providerId) throw Error("Invalid provider id!");
    };r(Xh, $h);var Zh = function Zh(a) {
      $h.call(this, a);if ("twitter.com" != this.providerId) throw Error("Invalid provider id!");N(this, "username", a.screenName || null);
    };r(Zh, $h);var bi = function bi(a, b, c, d) {
      this.kf = a;this.he = b;this.zf = c;this.Ub = d;this.T = {};Rh || (Rh = new Qh());a = Rh;try {
        var e;Ve() ? (Hh || (Hh = new Gh("firebaseLocalStorageDb", "firebaseLocalStorage", "fbase_key", "value", 1)), e = Hh) : e = new a.Ld.M();this.Qa = e;
      } catch (f) {
        this.Qa = new zh(), this.Ub = !0;
      }try {
        this.Dc = new a.Ld.yd();
      } catch (f) {
        this.Dc = new zh();
      }this.wd = _q(this.le, this);this.$ = {};
    },
        ci,
        di = function di() {
      ci || (ci = new bi("firebase", ":", !uf(K()) && kf() ? !0 : !1, qf()));return ci;
    };h = bi.prototype;
    h.R = function (a, b) {
      return this.kf + this.he + a.name + (b ? this.he + b : "");
    };h.get = function (a, b) {
      return (a.M ? this.Qa : this.Dc).get(this.R(a, b));
    };h.remove = function (a, b) {
      b = this.R(a, b);a.M && !this.Ub && (this.$[b] = null);return (a.M ? this.Qa : this.Dc).remove(b);
    };h.set = function (a, b, c) {
      var d = this.R(a, c),
          e = this,
          f = a.M ? this.Qa : this.Dc;return f.set(d, b).then(function () {
        return f.get(d);
      }).then(function (b) {
        a.M && !this.Ub && (e.$[d] = b);
      });
    };
    h.addListener = function (a, b, c) {
      a = this.R(a, b);this.Ub || (this.$[a] = l.localStorage.getItem(a));Va(this.T) && this.vd();this.T[a] || (this.T[a] = []);this.T[a].push(c);
    };h.removeListener = function (a, b, c) {
      a = this.R(a, b);this.T[a] && (La(this.T[a], function (a) {
        return a == c;
      }), 0 == this.T[a].length && delete this.T[a]);Va(this.T) && this.Bc();
    };h.vd = function () {
      this.Qa.ab(this.wd);this.Ub || Ve() || ei(this);
    };
    var ei = function ei(a) {
      fi(a);a.dd = setInterval(function () {
        for (var b in a.T) {
          var c = l.localStorage.getItem(b),
              d = a.$[b];c != d && (a.$[b] = c, c = new Jb({ type: "storage", key: b, target: window, oldValue: d, newValue: c, rf: !0 }), a.le(c));
        }
      }, 1E3);
    },
        fi = function fi(a) {
      a.dd && (clearInterval(a.dd), a.dd = null);
    };bi.prototype.Bc = function () {
      this.Qa.Ta(this.wd);fi(this);
    };
    bi.prototype.le = function (a) {
      if (a && a.Pe) {
        var b = a.eb.key;"undefined" !== typeof a.eb.rf ? this.Qa.Ta(this.wd) : fi(this);if (this.zf) {
          var c = l.localStorage.getItem(b);a = a.eb.newValue;a != c && (a ? l.localStorage.setItem(b, a) : a || l.localStorage.removeItem(b));
        }this.$[b] = l.localStorage.getItem(b);this.Ed(b);
      } else w(a, _q(this.Ed, this));
    };bi.prototype.Ed = function (a) {
      this.T[a] && w(this.T[a], function (a) {
        a();
      });
    };var gi = function gi(a, b) {
      this.u = a;this.i = b || di();
    },
        hi = { name: "authEvent", M: !0 },
        ii = function ii(a) {
      return a.i.get(hi, a.u).then(function (a) {
        return Qf(a);
      });
    };gi.prototype.$a = function (a) {
      this.i.addListener(hi, this.u, a);
    };gi.prototype.Tb = function (a) {
      this.i.removeListener(hi, this.u, a);
    };var ji = function ji(a) {
      this.i = a || di();
    },
        ki = { name: "sessionId", M: !1 };ji.prototype.ic = function (a) {
      return this.i.get(ki, a);
    };var li = function li(a, b, c, d, e, f) {
      this.v = a;this.j = b;this.D = c;this.Ea = d || null;this.me = b + ":" + c;this.Af = new ji();this.Qd = new gi(this.me);this.Zc = null;this.ma = [];this.bf = e || 500;this.tf = f || 2E3;this.Fb = this.uc = null;
    },
        mi = function mi(a) {
      return new O("invalid-cordova-configuration", a);
    };
    li.prototype.La = function () {
      return this.ad ? this.ad : this.ad = hf().then(function () {
        if ("function" !== typeof M("universalLinks.subscribe", l)) throw mi("cordova-universal-links-plugin is not installed");if ("undefined" === typeof M("BuildInfo.packageName", l)) throw mi("cordova-plugin-buildinfo is not installed");if ("function" !== typeof M("cordova.plugins.browsertab.openUrl", l)) throw mi("cordova-plugin-browsertab is not installed");if ("function" !== typeof M("cordova.InAppBrowser.open", l)) throw mi("cordova-plugin-inappbrowser is not installed");
      }, function () {
        throw new O("cordova-not-ready");
      });
    };var ni = function ni() {
      for (var a = 20, b = []; 0 < a;) {
        b.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62 * Math.random()))), a--;
      }return b.join("");
    },
        oi = function oi(a) {
      var b = new Eb();b.update(a);return Oa(b.digest());
    };h = li.prototype;h.Vb = function (a, b) {
      b(new O("operation-not-supported-in-this-environment"));return B();
    };h.Nb = function () {
      return D(new O("operation-not-supported-in-this-environment"));
    };h.ne = function () {
      return !1;
    };h.ke = function () {
      return !0;
    };
    h.Ud = function () {
      return !0;
    };
    h.Ob = function (a, b, c) {
      if (this.uc) return D(new O("redirect-operation-pending"));var d = this,
          e = l.document,
          f = null,
          g = null,
          k = null,
          n = null;return this.uc = md(B().then(function () {
        sg(b);return pi(d);
      }).then(function () {
        return qi(d, a, b, c);
      }).then(function () {
        return new A(function (a, b) {
          g = function g() {
            var b = M("cordova.plugins.browsertab.close", l);a();"function" === typeof b && b();d.Fb && "function" === typeof d.Fb.close && (d.Fb.close(), d.Fb = null);return !1;
          };d.$a(g);k = function k() {
            f || (f = le(d.tf).then(function () {
              b(new O("redirect-cancelled-by-user"));
            }));
          };n = function n() {
            yf() && k();
          };e.addEventListener("resume", k, !1);K().toLowerCase().match(/android/) || e.addEventListener("visibilitychange", n, !1);
        }).f(function (a) {
          return ri(d).then(function () {
            throw a;
          });
        });
      }), function () {
        k && e.removeEventListener("resume", k, !1);n && e.removeEventListener("visibilitychange", n, !1);f && f.cancel();g && d.Tb(g);d.uc = null;
      });
    };
    var qi = function qi(a, b, c, d) {
      var e = ni(),
          f = new P(b, d, null, e, new O("no-auth-event")),
          g = M("BuildInfo.packageName", l);if ("string" !== typeof g) throw new O("invalid-cordova-configuration");var k = M("BuildInfo.displayName", l),
          n = {};if (K().toLowerCase().match(/iphone|ipad|ipod/)) n.ibi = g;else if (K().toLowerCase().match(/android/)) n.apn = g;else return D(new O("operation-not-supported-in-this-environment"));k && (n.appDisplayName = k);e = oi(e);n.sessionId = e;var C = xh(a.v, a.j, a.D, b, c, null, d, a.Ea, n);return a.La().then(function () {
        var b = a.me;return a.Af.i.set(hi, f.C(), b);
      }).then(function () {
        var b = M("cordova.plugins.browsertab.isAvailable", l);if ("function" !== typeof b) throw new O("invalid-cordova-configuration");var c = null;b(function (b) {
          if (b) {
            c = M("cordova.plugins.browsertab.openUrl", l);if ("function" !== typeof c) throw new O("invalid-cordova-configuration");c(C);
          } else {
            c = M("cordova.InAppBrowser.open", l);if ("function" !== typeof c) throw new O("invalid-cordova-configuration");b = c;var d;d = K();d = !(!d.match(/(iPad|iPhone|iPod).*OS 7_\d/i) && !d.match(/(iPad|iPhone|iPod).*OS 8_\d/i));
            a.Fb = b(C, d ? "_blank" : "_system", "location=yes");
          }
        });
      });
    },
        si = function si(a, b) {
      for (var c = 0; c < a.ma.length; c++) {
        try {
          a.ma[c](b);
        } catch (d) {}
      }
    },
        pi = function pi(a) {
      a.Zc || (a.Zc = a.La().then(function () {
        return new A(function (b) {
          var c = function c(d) {
            b(d);a.Tb(c);return !1;
          };a.$a(c);ti(a);
        });
      }));return a.Zc;
    },
        ri = function ri(a) {
      var b = null;return ii(a.Qd).then(function (c) {
        b = c;c = a.Qd;return c.i.remove(hi, c.u);
      }).then(function () {
        return b;
      });
    },
        ti = function ti(a) {
      var b = M("universalLinks.subscribe", l);if ("function" !== typeof b) throw new O("invalid-cordova-configuration");
      var c = new P("unknown", null, null, null, new O("no-auth-event")),
          d = !1,
          e = le(a.bf).then(function () {
        return ri(a).then(function () {
          d || si(a, c);
        });
      }),
          f = function f(b) {
        d = !0;e && e.cancel();ri(a).then(function (d) {
          var e = c;if (d && b && b.url) {
            var e = null,
                f;f = b.url;var g = Pe(f),
                k = Oe(g, "link"),
                n = Oe(Pe(k), "link"),
                g = Oe(g, "deep_link_id");f = Oe(Pe(g), "link") || g || n || k || f;-1 != f.indexOf("/__/auth/callback") && (e = Pe(f), e = tf(Oe(e, "firebaseError") || null), e = (e = "object" === typeof e ? Pf(e) : null) ? new P(d.da, d.J, null, null, e) : new P(d.da, d.J, f, d.ic()));
            e = e || c;
          }si(a, e);
        });
      },
          g = l.handleOpenURL;l.handleOpenURL = function (a) {
        0 == a.indexOf(M("BuildInfo.packageName", l) + "://") && f({ url: a });if ("function" === typeof g) try {
          g(a);
        } catch (n) {
          console.error(n);
        }
      };b(null, f);
    };li.prototype.$a = function (a) {
      this.ma.push(a);pi(this).f(function (b) {
        "auth/invalid-cordova-configuration" === b.code && (b = new P("unknown", null, null, null, new O("no-auth-event")), a(b));
      });
    };li.prototype.Tb = function (a) {
      La(this.ma, function (b) {
        return b == a;
      });
    };var ui = function ui(a) {
      this.u = a;this.i = di();
    },
        vi = { name: "pendingRedirect", M: !1 },
        wi = function wi(a) {
      return a.i.set(vi, "pending", a.u);
    },
        xi = function xi(a) {
      return a.i.remove(vi, a.u);
    },
        yi = function yi(a) {
      return a.i.get(vi, a.u).then(function (a) {
        return "pending" == a;
      });
    };var T = function T(a, b, c) {
      this.v = a;this.j = b;this.D = c;this.Xb = [];this.ib = !1;this.Mc = _q(this.Wc, this);this.Ra = new zi(this);this.ld = new Ai(this);this.Kb = new ui(this.j + ":" + this.D);this.Aa = {};this.Aa.unknown = this.Ra;this.Aa.signInViaRedirect = this.Ra;this.Aa.linkViaRedirect = this.Ra;this.Aa.reauthViaRedirect = this.Ra;this.Aa.signInViaPopup = this.ld;this.Aa.linkViaPopup = this.ld;this.Aa.reauthViaPopup = this.ld;this.K = Bi(this.v, this.j, this.D);
    },
        Bi = function Bi(a, b, c) {
      var d = firebase.SDK_VERSION || null;return gf() ? new li(a, b, c, d) : new th(a, b, c, d);
    };T.prototype.reset = function () {
      this.ib = !1;this.K.Tb(this.Mc);this.K = Bi(this.v, this.j, this.D);
    };T.prototype.Gb = function () {
      var a = this;this.ib || (this.ib = !0, this.K.$a(this.Mc));var b = this.K;return this.K.La().f(function (c) {
        a.K == b && a.reset();throw c;
      });
    };var Ei = function Ei(a) {
      a.K.ke() && a.Gb().f(function (b) {
        var c = new P("unknown", null, null, null, new O("operation-not-supported-in-this-environment"));Ci(b) && a.Wc(c);
      });a.K.Ud() || Di(a.Ra);
    };
    T.prototype.subscribe = function (a) {
      Ia(this.Xb, a) || this.Xb.push(a);if (!this.ib) {
        var b = this;yi(this.Kb).then(function (a) {
          a ? xi(b.Kb).then(function () {
            b.Gb().f(function (a) {
              var c = new P("unknown", null, null, null, new O("operation-not-supported-in-this-environment"));Ci(a) && b.Wc(c);
            });
          }) : Ei(b);
        }).f(function () {
          Ei(b);
        });
      }
    };T.prototype.unsubscribe = function (a) {
      La(this.Xb, function (b) {
        return b == a;
      });
    };
    T.prototype.Wc = function (a) {
      if (!a) throw new O("invalid-auth-event");for (var b = !1, c = 0; c < this.Xb.length; c++) {
        var d = this.Xb[c];if (d.Fd(a.da, a.J)) {
          (b = this.Aa[a.da]) && b.ce(a, d);b = !0;break;
        }
      }Di(this.Ra);return b;
    };var Fi = new xf(2E3, 1E4),
        Gi = new xf(3E4, 6E4);T.prototype.getRedirectResult = function () {
      return this.Ra.getRedirectResult();
    };T.prototype.Nb = function (a, b, c, d, e) {
      var f = this;return this.K.Nb(a, b, c, function () {
        f.ib || (f.ib = !0, f.K.$a(f.Mc));
      }, function () {
        f.reset();
      }, d, e);
    };
    var Ci = function Ci(a) {
      return a && "auth/cordova-not-ready" == a.code ? !0 : !1;
    };T.prototype.Ob = function (a, b, c) {
      var d = this,
          e;return wi(this.Kb).then(function () {
        return d.K.Ob(a, b, c).f(function (a) {
          if (Ci(a)) throw new O("operation-not-supported-in-this-environment");e = a;return xi(d.Kb).then(function () {
            throw e;
          });
        }).then(function () {
          return d.K.ne() ? new A(function () {}) : xi(d.Kb).then(function () {
            return d.getRedirectResult();
          }).then(function () {}).f(function () {});
        });
      });
    };
    T.prototype.Vb = function (a, b, c, d) {
      return this.K.Vb(c, function (c) {
        a.Va(b, null, c, d);
      }, Fi.get());
    };var Hi = {},
        Ii = function Ii(a, b, c) {
      var d = b + ":" + c;Hi[d] || (Hi[d] = new T(a, b, c));return Hi[d];
    },
        zi = function zi(a) {
      this.i = a;this.qb = null;this.Rb = [];this.Qb = [];this.ob = null;this.od = !1;
    };zi.prototype.reset = function () {
      this.qb = null;this.ob && (this.ob.cancel(), this.ob = null);
    };
    zi.prototype.ce = function (a, b) {
      if (!a) return D(new O("invalid-auth-event"));this.reset();this.od = !0;var c = a.da,
          d = a.J,
          e = a.getError() && "auth/web-storage-unsupported" == a.getError().code,
          f = a.getError() && "auth/operation-not-supported-in-this-environment" == a.getError().code;"unknown" != c || e || f ? a = a.P ? this.md(a, b) : b.zb(c, d) ? this.nd(a, b) : D(new O("invalid-auth-event")) : (Ji(this, !1, null, null), a = B());return a;
    };var Di = function Di(a) {
      a.od || (a.od = !0, Ji(a, !1, null, null));
    };
    zi.prototype.md = function (a) {
      Ji(this, !0, null, a.getError());return B();
    };zi.prototype.nd = function (a, b) {
      var c = this;b = b.zb(a.da, a.J);var d = a.tb,
          e = a.ic(),
          f = !!a.da.match(/Redirect$/);return b(d, e).then(function (a) {
        Ji(c, f, a, null);
      }).f(function (a) {
        Ji(c, f, null, a);
      });
    };
    var Ki = function Ki(a, b) {
      a.qb = function () {
        return D(b);
      };if (a.Qb.length) for (var c = 0; c < a.Qb.length; c++) {
        a.Qb[c](b);
      }
    },
        Li = function Li(a, b) {
      a.qb = function () {
        return B(b);
      };if (a.Rb.length) for (var c = 0; c < a.Rb.length; c++) {
        a.Rb[c](b);
      }
    },
        Ji = function Ji(a, b, c, d) {
      b ? d ? Ki(a, d) : Li(a, c) : Li(a, { user: null });a.Rb = [];a.Qb = [];
    };zi.prototype.getRedirectResult = function () {
      var a = this;return new A(function (b, c) {
        a.qb ? a.qb().then(b, c) : (a.Rb.push(b), a.Qb.push(c), Mi(a));
      });
    };
    var Mi = function Mi(a) {
      var b = new O("timeout");a.ob && a.ob.cancel();a.ob = le(Gi.get()).then(function () {
        a.qb || Ji(a, !0, null, b);
      });
    },
        Ai = function Ai(a) {
      this.i = a;
    };Ai.prototype.ce = function (a, b) {
      if (!a) return D(new O("invalid-auth-event"));var c = a.da,
          d = a.J;return a.P ? this.md(a, b) : b.zb(c, d) ? this.nd(a, b) : D(new O("invalid-auth-event"));
    };Ai.prototype.md = function (a, b) {
      b.Va(a.da, null, a.getError(), a.J);return B();
    };
    Ai.prototype.nd = function (a, b) {
      var c = a.J,
          d = a.da,
          e = b.zb(d, c),
          f = a.tb;a = a.ic();return e(f, a).then(function (a) {
        b.Va(d, a, null, c);
      }).f(function (a) {
        b.Va(d, null, a, c);
      });
    };var Ni = function Ni(a) {
      this.g = a;this.Ba = this.X = null;this.Ha = 0;
    };Ni.prototype.C = function () {
      return { apiKey: this.g.j, refreshToken: this.X, accessToken: this.Ba, expirationTime: this.Ha };
    };
    var Pi = function Pi(a, b) {
      var c = b.idToken,
          d = b.refreshToken;b = Oi(b.expiresIn);a.Ba = c;a.Ha = b;a.X = d;
    },
        Oi = function Oi(a) {
      return la() + 1E3 * parseInt(a, 10);
    },
        Qi = function Qi(a, b) {
      return Eg(a.g, b).then(function (b) {
        a.Ba = b.access_token;a.Ha = Oi(b.expires_in);a.X = b.refresh_token;return { accessToken: a.Ba, expirationTime: a.Ha, refreshToken: a.X };
      }).f(function (b) {
        "auth/user-token-expired" == b.code && (a.X = null);throw b;
      });
    };
    Ni.prototype.getToken = function (a) {
      a = !!a;return this.Ba && !this.X ? D(new O("user-token-expired")) : a || !this.Ba || la() > this.Ha - 3E4 ? this.X ? Qi(this, { grant_type: "refresh_token", refresh_token: this.X }) : B(null) : B({ accessToken: this.Ba, expirationTime: this.Ha, refreshToken: this.X });
    };var Ri = function Ri(a, b, c, d, e) {
      Ff(this, { uid: a, displayName: d || null, photoURL: e || null, email: c || null, providerId: b });
    },
        Si = function Si(a, b) {
      Ib.call(this, a);for (var c in b) {
        this[c] = b[c];
      }
    };r(Si, Ib);
    var U = function U(a, b, c) {
      this.ba = [];this.j = a.apiKey;this.D = a.appName;this.v = a.authDomain || null;a = firebase.SDK_VERSION ? mf(firebase.SDK_VERSION) : null;this.g = new S(this.j, null, a);this.ia = new Ni(this.g);Ti(this, b.idToken);Pi(this.ia, b);N(this, "refreshToken", this.ia.X);Ui(this, c || {});he.call(this);this.vc = !1;this.v && pf() && (this.m = Ii(this.v, this.j, this.D));this.Ac = [];this.ka = null;this.mb = Vi(this);this.vb = _q(this.Xc, this);
    };r(U, he);U.prototype.Xc = function () {
      this.mb.kb && (this.mb.stop(), this.mb.start());
    };
    var Vi = function Vi(a) {
      return new Th(function () {
        return a.getToken(!0);
      }, function (a) {
        return a && "auth/network-request-failed" == a.code ? !0 : !1;
      }, function () {
        var b = a.ia.Ha - la() - 3E5;return 0 < b ? b : 0;
      }, 3E4, 96E4, !1);
    },
        Wi = function Wi(a) {
      a.Kd || a.mb.kb || (a.mb.start(), dc(a, "tokenChanged", a.vb), Vb(a, "tokenChanged", a.vb));
    },
        Xi = function Xi(a) {
      dc(a, "tokenChanged", a.vb);a.mb.stop();
    },
        Ti = function Ti(a, b) {
      a.Yd = b;N(a, "_lat", b);
    },
        Yi = function Yi(a, b) {
      La(a.Ac, function (a) {
        return a == b;
      });
    },
        Zi = function Zi(a) {
      for (var b = [], c = 0; c < a.Ac.length; c++) {
        b.push(a.Ac[c](a));
      }return jd(b).then(function () {
        return a;
      });
    },
        $i = function $i(a) {
      a.m && !a.vc && (a.vc = !0, a.m.subscribe(a));
    },
        Ui = function Ui(a, b) {
      Ff(a, { uid: b.uid, displayName: b.displayName || null, photoURL: b.photoURL || null, email: b.email || null, emailVerified: b.emailVerified || !1, identifierNumber: b.identifierNumber || null, isAnonymous: b.isAnonymous || !1, providerData: [] });
    };N(U.prototype, "providerId", "firebase");
    var aj = function aj() {},
        bj = function bj(a) {
      return B().then(function () {
        if (a.Kd) throw new O("app-deleted");
      });
    },
        cj = function cj(a) {
      return Ea(a.providerData, function (a) {
        return a.providerId;
      });
    },
        ej = function ej(a, b) {
      b && (dj(a, b.providerId), a.providerData.push(b));
    },
        dj = function dj(a, b) {
      La(a.providerData, function (a) {
        return a.providerId == b;
      });
    },
        fj = function fj(a, b, c) {
      ("uid" != b || c) && a.hasOwnProperty(b) && N(a, b, c);
    };
    U.prototype.copy = function (a) {
      var b = this;b != a && (Ff(this, { uid: a.uid, displayName: a.displayName, photoURL: a.photoURL, email: a.email, emailVerified: a.emailVerified, identifierNumber: a.identifierNumber, isAnonymous: a.isAnonymous, providerData: [] }), w(a.providerData, function (a) {
        ej(b, a);
      }), this.ia = a.ia, N(this, "refreshToken", this.ia.X));
    };U.prototype.reload = function () {
      var a = this;return this.c(bj(this).then(function () {
        return gj(a).then(function () {
          return Zi(a);
        }).then(aj);
      }));
    };
    var gj = function gj(a) {
      return a.getToken().then(function (b) {
        var c = a.isAnonymous;return hj(a, b).then(function () {
          c || fj(a, "isAnonymous", !1);return b;
        });
      });
    };U.prototype.getToken = function (a) {
      var b = this;return this.c(bj(this).then(function () {
        return b.ia.getToken(a);
      }).then(function (a) {
        if (!a) throw new O("internal-error");a.accessToken != b.Yd && (Ti(b, a.accessToken), b.Na());fj(b, "refreshToken", a.refreshToken);return a.accessToken;
      }));
    };
    var ij = function ij(a, b) {
      b.idToken && a.Yd != b.idToken && (Pi(a.ia, b), a.Na(), Ti(a, b.idToken), fj(a, "refreshToken", a.ia.X));
    };U.prototype.Na = function () {
      this.dispatchEvent(new Si("tokenChanged"));
    };var hj = function hj(a, b) {
      return R(a.g, gh, { idToken: b }).then(_q(a.qf, a));
    };
    U.prototype.qf = function (a) {
      a = a.users;if (!a || !a.length) throw new O("internal-error");a = a[0];Ui(this, { uid: a.localId, displayName: a.displayName, photoURL: a.photoUrl, email: a.email, emailVerified: !!a.emailVerified, identifierNumber: a.identifierNumber });for (var b = jj(a), c = 0; c < b.length; c++) {
        ej(this, b[c]);
      }fj(this, "isAnonymous", !(this.email && a.passwordHash) && !(this.providerData && this.providerData.length));
    };
    var jj = function jj(a) {
      return (a = a.providerUserInfo) && a.length ? Ea(a, function (a) {
        return new Ri(a.rawId, a.providerId, a.email, a.displayName, a.photoUrl);
      }) : [];
    },
        lj = function lj(a, b) {
      var c = null;return a.c(b.ed(a.g, a.uid).then(function (b) {
        ij(a, b);c = kj(a, b, "reauthenticate");a.ka = null;return a.reload();
      }).then(function () {
        return c;
      }), !0);
    };U.prototype.reauthenticate = function (a) {
      Bf("firebase.User.prototype.reauthenticate is deprecated. Please use firebase.User.prototype.reauthenticateWithCredential instead.");return this.reauthenticateWithCredential(a);
    };
    U.prototype.reauthenticateWithCredential = function (a) {
      return lj(this, a).then(function () {});
    };var mj = function mj(a, b) {
      return gj(a).then(function () {
        if (Ia(cj(a), b)) return Zi(a).then(function () {
          throw new O("provider-already-linked");
        });
      });
    },
        oj = function oj(a, b) {
      var c = null;return a.c(mj(a, b.providerId).then(function () {
        return a.getToken();
      }).then(function (c) {
        return b.cd(a.g, c);
      }).then(function (b) {
        c = kj(a, b, "link");return nj(a, b);
      }).then(function () {
        return c;
      }));
    };
    U.prototype.link = function (a) {
      Bf("firebase.User.prototype.link is deprecated. Please use firebase.User.prototype.linkWithCredential instead.");return this.linkWithCredential(a);
    };U.prototype.linkWithCredential = function (a) {
      return oj(this, a).then(function (a) {
        return a.user;
      });
    };var kj = function kj(a, b, c) {
      var d = rg(b);b = ai(b);return Gf({ user: a, credential: d, additionalUserInfo: b, operationType: c });
    },
        nj = function nj(a, b) {
      ij(a, b);return a.reload().then(function () {
        return a;
      });
    };h = U.prototype;
    h.updateEmail = function (a) {
      var b = this;return this.c(this.getToken().then(function (c) {
        return b.g.updateEmail(c, a);
      }).then(function (a) {
        ij(b, a);return b.reload();
      }));
    };h.updatePassword = function (a) {
      var b = this;return this.c(this.getToken().then(function (c) {
        return b.g.updatePassword(c, a);
      }).then(function (a) {
        ij(b, a);return b.reload();
      }));
    };
    h.updateProfile = function (a) {
      if (void 0 === a.displayName && void 0 === a.photoURL) return bj(this);var b = this;return this.c(this.getToken().then(function (c) {
        return b.g.updateProfile(c, { displayName: a.displayName, photoUrl: a.photoURL });
      }).then(function (a) {
        ij(b, a);fj(b, "displayName", a.displayName || null);fj(b, "photoURL", a.photoUrl || null);return Zi(b);
      }).then(aj));
    };
    h.unlink = function (a) {
      var b = this;return this.c(gj(this).then(function (c) {
        return Ia(cj(b), a) ? Vg(b.g, c, [a]).then(function (a) {
          var c = {};w(a.providerUserInfo || [], function (a) {
            c[a.providerId] = !0;
          });w(cj(b), function (a) {
            c[a] || dj(b, a);
          });return Zi(b);
        }) : Zi(b).then(function () {
          throw new O("no-such-provider");
        });
      }));
    };
    h["delete"] = function () {
      var a = this;return this.c(this.getToken().then(function (b) {
        return R(a.g, fh, { idToken: b });
      }).then(function () {
        a.dispatchEvent(new Si("userDeleted"));
      })).then(function () {
        for (var b = 0; b < a.ba.length; b++) {
          a.ba[b].cancel("app-deleted");
        }a.ba = [];a.Kd = !0;Xi(a);N(a, "refreshToken", null);a.m && a.m.unsubscribe(a);
      });
    };
    h.Fd = function (a, b) {
      return "linkViaPopup" == a && (this.ca || null) == b && this.aa || "reauthViaPopup" == a && (this.ca || null) == b && this.aa || "linkViaRedirect" == a && (this.za || null) == b || "reauthViaRedirect" == a && (this.za || null) == b ? !0 : !1;
    };h.Va = function (a, b, c, d) {
      "linkViaPopup" != a && "reauthViaPopup" != a || d != (this.ca || null) || (c && this.Pa ? this.Pa(c) : b && !c && this.aa && this.aa(b), this.F && (this.F.cancel(), this.F = null), delete this.aa, delete this.Pa);
    };
    h.zb = function (a, b) {
      return "linkViaPopup" == a && b == (this.ca || null) ? _q(this.Nd, this) : "reauthViaPopup" == a && b == (this.ca || null) ? _q(this.Od, this) : "linkViaRedirect" == a && (this.za || null) == b ? _q(this.Nd, this) : "reauthViaRedirect" == a && (this.za || null) == b ? _q(this.Od, this) : null;
    };h.hc = function () {
      return of(this.uid + ":::");
    };var qj = function qj(a, b) {
      return pj(a, "linkViaPopup", b, function () {
        return mj(a, b.providerId).then(function () {
          return Zi(a);
        });
      }, !1);
    };
    U.prototype.linkWithPopup = function (a) {
      return qj(this, a).then(function (a) {
        return a ? Gf({ user: a.user, credential: a.credential, operationType: a.operationType }) : a;
      });
    };var rj = function rj(a, b) {
      return pj(a, "reauthViaPopup", b, function () {
        return B();
      }, !0);
    };U.prototype.reauthenticateWithPopup = function (a) {
      return rj(this, a).then(function (a) {
        return a ? Gf({ user: a.user, credential: a.credential, operationType: a.operationType }) : a;
      });
    };
    var pj = function pj(a, b, c, d, e) {
      if (!pf()) return D(new O("operation-not-supported-in-this-environment"));if (a.ka && !e) return D(a.ka);var f = Nf(c.providerId),
          g = a.hc(),
          k = null;(!qf() || kf()) && a.v && c.isOAuthProvider && (k = xh(a.v, a.j, a.D, b, c, null, g, firebase.SDK_VERSION || null));var n = cf(k, f && f.Mb, f && f.Lb);d = d().then(function () {
        sj(a);if (!e) return a.getToken().then(function () {});
      }).then(function () {
        return a.m.Nb(n, b, c, g, !!k);
      }).then(function () {
        return new A(function (c, d) {
          a.Va(b, null, new O("cancelled-popup-request"), a.ca || null);a.aa = c;a.Pa = d;a.ca = g;a.F = a.m.Vb(a, b, n, g);
        });
      }).then(function (a) {
        n && bf(n);return a;
      }).f(function (a) {
        n && bf(n);throw a;
      });return a.c(d, e);
    };U.prototype.linkWithRedirect = function (a) {
      var b = this;return tj(this, "linkViaRedirect", a, function () {
        return mj(b, a.providerId);
      }, !1);
    };U.prototype.reauthenticateWithRedirect = function (a) {
      return tj(this, "reauthViaRedirect", a, function () {
        return B();
      }, !0);
    };
    var tj = function tj(a, b, c, d, e) {
      if (!pf()) return D(new O("operation-not-supported-in-this-environment"));if (a.ka && !e) return D(a.ka);var f = null,
          g = a.hc();d = d().then(function () {
        sj(a);if (!e) return a.getToken().then(function () {});
      }).then(function () {
        a.za = g;return Zi(a);
      }).then(function (b) {
        a.Sa && (b = a.Sa, b = b.i.set(uj, a.C(), b.u));return b;
      }).then(function () {
        return a.m.Ob(b, c, g);
      }).f(function (b) {
        f = b;if (a.Sa) return vj(a.Sa);throw f;
      }).then(function () {
        if (f) throw f;
      });return a.c(d, e);
    },
        sj = function sj(a) {
      if (!a.m || !a.vc) {
        if (a.m && !a.vc) throw new O("internal-error");throw new O("auth-domain-config-required");
      }
    };U.prototype.Nd = function (a, b) {
      var c = this;this.F && (this.F.cancel(), this.F = null);var d = null,
          e = this.getToken().then(function (d) {
        return Xf(c.g, { requestUri: a, sessionId: b, idToken: d });
      }).then(function (a) {
        d = kj(c, a, "link");return nj(c, a);
      }).then(function () {
        return d;
      });return this.c(e);
    };
    U.prototype.Od = function (a, b) {
      var c = this;this.F && (this.F.cancel(), this.F = null);var d = null,
          e = B().then(function () {
        return Tf(Yf(c.g, { requestUri: a, sessionId: b }), c.uid);
      }).then(function (a) {
        d = kj(c, a, "reauthenticate");ij(c, a);c.ka = null;return c.reload();
      }).then(function () {
        return d;
      });return this.c(e, !0);
    };U.prototype.sendEmailVerification = function () {
      var a = this;return this.c(this.getToken().then(function (b) {
        return a.g.sendEmailVerification(b);
      }).then(function (b) {
        if (a.email != b) return a.reload();
      }).then(function () {}));
    };
    U.prototype.c = function (a, b) {
      var c = this,
          d = wj(this, a, b);this.ba.push(d);md(d, function () {
        Ka(c.ba, d);
      });return d;
    };var wj = function wj(a, b, c) {
      return a.ka && !c ? (b.cancel(), D(a.ka)) : b.f(function (b) {
        !b || "auth/user-disabled" != b.code && "auth/user-token-expired" != b.code || (a.ka || a.dispatchEvent(new Si("userInvalidated")), a.ka = b);throw b;
      });
    };U.prototype.toJSON = function () {
      return this.C();
    };
    U.prototype.C = function () {
      var a = { uid: this.uid, displayName: this.displayName, photoURL: this.photoURL, email: this.email, emailVerified: this.emailVerified, identifierNumber: this.identifierNumber, isAnonymous: this.isAnonymous, providerData: [], apiKey: this.j, appName: this.D, authDomain: this.v, stsTokenManager: this.ia.C(), redirectEventId: this.za || null };w(this.providerData, function (b) {
        a.providerData.push(Hf(b));
      });return a;
    };
    var xj = function xj(a) {
      if (!a.apiKey) return null;var b = { apiKey: a.apiKey, authDomain: a.authDomain, appName: a.appName },
          c = {};if (a.stsTokenManager && a.stsTokenManager.accessToken && a.stsTokenManager.expirationTime) c.idToken = a.stsTokenManager.accessToken, c.refreshToken = a.stsTokenManager.refreshToken || null, c.expiresIn = (a.stsTokenManager.expirationTime - la()) / 1E3;else return null;var d = new U(b, c, a);a.providerData && w(a.providerData, function (a) {
        a && ej(d, Gf(a));
      });a.redirectEventId && (d.za = a.redirectEventId);return d;
    },
        yj = function yj(a, b, c) {
      var d = new U(a, b);c && (d.Sa = c);return d.reload().then(function () {
        return d;
      });
    };var zj = function zj(a) {
      this.u = a;this.i = di();
    },
        uj = { name: "redirectUser", M: !1 },
        vj = function vj(a) {
      return a.i.remove(uj, a.u);
    },
        Aj = function Aj(a, b) {
      return a.i.get(uj, a.u).then(function (a) {
        a && b && (a.authDomain = b);return xj(a || {});
      });
    };var Bj = function Bj(a) {
      this.u = a;this.i = di();
    },
        Cj = { name: "authUser", M: !0 },
        Dj = function Dj(a, b) {
      return a.i.set(Cj, b.C(), a.u);
    },
        Ej = function Ej(a) {
      return a.i.remove(Cj, a.u);
    },
        Fj = function Fj(a, b) {
      return a.i.get(Cj, a.u).then(function (a) {
        a && b && (a.authDomain = b);return xj(a || {});
      });
    };var W = function W(a) {
      this.Fa = !1;N(this, "app", a);if (V(this).options && V(this).options.apiKey) a = firebase.SDK_VERSION ? mf(firebase.SDK_VERSION) : null, this.g = new S(V(this).options && V(this).options.apiKey, null, a);else throw new O("invalid-api-key");this.ba = [];this.Ca = [];this.ub = [];this.mf = firebase.INTERNAL.createSubscribe(_q(this.Ze, this));this.Ic = void 0;firebase.INTERNAL.createSubscribe(_q(this.af, this));Gj(this, null);this.ta = new Bj(V(this).options.apiKey + ":" + V(this).name);this.pb = new zj(V(this).options.apiKey + ":" + V(this).name);this.cc = this.c(Hj(this));this.qa = this.c(Ij(this));this.bd = !1;this.Vc = _q(this.Gf, this);this.qe = _q(this.gb, this);this.vb = _q(this.Xc, this);this.oe = _q(this.Ue, this);this.pe = _q(this.Ve, this);Jj(this);this.INTERNAL = {};this.INTERNAL["delete"] = _q(this["delete"], this);this.Ia = 0;
    };W.prototype.toJSON = function () {
      return { apiKey: V(this).options.apiKey, authDomain: V(this).options.authDomain, appName: V(this).name, currentUser: X(this) && X(this).C() };
    };
    var Kj = function Kj(a) {
      return a.Ie || D(new O("auth-domain-config-required"));
    },
        Jj = function Jj(a) {
      var b = V(a).options.authDomain,
          c = V(a).options.apiKey;b && pf() && (a.Ie = a.cc.then(function () {
        if (!a.Fa) return a.m = Ii(b, c, V(a).name), a.m.subscribe(a), X(a) && $i(X(a)), a.Sb && ($i(a.Sb), a.Sb = null), a.m;
      }));
    };h = W.prototype;h.Fd = function (a, b) {
      switch (a) {case "unknown":case "signInViaRedirect":
          return !0;case "signInViaPopup":
          return this.ca == b && !!this.aa;default:
          return !1;}
    };
    h.Va = function (a, b, c, d) {
      "signInViaPopup" == a && this.ca == d && (c && this.Pa ? this.Pa(c) : b && !c && this.aa && this.aa(b), this.F && (this.F.cancel(), this.F = null), delete this.aa, delete this.Pa);
    };h.zb = function (a, b) {
      return "signInViaRedirect" == a || "signInViaPopup" == a && this.ca == b && this.aa ? _q(this.Ke, this) : null;
    };
    h.Ke = function (a, b) {
      var c = this;a = { requestUri: a, sessionId: b };this.F && (this.F.cancel(), this.F = null);var d = null,
          e = null,
          f = Vf(c.g, a).then(function (a) {
        d = rg(a);e = ai(a);return a;
      });a = c.cc.then(function () {
        return f;
      }).then(function (a) {
        return Lj(c, a);
      }).then(function () {
        return Gf({ user: X(c), credential: d, additionalUserInfo: e, operationType: "signIn" });
      });return this.c(a);
    };h.hc = function () {
      return of();
    };
    var Mj = function Mj(a, b) {
      if (!pf()) return D(new O("operation-not-supported-in-this-environment"));var c = Nf(b.providerId),
          d = a.hc(),
          e = null;(!qf() || kf()) && V(a).options.authDomain && b.isOAuthProvider && (e = xh(V(a).options.authDomain, V(a).options.apiKey, V(a).name, "signInViaPopup", b, null, d, firebase.SDK_VERSION || null));var f = cf(e, c && c.Mb, c && c.Lb),
          c = Kj(a).then(function (a) {
        return a.Nb(f, "signInViaPopup", b, d, !!e);
      }).then(function () {
        return new A(function (b, c) {
          a.Va("signInViaPopup", null, new O("cancelled-popup-request"), a.ca);a.aa = b;a.Pa = c;a.ca = d;a.F = a.m.Vb(a, "signInViaPopup", f, d);
        });
      }).then(function (a) {
        f && bf(f);return a;
      }).f(function (a) {
        f && bf(f);throw a;
      });return a.c(c);
    };W.prototype.signInWithPopup = function (a) {
      return Mj(this, a).then(function (a) {
        return a ? Gf({ user: a.user, credential: a.credential, operationType: a.operationType }) : a;
      });
    };W.prototype.getRedirectResult = function () {
      return Nj(this).then(function (a) {
        return a ? Gf({ user: a.user, credential: a.credential, operationType: a.operationType }) : a;
      });
    };
    W.prototype.signInWithRedirect = function (a) {
      if (!pf()) return D(new O("operation-not-supported-in-this-environment"));var b = this,
          c = Kj(this).then(function () {
        return b.m.Ob("signInViaRedirect", a);
      });return this.c(c);
    };
    var Nj = function Nj(a) {
      if (!pf()) return D(new O("operation-not-supported-in-this-environment"));var b = Kj(a).then(function () {
        return a.m.getRedirectResult();
      });return a.c(b);
    },
        Lj = function Lj(a, b) {
      var c = {};c.apiKey = V(a).options.apiKey;c.authDomain = V(a).options.authDomain;c.appName = V(a).name;return a.cc.then(function () {
        return yj(c, b, a.pb);
      }).then(function (b) {
        if (X(a) && b.uid == X(a).uid) return X(a).copy(b), a.gb(b);Gj(a, b);$i(b);return a.gb(b);
      }).then(function () {
        a.Na();
      });
    },
        Gj = function Gj(a, b) {
      X(a) && (Yi(X(a), a.qe), dc(X(a), "tokenChanged", a.vb), dc(X(a), "userDeleted", a.oe), dc(X(a), "userInvalidated", a.pe), Xi(X(a)));b && (b.Ac.push(a.qe), Vb(b, "tokenChanged", a.vb), Vb(b, "userDeleted", a.oe), Vb(b, "userInvalidated", a.pe), 0 < a.Ia && Wi(b));N(a, "currentUser", b);
    };W.prototype.signOut = function () {
      var a = this,
          b = this.qa.then(function () {
        if (!X(a)) return B();Gj(a, null);return Ej(a.ta).then(function () {
          a.Na();
        });
      });return this.c(b);
    };
    var Oj = function Oj(a) {
      var b = Aj(a.pb, V(a).options.authDomain).then(function (b) {
        if (a.Sb = b) b.Sa = a.pb;return vj(a.pb);
      });return a.c(b);
    },
        Hj = function Hj(a) {
      var b = V(a).options.authDomain,
          c = Oj(a).then(function () {
        return Fj(a.ta, b);
      }).then(function (b) {
        return b ? (b.Sa = a.pb, a.Sb && (a.Sb.za || null) == (b.za || null) ? b : b.reload().then(function () {
          return Dj(a.ta, b).then(function () {
            return b;
          });
        }).f(function (c) {
          return "auth/network-request-failed" == c.code ? b : Ej(a.ta);
        })) : null;
      }).then(function (b) {
        Gj(a, b || null);
      });return a.c(c);
    },
        Ij = function Ij(a) {
      return a.cc.then(function () {
        return a.getRedirectResult();
      }).f(function () {}).then(function () {
        if (!a.Fa) return a.Vc();
      }).f(function () {}).then(function () {
        if (!a.Fa) {
          a.bd = !0;var b = a.ta;b.i.addListener(Cj, b.u, a.Vc);
        }
      });
    };h = W.prototype;h.Gf = function () {
      var a = this;return Fj(this.ta, V(this).options.authDomain).then(function (b) {
        if (!a.Fa) {
          var c;if (c = X(a) && b) {
            c = X(a).uid;var d = b.uid;c = void 0 === c || null === c || "" === c || void 0 === d || null === d || "" === d ? !1 : c == d;
          }if (c) return X(a).copy(b), X(a).getToken();if (X(a) || b) Gj(a, b), b && ($i(b), b.Sa = a.pb), a.m && a.m.subscribe(a), a.Na();
        }
      });
    };h.gb = function (a) {
      return Dj(this.ta, a);
    };h.Xc = function () {
      this.Na();this.gb(X(this));
    };h.Ue = function () {
      this.signOut();
    };
    h.Ve = function () {
      this.signOut();
    };var Pj = function Pj(a, b) {
      var c = null,
          d = null;return a.c(b.then(function (b) {
        c = rg(b);d = ai(b);return Lj(a, b);
      }).then(function () {
        return Gf({ user: X(a), credential: c, additionalUserInfo: d, operationType: "signIn" });
      }));
    };h = W.prototype;h.Ze = function (a) {
      var b = this;this.addAuthTokenListener(function () {
        a.next(X(b));
      });
    };h.af = function (a) {
      var b = this;Qj(this, function () {
        a.next(X(b));
      });
    };
    h.onAuthStateChanged = function (a, b, c) {
      var d = this;this.bd && firebase.Promise.resolve().then(function () {
        p(a) ? a(X(d)) : p(a.next) && a.next(X(d));
      });return this.mf(a, b, c);
    };h.getToken = function (a) {
      var b = this,
          c = this.qa.then(function () {
        return X(b) ? X(b).getToken(a).then(function (a) {
          return { accessToken: a };
        }) : null;
      });return this.c(c);
    };h.signInWithCustomToken = function (a) {
      var b = this;return this.qa.then(function () {
        return Pj(b, R(b.g, hh, { token: a }));
      }).then(function (a) {
        a = a.user;fj(a, "isAnonymous", !1);return b.gb(a);
      }).then(function () {
        return X(b);
      });
    };
    h.signInWithEmailAndPassword = function (a, b) {
      var c = this;return this.qa.then(function () {
        return Pj(c, R(c.g, ig, { email: a, password: b }));
      }).then(function (a) {
        return a.user;
      });
    };h.createUserWithEmailAndPassword = function (a, b) {
      var c = this;return this.qa.then(function () {
        return Pj(c, R(c.g, eh, { email: a, password: b }));
      }).then(function (a) {
        return a.user;
      });
    };h.signInWithCredential = function (a) {
      return Rj(this, a).then(function (a) {
        return a.user;
      });
    };var Rj = function Rj(a, b) {
      return a.qa.then(function () {
        return Pj(a, b.Ab(a.g));
      });
    };
    W.prototype.signInAnonymously = function () {
      var a = X(this),
          b = this;return a && a.isAnonymous ? B(a) : this.qa.then(function () {
        return Pj(b, b.g.signInAnonymously());
      }).then(function (a) {
        a = a.user;fj(a, "isAnonymous", !0);return b.gb(a);
      }).then(function () {
        return X(b);
      });
    };var V = function V(a) {
      return a.app;
    },
        X = function X(a) {
      return a.currentUser;
    };W.prototype.getUid = function () {
      return X(this) && X(this).uid || null;
    };var Sj = function Sj(a) {
      return X(a) && X(a)._lat || null;
    };h = W.prototype;
    h.Na = function () {
      if (this.bd) {
        for (var a = 0; a < this.Ca.length; a++) {
          if (this.Ca[a]) this.Ca[a](Sj(this));
        }if (this.Ic !== this.getUid() && this.ub.length) for (this.Ic = this.getUid(), a = 0; a < this.ub.length; a++) {
          if (this.ub[a]) this.ub[a](Sj(this));
        }
      }
    };h.Ae = function (a) {
      this.addAuthTokenListener(a);this.Ia++;0 < this.Ia && X(this) && Wi(X(this));
    };h.uf = function (a) {
      var b = this;w(this.Ca, function (c) {
        c == a && b.Ia--;
      });0 > this.Ia && (this.Ia = 0);0 == this.Ia && X(this) && Xi(X(this));this.removeAuthTokenListener(a);
    };
    h.addAuthTokenListener = function (a) {
      var b = this;this.Ca.push(a);this.c(this.qa.then(function () {
        b.Fa || Ia(b.Ca, a) && a(Sj(b));
      }));
    };h.removeAuthTokenListener = function (a) {
      La(this.Ca, function (b) {
        return b == a;
      });
    };var Qj = function Qj(a, b) {
      a.ub.push(b);a.c(a.qa.then(function () {
        !a.Fa && Ia(a.ub, b) && a.Ic !== a.getUid() && (a.Ic = a.getUid(), b(Sj(a)));
      }));
    };h = W.prototype;
    h["delete"] = function () {
      this.Fa = !0;for (var a = 0; a < this.ba.length; a++) {
        this.ba[a].cancel("app-deleted");
      }this.ba = [];this.ta && (a = this.ta, a.i.removeListener(Cj, a.u, this.Vc));this.m && this.m.unsubscribe(this);return firebase.Promise.resolve();
    };h.c = function (a) {
      var b = this;this.ba.push(a);md(a, function () {
        Ka(b.ba, a);
      });return a;
    };h.fetchProvidersForEmail = function (a) {
      return this.c(Jg(this.g, a));
    };h.verifyPasswordResetCode = function (a) {
      return this.checkActionCode(a).then(function (a) {
        return a.data.email;
      });
    };
    h.confirmPasswordReset = function (a, b) {
      return this.c(this.g.confirmPasswordReset(a, b).then(function () {}));
    };h.checkActionCode = function (a) {
      return this.c(this.g.checkActionCode(a).then(function (a) {
        return new Sh(a);
      }));
    };h.applyActionCode = function (a) {
      return this.c(this.g.applyActionCode(a).then(function () {}));
    };h.sendPasswordResetEmail = function (a) {
      return this.c(this.g.sendPasswordResetEmail(a).then(function () {}));
    };var Tj = "First Second Third Fourth Fifth Sixth Seventh Eighth Ninth".split(" "),
        Y = function Y(a, b) {
      return { name: a || "", ja: "a valid string", optional: !!b, la: m };
    },
        Z = function Z(a) {
      return { name: a || "", ja: "a valid object", optional: !1, la: ha };
    },
        Uj = function Uj(a, b) {
      return { name: a || "", ja: "a function", optional: !!b, la: p };
    },
        Vj = function Vj() {
      return { name: "", ja: "null", optional: !1, la: da };
    },
        Wj = function Wj() {
      return { name: "credential", ja: "a valid credential", optional: !1, la: function la(a) {
          return a ? !!a.Ab : !1;
        } };
    },
        Xj = function Xj() {
      return { name: "authProvider",
        ja: "a valid Auth provider", optional: !1, la: function la(a) {
          return !!(a && a.providerId && a.hasOwnProperty && a.hasOwnProperty("isOAuthProvider"));
        } };
    },
        Yj = function Yj(a, b, c, d) {
      return { name: c || "", ja: a.ja + " or " + b.ja, optional: !!d, la: function la(c) {
          return a.la(c) || b.la(c);
        } };
    };var ak = function ak(a, b) {
      for (var c in b) {
        var d = b[c].name;a[d] = Zj(d, a[c], b[c].a);
      }
    },
        bk = function bk(a, b, c, d) {
      a[b] = Zj(b, c, d);
    },
        Zj = function Zj(a, b, c) {
      if (!c) return b;var d = ck(a);a = function a() {
        var a = Array.prototype.slice.call(arguments),
            e;a: {
          e = Array.prototype.slice.call(a);var k;k = 0;for (var n = !1, C = 0; C < c.length; C++) {
            if (c[C].optional) n = !0;else {
              if (n) throw new O("internal-error", "Argument validator encountered a required argument after an optional argument.");k++;
            }
          }n = c.length;if (e.length < k || n < e.length) e = "Expected " + (k == n ? 1 == k ? "1 argument" : k + " arguments" : k + "-" + n + " arguments") + " but got " + e.length + ".";else {
            for (k = 0; k < e.length; k++) {
              if (n = c[k].optional && void 0 === e[k], !c[k].la(e[k]) && !n) {
                e = c[k];if (0 > k || k >= Tj.length) throw new O("internal-error", "Argument validator received an unsupported number of arguments.");e = Tj[k] + " argument " + (e.name ? '"' + e.name + '" ' : "") + "must be " + e.ja + ".";break a;
              }
            }e = null;
          }
        }if (e) throw new O("argument-error", d + " failed: " + e);return b.apply(this, a);
      };for (var e in b) {
        a[e] = b[e];
      }for (e in b.prototype) {
        a.prototype[e] = b.prototype[e];
      }return a;
    },
        ck = function ck(a) {
      a = a.split(".");return a[a.length - 1];
    };ak(W.prototype, { applyActionCode: { name: "applyActionCode", a: [Y("code")] }, checkActionCode: { name: "checkActionCode", a: [Y("code")] }, confirmPasswordReset: { name: "confirmPasswordReset", a: [Y("code"), Y("newPassword")] }, createUserWithEmailAndPassword: { name: "createUserWithEmailAndPassword", a: [Y("email"), Y("password")] }, fetchProvidersForEmail: { name: "fetchProvidersForEmail", a: [Y("email")] }, getRedirectResult: { name: "getRedirectResult", a: [] }, onAuthStateChanged: { name: "onAuthStateChanged", a: [Yj(Z(), Uj(), "nextOrObserver"), Uj("opt_error", !0), Uj("opt_completed", !0)] }, sendPasswordResetEmail: { name: "sendPasswordResetEmail", a: [Y("email")] }, signInAnonymously: { name: "signInAnonymously", a: [] }, signInWithCredential: { name: "signInWithCredential", a: [Wj()] }, signInWithCustomToken: { name: "signInWithCustomToken", a: [Y("token")] }, signInWithEmailAndPassword: { name: "signInWithEmailAndPassword", a: [Y("email"), Y("password")] }, signInWithPopup: { name: "signInWithPopup", a: [Xj()] }, signInWithRedirect: { name: "signInWithRedirect", a: [Xj()] }, signOut: { name: "signOut",
        a: [] }, toJSON: { name: "toJSON", a: [Y(null, !0)] }, verifyPasswordResetCode: { name: "verifyPasswordResetCode", a: [Y("code")] } });
    ak(U.prototype, { "delete": { name: "delete", a: [] }, getToken: { name: "getToken", a: [{ name: "opt_forceRefresh", ja: "a boolean", optional: !0, la: function la(a) {
            return "boolean" == typeof a;
          } }] }, link: { name: "link", a: [Wj()] }, linkWithCredential: { name: "linkWithCredential", a: [Wj()] }, linkWithPopup: { name: "linkWithPopup", a: [Xj()] }, linkWithRedirect: { name: "linkWithRedirect", a: [Xj()] }, reauthenticate: { name: "reauthenticate", a: [Wj()] }, reauthenticateWithCredential: { name: "reauthenticateWithCredential", a: [Wj()] }, reauthenticateWithPopup: { name: "reauthenticateWithPopup",
        a: [Xj()] }, reauthenticateWithRedirect: { name: "reauthenticateWithRedirect", a: [Xj()] }, reload: { name: "reload", a: [] }, sendEmailVerification: { name: "sendEmailVerification", a: [] }, toJSON: { name: "toJSON", a: [Y(null, !0)] }, unlink: { name: "unlink", a: [Y("provider")] }, updateEmail: { name: "updateEmail", a: [Y("email")] }, updatePassword: { name: "updatePassword", a: [Y("password")] }, updateProfile: { name: "updateProfile", a: [Z("profile")] } });ak(A.prototype, { f: { name: "catch" }, then: { name: "then" } });
    bk(kg, "credential", function (a, b) {
      return new hg(a, b);
    }, [Y("email"), Y("password")]);ak($f.prototype, { addScope: { name: "addScope", a: [Y("scope")] }, setCustomParameters: { name: "setCustomParameters", a: [Z("customOAuthParameters")] } });bk($f, "credential", ag, [Yj(Y(), Z(), "token")]);ak(bg.prototype, { addScope: { name: "addScope", a: [Y("scope")] }, setCustomParameters: { name: "setCustomParameters", a: [Z("customOAuthParameters")] } });bk(bg, "credential", cg, [Yj(Y(), Z(), "token")]);
    ak(dg.prototype, { addScope: { name: "addScope", a: [Y("scope")] }, setCustomParameters: { name: "setCustomParameters", a: [Z("customOAuthParameters")] } });bk(dg, "credential", eg, [Yj(Y(), Yj(Z(), Vj()), "idToken"), Yj(Y(), Vj(), "accessToken", !0)]);ak(fg.prototype, { setCustomParameters: { name: "setCustomParameters", a: [Z("customOAuthParameters")] } });bk(fg, "credential", gg, [Yj(Y(), Z(), "token"), Y("secret", !0)]);ak(O.prototype, { toJSON: { name: "toJSON", a: [Y(null, !0)] } });ak(tg.prototype, { toJSON: { name: "toJSON", a: [Y(null, !0)] } });
    ak(Rf.prototype, { toJSON: { name: "toJSON", a: [Y(null, !0)] } });
    (function () {
      if ("undefined" !== typeof firebase && firebase.INTERNAL && firebase.INTERNAL.registerService) {
        var a = { Auth: W, Error: O };bk(a, "EmailAuthProvider", kg, []);bk(a, "FacebookAuthProvider", $f, []);bk(a, "GithubAuthProvider", bg, []);bk(a, "GoogleAuthProvider", dg, []);bk(a, "TwitterAuthProvider", fg, []);firebase.INTERNAL.registerService("auth", function (a, c) {
          a = new W(a);c({ INTERNAL: { getUid: _q(a.getUid, a), getToken: _q(a.getToken, a), addAuthTokenListener: _q(a.Ae, a), removeAuthTokenListener: _q(a.uf, a) } });return a;
        }, a, function (a, c) {
          if ("create" === a) try {
            c.auth();
          } catch (d) {}
        });firebase.INTERNAL.extendNamespace({ User: U });
      } else throw Error("Cannot find the firebase namespace; be sure to include firebase-app.js before this library.");
    })();
  }).call(this);
}).call(typeof global !== undefined ? global : typeof self !== undefined ? self : typeof window !== undefined ? window : {});
module.exports = firebase.auth;
}, 442, null, "firebase/auth.js");
__d(/* firebase/database.js */function(global, require, module, exports) {/*! @license Firebase v3.9.0
Build: rev-cc77c9e
Terms: https://firebase.google.com/terms/

---

typedarray.js
Copyright (c) 2010, Linden Research, Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

var firebase = require(441    ); // 441 = ./app
(function () {
  (function () {
    var g,
        aa = this;function n(a) {
      return void 0 !== a;
    }function ba() {}function ca(a) {
      a.Vb = function () {
        return a.Ye ? a.Ye : a.Ye = new a();
      };
    }
    function da(a) {
      var b = typeof a;if ("object" == b) {
        if (a) {
          if (a instanceof Array) return "array";if (a instanceof Object) return b;var c = Object.prototype.toString.call(a);if ("[object Window]" == c) return "object";if ("[object Array]" == c || "number" == typeof a.length && "undefined" != typeof a.splice && "undefined" != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable("splice")) return "array";if ("[object Function]" == c || "undefined" != typeof a.call && "undefined" != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable("call")) return "function";
        } else return "null";
      } else if ("function" == b && "undefined" == typeof a.call) return "object";return b;
    }function ea(a) {
      return "array" == da(a);
    }function fa(a) {
      var b = da(a);return "array" == b || "object" == b && "number" == typeof a.length;
    }function p(a) {
      return "string" == typeof a;
    }function ga(a) {
      return "number" == typeof a;
    }function ha(a) {
      return "function" == da(a);
    }function ia(a) {
      var b = typeof a;return "object" == b && null != a || "function" == b;
    }function ja(a, b, c) {
      return a.call.apply(a.bind, arguments);
    }
    function ka(a, b, c) {
      if (!a) throw Error();if (2 < arguments.length) {
        var d = Array.prototype.slice.call(arguments, 2);return function () {
          var c = Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(c, d);return a.apply(b, c);
        };
      }return function () {
        return a.apply(b, arguments);
      };
    }function q(a, b, c) {
      q = Function.prototype.bind && -1 != Function.prototype.bind.toString().indexOf("native code") ? ja : ka;return q.apply(null, arguments);
    }
    function la(a, b) {
      function c() {}c.prototype = b.prototype;a.wg = b.prototype;a.prototype = new c();a.prototype.constructor = a;a.sg = function (a, c, f) {
        for (var h = Array(arguments.length - 2), k = 2; k < arguments.length; k++) {
          h[k - 2] = arguments[k];
        }return b.prototype[c].apply(a, h);
      };
    };function ma(a) {
      a = String(a);if (/^\s*$/.test(a) ? 0 : /^[\],:{}\s\u2028\u2029]*$/.test(a.replace(/\\["\\\/bfnrtu]/g, "@").replace(/"[^"\\\n\r\u2028\u2029\x00-\x08\x0a-\x1f]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, "]").replace(/(?:^|:|,)(?:[\s\u2028\u2029]*\[)+/g, ""))) try {
        return eval("(" + a + ")");
      } catch (b) {}throw Error("Invalid JSON string: " + a);
    }function na() {
      this.Fd = void 0;
    }
    function oa(a, b, c) {
      switch (typeof b) {case "string":
          pa(b, c);break;case "number":
          c.push(isFinite(b) && !isNaN(b) ? b : "null");break;case "boolean":
          c.push(b);break;case "undefined":
          c.push("null");break;case "object":
          if (null == b) {
            c.push("null");break;
          }if (ea(b)) {
            var d = b.length;c.push("[");for (var e = "", f = 0; f < d; f++) {
              c.push(e), e = b[f], oa(a, a.Fd ? a.Fd.call(b, String(f), e) : e, c), e = ",";
            }c.push("]");break;
          }c.push("{");d = "";for (f in b) {
            Object.prototype.hasOwnProperty.call(b, f) && (e = b[f], "function" != typeof e && (c.push(d), pa(f, c), c.push(":"), oa(a, a.Fd ? a.Fd.call(b, f, e) : e, c), d = ","));
          }c.push("}");break;case "function":
          break;default:
          throw Error("Unknown type: " + typeof b);}
    }var qa = { '"': '\\"', "\\": "\\\\", "/": "\\/", "\b": "\\b", "\f": "\\f", "\n": "\\n", "\r": "\\r", "\t": "\\t", "\x0B": "\\u000b" },
        ra = /\uffff/.test("\uFFFF") ? /[\\\"\x00-\x1f\x7f-\uffff]/g : /[\\\"\x00-\x1f\x7f-\xff]/g;
    function pa(a, b) {
      b.push('"', a.replace(ra, function (a) {
        if (a in qa) return qa[a];var b = a.charCodeAt(0),
            e = "\\u";16 > b ? e += "000" : 256 > b ? e += "00" : 4096 > b && (e += "0");return qa[a] = e + b.toString(16);
      }), '"');
    };function sa() {
      this.Wa = -1;
    };function ta() {
      this.Wa = -1;this.Wa = 64;this.M = [];this.Wd = [];this.Af = [];this.zd = [];this.zd[0] = 128;for (var a = 1; a < this.Wa; ++a) {
        this.zd[a] = 0;
      }this.Pd = this.$b = 0;this.reset();
    }la(ta, sa);ta.prototype.reset = function () {
      this.M[0] = 1732584193;this.M[1] = 4023233417;this.M[2] = 2562383102;this.M[3] = 271733878;this.M[4] = 3285377520;this.Pd = this.$b = 0;
    };
    function ua(a, b, c) {
      c || (c = 0);var d = a.Af;if (p(b)) for (var e = 0; 16 > e; e++) {
        d[e] = b.charCodeAt(c) << 24 | b.charCodeAt(c + 1) << 16 | b.charCodeAt(c + 2) << 8 | b.charCodeAt(c + 3), c += 4;
      } else for (e = 0; 16 > e; e++) {
        d[e] = b[c] << 24 | b[c + 1] << 16 | b[c + 2] << 8 | b[c + 3], c += 4;
      }for (e = 16; 80 > e; e++) {
        var f = d[e - 3] ^ d[e - 8] ^ d[e - 14] ^ d[e - 16];d[e] = (f << 1 | f >>> 31) & 4294967295;
      }b = a.M[0];c = a.M[1];for (var h = a.M[2], k = a.M[3], m = a.M[4], l, e = 0; 80 > e; e++) {
        40 > e ? 20 > e ? (f = k ^ c & (h ^ k), l = 1518500249) : (f = c ^ h ^ k, l = 1859775393) : 60 > e ? (f = c & h | k & (c | h), l = 2400959708) : (f = c ^ h ^ k, l = 3395469782), f = (b << 5 | b >>> 27) + f + m + l + d[e] & 4294967295, m = k, k = h, h = (c << 30 | c >>> 2) & 4294967295, c = b, b = f;
      }a.M[0] = a.M[0] + b & 4294967295;a.M[1] = a.M[1] + c & 4294967295;a.M[2] = a.M[2] + h & 4294967295;a.M[3] = a.M[3] + k & 4294967295;a.M[4] = a.M[4] + m & 4294967295;
    }
    ta.prototype.update = function (a, b) {
      if (null != a) {
        n(b) || (b = a.length);for (var c = b - this.Wa, d = 0, e = this.Wd, f = this.$b; d < b;) {
          if (0 == f) for (; d <= c;) {
            ua(this, a, d), d += this.Wa;
          }if (p(a)) for (; d < b;) {
            if (e[f] = a.charCodeAt(d), ++f, ++d, f == this.Wa) {
              ua(this, e);f = 0;break;
            }
          } else for (; d < b;) {
            if (e[f] = a[d], ++f, ++d, f == this.Wa) {
              ua(this, e);f = 0;break;
            }
          }
        }this.$b = f;this.Pd += b;
      }
    };var r;a: {
      var va = aa.navigator;if (va) {
        var wa = va.userAgent;if (wa) {
          r = wa;break a;
        }
      }r = "";
    };var t = Array.prototype,
        xa = t.indexOf ? function (a, b, c) {
      return t.indexOf.call(a, b, c);
    } : function (a, b, c) {
      c = null == c ? 0 : 0 > c ? Math.max(0, a.length + c) : c;if (p(a)) return p(b) && 1 == b.length ? a.indexOf(b, c) : -1;for (; c < a.length; c++) {
        if (c in a && a[c] === b) return c;
      }return -1;
    },
        ya = t.forEach ? function (a, b, c) {
      t.forEach.call(a, b, c);
    } : function (a, b, c) {
      for (var d = a.length, e = p(a) ? a.split("") : a, f = 0; f < d; f++) {
        f in e && b.call(c, e[f], f, a);
      }
    },
        za = t.filter ? function (a, b, c) {
      return t.filter.call(a, b, c);
    } : function (a, b, c) {
      for (var d = a.length, e = [], f = 0, h = p(a) ? a.split("") : a, k = 0; k < d; k++) {
        if (k in h) {
          var m = h[k];b.call(c, m, k, a) && (e[f++] = m);
        }
      }return e;
    },
        Aa = t.map ? function (a, b, c) {
      return t.map.call(a, b, c);
    } : function (a, b, c) {
      for (var d = a.length, e = Array(d), f = p(a) ? a.split("") : a, h = 0; h < d; h++) {
        h in f && (e[h] = b.call(c, f[h], h, a));
      }return e;
    },
        Ba = t.reduce ? function (a, b, c, d) {
      for (var e = [], f = 1, h = arguments.length; f < h; f++) {
        e.push(arguments[f]);
      }d && (e[0] = q(b, d));return t.reduce.apply(a, e);
    } : function (a, b, c, d) {
      var e = c;ya(a, function (c, h) {
        e = b.call(d, e, c, h, a);
      });return e;
    },
        Ca = t.every ? function (a, b, c) {
      return t.every.call(a, b, c);
    } : function (a, b, c) {
      for (var d = a.length, e = p(a) ? a.split("") : a, f = 0; f < d; f++) {
        if (f in e && !b.call(c, e[f], f, a)) return !1;
      }return !0;
    };function Da(a, b) {
      var c = Ea(a, b, void 0);return 0 > c ? null : p(a) ? a.charAt(c) : a[c];
    }function Ea(a, b, c) {
      for (var d = a.length, e = p(a) ? a.split("") : a, f = 0; f < d; f++) {
        if (f in e && b.call(c, e[f], f, a)) return f;
      }return -1;
    }function Fa(a, b) {
      var c = xa(a, b);0 <= c && t.splice.call(a, c, 1);
    }function Ga(a, b, c) {
      return 2 >= arguments.length ? t.slice.call(a, b) : t.slice.call(a, b, c);
    }
    function Ha(a, b) {
      a.sort(b || Ia);
    }function Ia(a, b) {
      return a > b ? 1 : a < b ? -1 : 0;
    };function v(a, b) {
      for (var c in a) {
        b.call(void 0, a[c], c, a);
      }
    }function Ja(a, b) {
      var c = {},
          d;for (d in a) {
        c[d] = b.call(void 0, a[d], d, a);
      }return c;
    }function Ka(a, b) {
      for (var c in a) {
        if (!b.call(void 0, a[c], c, a)) return !1;
      }return !0;
    }function La(a) {
      var b = 0,
          c;for (c in a) {
        b++;
      }return b;
    }function Ma(a) {
      for (var b in a) {
        return b;
      }
    }function Na(a) {
      var b = [],
          c = 0,
          d;for (d in a) {
        b[c++] = a[d];
      }return b;
    }function Oa(a) {
      var b = [],
          c = 0,
          d;for (d in a) {
        b[c++] = d;
      }return b;
    }function Pa(a, b) {
      for (var c in a) {
        if (a[c] == b) return !0;
      }return !1;
    }
    function Qa(a, b, c) {
      for (var d in a) {
        if (b.call(c, a[d], d, a)) return d;
      }
    }function Ra(a, b) {
      var c = Qa(a, b, void 0);return c && a[c];
    }function Sa(a) {
      for (var b in a) {
        return !1;
      }return !0;
    }function Ta(a) {
      var b = {},
          c;for (c in a) {
        b[c] = a[c];
      }return b;
    };var Ua = -1 != r.indexOf("Opera") || -1 != r.indexOf("OPR"),
        Va = -1 != r.indexOf("Trident") || -1 != r.indexOf("MSIE"),
        Wa = -1 != r.indexOf("Gecko") && -1 == r.toLowerCase().indexOf("webkit") && !(-1 != r.indexOf("Trident") || -1 != r.indexOf("MSIE")),
        Xa = -1 != r.toLowerCase().indexOf("webkit");
    (function () {
      var a = "",
          b;if (Ua && aa.opera) return a = aa.opera.version, ha(a) ? a() : a;Wa ? b = /rv\:([^\);]+)(\)|;)/ : Va ? b = /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/ : Xa && (b = /WebKit\/(\S+)/);b && (a = (a = b.exec(r)) ? a[1] : "");return Va && (b = (b = aa.document) ? b.documentMode : void 0, b > parseFloat(a)) ? String(b) : a;
    })();var Ya = null,
        Za = null,
        $a = null;function ab(a, b) {
      if (!fa(a)) throw Error("encodeByteArray takes an array as a parameter");bb();for (var c = b ? Za : Ya, d = [], e = 0; e < a.length; e += 3) {
        var f = a[e],
            h = e + 1 < a.length,
            k = h ? a[e + 1] : 0,
            m = e + 2 < a.length,
            l = m ? a[e + 2] : 0,
            u = f >> 2,
            f = (f & 3) << 4 | k >> 4,
            k = (k & 15) << 2 | l >> 6,
            l = l & 63;m || (l = 64, h || (k = 64));d.push(c[u], c[f], c[k], c[l]);
      }return d.join("");
    }
    function bb() {
      if (!Ya) {
        Ya = {};Za = {};$a = {};for (var a = 0; 65 > a; a++) {
          Ya[a] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(a), Za[a] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_.".charAt(a), $a[Za[a]] = a, 62 <= a && ($a["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(a)] = a);
        }
      }
    };function cb(a, b) {
      if (!a) throw db(b);
    }function db(a) {
      return Error("Firebase Database (" + firebase.SDK_VERSION + ") INTERNAL ASSERT FAILED: " + a);
    };function eb(a, b) {
      return Object.prototype.hasOwnProperty.call(a, b);
    }function w(a, b) {
      if (Object.prototype.hasOwnProperty.call(a, b)) return a[b];
    }function fb(a, b) {
      for (var c in a) {
        Object.prototype.hasOwnProperty.call(a, c) && b(c, a[c]);
      }
    };function gb(a) {
      var b = [];fb(a, function (a, d) {
        ea(d) ? ya(d, function (d) {
          b.push(encodeURIComponent(a) + "=" + encodeURIComponent(d));
        }) : b.push(encodeURIComponent(a) + "=" + encodeURIComponent(d));
      });return b.length ? "&" + b.join("&") : "";
    };var hb = firebase.Promise;function ib() {
      var a = this;this.reject = this.resolve = null;this.ra = new hb(function (b, c) {
        a.resolve = b;a.reject = c;
      });
    }function jb(a, b) {
      return function (c, d) {
        c ? a.reject(c) : a.resolve(d);ha(b) && (kb(a.ra), 1 === b.length ? b(c) : b(c, d));
      };
    }function kb(a) {
      a.then(void 0, ba);
    };function lb(a) {
      return "undefined" !== typeof JSON && n(JSON.parse) ? JSON.parse(a) : ma(a);
    }function x(a) {
      if ("undefined" !== typeof JSON && n(JSON.stringify)) a = JSON.stringify(a);else {
        var b = [];oa(new na(), a, b);a = b.join("");
      }return a;
    };function mb(a) {
      for (var b = [], c = 0, d = 0; d < a.length; d++) {
        var e = a.charCodeAt(d);55296 <= e && 56319 >= e && (e -= 55296, d++, cb(d < a.length, "Surrogate pair missing trail surrogate."), e = 65536 + (e << 10) + (a.charCodeAt(d) - 56320));128 > e ? b[c++] = e : (2048 > e ? b[c++] = e >> 6 | 192 : (65536 > e ? b[c++] = e >> 12 | 224 : (b[c++] = e >> 18 | 240, b[c++] = e >> 12 & 63 | 128), b[c++] = e >> 6 & 63 | 128), b[c++] = e & 63 | 128);
      }return b;
    }function nb(a) {
      for (var b = 0, c = 0; c < a.length; c++) {
        var d = a.charCodeAt(c);128 > d ? b++ : 2048 > d ? b += 2 : 55296 <= d && 56319 >= d ? (b += 4, c++) : b += 3;
      }return b;
    };function y(a, b, c, d) {
      var e;d < b ? e = "at least " + b : d > c && (e = 0 === c ? "none" : "no more than " + c);if (e) throw Error(a + " failed: Was called with " + d + (1 === d ? " argument." : " arguments.") + " Expects " + e + ".");
    }function A(a, b, c) {
      var d = "";switch (b) {case 1:
          d = c ? "first" : "First";break;case 2:
          d = c ? "second" : "Second";break;case 3:
          d = c ? "third" : "Third";break;case 4:
          d = c ? "fourth" : "Fourth";break;default:
          throw Error("errorPrefix called with argumentNumber > 4.  Need to update it?");}return a = a + " failed: " + (d + " argument ");
    }
    function B(a, b, c, d) {
      if ((!d || n(c)) && !ha(c)) throw Error(A(a, b, d) + "must be a valid function.");
    }function ob(a, b, c) {
      if (n(c) && (!ia(c) || null === c)) throw Error(A(a, b, !0) + "must be a valid context object.");
    };function pb() {
      return "undefined" !== typeof window && !!(window.cordova || window.phonegap || window.PhoneGap) && /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test("undefined" !== typeof navigator && "string" === typeof navigator.userAgent ? navigator.userAgent : "");
    };function C(a, b) {
      this.name = a;this.R = b;
    }function qb(a, b) {
      return new C(a, b);
    };function rb(a, b) {
      return sb(a.name, b.name);
    }function tb(a, b) {
      return sb(a, b);
    };function ub(a) {
      this.uc = a;this.Cd = "firebase:";
    }g = ub.prototype;g.set = function (a, b) {
      null == b ? this.uc.removeItem(this.Cd + a) : this.uc.setItem(this.Cd + a, x(b));
    };g.get = function (a) {
      a = this.uc.getItem(this.Cd + a);return null == a ? null : lb(a);
    };g.remove = function (a) {
      this.uc.removeItem(this.Cd + a);
    };g.Ze = !1;g.toString = function () {
      return this.uc.toString();
    };function vb() {
      this.pc = {};
    }vb.prototype.set = function (a, b) {
      null == b ? delete this.pc[a] : this.pc[a] = b;
    };vb.prototype.get = function (a) {
      return eb(this.pc, a) ? this.pc[a] : null;
    };vb.prototype.remove = function (a) {
      delete this.pc[a];
    };vb.prototype.Ze = !0;function wb(a) {
      try {
        if ("undefined" !== typeof window && "undefined" !== typeof window[a]) {
          var b = window[a];b.setItem("firebase:sentinel", "cache");b.removeItem("firebase:sentinel");return new ub(b);
        }
      } catch (c) {}return new vb();
    }var xb = wb("localStorage"),
        yb = wb("sessionStorage");function zb(a, b, c, d, e) {
      this.host = a.toLowerCase();this.domain = this.host.substr(this.host.indexOf(".") + 1);this.Sc = b;this.pe = c;this.qg = d;this.gf = e || "";this.$a = xb.get("host:" + a) || this.host;
    }function Ab(a, b) {
      b !== a.$a && (a.$a = b, "s-" === a.$a.substr(0, 2) && xb.set("host:" + a.host, a.$a));
    }
    function Bb(a, b, c) {
      D("string" === typeof b, "typeof type must == string");D("object" === typeof c, "typeof params must == object");if (b === Cb) b = (a.Sc ? "wss://" : "ws://") + a.$a + "/.ws?";else if (b === Db) b = (a.Sc ? "https://" : "http://") + a.$a + "/.lp?";else throw Error("Unknown connection type: " + b);a.host !== a.$a && (c.ns = a.pe);var d = [];v(c, function (a, b) {
        d.push(b + "=" + a);
      });return b + d.join("&");
    }zb.prototype.toString = function () {
      var a = (this.Sc ? "https://" : "http://") + this.host;this.gf && (a += "<" + this.gf + ">");return a;
    };function Eb(a, b) {
      return a && "object" === typeof a ? (D(".sv" in a, "Unexpected leaf node or priority contents"), b[a[".sv"]]) : a;
    }function Fb(a, b) {
      var c = new Gb();Hb(a, new E(""), function (a, e) {
        Ib(c, a, Jb(e, b));
      });return c;
    }function Jb(a, b) {
      var c = a.C().H(),
          c = Eb(c, b),
          d;if (a.J()) {
        var e = Eb(a.Ca(), b);return e !== a.Ca() || c !== a.C().H() ? new Kb(e, G(c)) : a;
      }d = a;c !== a.C().H() && (d = d.fa(new Kb(c)));a.O(H, function (a, c) {
        var e = Jb(c, b);e !== c && (d = d.T(a, e));
      });return d;
    };var Lb = function () {
      var a = 1;return function () {
        return a++;
      };
    }(),
        D = cb,
        Mb = db;
    function Nb(a) {
      try {
        var b;bb();for (var c = $a, d = [], e = 0; e < a.length;) {
          var f = c[a.charAt(e++)],
              h = e < a.length ? c[a.charAt(e)] : 0;++e;var k = e < a.length ? c[a.charAt(e)] : 64;++e;var m = e < a.length ? c[a.charAt(e)] : 64;++e;if (null == f || null == h || null == k || null == m) throw Error();d.push(f << 2 | h >> 4);64 != k && (d.push(h << 4 & 240 | k >> 2), 64 != m && d.push(k << 6 & 192 | m));
        }if (8192 > d.length) b = String.fromCharCode.apply(null, d);else {
          a = "";for (c = 0; c < d.length; c += 8192) {
            a += String.fromCharCode.apply(null, Ga(d, c, c + 8192));
          }b = a;
        }return b;
      } catch (l) {
        I("base64Decode failed: ", l);
      }return null;
    }function Ob(a) {
      var b = mb(a);a = new ta();a.update(b);var b = [],
          c = 8 * a.Pd;56 > a.$b ? a.update(a.zd, 56 - a.$b) : a.update(a.zd, a.Wa - (a.$b - 56));for (var d = a.Wa - 1; 56 <= d; d--) {
        a.Wd[d] = c & 255, c /= 256;
      }ua(a, a.Wd);for (d = c = 0; 5 > d; d++) {
        for (var e = 24; 0 <= e; e -= 8) {
          b[c] = a.M[d] >> e & 255, ++c;
        }
      }return ab(b);
    }function Pb(a) {
      for (var b = "", c = 0; c < arguments.length; c++) {
        b = fa(arguments[c]) ? b + Pb.apply(null, arguments[c]) : "object" === typeof arguments[c] ? b + x(arguments[c]) : b + arguments[c], b += " ";
      }return b;
    }var Qb = null,
        Rb = !0;
    function Sb(a, b) {
      cb(!b || !0 === a || !1 === a, "Can't turn on custom loggers persistently.");!0 === a ? ("undefined" !== typeof console && ("function" === typeof console.log ? Qb = q(console.log, console) : "object" === typeof console.log && (Qb = function Qb(a) {
        console.log(a);
      })), b && yb.set("logging_enabled", !0)) : ha(a) ? Qb = a : (Qb = null, yb.remove("logging_enabled"));
    }function I(a) {
      !0 === Rb && (Rb = !1, null === Qb && !0 === yb.get("logging_enabled") && Sb(!0));if (Qb) {
        var b = Pb.apply(null, arguments);Qb(b);
      }
    }
    function Tb(a) {
      return function () {
        I(a, arguments);
      };
    }function Ub(a) {
      if ("undefined" !== typeof console) {
        var b = "FIREBASE INTERNAL ERROR: " + Pb.apply(null, arguments);"undefined" !== typeof console.error ? console.error(b) : console.log(b);
      }
    }function Vb(a) {
      var b = Pb.apply(null, arguments);throw Error("FIREBASE FATAL ERROR: " + b);
    }function J(a) {
      if ("undefined" !== typeof console) {
        var b = "FIREBASE WARNING: " + Pb.apply(null, arguments);"undefined" !== typeof console.warn ? console.warn(b) : console.log(b);
      }
    }
    function Wb(a) {
      var b,
          c,
          d,
          e,
          f,
          h = a;f = c = a = b = "";d = !0;e = "https";if (p(h)) {
        var k = h.indexOf("//");0 <= k && (e = h.substring(0, k - 1), h = h.substring(k + 2));k = h.indexOf("/");-1 === k && (k = h.length);b = h.substring(0, k);f = "";h = h.substring(k).split("/");for (k = 0; k < h.length; k++) {
          if (0 < h[k].length) {
            var m = h[k];try {
              m = decodeURIComponent(m.replace(/\+/g, " "));
            } catch (l) {}f += "/" + m;
          }
        }h = b.split(".");3 === h.length ? (a = h[1], c = h[0].toLowerCase()) : 2 === h.length && (a = h[0]);k = b.indexOf(":");0 <= k && (d = "https" === e || "wss" === e);
      }"firebase" === a && Vb(b + " is no longer supported. Please use <YOUR FIREBASE>.firebaseio.com instead");
      c && "undefined" != c || Vb("Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com");d || "undefined" !== typeof window && window.location && window.location.protocol && -1 !== window.location.protocol.indexOf("https:") && J("Insecure Firebase access from a secure page. Please use https in calls to new Firebase().");return { jc: new zb(b, d, c, "ws" === e || "wss" === e), path: new E(f) };
    }function Xb(a) {
      return ga(a) && (a != a || a == Number.POSITIVE_INFINITY || a == Number.NEGATIVE_INFINITY);
    }
    function Yb(a) {
      if ("complete" === document.readyState) a();else {
        var b = !1,
            c = function c() {
          document.body ? b || (b = !0, a()) : setTimeout(c, Math.floor(10));
        };document.addEventListener ? (document.addEventListener("DOMContentLoaded", c, !1), window.addEventListener("load", c, !1)) : document.attachEvent && (document.attachEvent("onreadystatechange", function () {
          "complete" === document.readyState && c();
        }), window.attachEvent("onload", c));
      }
    }
    function sb(a, b) {
      if (a === b) return 0;if ("[MIN_NAME]" === a || "[MAX_NAME]" === b) return -1;if ("[MIN_NAME]" === b || "[MAX_NAME]" === a) return 1;var c = Zb(a),
          d = Zb(b);return null !== c ? null !== d ? 0 == c - d ? a.length - b.length : c - d : -1 : null !== d ? 1 : a < b ? -1 : 1;
    }function $b(a, b) {
      if (b && a in b) return b[a];throw Error("Missing required key (" + a + ") in object: " + x(b));
    }
    function ac(a) {
      if ("object" !== typeof a || null === a) return x(a);var b = [],
          c;for (c in a) {
        b.push(c);
      }b.sort();c = "{";for (var d = 0; d < b.length; d++) {
        0 !== d && (c += ","), c += x(b[d]), c += ":", c += ac(a[b[d]]);
      }return c + "}";
    }function bc(a, b) {
      if (a.length <= b) return [a];for (var c = [], d = 0; d < a.length; d += b) {
        d + b > a ? c.push(a.substring(d, a.length)) : c.push(a.substring(d, d + b));
      }return c;
    }function cc(a, b) {
      if (ea(a)) for (var c = 0; c < a.length; ++c) {
        b(c, a[c]);
      } else v(a, b);
    }
    function dc(a) {
      D(!Xb(a), "Invalid JSON number");var b, c, d, e;0 === a ? (d = c = 0, b = -Infinity === 1 / a ? 1 : 0) : (b = 0 > a, a = Math.abs(a), a >= Math.pow(2, -1022) ? (d = Math.min(Math.floor(Math.log(a) / Math.LN2), 1023), c = d + 1023, d = Math.round(a * Math.pow(2, 52 - d) - Math.pow(2, 52))) : (c = 0, d = Math.round(a / Math.pow(2, -1074))));e = [];for (a = 52; a; --a) {
        e.push(d % 2 ? 1 : 0), d = Math.floor(d / 2);
      }for (a = 11; a; --a) {
        e.push(c % 2 ? 1 : 0), c = Math.floor(c / 2);
      }e.push(b ? 1 : 0);e.reverse();b = e.join("");c = "";for (a = 0; 64 > a; a += 8) {
        d = parseInt(b.substr(a, 8), 2).toString(16), 1 === d.length && (d = "0" + d), c += d;
      }return c.toLowerCase();
    }var ec = /^-?\d{1,10}$/;function Zb(a) {
      return ec.test(a) && (a = Number(a), -2147483648 <= a && 2147483647 >= a) ? a : null;
    }function fc(a) {
      try {
        a();
      } catch (b) {
        setTimeout(function () {
          J("Exception was thrown by user callback.", b.stack || "");throw b;
        }, Math.floor(0));
      }
    }function gc(a, b, c) {
      Object.defineProperty(a, b, { get: c });
    }function hc(a, b) {
      var c = setTimeout(a, b);"object" === typeof c && c.unref && c.unref();return c;
    };function ic(a) {
      var b = {},
          c = {},
          d = {},
          e = "";try {
        var f = a.split("."),
            b = lb(Nb(f[0]) || ""),
            c = lb(Nb(f[1]) || ""),
            e = f[2],
            d = c.d || {};delete c.d;
      } catch (h) {}return { tg: b, Je: c, data: d, mg: e };
    }function jc(a) {
      a = ic(a);var b = a.Je;return !!a.mg && !!b && "object" === typeof b && b.hasOwnProperty("iat");
    }function kc(a) {
      a = ic(a).Je;return "object" === typeof a && !0 === w(a, "admin");
    };function lc() {}var mc = {};function nc(a) {
      return q(a.compare, a);
    }lc.prototype.nd = function (a, b) {
      return 0 !== this.compare(new C("[MIN_NAME]", a), new C("[MIN_NAME]", b));
    };lc.prototype.Hc = function () {
      return oc;
    };function pc(a) {
      D(!a.e() && ".priority" !== K(a), "Can't create PathIndex with empty path or .priority key");this.bc = a;
    }la(pc, lc);g = pc.prototype;g.xc = function (a) {
      return !a.P(this.bc).e();
    };g.compare = function (a, b) {
      var c = a.R.P(this.bc),
          d = b.R.P(this.bc),
          c = c.sc(d);return 0 === c ? sb(a.name, b.name) : c;
    };
    g.Ec = function (a, b) {
      var c = G(a),
          c = L.F(this.bc, c);return new C(b, c);
    };g.Fc = function () {
      var a = L.F(this.bc, qc);return new C("[MAX_NAME]", a);
    };g.toString = function () {
      return this.bc.slice().join("/");
    };function rc() {}la(rc, lc);g = rc.prototype;g.compare = function (a, b) {
      var c = a.R.C(),
          d = b.R.C(),
          c = c.sc(d);return 0 === c ? sb(a.name, b.name) : c;
    };g.xc = function (a) {
      return !a.C().e();
    };g.nd = function (a, b) {
      return !a.C().Z(b.C());
    };g.Hc = function () {
      return oc;
    };g.Fc = function () {
      return new C("[MAX_NAME]", new Kb("[PRIORITY-POST]", qc));
    };
    g.Ec = function (a, b) {
      var c = G(a);return new C(b, new Kb("[PRIORITY-POST]", c));
    };g.toString = function () {
      return ".priority";
    };var H = new rc();function sc() {}la(sc, lc);g = sc.prototype;g.compare = function (a, b) {
      return sb(a.name, b.name);
    };g.xc = function () {
      throw Mb("KeyIndex.isDefinedOn not expected to be called.");
    };g.nd = function () {
      return !1;
    };g.Hc = function () {
      return oc;
    };g.Fc = function () {
      return new C("[MAX_NAME]", L);
    };g.Ec = function (a) {
      D(p(a), "KeyIndex indexValue must always be a string.");return new C(a, L);
    };g.toString = function () {
      return ".key";
    };
    var tc = new sc();function uc() {}la(uc, lc);g = uc.prototype;g.compare = function (a, b) {
      var c = a.R.sc(b.R);return 0 === c ? sb(a.name, b.name) : c;
    };g.xc = function () {
      return !0;
    };g.nd = function (a, b) {
      return !a.Z(b);
    };g.Hc = function () {
      return oc;
    };g.Fc = function () {
      return vc;
    };g.Ec = function (a, b) {
      var c = G(a);return new C(b, c);
    };g.toString = function () {
      return ".value";
    };var wc = new uc();function xc(a, b) {
      this.od = a;this.cc = b;
    }xc.prototype.get = function (a) {
      var b = w(this.od, a);if (!b) throw Error("No index defined for " + a);return b === mc ? null : b;
    };function yc(a, b, c) {
      var d = Ja(a.od, function (d, f) {
        var h = w(a.cc, f);D(h, "Missing index implementation for " + f);if (d === mc) {
          if (h.xc(b.R)) {
            for (var k = [], m = c.Wb(qb), l = M(m); l;) {
              l.name != b.name && k.push(l), l = M(m);
            }k.push(b);return zc(k, nc(h));
          }return mc;
        }h = c.get(b.name);k = d;h && (k = k.remove(new C(b.name, h)));return k.Oa(b, b.R);
      });return new xc(d, a.cc);
    }
    function Ac(a, b, c) {
      var d = Ja(a.od, function (a) {
        if (a === mc) return a;var d = c.get(b.name);return d ? a.remove(new C(b.name, d)) : a;
      });return new xc(d, a.cc);
    }var Bc = new xc({ ".priority": mc }, { ".priority": H });function Kb(a, b) {
      this.B = a;D(n(this.B) && null !== this.B, "LeafNode shouldn't be created with null/undefined value.");this.aa = b || L;Cc(this.aa);this.Db = null;
    }var Dc = ["object", "boolean", "number", "string"];g = Kb.prototype;g.J = function () {
      return !0;
    };g.C = function () {
      return this.aa;
    };g.fa = function (a) {
      return new Kb(this.B, a);
    };g.Q = function (a) {
      return ".priority" === a ? this.aa : L;
    };g.P = function (a) {
      return a.e() ? this : ".priority" === K(a) ? this.aa : L;
    };g.Da = function () {
      return !1;
    };g.Ve = function () {
      return null;
    };
    g.T = function (a, b) {
      return ".priority" === a ? this.fa(b) : b.e() && ".priority" !== a ? this : L.T(a, b).fa(this.aa);
    };g.F = function (a, b) {
      var c = K(a);if (null === c) return b;if (b.e() && ".priority" !== c) return this;D(".priority" !== c || 1 === Ec(a), ".priority must be the last token in a path");return this.T(c, L.F(N(a), b));
    };g.e = function () {
      return !1;
    };g.Eb = function () {
      return 0;
    };g.O = function () {
      return !1;
    };g.H = function (a) {
      return a && !this.C().e() ? { ".value": this.Ca(), ".priority": this.C().H() } : this.Ca();
    };
    g.hash = function () {
      if (null === this.Db) {
        var a = "";this.aa.e() || (a += "priority:" + Fc(this.aa.H()) + ":");var b = typeof this.B,
            a = a + (b + ":"),
            a = "number" === b ? a + dc(this.B) : a + this.B;this.Db = Ob(a);
      }return this.Db;
    };g.Ca = function () {
      return this.B;
    };g.sc = function (a) {
      if (a === L) return 1;if (a instanceof O) return -1;D(a.J(), "Unknown node type");var b = typeof a.B,
          c = typeof this.B,
          d = xa(Dc, b),
          e = xa(Dc, c);D(0 <= d, "Unknown leaf type: " + b);D(0 <= e, "Unknown leaf type: " + c);return d === e ? "object" === c ? 0 : this.B < a.B ? -1 : this.B === a.B ? 0 : 1 : e - d;
    };
    g.nb = function () {
      return this;
    };g.yc = function () {
      return !0;
    };g.Z = function (a) {
      return a === this ? !0 : a.J() ? this.B === a.B && this.aa.Z(a.aa) : !1;
    };g.toString = function () {
      return x(this.H(!0));
    };function Gc() {
      this.set = {};
    }g = Gc.prototype;g.add = function (a, b) {
      this.set[a] = null !== b ? b : !0;
    };g.contains = function (a) {
      return eb(this.set, a);
    };g.get = function (a) {
      return this.contains(a) ? this.set[a] : void 0;
    };g.remove = function (a) {
      delete this.set[a];
    };g.clear = function () {
      this.set = {};
    };g.e = function () {
      return Sa(this.set);
    };g.count = function () {
      return La(this.set);
    };function Hc(a, b) {
      v(a.set, function (a, d) {
        b(d, a);
      });
    }g.keys = function () {
      var a = [];v(this.set, function (b, c) {
        a.push(c);
      });return a;
    };function Ic(a) {
      D(ea(a) && 0 < a.length, "Requires a non-empty array");this.Bf = a;this.Dc = {};
    }Ic.prototype.Ge = function (a, b) {
      var c;c = this.Dc[a] || [];var d = c.length;if (0 < d) {
        for (var e = Array(d), f = 0; f < d; f++) {
          e[f] = c[f];
        }c = e;
      } else c = [];for (d = 0; d < c.length; d++) {
        c[d].Ie.apply(c[d].Ma, Array.prototype.slice.call(arguments, 1));
      }
    };Ic.prototype.gc = function (a, b, c) {
      Jc(this, a);this.Dc[a] = this.Dc[a] || [];this.Dc[a].push({ Ie: b, Ma: c });(a = this.Ue(a)) && b.apply(c, a);
    };
    Ic.prototype.Ic = function (a, b, c) {
      Jc(this, a);a = this.Dc[a] || [];for (var d = 0; d < a.length; d++) {
        if (a[d].Ie === b && (!c || c === a[d].Ma)) {
          a.splice(d, 1);break;
        }
      }
    };function Jc(a, b) {
      D(Da(a.Bf, function (a) {
        return a === b;
      }), "Unknown event: " + b);
    };var Kc = function () {
      var a = 0,
          b = [];return function (c) {
        var d = c === a;a = c;for (var e = Array(8), f = 7; 0 <= f; f--) {
          e[f] = "-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz".charAt(c % 64), c = Math.floor(c / 64);
        }D(0 === c, "Cannot push at time == 0");c = e.join("");if (d) {
          for (f = 11; 0 <= f && 63 === b[f]; f--) {
            b[f] = 0;
          }b[f]++;
        } else for (f = 0; 12 > f; f++) {
          b[f] = Math.floor(64 * Math.random());
        }for (f = 0; 12 > f; f++) {
          c += "-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz".charAt(b[f]);
        }D(20 === c.length, "nextPushId: Length should be 20.");
        return c;
      };
    }();function Lc() {
      Ic.call(this, ["online"]);this.hc = !0;if ("undefined" !== typeof window && "undefined" !== typeof window.addEventListener && !pb()) {
        var a = this;window.addEventListener("online", function () {
          a.hc || (a.hc = !0, a.Ge("online", !0));
        }, !1);window.addEventListener("offline", function () {
          a.hc && (a.hc = !1, a.Ge("online", !1));
        }, !1);
      }
    }la(Lc, Ic);Lc.prototype.Ue = function (a) {
      D("online" === a, "Unknown event type: " + a);return [this.hc];
    };ca(Lc);function Mc() {
      Ic.call(this, ["visible"]);var a, b;"undefined" !== typeof document && "undefined" !== typeof document.addEventListener && ("undefined" !== typeof document.hidden ? (b = "visibilitychange", a = "hidden") : "undefined" !== typeof document.mozHidden ? (b = "mozvisibilitychange", a = "mozHidden") : "undefined" !== typeof document.msHidden ? (b = "msvisibilitychange", a = "msHidden") : "undefined" !== typeof document.webkitHidden && (b = "webkitvisibilitychange", a = "webkitHidden"));this.Mb = !0;if (b) {
        var c = this;document.addEventListener(b, function () {
          var b = !document[a];b !== c.Mb && (c.Mb = b, c.Ge("visible", b));
        }, !1);
      }
    }la(Mc, Ic);Mc.prototype.Ue = function (a) {
      D("visible" === a, "Unknown event type: " + a);return [this.Mb];
    };ca(Mc);function E(a, b) {
      if (1 == arguments.length) {
        this.o = a.split("/");for (var c = 0, d = 0; d < this.o.length; d++) {
          0 < this.o[d].length && (this.o[c] = this.o[d], c++);
        }this.o.length = c;this.Y = 0;
      } else this.o = a, this.Y = b;
    }function P(a, b) {
      var c = K(a);if (null === c) return b;if (c === K(b)) return P(N(a), N(b));throw Error("INTERNAL ERROR: innerPath (" + b + ") is not within outerPath (" + a + ")");
    }
    function Nc(a, b) {
      for (var c = a.slice(), d = b.slice(), e = 0; e < c.length && e < d.length; e++) {
        var f = sb(c[e], d[e]);if (0 !== f) return f;
      }return c.length === d.length ? 0 : c.length < d.length ? -1 : 1;
    }function K(a) {
      return a.Y >= a.o.length ? null : a.o[a.Y];
    }function Ec(a) {
      return a.o.length - a.Y;
    }function N(a) {
      var b = a.Y;b < a.o.length && b++;return new E(a.o, b);
    }function Oc(a) {
      return a.Y < a.o.length ? a.o[a.o.length - 1] : null;
    }g = E.prototype;
    g.toString = function () {
      for (var a = "", b = this.Y; b < this.o.length; b++) {
        "" !== this.o[b] && (a += "/" + this.o[b]);
      }return a || "/";
    };g.slice = function (a) {
      return this.o.slice(this.Y + (a || 0));
    };g.parent = function () {
      if (this.Y >= this.o.length) return null;for (var a = [], b = this.Y; b < this.o.length - 1; b++) {
        a.push(this.o[b]);
      }return new E(a, 0);
    };
    g.n = function (a) {
      for (var b = [], c = this.Y; c < this.o.length; c++) {
        b.push(this.o[c]);
      }if (a instanceof E) for (c = a.Y; c < a.o.length; c++) {
        b.push(a.o[c]);
      } else for (a = a.split("/"), c = 0; c < a.length; c++) {
        0 < a[c].length && b.push(a[c]);
      }return new E(b, 0);
    };g.e = function () {
      return this.Y >= this.o.length;
    };g.Z = function (a) {
      if (Ec(this) !== Ec(a)) return !1;for (var b = this.Y, c = a.Y; b <= this.o.length; b++, c++) {
        if (this.o[b] !== a.o[c]) return !1;
      }return !0;
    };
    g.contains = function (a) {
      var b = this.Y,
          c = a.Y;if (Ec(this) > Ec(a)) return !1;for (; b < this.o.length;) {
        if (this.o[b] !== a.o[c]) return !1;++b;++c;
      }return !0;
    };var Q = new E("");function Pc(a, b) {
      this.Qa = a.slice();this.Ha = Math.max(1, this.Qa.length);this.Qe = b;for (var c = 0; c < this.Qa.length; c++) {
        this.Ha += nb(this.Qa[c]);
      }Qc(this);
    }Pc.prototype.push = function (a) {
      0 < this.Qa.length && (this.Ha += 1);this.Qa.push(a);this.Ha += nb(a);Qc(this);
    };Pc.prototype.pop = function () {
      var a = this.Qa.pop();this.Ha -= nb(a);0 < this.Qa.length && --this.Ha;
    };
    function Qc(a) {
      if (768 < a.Ha) throw Error(a.Qe + "has a key path longer than 768 bytes (" + a.Ha + ").");if (32 < a.Qa.length) throw Error(a.Qe + "path specified exceeds the maximum depth that can be written (32) or object contains a cycle " + Rc(a));
    }function Rc(a) {
      return 0 == a.Qa.length ? "" : "in property '" + a.Qa.join(".") + "'";
    };function Sc() {
      this.children = {};this.bd = 0;this.value = null;
    }function Tc(a, b, c) {
      this.ud = a ? a : "";this.Pc = b ? b : null;this.A = c ? c : new Sc();
    }function Uc(a, b) {
      for (var c = b instanceof E ? b : new E(b), d = a, e; null !== (e = K(c));) {
        d = new Tc(e, d, w(d.A.children, e) || new Sc()), c = N(c);
      }return d;
    }g = Tc.prototype;g.Ca = function () {
      return this.A.value;
    };function Vc(a, b) {
      D("undefined" !== typeof b, "Cannot set value to undefined");a.A.value = b;Wc(a);
    }g.clear = function () {
      this.A.value = null;this.A.children = {};this.A.bd = 0;Wc(this);
    };
    g.kd = function () {
      return 0 < this.A.bd;
    };g.e = function () {
      return null === this.Ca() && !this.kd();
    };g.O = function (a) {
      var b = this;v(this.A.children, function (c, d) {
        a(new Tc(d, b, c));
      });
    };function Xc(a, b, c, d) {
      c && !d && b(a);a.O(function (a) {
        Xc(a, b, !0, d);
      });c && d && b(a);
    }function Yc(a, b) {
      for (var c = a.parent(); null !== c && !b(c);) {
        c = c.parent();
      }
    }g.path = function () {
      return new E(null === this.Pc ? this.ud : this.Pc.path() + "/" + this.ud);
    };g.name = function () {
      return this.ud;
    };g.parent = function () {
      return this.Pc;
    };
    function Wc(a) {
      if (null !== a.Pc) {
        var b = a.Pc,
            c = a.ud,
            d = a.e(),
            e = eb(b.A.children, c);d && e ? (delete b.A.children[c], b.A.bd--, Wc(b)) : d || e || (b.A.children[c] = a.A, b.A.bd++, Wc(b));
      }
    };function Zc(a, b) {
      this.La = a;this.ba = b ? b : $c;
    }g = Zc.prototype;g.Oa = function (a, b) {
      return new Zc(this.La, this.ba.Oa(a, b, this.La).X(null, null, !1, null, null));
    };g.remove = function (a) {
      return new Zc(this.La, this.ba.remove(a, this.La).X(null, null, !1, null, null));
    };g.get = function (a) {
      for (var b, c = this.ba; !c.e();) {
        b = this.La(a, c.key);if (0 === b) return c.value;0 > b ? c = c.left : 0 < b && (c = c.right);
      }return null;
    };
    function ad(a, b) {
      for (var c, d = a.ba, e = null; !d.e();) {
        c = a.La(b, d.key);if (0 === c) {
          if (d.left.e()) return e ? e.key : null;for (d = d.left; !d.right.e();) {
            d = d.right;
          }return d.key;
        }0 > c ? d = d.left : 0 < c && (e = d, d = d.right);
      }throw Error("Attempted to find predecessor key for a nonexistent key.  What gives?");
    }g.e = function () {
      return this.ba.e();
    };g.count = function () {
      return this.ba.count();
    };g.Gc = function () {
      return this.ba.Gc();
    };g.ec = function () {
      return this.ba.ec();
    };g.ha = function (a) {
      return this.ba.ha(a);
    };
    g.Wb = function (a) {
      return new bd(this.ba, null, this.La, !1, a);
    };g.Xb = function (a, b) {
      return new bd(this.ba, a, this.La, !1, b);
    };g.Zb = function (a, b) {
      return new bd(this.ba, a, this.La, !0, b);
    };g.We = function (a) {
      return new bd(this.ba, null, this.La, !0, a);
    };function bd(a, b, c, d, e) {
      this.Hd = e || null;this.le = d;this.Pa = [];for (e = 1; !a.e();) {
        if (e = b ? c(a.key, b) : 1, d && (e *= -1), 0 > e) a = this.le ? a.left : a.right;else if (0 === e) {
          this.Pa.push(a);break;
        } else this.Pa.push(a), a = this.le ? a.right : a.left;
      }
    }
    function M(a) {
      if (0 === a.Pa.length) return null;var b = a.Pa.pop(),
          c;c = a.Hd ? a.Hd(b.key, b.value) : { key: b.key, value: b.value };if (a.le) for (b = b.left; !b.e();) {
        a.Pa.push(b), b = b.right;
      } else for (b = b.right; !b.e();) {
        a.Pa.push(b), b = b.left;
      }return c;
    }function cd(a) {
      if (0 === a.Pa.length) return null;var b;b = a.Pa;b = b[b.length - 1];return a.Hd ? a.Hd(b.key, b.value) : { key: b.key, value: b.value };
    }function dd(a, b, c, d, e) {
      this.key = a;this.value = b;this.color = null != c ? c : !0;this.left = null != d ? d : $c;this.right = null != e ? e : $c;
    }g = dd.prototype;
    g.X = function (a, b, c, d, e) {
      return new dd(null != a ? a : this.key, null != b ? b : this.value, null != c ? c : this.color, null != d ? d : this.left, null != e ? e : this.right);
    };g.count = function () {
      return this.left.count() + 1 + this.right.count();
    };g.e = function () {
      return !1;
    };g.ha = function (a) {
      return this.left.ha(a) || a(this.key, this.value) || this.right.ha(a);
    };function ed(a) {
      return a.left.e() ? a : ed(a.left);
    }g.Gc = function () {
      return ed(this).key;
    };g.ec = function () {
      return this.right.e() ? this.key : this.right.ec();
    };
    g.Oa = function (a, b, c) {
      var d, e;e = this;d = c(a, e.key);e = 0 > d ? e.X(null, null, null, e.left.Oa(a, b, c), null) : 0 === d ? e.X(null, b, null, null, null) : e.X(null, null, null, null, e.right.Oa(a, b, c));return gd(e);
    };function hd(a) {
      if (a.left.e()) return $c;a.left.ea() || a.left.left.ea() || (a = id(a));a = a.X(null, null, null, hd(a.left), null);return gd(a);
    }
    g.remove = function (a, b) {
      var c, d;c = this;if (0 > b(a, c.key)) c.left.e() || c.left.ea() || c.left.left.ea() || (c = id(c)), c = c.X(null, null, null, c.left.remove(a, b), null);else {
        c.left.ea() && (c = jd(c));c.right.e() || c.right.ea() || c.right.left.ea() || (c = kd(c), c.left.left.ea() && (c = jd(c), c = kd(c)));if (0 === b(a, c.key)) {
          if (c.right.e()) return $c;d = ed(c.right);c = c.X(d.key, d.value, null, null, hd(c.right));
        }c = c.X(null, null, null, null, c.right.remove(a, b));
      }return gd(c);
    };g.ea = function () {
      return this.color;
    };
    function gd(a) {
      a.right.ea() && !a.left.ea() && (a = ld(a));a.left.ea() && a.left.left.ea() && (a = jd(a));a.left.ea() && a.right.ea() && (a = kd(a));return a;
    }function id(a) {
      a = kd(a);a.right.left.ea() && (a = a.X(null, null, null, null, jd(a.right)), a = ld(a), a = kd(a));return a;
    }function ld(a) {
      return a.right.X(null, null, a.color, a.X(null, null, !0, null, a.right.left), null);
    }function jd(a) {
      return a.left.X(null, null, a.color, null, a.X(null, null, !0, a.left.right, null));
    }
    function kd(a) {
      return a.X(null, null, !a.color, a.left.X(null, null, !a.left.color, null, null), a.right.X(null, null, !a.right.color, null, null));
    }function md() {}g = md.prototype;g.X = function () {
      return this;
    };g.Oa = function (a, b) {
      return new dd(a, b, null);
    };g.remove = function () {
      return this;
    };g.count = function () {
      return 0;
    };g.e = function () {
      return !0;
    };g.ha = function () {
      return !1;
    };g.Gc = function () {
      return null;
    };g.ec = function () {
      return null;
    };g.ea = function () {
      return !1;
    };var $c = new md();function O(a, b, c) {
      this.k = a;(this.aa = b) && Cc(this.aa);a.e() && D(!this.aa || this.aa.e(), "An empty node cannot have a priority");this.yb = c;this.Db = null;
    }g = O.prototype;g.J = function () {
      return !1;
    };g.C = function () {
      return this.aa || L;
    };g.fa = function (a) {
      return this.k.e() ? this : new O(this.k, a, this.yb);
    };g.Q = function (a) {
      if (".priority" === a) return this.C();a = this.k.get(a);return null === a ? L : a;
    };g.P = function (a) {
      var b = K(a);return null === b ? this : this.Q(b).P(N(a));
    };g.Da = function (a) {
      return null !== this.k.get(a);
    };
    g.T = function (a, b) {
      D(b, "We should always be passing snapshot nodes");if (".priority" === a) return this.fa(b);var c = new C(a, b),
          d,
          e;b.e() ? (d = this.k.remove(a), c = Ac(this.yb, c, this.k)) : (d = this.k.Oa(a, b), c = yc(this.yb, c, this.k));e = d.e() ? L : this.aa;return new O(d, e, c);
    };g.F = function (a, b) {
      var c = K(a);if (null === c) return b;D(".priority" !== K(a) || 1 === Ec(a), ".priority must be the last token in a path");var d = this.Q(c).F(N(a), b);return this.T(c, d);
    };g.e = function () {
      return this.k.e();
    };g.Eb = function () {
      return this.k.count();
    };
    var nd = /^(0|[1-9]\d*)$/;g = O.prototype;g.H = function (a) {
      if (this.e()) return null;var b = {},
          c = 0,
          d = 0,
          e = !0;this.O(H, function (f, h) {
        b[f] = h.H(a);c++;e && nd.test(f) ? d = Math.max(d, Number(f)) : e = !1;
      });if (!a && e && d < 2 * c) {
        var f = [],
            h;for (h in b) {
          f[h] = b[h];
        }return f;
      }a && !this.C().e() && (b[".priority"] = this.C().H());return b;
    };g.hash = function () {
      if (null === this.Db) {
        var a = "";this.C().e() || (a += "priority:" + Fc(this.C().H()) + ":");this.O(H, function (b, c) {
          var d = c.hash();"" !== d && (a += ":" + b + ":" + d);
        });this.Db = "" === a ? "" : Ob(a);
      }return this.Db;
    };
    g.Ve = function (a, b, c) {
      return (c = od(this, c)) ? (a = ad(c, new C(a, b))) ? a.name : null : ad(this.k, a);
    };function pd(a, b) {
      var c;c = (c = od(a, b)) ? (c = c.Gc()) && c.name : a.k.Gc();return c ? new C(c, a.k.get(c)) : null;
    }function qd(a, b) {
      var c;c = (c = od(a, b)) ? (c = c.ec()) && c.name : a.k.ec();return c ? new C(c, a.k.get(c)) : null;
    }g.O = function (a, b) {
      var c = od(this, a);return c ? c.ha(function (a) {
        return b(a.name, a.R);
      }) : this.k.ha(b);
    };g.Wb = function (a) {
      return this.Xb(a.Hc(), a);
    };
    g.Xb = function (a, b) {
      var c = od(this, b);if (c) return c.Xb(a, function (a) {
        return a;
      });for (var c = this.k.Xb(a.name, qb), d = cd(c); null != d && 0 > b.compare(d, a);) {
        M(c), d = cd(c);
      }return c;
    };g.We = function (a) {
      return this.Zb(a.Fc(), a);
    };g.Zb = function (a, b) {
      var c = od(this, b);if (c) return c.Zb(a, function (a) {
        return a;
      });for (var c = this.k.Zb(a.name, qb), d = cd(c); null != d && 0 < b.compare(d, a);) {
        M(c), d = cd(c);
      }return c;
    };g.sc = function (a) {
      return this.e() ? a.e() ? 0 : -1 : a.J() || a.e() ? 1 : a === qc ? -1 : 0;
    };
    g.nb = function (a) {
      if (a === tc || Pa(this.yb.cc, a.toString())) return this;var b = this.yb,
          c = this.k;D(a !== tc, "KeyIndex always exists and isn't meant to be added to the IndexMap.");for (var d = [], e = !1, c = c.Wb(qb), f = M(c); f;) {
        e = e || a.xc(f.R), d.push(f), f = M(c);
      }d = e ? zc(d, nc(a)) : mc;e = a.toString();c = Ta(b.cc);c[e] = a;a = Ta(b.od);a[e] = d;return new O(this.k, this.aa, new xc(a, c));
    };g.yc = function (a) {
      return a === tc || Pa(this.yb.cc, a.toString());
    };
    g.Z = function (a) {
      if (a === this) return !0;if (a.J()) return !1;if (this.C().Z(a.C()) && this.k.count() === a.k.count()) {
        var b = this.Wb(H);a = a.Wb(H);for (var c = M(b), d = M(a); c && d;) {
          if (c.name !== d.name || !c.R.Z(d.R)) return !1;c = M(b);d = M(a);
        }return null === c && null === d;
      }return !1;
    };function od(a, b) {
      return b === tc ? null : a.yb.get(b.toString());
    }g.toString = function () {
      return x(this.H(!0));
    };function G(a, b) {
      if (null === a) return L;var c = null;"object" === typeof a && ".priority" in a ? c = a[".priority"] : "undefined" !== typeof b && (c = b);D(null === c || "string" === typeof c || "number" === typeof c || "object" === typeof c && ".sv" in c, "Invalid priority type found: " + typeof c);"object" === typeof a && ".value" in a && null !== a[".value"] && (a = a[".value"]);if ("object" !== typeof a || ".sv" in a) return new Kb(a, G(c));if (a instanceof Array) {
        var d = L,
            e = a;v(e, function (a, b) {
          if (eb(e, b) && "." !== b.substring(0, 1)) {
            var c = G(a);if (c.J() || !c.e()) d = d.T(b, c);
          }
        });return d.fa(G(c));
      }var f = [],
          h = !1,
          k = a;fb(k, function (a) {
        if ("string" !== typeof a || "." !== a.substring(0, 1)) {
          var b = G(k[a]);b.e() || (h = h || !b.C().e(), f.push(new C(a, b)));
        }
      });if (0 == f.length) return L;var m = zc(f, rb, function (a) {
        return a.name;
      }, tb);if (h) {
        var l = zc(f, nc(H));return new O(m, G(c), new xc({ ".priority": l }, { ".priority": H }));
      }return new O(m, G(c), Bc);
    }var rd = Math.log(2);
    function sd(a) {
      this.count = parseInt(Math.log(a + 1) / rd, 10);this.Oe = this.count - 1;this.Cf = a + 1 & parseInt(Array(this.count + 1).join("1"), 2);
    }function td(a) {
      var b = !(a.Cf & 1 << a.Oe);a.Oe--;return b;
    }
    function zc(a, b, c, d) {
      function e(b, d) {
        var f = d - b;if (0 == f) return null;if (1 == f) {
          var l = a[b],
              u = c ? c(l) : l;return new dd(u, l.R, !1, null, null);
        }var l = parseInt(f / 2, 10) + b,
            f = e(b, l),
            z = e(l + 1, d),
            l = a[l],
            u = c ? c(l) : l;return new dd(u, l.R, !1, f, z);
      }a.sort(b);var f = function (b) {
        function d(b, h) {
          var k = u - b,
              z = u;u -= b;var z = e(k + 1, z),
              k = a[k],
              F = c ? c(k) : k,
              z = new dd(F, k.R, h, null, z);f ? f.left = z : l = z;f = z;
        }for (var f = null, l = null, u = a.length, z = 0; z < b.count; ++z) {
          var F = td(b),
              fd = Math.pow(2, b.count - (z + 1));F ? d(fd, !1) : (d(fd, !1), d(fd, !0));
        }return l;
      }(new sd(a.length));
      return null !== f ? new Zc(d || b, f) : new Zc(d || b);
    }function Fc(a) {
      return "number" === typeof a ? "number:" + dc(a) : "string:" + a;
    }function Cc(a) {
      if (a.J()) {
        var b = a.H();D("string" === typeof b || "number" === typeof b || "object" === typeof b && eb(b, ".sv"), "Priority must be a string or number.");
      } else D(a === qc || a.e(), "priority of unexpected type.");D(a === qc || a.C().e(), "Priority nodes can't have a priority of their own.");
    }var L = new O(new Zc(tb), null, Bc);function ud() {
      O.call(this, new Zc(tb), L, Bc);
    }la(ud, O);g = ud.prototype;
    g.sc = function (a) {
      return a === this ? 0 : 1;
    };g.Z = function (a) {
      return a === this;
    };g.C = function () {
      return this;
    };g.Q = function () {
      return L;
    };g.e = function () {
      return !1;
    };var qc = new ud(),
        oc = new C("[MIN_NAME]", L),
        vc = new C("[MAX_NAME]", qc);function vd(a, b) {
      this.value = a;this.children = b || wd;
    }var wd = new Zc(function (a, b) {
      return a === b ? 0 : a < b ? -1 : 1;
    });function xd(a) {
      var b = R;v(a, function (a, d) {
        b = b.set(new E(d), a);
      });return b;
    }g = vd.prototype;g.e = function () {
      return null === this.value && this.children.e();
    };function yd(a, b, c) {
      if (null != a.value && c(a.value)) return { path: Q, value: a.value };if (b.e()) return null;var d = K(b);a = a.children.get(d);return null !== a ? (b = yd(a, N(b), c), null != b ? { path: new E(d).n(b.path), value: b.value } : null) : null;
    }
    function zd(a, b) {
      return yd(a, b, function () {
        return !0;
      });
    }g.subtree = function (a) {
      if (a.e()) return this;var b = this.children.get(K(a));return null !== b ? b.subtree(N(a)) : R;
    };g.set = function (a, b) {
      if (a.e()) return new vd(b, this.children);var c = K(a),
          d = (this.children.get(c) || R).set(N(a), b),
          c = this.children.Oa(c, d);return new vd(this.value, c);
    };
    g.remove = function (a) {
      if (a.e()) return this.children.e() ? R : new vd(null, this.children);var b = K(a),
          c = this.children.get(b);return c ? (a = c.remove(N(a)), b = a.e() ? this.children.remove(b) : this.children.Oa(b, a), null === this.value && b.e() ? R : new vd(this.value, b)) : this;
    };g.get = function (a) {
      if (a.e()) return this.value;var b = this.children.get(K(a));return b ? b.get(N(a)) : null;
    };
    function Ad(a, b, c) {
      if (b.e()) return c;var d = K(b);b = Ad(a.children.get(d) || R, N(b), c);d = b.e() ? a.children.remove(d) : a.children.Oa(d, b);return new vd(a.value, d);
    }function Bd(a, b) {
      return Cd(a, Q, b);
    }function Cd(a, b, c) {
      var d = {};a.children.ha(function (a, f) {
        d[a] = Cd(f, b.n(a), c);
      });return c(b, a.value, d);
    }function Dd(a, b, c) {
      return Ed(a, b, Q, c);
    }function Ed(a, b, c, d) {
      var e = a.value ? d(c, a.value) : !1;if (e) return e;if (b.e()) return null;e = K(b);return (a = a.children.get(e)) ? Ed(a, N(b), c.n(e), d) : null;
    }
    function Fd(a, b, c) {
      Gd(a, b, Q, c);
    }function Gd(a, b, c, d) {
      if (b.e()) return a;a.value && d(c, a.value);var e = K(b);return (a = a.children.get(e)) ? Gd(a, N(b), c.n(e), d) : R;
    }function Hd(a, b) {
      Id(a, Q, b);
    }function Id(a, b, c) {
      a.children.ha(function (a, e) {
        Id(e, b.n(a), c);
      });a.value && c(b, a.value);
    }function Jd(a, b) {
      a.children.ha(function (a, d) {
        d.value && b(a, d.value);
      });
    }var R = new vd(null);vd.prototype.toString = function () {
      var a = {};Hd(this, function (b, c) {
        a[b.toString()] = c.toString();
      });return x(a);
    };var Kd = /[\[\].#$\/\u0000-\u001F\u007F]/,
        Ld = /[\[\].#$\u0000-\u001F\u007F]/;function Md(a) {
      return p(a) && 0 !== a.length && !Kd.test(a);
    }function Nd(a) {
      return null === a || p(a) || ga(a) && !Xb(a) || ia(a) && eb(a, ".sv");
    }function Od(a, b, c, d) {
      d && !n(b) || Pd(A(a, 1, d), b, c);
    }
    function Pd(a, b, c) {
      c instanceof E && (c = new Pc(c, a));if (!n(b)) throw Error(a + "contains undefined " + Rc(c));if (ha(b)) throw Error(a + "contains a function " + Rc(c) + " with contents: " + b.toString());if (Xb(b)) throw Error(a + "contains " + b.toString() + " " + Rc(c));if (p(b) && b.length > 10485760 / 3 && 10485760 < nb(b)) throw Error(a + "contains a string greater than 10485760 utf8 bytes " + Rc(c) + " ('" + b.substring(0, 50) + "...')");if (ia(b)) {
        var d = !1,
            e = !1;fb(b, function (b, h) {
          if (".value" === b) d = !0;else if (".priority" !== b && ".sv" !== b && (e = !0, !Md(b))) throw Error(a + " contains an invalid key (" + b + ") " + Rc(c) + '.  Keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]"');c.push(b);Pd(a, h, c);c.pop();
        });if (d && e) throw Error(a + ' contains ".value" child ' + Rc(c) + " in addition to actual children.");
      }
    }
    function Qd(a, b) {
      var c, d;for (c = 0; c < b.length; c++) {
        d = b[c];for (var e = d.slice(), f = 0; f < e.length; f++) {
          if ((".priority" !== e[f] || f !== e.length - 1) && !Md(e[f])) throw Error(a + "contains an invalid key (" + e[f] + ") in path " + d.toString() + '. Keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]"');
        }
      }b.sort(Nc);e = null;for (c = 0; c < b.length; c++) {
        d = b[c];if (null !== e && e.contains(d)) throw Error(a + "contains a path " + e.toString() + " that is ancestor of another path " + d.toString());e = d;
      }
    }
    function Rd(a, b, c) {
      var d = A(a, 1, !1);if (!ia(b) || ea(b)) throw Error(d + " must be an object containing the children to replace.");var e = [];fb(b, function (a, b) {
        var k = new E(a);Pd(d, b, c.n(k));if (".priority" === Oc(k) && !Nd(b)) throw Error(d + "contains an invalid value for '" + k.toString() + "', which must be a valid Firebase priority (a string, finite number, server value, or null).");e.push(k);
      });Qd(d, e);
    }
    function Sd(a, b, c) {
      if (Xb(c)) throw Error(A(a, b, !1) + "is " + c.toString() + ", but must be a valid Firebase priority (a string, finite number, server value, or null).");if (!Nd(c)) throw Error(A(a, b, !1) + "must be a valid Firebase priority (a string, finite number, server value, or null).");
    }
    function Td(a, b, c) {
      if (!c || n(b)) switch (b) {case "value":case "child_added":case "child_removed":case "child_changed":case "child_moved":
          break;default:
          throw Error(A(a, 1, c) + 'must be a valid event type: "value", "child_added", "child_removed", "child_changed", or "child_moved".');}
    }function Ud(a, b) {
      if (n(b) && !Md(b)) throw Error(A(a, 2, !0) + 'was an invalid key: "' + b + '".  Firebase keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]").');
    }
    function Vd(a, b) {
      if (!p(b) || 0 === b.length || Ld.test(b)) throw Error(A(a, 1, !1) + 'was an invalid path: "' + b + '". Paths must be non-empty strings and can\'t contain ".", "#", "$", "[", or "]"');
    }function Wd(a, b) {
      if (".info" === K(b)) throw Error(a + " failed: Can't modify data under /.info/");
    }
    function Xd(a, b) {
      var c = b.path.toString(),
          d;!(d = !p(b.jc.host) || 0 === b.jc.host.length || !Md(b.jc.pe)) && (d = 0 !== c.length) && (c && (c = c.replace(/^\/*\.info(\/|$)/, "/")), d = !(p(c) && 0 !== c.length && !Ld.test(c)));if (d) throw Error(A(a, 1, !1) + 'must be a valid firebase URL and the path can\'t contain ".", "#", "$", "[", or "]".');
    };function Gb() {
      this.k = this.B = null;
    }Gb.prototype.find = function (a) {
      if (null != this.B) return this.B.P(a);if (a.e() || null == this.k) return null;var b = K(a);a = N(a);return this.k.contains(b) ? this.k.get(b).find(a) : null;
    };function Ib(a, b, c) {
      if (b.e()) a.B = c, a.k = null;else if (null !== a.B) a.B = a.B.F(b, c);else {
        null == a.k && (a.k = new Gc());var d = K(b);a.k.contains(d) || a.k.add(d, new Gb());a = a.k.get(d);b = N(b);Ib(a, b, c);
      }
    }
    function Yd(a, b) {
      if (b.e()) return a.B = null, a.k = null, !0;if (null !== a.B) {
        if (a.B.J()) return !1;var c = a.B;a.B = null;c.O(H, function (b, c) {
          Ib(a, new E(b), c);
        });return Yd(a, b);
      }return null !== a.k ? (c = K(b), b = N(b), a.k.contains(c) && Yd(a.k.get(c), b) && a.k.remove(c), a.k.e() ? (a.k = null, !0) : !1) : !0;
    }function Hb(a, b, c) {
      null !== a.B ? c(b, a.B) : a.O(function (a, e) {
        var f = new E(b.toString() + "/" + a);Hb(e, f, c);
      });
    }Gb.prototype.O = function (a) {
      null !== this.k && Hc(this.k, function (b, c) {
        a(b, c);
      });
    };function Zd(a, b) {
      this.type = $d;this.source = a;this.path = b;
    }Zd.prototype.Mc = function () {
      return this.path.e() ? new Zd(this.source, Q) : new Zd(this.source, N(this.path));
    };Zd.prototype.toString = function () {
      return "Operation(" + this.path + ": " + this.source.toString() + " listen_complete)";
    };function ae(a, b, c) {
      this.type = be;this.source = a;this.path = b;this.children = c;
    }ae.prototype.Mc = function (a) {
      if (this.path.e()) return a = this.children.subtree(new E(a)), a.e() ? null : a.value ? new ce(this.source, Q, a.value) : new ae(this.source, Q, a);D(K(this.path) === a, "Can't get a merge for a child not on the path of the operation");return new ae(this.source, N(this.path), this.children);
    };ae.prototype.toString = function () {
      return "Operation(" + this.path + ": " + this.source.toString() + " merge: " + this.children.toString() + ")";
    };function de(a, b, c) {
      this.type = ee;this.source = fe;this.path = a;this.Ob = b;this.Id = c;
    }de.prototype.Mc = function (a) {
      if (this.path.e()) {
        if (null != this.Ob.value) return D(this.Ob.children.e(), "affectedTree should not have overlapping affected paths."), this;a = this.Ob.subtree(new E(a));return new de(Q, a, this.Id);
      }D(K(this.path) === a, "operationForChild called for unrelated child.");return new de(N(this.path), this.Ob, this.Id);
    };
    de.prototype.toString = function () {
      return "Operation(" + this.path + ": " + this.source.toString() + " ack write revert=" + this.Id + " affectedTree=" + this.Ob + ")";
    };function ce(a, b, c) {
      this.type = ge;this.source = a;this.path = b;this.Ga = c;
    }ce.prototype.Mc = function (a) {
      return this.path.e() ? new ce(this.source, Q, this.Ga.Q(a)) : new ce(this.source, N(this.path), this.Ga);
    };ce.prototype.toString = function () {
      return "Operation(" + this.path + ": " + this.source.toString() + " overwrite: " + this.Ga.toString() + ")";
    };var ge = 0,
        be = 1,
        ee = 2,
        $d = 3;function he(a, b, c, d) {
      this.ee = a;this.Se = b;this.Hb = c;this.Ee = d;D(!d || b, "Tagged queries must be from server.");
    }var fe = new he(!0, !1, null, !1),
        ie = new he(!1, !0, null, !1);he.prototype.toString = function () {
      return this.ee ? "user" : this.Ee ? "server(queryID=" + this.Hb + ")" : "server";
    };function je(a, b, c) {
      this.A = a;this.da = b;this.Sb = c;
    }function ke(a) {
      return a.da;
    }function le(a) {
      return a.Sb;
    }function me(a, b) {
      return b.e() ? a.da && !a.Sb : ne(a, K(b));
    }function ne(a, b) {
      return a.da && !a.Sb || a.A.Da(b);
    }je.prototype.j = function () {
      return this.A;
    };function oe(a, b) {
      this.N = a;this.Ld = b;
    }function pe(a, b, c, d) {
      return new oe(new je(b, c, d), a.Ld);
    }function qe(a) {
      return a.N.da ? a.N.j() : null;
    }oe.prototype.w = function () {
      return this.Ld;
    };function re(a) {
      return a.Ld.da ? a.Ld.j() : null;
    };function se() {}se.prototype.Te = function () {
      return null;
    };se.prototype.fe = function () {
      return null;
    };var te = new se();function ue(a, b, c) {
      this.xf = a;this.Ka = b;this.yd = c;
    }ue.prototype.Te = function (a) {
      var b = this.Ka.N;if (ne(b, a)) return b.j().Q(a);b = null != this.yd ? new je(this.yd, !0, !1) : this.Ka.w();return this.xf.qc(a, b);
    };ue.prototype.fe = function (a, b, c) {
      var d = null != this.yd ? this.yd : re(this.Ka);a = this.xf.Xd(d, b, 1, c, a);return 0 === a.length ? null : a[0];
    };function ve(a, b) {
      this.Sd = a;this.Df = b;
    }function we(a) {
      this.U = a;
    }
    we.prototype.eb = function (a, b, c, d) {
      var e = new xe(),
          f;if (b.type === ge) b.source.ee ? c = ye(this, a, b.path, b.Ga, c, d, e) : (D(b.source.Se, "Unknown source."), f = b.source.Ee || le(a.w()) && !b.path.e(), c = ze(this, a, b.path, b.Ga, c, d, f, e));else if (b.type === be) b.source.ee ? c = Ae(this, a, b.path, b.children, c, d, e) : (D(b.source.Se, "Unknown source."), f = b.source.Ee || le(a.w()), c = Be(this, a, b.path, b.children, c, d, f, e));else if (b.type === ee) {
        if (b.Id) {
          if (b = b.path, null != c.lc(b)) c = a;else {
            f = new ue(c, a, d);d = a.N.j();if (b.e() || ".priority" === K(b)) ke(a.w()) ? b = c.Aa(re(a)) : (b = a.w().j(), D(b instanceof O, "serverChildren would be complete if leaf node"), b = c.rc(b)), b = this.U.ya(d, b, e);else {
              var h = K(b),
                  k = c.qc(h, a.w());null == k && ne(a.w(), h) && (k = d.Q(h));b = null != k ? this.U.F(d, h, k, N(b), f, e) : a.N.j().Da(h) ? this.U.F(d, h, L, N(b), f, e) : d;b.e() && ke(a.w()) && (d = c.Aa(re(a)), d.J() && (b = this.U.ya(b, d, e)));
            }d = ke(a.w()) || null != c.lc(Q);c = pe(a, b, d, this.U.Na());
          }
        } else c = Ce(this, a, b.path, b.Ob, c, d, e);
      } else if (b.type === $d) d = b.path, b = a.w(), f = b.j(), h = b.da || d.e(), c = De(this, new oe(a.N, new je(f, h, b.Sb)), d, c, te, e);else throw Mb("Unknown operation type: " + b.type);e = Na(e.fb);d = c;b = d.N;b.da && (f = b.j().J() || b.j().e(), h = qe(a), (0 < e.length || !a.N.da || f && !b.j().Z(h) || !b.j().C().Z(h.C())) && e.push(Ee(qe(d))));return new ve(c, e);
    };
    function De(a, b, c, d, e, f) {
      var h = b.N;if (null != d.lc(c)) return b;var k;if (c.e()) D(ke(b.w()), "If change path is empty, we must have complete server data"), le(b.w()) ? (e = re(b), d = d.rc(e instanceof O ? e : L)) : d = d.Aa(re(b)), f = a.U.ya(b.N.j(), d, f);else {
        var m = K(c);if (".priority" == m) D(1 == Ec(c), "Can't have a priority with additional path components"), f = h.j(), k = b.w().j(), d = d.ad(c, f, k), f = null != d ? a.U.fa(f, d) : h.j();else {
          var l = N(c);ne(h, m) ? (k = b.w().j(), d = d.ad(c, h.j(), k), d = null != d ? h.j().Q(m).F(l, d) : h.j().Q(m)) : d = d.qc(m, b.w());f = null != d ? a.U.F(h.j(), m, d, l, e, f) : h.j();
        }
      }return pe(b, f, h.da || c.e(), a.U.Na());
    }function ze(a, b, c, d, e, f, h, k) {
      var m = b.w();h = h ? a.U : a.U.Ub();if (c.e()) d = h.ya(m.j(), d, null);else if (h.Na() && !m.Sb) d = m.j().F(c, d), d = h.ya(m.j(), d, null);else {
        var l = K(c);if (!me(m, c) && 1 < Ec(c)) return b;var u = N(c);d = m.j().Q(l).F(u, d);d = ".priority" == l ? h.fa(m.j(), d) : h.F(m.j(), l, d, u, te, null);
      }m = m.da || c.e();b = new oe(b.N, new je(d, m, h.Na()));return De(a, b, c, e, new ue(e, b, f), k);
    }
    function ye(a, b, c, d, e, f, h) {
      var k = b.N;e = new ue(e, b, f);if (c.e()) h = a.U.ya(b.N.j(), d, h), a = pe(b, h, !0, a.U.Na());else if (f = K(c), ".priority" === f) h = a.U.fa(b.N.j(), d), a = pe(b, h, k.da, k.Sb);else {
        c = N(c);var m = k.j().Q(f);if (!c.e()) {
          var l = e.Te(f);d = null != l ? ".priority" === Oc(c) && l.P(c.parent()).e() ? l : l.F(c, d) : L;
        }m.Z(d) ? a = b : (h = a.U.F(k.j(), f, d, c, e, h), a = pe(b, h, k.da, a.U.Na()));
      }return a;
    }
    function Ae(a, b, c, d, e, f, h) {
      var k = b;Hd(d, function (d, l) {
        var u = c.n(d);ne(b.N, K(u)) && (k = ye(a, k, u, l, e, f, h));
      });Hd(d, function (d, l) {
        var u = c.n(d);ne(b.N, K(u)) || (k = ye(a, k, u, l, e, f, h));
      });return k;
    }function Fe(a, b) {
      Hd(b, function (b, d) {
        a = a.F(b, d);
      });return a;
    }
    function Be(a, b, c, d, e, f, h, k) {
      if (b.w().j().e() && !ke(b.w())) return b;var m = b;c = c.e() ? d : Ad(R, c, d);var l = b.w().j();c.children.ha(function (c, d) {
        if (l.Da(c)) {
          var F = b.w().j().Q(c),
              F = Fe(F, d);m = ze(a, m, new E(c), F, e, f, h, k);
        }
      });c.children.ha(function (c, d) {
        var F = !ne(b.w(), c) && null == d.value;l.Da(c) || F || (F = b.w().j().Q(c), F = Fe(F, d), m = ze(a, m, new E(c), F, e, f, h, k));
      });return m;
    }
    function Ce(a, b, c, d, e, f, h) {
      if (null != e.lc(c)) return b;var k = le(b.w()),
          m = b.w();if (null != d.value) {
        if (c.e() && m.da || me(m, c)) return ze(a, b, c, m.j().P(c), e, f, k, h);if (c.e()) {
          var l = R;m.j().O(tc, function (a, b) {
            l = l.set(new E(a), b);
          });return Be(a, b, c, l, e, f, k, h);
        }return b;
      }l = R;Hd(d, function (a) {
        var b = c.n(a);me(m, b) && (l = l.set(a, m.j().P(b)));
      });return Be(a, b, c, l, e, f, k, h);
    };function Ge(a) {
      this.V = a;this.g = a.m.g;
    }function He(a, b, c, d) {
      var e = [],
          f = [];ya(b, function (b) {
        b.type === Ie && a.g.nd(b.qe, b.Ja) && f.push(new S(Je, b.Ja, b.Xa));
      });Ke(a, e, Le, b, d, c);Ke(a, e, Me, b, d, c);Ke(a, e, Je, f, d, c);Ke(a, e, Ie, b, d, c);Ke(a, e, Ne, b, d, c);return e;
    }function Ke(a, b, c, d, e, f) {
      d = za(d, function (a) {
        return a.type === c;
      });Ha(d, q(a.Ff, a));ya(d, function (c) {
        var d = Oe(a, c, f);ya(e, function (e) {
          e.nf(c.type) && b.push(e.createEvent(d, a.V));
        });
      });
    }
    function Oe(a, b, c) {
      "value" !== b.type && "child_removed" !== b.type && (b.Dd = c.Ve(b.Xa, b.Ja, a.g));return b;
    }Ge.prototype.Ff = function (a, b) {
      if (null == a.Xa || null == b.Xa) throw Mb("Should only compare child_ events.");return this.g.compare(new C(a.Xa, a.Ja), new C(b.Xa, b.Ja));
    };function Pe(a, b) {
      this.V = a;var c = a.m,
          d = new Qe(c.g),
          c = T(c) ? new Qe(c.g) : c.xa ? new Re(c) : new Se(c);this.hf = new we(c);var e = b.w(),
          f = b.N,
          h = d.ya(L, e.j(), null),
          k = c.ya(L, f.j(), null);this.Ka = new oe(new je(k, f.da, c.Na()), new je(h, e.da, d.Na()));this.Za = [];this.Jf = new Ge(a);
    }function Te(a) {
      return a.V;
    }g = Pe.prototype;g.w = function () {
      return this.Ka.w().j();
    };g.hb = function (a) {
      var b = re(this.Ka);return b && (T(this.V.m) || !a.e() && !b.Q(K(a)).e()) ? b.P(a) : null;
    };g.e = function () {
      return 0 === this.Za.length;
    };g.Nb = function (a) {
      this.Za.push(a);
    };
    g.kb = function (a, b) {
      var c = [];if (b) {
        D(null == a, "A cancel should cancel all event registrations.");var d = this.V.path;ya(this.Za, function (a) {
          (a = a.Me(b, d)) && c.push(a);
        });
      }if (a) {
        for (var e = [], f = 0; f < this.Za.length; ++f) {
          var h = this.Za[f];if (!h.matches(a)) e.push(h);else if (a.Xe()) {
            e = e.concat(this.Za.slice(f + 1));break;
          }
        }this.Za = e;
      } else this.Za = [];return c;
    };
    g.eb = function (a, b, c) {
      a.type === be && null !== a.source.Hb && (D(re(this.Ka), "We should always have a full cache before handling merges"), D(qe(this.Ka), "Missing event cache, even though we have a server cache"));var d = this.Ka;a = this.hf.eb(d, a, b, c);b = this.hf;c = a.Sd;D(c.N.j().yc(b.U.g), "Event snap not indexed");D(c.w().j().yc(b.U.g), "Server snap not indexed");D(ke(a.Sd.w()) || !ke(d.w()), "Once a server snap is complete, it should never go back");this.Ka = a.Sd;return Ue(this, a.Df, a.Sd.N.j(), null);
    };
    function Ve(a, b) {
      var c = a.Ka.N,
          d = [];c.j().J() || c.j().O(H, function (a, b) {
        d.push(new S(Me, b, a));
      });c.da && d.push(Ee(c.j()));return Ue(a, d, c.j(), b);
    }function Ue(a, b, c, d) {
      return He(a.Jf, b, c, d ? [d] : a.Za);
    };function We(a, b, c, d) {
      this.ae = b;this.Md = c;this.Dd = d;this.hd = a;
    }We.prototype.Yb = function () {
      var a = this.Md.wb();return "value" === this.hd ? a.path : a.getParent().path;
    };We.prototype.ge = function () {
      return this.hd;
    };We.prototype.Tb = function () {
      return this.ae.Tb(this);
    };We.prototype.toString = function () {
      return this.Yb().toString() + ":" + this.hd + ":" + x(this.Md.be());
    };function Xe(a, b, c) {
      this.ae = a;this.error = b;this.path = c;
    }Xe.prototype.Yb = function () {
      return this.path;
    };Xe.prototype.ge = function () {
      return "cancel";
    };
    Xe.prototype.Tb = function () {
      return this.ae.Tb(this);
    };Xe.prototype.toString = function () {
      return this.path.toString() + ":cancel";
    };function Ye() {
      this.vb = [];
    }function Ze(a, b) {
      for (var c = null, d = 0; d < b.length; d++) {
        var e = b[d],
            f = e.Yb();null === c || f.Z(c.Yb()) || (a.vb.push(c), c = null);null === c && (c = new $e(f));c.add(e);
      }c && a.vb.push(c);
    }function af(a, b, c) {
      Ze(a, c);bf(a, function (a) {
        return a.Z(b);
      });
    }function cf(a, b, c) {
      Ze(a, c);bf(a, function (a) {
        return a.contains(b) || b.contains(a);
      });
    }
    function bf(a, b) {
      for (var c = !0, d = 0; d < a.vb.length; d++) {
        var e = a.vb[d];if (e) if (e = e.Yb(), b(e)) {
          for (var e = a.vb[d], f = 0; f < e.jd.length; f++) {
            var h = e.jd[f];if (null !== h) {
              e.jd[f] = null;var k = h.Tb();Qb && I("event: " + h.toString());fc(k);
            }
          }a.vb[d] = null;
        } else c = !1;
      }c && (a.vb = []);
    }function $e(a) {
      this.qa = a;this.jd = [];
    }$e.prototype.add = function (a) {
      this.jd.push(a);
    };$e.prototype.Yb = function () {
      return this.qa;
    };function Qe(a) {
      this.g = a;
    }g = Qe.prototype;g.F = function (a, b, c, d, e, f) {
      D(a.yc(this.g), "A node must be indexed if only a child is updated");e = a.Q(b);if (e.P(d).Z(c.P(d)) && e.e() == c.e()) return a;null != f && (c.e() ? a.Da(b) ? df(f, new S(Le, e, b)) : D(a.J(), "A child remove without an old child only makes sense on a leaf node") : e.e() ? df(f, new S(Me, c, b)) : df(f, new S(Ie, c, b, e)));return a.J() && c.e() ? a : a.T(b, c).nb(this.g);
    };
    g.ya = function (a, b, c) {
      null != c && (a.J() || a.O(H, function (a, e) {
        b.Da(a) || df(c, new S(Le, e, a));
      }), b.J() || b.O(H, function (b, e) {
        if (a.Da(b)) {
          var f = a.Q(b);f.Z(e) || df(c, new S(Ie, e, b, f));
        } else df(c, new S(Me, e, b));
      }));return b.nb(this.g);
    };g.fa = function (a, b) {
      return a.e() ? L : a.fa(b);
    };g.Na = function () {
      return !1;
    };g.Ub = function () {
      return this;
    };function Se(a) {
      this.he = new Qe(a.g);this.g = a.g;var b;a.ka ? (b = ef(a), b = a.g.Ec(ff(a), b)) : b = a.g.Hc();this.Uc = b;a.na ? (b = gf(a), a = a.g.Ec(hf(a), b)) : a = a.g.Fc();this.vc = a;
    }g = Se.prototype;g.matches = function (a) {
      return 0 >= this.g.compare(this.Uc, a) && 0 >= this.g.compare(a, this.vc);
    };g.F = function (a, b, c, d, e, f) {
      this.matches(new C(b, c)) || (c = L);return this.he.F(a, b, c, d, e, f);
    };
    g.ya = function (a, b, c) {
      b.J() && (b = L);var d = b.nb(this.g),
          d = d.fa(L),
          e = this;b.O(H, function (a, b) {
        e.matches(new C(a, b)) || (d = d.T(a, L));
      });return this.he.ya(a, d, c);
    };g.fa = function (a) {
      return a;
    };g.Na = function () {
      return !0;
    };g.Ub = function () {
      return this.he;
    };function Re(a) {
      this.sa = new Se(a);this.g = a.g;D(a.xa, "Only valid if limit has been set");this.oa = a.oa;this.Ib = !jf(a);
    }g = Re.prototype;g.F = function (a, b, c, d, e, f) {
      this.sa.matches(new C(b, c)) || (c = L);return a.Q(b).Z(c) ? a : a.Eb() < this.oa ? this.sa.Ub().F(a, b, c, d, e, f) : kf(this, a, b, c, e, f);
    };
    g.ya = function (a, b, c) {
      var d;if (b.J() || b.e()) d = L.nb(this.g);else if (2 * this.oa < b.Eb() && b.yc(this.g)) {
        d = L.nb(this.g);b = this.Ib ? b.Zb(this.sa.vc, this.g) : b.Xb(this.sa.Uc, this.g);for (var e = 0; 0 < b.Pa.length && e < this.oa;) {
          var f = M(b),
              h;if (h = this.Ib ? 0 >= this.g.compare(this.sa.Uc, f) : 0 >= this.g.compare(f, this.sa.vc)) d = d.T(f.name, f.R), e++;else break;
        }
      } else {
        d = b.nb(this.g);d = d.fa(L);var k, m, l;if (this.Ib) {
          b = d.We(this.g);k = this.sa.vc;m = this.sa.Uc;var u = nc(this.g);l = function l(a, b) {
            return u(b, a);
          };
        } else b = d.Wb(this.g), k = this.sa.Uc, m = this.sa.vc, l = nc(this.g);for (var e = 0, z = !1; 0 < b.Pa.length;) {
          f = M(b), !z && 0 >= l(k, f) && (z = !0), (h = z && e < this.oa && 0 >= l(f, m)) ? e++ : d = d.T(f.name, L);
        }
      }return this.sa.Ub().ya(a, d, c);
    };g.fa = function (a) {
      return a;
    };g.Na = function () {
      return !0;
    };g.Ub = function () {
      return this.sa.Ub();
    };
    function kf(a, b, c, d, e, f) {
      var h;if (a.Ib) {
        var k = nc(a.g);h = function h(a, b) {
          return k(b, a);
        };
      } else h = nc(a.g);D(b.Eb() == a.oa, "");var m = new C(c, d),
          l = a.Ib ? pd(b, a.g) : qd(b, a.g),
          u = a.sa.matches(m);if (b.Da(c)) {
        for (var z = b.Q(c), l = e.fe(a.g, l, a.Ib); null != l && (l.name == c || b.Da(l.name));) {
          l = e.fe(a.g, l, a.Ib);
        }e = null == l ? 1 : h(l, m);if (u && !d.e() && 0 <= e) return null != f && df(f, new S(Ie, d, c, z)), b.T(c, d);null != f && df(f, new S(Le, z, c));b = b.T(c, L);return null != l && a.sa.matches(l) ? (null != f && df(f, new S(Me, l.R, l.name)), b.T(l.name, l.R)) : b;
      }return d.e() ? b : u && 0 <= h(l, m) ? (null != f && (df(f, new S(Le, l.R, l.name)), df(f, new S(Me, d, c))), b.T(c, d).T(l.name, L)) : b;
    };function S(a, b, c, d) {
      this.type = a;this.Ja = b;this.Xa = c;this.qe = d;this.Dd = void 0;
    }function Ee(a) {
      return new S(Ne, a);
    }var Me = "child_added",
        Le = "child_removed",
        Ie = "child_changed",
        Je = "child_moved",
        Ne = "value";function xe() {
      this.fb = {};
    }
    function df(a, b) {
      var c = b.type,
          d = b.Xa;D(c == Me || c == Ie || c == Le, "Only child changes supported for tracking");D(".priority" !== d, "Only non-priority child changes can be tracked.");var e = w(a.fb, d);if (e) {
        var f = e.type;if (c == Me && f == Le) a.fb[d] = new S(Ie, b.Ja, d, e.Ja);else if (c == Le && f == Me) delete a.fb[d];else if (c == Le && f == Ie) a.fb[d] = new S(Le, e.qe, d);else if (c == Ie && f == Me) a.fb[d] = new S(Me, b.Ja, d);else if (c == Ie && f == Ie) a.fb[d] = new S(Ie, b.Ja, d, e.qe);else throw Mb("Illegal combination of changes: " + b + " occurred after " + e);
      } else a.fb[d] = b;
    };function lf() {
      this.Rb = this.na = this.Kb = this.ka = this.xa = !1;this.oa = 0;this.mb = "";this.dc = null;this.zb = "";this.ac = null;this.xb = "";this.g = H;
    }var mf = new lf();function jf(a) {
      return "" === a.mb ? a.ka : "l" === a.mb;
    }function ff(a) {
      D(a.ka, "Only valid if start has been set");return a.dc;
    }function ef(a) {
      D(a.ka, "Only valid if start has been set");return a.Kb ? a.zb : "[MIN_NAME]";
    }function hf(a) {
      D(a.na, "Only valid if end has been set");return a.ac;
    }
    function gf(a) {
      D(a.na, "Only valid if end has been set");return a.Rb ? a.xb : "[MAX_NAME]";
    }function nf(a) {
      var b = new lf();b.xa = a.xa;b.oa = a.oa;b.ka = a.ka;b.dc = a.dc;b.Kb = a.Kb;b.zb = a.zb;b.na = a.na;b.ac = a.ac;b.Rb = a.Rb;b.xb = a.xb;b.g = a.g;b.mb = a.mb;return b;
    }g = lf.prototype;g.ne = function (a) {
      var b = nf(this);b.xa = !0;b.oa = a;b.mb = "l";return b;
    };g.oe = function (a) {
      var b = nf(this);b.xa = !0;b.oa = a;b.mb = "r";return b;
    };g.Nd = function (a, b) {
      var c = nf(this);c.ka = !0;n(a) || (a = null);c.dc = a;null != b ? (c.Kb = !0, c.zb = b) : (c.Kb = !1, c.zb = "");return c;
    };
    g.gd = function (a, b) {
      var c = nf(this);c.na = !0;n(a) || (a = null);c.ac = a;n(b) ? (c.Rb = !0, c.xb = b) : (c.vg = !1, c.xb = "");return c;
    };function of(a, b) {
      var c = nf(a);c.g = b;return c;
    }function pf(a) {
      var b = {};a.ka && (b.sp = a.dc, a.Kb && (b.sn = a.zb));a.na && (b.ep = a.ac, a.Rb && (b.en = a.xb));if (a.xa) {
        b.l = a.oa;var c = a.mb;"" === c && (c = jf(a) ? "l" : "r");b.vf = c;
      }a.g !== H && (b.i = a.g.toString());return b;
    }function T(a) {
      return !(a.ka || a.na || a.xa);
    }function qf(a) {
      return T(a) && a.g == H;
    }
    function rf(a) {
      var b = {};if (qf(a)) return b;var c;a.g === H ? c = "$priority" : a.g === wc ? c = "$value" : a.g === tc ? c = "$key" : (D(a.g instanceof pc, "Unrecognized index type!"), c = a.g.toString());b.orderBy = x(c);a.ka && (b.startAt = x(a.dc), a.Kb && (b.startAt += "," + x(a.zb)));a.na && (b.endAt = x(a.ac), a.Rb && (b.endAt += "," + x(a.xb)));a.xa && (jf(a) ? b.limitToFirst = a.oa : b.limitToLast = a.oa);return b;
    }g.toString = function () {
      return x(pf(this));
    };function sf(a) {
      this.W = a;
    }var tf = new sf(new vd(null));function uf(a, b, c) {
      if (b.e()) return new sf(new vd(c));var d = zd(a.W, b);if (null != d) {
        var e = d.path,
            d = d.value;b = P(e, b);d = d.F(b, c);return new sf(a.W.set(e, d));
      }a = Ad(a.W, b, new vd(c));return new sf(a);
    }function vf(a, b, c) {
      var d = a;fb(c, function (a, c) {
        d = uf(d, b.n(a), c);
      });return d;
    }sf.prototype.Ed = function (a) {
      if (a.e()) return tf;a = Ad(this.W, a, R);return new sf(a);
    };function wf(a, b) {
      var c = zd(a.W, b);return null != c ? a.W.get(c.path).P(P(c.path, b)) : null;
    }
    function xf(a) {
      var b = [],
          c = a.W.value;null != c ? c.J() || c.O(H, function (a, c) {
        b.push(new C(a, c));
      }) : a.W.children.ha(function (a, c) {
        null != c.value && b.push(new C(a, c.value));
      });return b;
    }function yf(a, b) {
      if (b.e()) return a;var c = wf(a, b);return null != c ? new sf(new vd(c)) : new sf(a.W.subtree(b));
    }sf.prototype.e = function () {
      return this.W.e();
    };sf.prototype.apply = function (a) {
      return zf(Q, this.W, a);
    };
    function zf(a, b, c) {
      if (null != b.value) return c.F(a, b.value);var d = null;b.children.ha(function (b, f) {
        ".priority" === b ? (D(null !== f.value, "Priority writes must always be leaf nodes"), d = f.value) : c = zf(a.n(b), f, c);
      });c.P(a).e() || null === d || (c = c.F(a.n(".priority"), d));return c;
    };function Af() {
      this.Jd = L;
    }Af.prototype.j = function (a) {
      return this.Jd.P(a);
    };Af.prototype.toString = function () {
      return this.Jd.toString();
    };function Bf(a) {
      this.oc = a;
    }Bf.prototype.getToken = function (a) {
      return this.oc.INTERNAL.getToken(a).then(null, function (a) {
        return a && "auth/token-not-initialized" === a.code ? (I("Got auth/token-not-initialized error.  Treating as null token."), null) : Promise.reject(a);
      });
    };function Cf(a, b) {
      a.oc.INTERNAL.addAuthTokenListener(b);
    };function Df() {
      this.S = tf;this.la = [];this.Bc = -1;
    }function Ef(a, b) {
      for (var c = 0; c < a.la.length; c++) {
        var d = a.la[c];if (d.Zc === b) return d;
      }return null;
    }g = Df.prototype;
    g.Ed = function (a) {
      var b = Ea(this.la, function (b) {
        return b.Zc === a;
      });D(0 <= b, "removeWrite called with nonexistent writeId.");var c = this.la[b];this.la.splice(b, 1);for (var d = c.visible, e = !1, f = this.la.length - 1; d && 0 <= f;) {
        var h = this.la[f];h.visible && (f >= b && Ff(h, c.path) ? d = !1 : c.path.contains(h.path) && (e = !0));f--;
      }if (d) {
        if (e) this.S = Gf(this.la, Hf, Q), this.Bc = 0 < this.la.length ? this.la[this.la.length - 1].Zc : -1;else if (c.Ga) this.S = this.S.Ed(c.path);else {
          var k = this;v(c.children, function (a, b) {
            k.S = k.S.Ed(c.path.n(b));
          });
        }return !0;
      }return !1;
    };
    g.Aa = function (a, b, c, d) {
      if (c || d) {
        var e = yf(this.S, a);return !d && e.e() ? b : d || null != b || null != wf(e, Q) ? (e = Gf(this.la, function (b) {
          return (b.visible || d) && (!c || !(0 <= xa(c, b.Zc))) && (b.path.contains(a) || a.contains(b.path));
        }, a), b = b || L, e.apply(b)) : null;
      }e = wf(this.S, a);if (null != e) return e;e = yf(this.S, a);return e.e() ? b : null != b || null != wf(e, Q) ? (b = b || L, e.apply(b)) : null;
    };
    g.rc = function (a, b) {
      var c = L,
          d = wf(this.S, a);if (d) d.J() || d.O(H, function (a, b) {
        c = c.T(a, b);
      });else if (b) {
        var e = yf(this.S, a);b.O(H, function (a, b) {
          var d = yf(e, new E(a)).apply(b);c = c.T(a, d);
        });ya(xf(e), function (a) {
          c = c.T(a.name, a.R);
        });
      } else e = yf(this.S, a), ya(xf(e), function (a) {
        c = c.T(a.name, a.R);
      });return c;
    };g.ad = function (a, b, c, d) {
      D(c || d, "Either existingEventSnap or existingServerSnap must exist");a = a.n(b);if (null != wf(this.S, a)) return null;a = yf(this.S, a);return a.e() ? d.P(b) : a.apply(d.P(b));
    };
    g.qc = function (a, b, c) {
      a = a.n(b);var d = wf(this.S, a);return null != d ? d : ne(c, b) ? yf(this.S, a).apply(c.j().Q(b)) : null;
    };g.lc = function (a) {
      return wf(this.S, a);
    };g.Xd = function (a, b, c, d, e, f) {
      var h;a = yf(this.S, a);h = wf(a, Q);if (null == h) if (null != b) h = a.apply(b);else return [];h = h.nb(f);if (h.e() || h.J()) return [];b = [];a = nc(f);e = e ? h.Zb(c, f) : h.Xb(c, f);for (f = M(e); f && b.length < d;) {
        0 !== a(f, c) && b.push(f), f = M(e);
      }return b;
    };
    function Ff(a, b) {
      return a.Ga ? a.path.contains(b) : !!Qa(a.children, function (c, d) {
        return a.path.n(d).contains(b);
      });
    }function Hf(a) {
      return a.visible;
    }
    function Gf(a, b, c) {
      for (var d = tf, e = 0; e < a.length; ++e) {
        var f = a[e];if (b(f)) {
          var h = f.path;if (f.Ga) c.contains(h) ? (h = P(c, h), d = uf(d, h, f.Ga)) : h.contains(c) && (h = P(h, c), d = uf(d, Q, f.Ga.P(h)));else if (f.children) {
            if (c.contains(h)) h = P(c, h), d = vf(d, h, f.children);else {
              if (h.contains(c)) if (h = P(h, c), h.e()) d = vf(d, Q, f.children);else if (f = w(f.children, K(h))) f = f.P(N(h)), d = uf(d, Q, f);
            }
          } else throw Mb("WriteRecord should have .snap or .children");
        }
      }return d;
    }function If(a, b) {
      this.Lb = a;this.W = b;
    }g = If.prototype;
    g.Aa = function (a, b, c) {
      return this.W.Aa(this.Lb, a, b, c);
    };g.rc = function (a) {
      return this.W.rc(this.Lb, a);
    };g.ad = function (a, b, c) {
      return this.W.ad(this.Lb, a, b, c);
    };g.lc = function (a) {
      return this.W.lc(this.Lb.n(a));
    };g.Xd = function (a, b, c, d, e) {
      return this.W.Xd(this.Lb, a, b, c, d, e);
    };g.qc = function (a, b) {
      return this.W.qc(this.Lb, a, b);
    };g.n = function (a) {
      return new If(this.Lb.n(a), this.W);
    };function Jf(a, b) {
      this.rf = {};this.Vc = new Kf(a);this.va = b;var c = 1E4 + 2E4 * Math.random();hc(q(this.lf, this), Math.floor(c));
    }Jf.prototype.lf = function () {
      var a = this.Vc.get(),
          b = {},
          c = !1,
          d;for (d in a) {
        0 < a[d] && eb(this.rf, d) && (b[d] = a[d], c = !0);
      }c && this.va.ye(b);hc(q(this.lf, this), Math.floor(6E5 * Math.random()));
    };function Lf() {
      this.tc = {};
    }function Mf(a, b, c) {
      n(c) || (c = 1);eb(a.tc, b) || (a.tc[b] = 0);a.tc[b] += c;
    }Lf.prototype.get = function () {
      return Ta(this.tc);
    };function Kf(a) {
      this.Ef = a;this.rd = null;
    }Kf.prototype.get = function () {
      var a = this.Ef.get(),
          b = Ta(a);if (this.rd) for (var c in this.rd) {
        b[c] -= this.rd[c];
      }this.rd = a;return b;
    };var Nf = {},
        Of = {};function Pf(a) {
      a = a.toString();Nf[a] || (Nf[a] = new Lf());return Nf[a];
    }function Qf(a, b) {
      var c = a.toString();Of[c] || (Of[c] = b());return Of[c];
    };function Rf(a, b, c) {
      this.f = Tb("p:rest:");this.L = a;this.Gb = b;this.$c = c;this.$ = {};
    }function Sf(a, b) {
      if (n(b)) return "tag$" + b;D(qf(a.m), "should have a tag if it's not a default query.");return a.path.toString();
    }g = Rf.prototype;
    g.$e = function (a, b, c, d) {
      var e = a.path.toString();this.f("Listen called for " + e + " " + a.ja());var f = Sf(a, c),
          h = {};this.$[f] = h;a = rf(a.m);var k = this;Tf(this, e + ".json", a, function (a, b) {
        var u = b;404 === a && (a = u = null);null === a && k.Gb(e, u, !1, c);w(k.$, f) === h && d(a ? 401 == a ? "permission_denied" : "rest_error:" + a : "ok", null);
      });
    };g.uf = function (a, b) {
      var c = Sf(a, b);delete this.$[c];
    };g.kf = function () {};g.re = function () {};g.cf = function () {};g.xd = function () {};g.put = function () {};g.af = function () {};g.ye = function () {};
    function Tf(a, b, c, d) {
      c = c || {};c.format = "export";a.$c.getToken(!1).then(function (e) {
        (e = e && e.accessToken) && (c.auth = e);var f = (a.L.Sc ? "https://" : "http://") + a.L.host + b + "?" + gb(c);a.f("Sending REST request for " + f);var h = new XMLHttpRequest();h.onreadystatechange = function () {
          if (d && 4 === h.readyState) {
            a.f("REST Response for " + f + " received. status:", h.status, "response:", h.responseText);var b = null;if (200 <= h.status && 300 > h.status) {
              try {
                b = lb(h.responseText);
              } catch (c) {
                J("Failed to parse JSON response for " + f + ": " + h.responseText);
              }d(null, b);
            } else 401 !== h.status && 404 !== h.status && J("Got unsuccessful REST response for " + f + " Status: " + h.status), d(h.status);d = null;
          }
        };h.open("GET", f, !0);h.send();
      });
    };function Uf(a) {
      this.te = a;this.Bd = [];this.Qb = 0;this.Yd = -1;this.Fb = null;
    }function Vf(a, b, c) {
      a.Yd = b;a.Fb = c;a.Yd < a.Qb && (a.Fb(), a.Fb = null);
    }function Wf(a, b, c) {
      for (a.Bd[b] = c; a.Bd[a.Qb];) {
        var d = a.Bd[a.Qb];delete a.Bd[a.Qb];for (var e = 0; e < d.length; ++e) {
          if (d[e]) {
            var f = a;fc(function () {
              f.te(d[e]);
            });
          }
        }if (a.Qb === a.Yd) {
          a.Fb && (clearTimeout(a.Fb), a.Fb(), a.Fb = null);break;
        }a.Qb++;
      }
    };var Cb = "websocket",
        Db = "long_polling";var Xf = null;"undefined" !== typeof MozWebSocket ? Xf = MozWebSocket : "undefined" !== typeof WebSocket && (Xf = WebSocket);function Yf(a, b, c, d) {
      this.Zd = a;this.f = Tb(this.Zd);this.frames = this.zc = null;this.pb = this.qb = this.Fe = 0;this.Va = Pf(b);a = { v: "5" };"undefined" !== typeof location && location.href && -1 !== location.href.indexOf("firebaseio.com") && (a.r = "f");c && (a.s = c);d && (a.ls = d);this.Ke = Bb(b, Cb, a);
    }var Zf;
    Yf.prototype.open = function (a, b) {
      this.ib = b;this.Xf = a;this.f("Websocket connecting to " + this.Ke);this.wc = !1;xb.set("previous_websocket_failure", !0);try {
        this.Ia = new Xf(this.Ke);
      } catch (c) {
        this.f("Error instantiating WebSocket.");var d = c.message || c.data;d && this.f(d);this.bb();return;
      }var e = this;this.Ia.onopen = function () {
        e.f("Websocket connected.");e.wc = !0;
      };this.Ia.onclose = function () {
        e.f("Websocket connection was disconnected.");e.Ia = null;e.bb();
      };this.Ia.onmessage = function (a) {
        if (null !== e.Ia) if (a = a.data, e.pb += a.length, Mf(e.Va, "bytes_received", a.length), $f(e), null !== e.frames) ag(e, a);else {
          a: {
            D(null === e.frames, "We already have a frame buffer");if (6 >= a.length) {
              var b = Number(a);if (!isNaN(b)) {
                e.Fe = b;e.frames = [];a = null;break a;
              }
            }e.Fe = 1;e.frames = [];
          }null !== a && ag(e, a);
        }
      };this.Ia.onerror = function (a) {
        e.f("WebSocket error.  Closing connection.");(a = a.message || a.data) && e.f(a);e.bb();
      };
    };Yf.prototype.start = function () {};
    Yf.isAvailable = function () {
      var a = !1;if ("undefined" !== typeof navigator && navigator.userAgent) {
        var b = navigator.userAgent.match(/Android ([0-9]{0,}\.[0-9]{0,})/);b && 1 < b.length && 4.4 > parseFloat(b[1]) && (a = !0);
      }return !a && null !== Xf && !Zf;
    };Yf.responsesRequiredToBeHealthy = 2;Yf.healthyTimeout = 3E4;g = Yf.prototype;g.sd = function () {
      xb.remove("previous_websocket_failure");
    };function ag(a, b) {
      a.frames.push(b);if (a.frames.length == a.Fe) {
        var c = a.frames.join("");a.frames = null;c = lb(c);a.Xf(c);
      }
    }
    g.send = function (a) {
      $f(this);a = x(a);this.qb += a.length;Mf(this.Va, "bytes_sent", a.length);a = bc(a, 16384);1 < a.length && bg(this, String(a.length));for (var b = 0; b < a.length; b++) {
        bg(this, a[b]);
      }
    };g.Tc = function () {
      this.Ab = !0;this.zc && (clearInterval(this.zc), this.zc = null);this.Ia && (this.Ia.close(), this.Ia = null);
    };g.bb = function () {
      this.Ab || (this.f("WebSocket is closing itself"), this.Tc(), this.ib && (this.ib(this.wc), this.ib = null));
    };g.close = function () {
      this.Ab || (this.f("WebSocket is being closed"), this.Tc());
    };
    function $f(a) {
      clearInterval(a.zc);a.zc = setInterval(function () {
        a.Ia && bg(a, "0");$f(a);
      }, Math.floor(45E3));
    }function bg(a, b) {
      try {
        a.Ia.send(b);
      } catch (c) {
        a.f("Exception thrown from WebSocket.send():", c.message || c.data, "Closing connection."), setTimeout(q(a.bb, a), 0);
      }
    };function cg(a, b, c, d) {
      this.Zd = a;this.f = Tb(a);this.jc = b;this.pb = this.qb = 0;this.Va = Pf(b);this.tf = c;this.wc = !1;this.Cb = d;this.Yc = function (a) {
        return Bb(b, Db, a);
      };
    }var dg, eg;
    cg.prototype.open = function (a, b) {
      this.Ne = 0;this.ia = b;this.bf = new Uf(a);this.Ab = !1;var c = this;this.sb = setTimeout(function () {
        c.f("Timed out trying to connect.");c.bb();c.sb = null;
      }, Math.floor(3E4));Yb(function () {
        if (!c.Ab) {
          c.Ta = new fg(function (a, b, d, k, m) {
            gg(c, arguments);if (c.Ta) if (c.sb && (clearTimeout(c.sb), c.sb = null), c.wc = !0, "start" == a) c.id = b, c.ff = d;else if ("close" === a) b ? (c.Ta.Kd = !1, Vf(c.bf, b, function () {
              c.bb();
            })) : c.bb();else throw Error("Unrecognized command received: " + a);
          }, function (a, b) {
            gg(c, arguments);
            Wf(c.bf, a, b);
          }, function () {
            c.bb();
          }, c.Yc);var a = { start: "t" };a.ser = Math.floor(1E8 * Math.random());c.Ta.Qd && (a.cb = c.Ta.Qd);a.v = "5";c.tf && (a.s = c.tf);c.Cb && (a.ls = c.Cb);"undefined" !== typeof location && location.href && -1 !== location.href.indexOf("firebaseio.com") && (a.r = "f");a = c.Yc(a);c.f("Connecting via long-poll to " + a);hg(c.Ta, a, function () {});
        }
      });
    };
    cg.prototype.start = function () {
      var a = this.Ta,
          b = this.ff;a.Vf = this.id;a.Wf = b;for (a.Ud = !0; ig(a);) {}a = this.id;b = this.ff;this.fc = document.createElement("iframe");var c = { dframe: "t" };c.id = a;c.pw = b;this.fc.src = this.Yc(c);this.fc.style.display = "none";document.body.appendChild(this.fc);
    };
    cg.isAvailable = function () {
      return dg || !eg && "undefined" !== typeof document && null != document.createElement && !("object" === typeof window && window.chrome && window.chrome.extension && !/^chrome/.test(window.location.href)) && !("object" === typeof Windows && "object" === typeof Windows.rg) && !0;
    };g = cg.prototype;g.sd = function () {};g.Tc = function () {
      this.Ab = !0;this.Ta && (this.Ta.close(), this.Ta = null);this.fc && (document.body.removeChild(this.fc), this.fc = null);this.sb && (clearTimeout(this.sb), this.sb = null);
    };
    g.bb = function () {
      this.Ab || (this.f("Longpoll is closing itself"), this.Tc(), this.ia && (this.ia(this.wc), this.ia = null));
    };g.close = function () {
      this.Ab || (this.f("Longpoll is being closed."), this.Tc());
    };g.send = function (a) {
      a = x(a);this.qb += a.length;Mf(this.Va, "bytes_sent", a.length);a = mb(a);a = ab(a, !0);a = bc(a, 1840);for (var b = 0; b < a.length; b++) {
        var c = this.Ta;c.Qc.push({ jg: this.Ne, pg: a.length, Pe: a[b] });c.Ud && ig(c);this.Ne++;
      }
    };function gg(a, b) {
      var c = x(b).length;a.pb += c;Mf(a.Va, "bytes_received", c);
    }
    function fg(a, b, c, d) {
      this.Yc = d;this.ib = c;this.ve = new Gc();this.Qc = [];this.$d = Math.floor(1E8 * Math.random());this.Kd = !0;this.Qd = Lb();window["pLPCommand" + this.Qd] = a;window["pRTLPCB" + this.Qd] = b;a = document.createElement("iframe");a.style.display = "none";if (document.body) {
        document.body.appendChild(a);try {
          a.contentWindow.document || I("No IE domain setting required");
        } catch (e) {
          a.src = "javascript:void((function(){document.open();document.domain='" + document.domain + "';document.close();})())";
        }
      } else throw "Document body has not initialized. Wait to initialize Firebase until after the document is ready.";
      a.contentDocument ? a.gb = a.contentDocument : a.contentWindow ? a.gb = a.contentWindow.document : a.document && (a.gb = a.document);this.Ea = a;a = "";this.Ea.src && "javascript:" === this.Ea.src.substr(0, 11) && (a = '<script>document.domain="' + document.domain + '";\x3c/script>');a = "<html><body>" + a + "</body></html>";try {
        this.Ea.gb.open(), this.Ea.gb.write(a), this.Ea.gb.close();
      } catch (f) {
        I("frame writing exception"), f.stack && I(f.stack), I(f);
      }
    }
    fg.prototype.close = function () {
      this.Ud = !1;if (this.Ea) {
        this.Ea.gb.body.innerHTML = "";var a = this;setTimeout(function () {
          null !== a.Ea && (document.body.removeChild(a.Ea), a.Ea = null);
        }, Math.floor(0));
      }var b = this.ib;b && (this.ib = null, b());
    };
    function ig(a) {
      if (a.Ud && a.Kd && a.ve.count() < (0 < a.Qc.length ? 2 : 1)) {
        a.$d++;var b = {};b.id = a.Vf;b.pw = a.Wf;b.ser = a.$d;for (var b = a.Yc(b), c = "", d = 0; 0 < a.Qc.length;) {
          if (1870 >= a.Qc[0].Pe.length + 30 + c.length) {
            var e = a.Qc.shift(),
                c = c + "&seg" + d + "=" + e.jg + "&ts" + d + "=" + e.pg + "&d" + d + "=" + e.Pe;d++;
          } else break;
        }jg(a, b + c, a.$d);return !0;
      }return !1;
    }function jg(a, b, c) {
      function d() {
        a.ve.remove(c);ig(a);
      }a.ve.add(c, 1);var e = setTimeout(d, Math.floor(25E3));hg(a, b, function () {
        clearTimeout(e);d();
      });
    }
    function hg(a, b, c) {
      setTimeout(function () {
        try {
          if (a.Kd) {
            var d = a.Ea.gb.createElement("script");d.type = "text/javascript";d.async = !0;d.src = b;d.onload = d.onreadystatechange = function () {
              var a = d.readyState;a && "loaded" !== a && "complete" !== a || (d.onload = d.onreadystatechange = null, d.parentNode && d.parentNode.removeChild(d), c());
            };d.onerror = function () {
              I("Long-poll script failed to load: " + b);a.Kd = !1;a.close();
            };a.Ea.gb.body.appendChild(d);
          }
        } catch (e) {}
      }, Math.floor(1));
    };function kg(a) {
      lg(this, a);
    }var mg = [cg, Yf];function lg(a, b) {
      var c = Yf && Yf.isAvailable(),
          d = c && !(xb.Ze || !0 === xb.get("previous_websocket_failure"));b.qg && (c || J("wss:// URL used, but browser isn't known to support websockets.  Trying anyway."), d = !0);if (d) a.Wc = [Yf];else {
        var e = a.Wc = [];cc(mg, function (a, b) {
          b && b.isAvailable() && e.push(b);
        });
      }
    }function ng(a) {
      if (0 < a.Wc.length) return a.Wc[0];throw Error("No transports available");
    };function og(a, b, c, d, e, f, h) {
      this.id = a;this.f = Tb("c:" + this.id + ":");this.te = c;this.Lc = d;this.ia = e;this.se = f;this.L = b;this.Ad = [];this.Le = 0;this.sf = new kg(b);this.Ua = 0;this.Cb = h;this.f("Connection created");pg(this);
    }
    function pg(a) {
      var b = ng(a.sf);a.I = new b("c:" + a.id + ":" + a.Le++, a.L, void 0, a.Cb);a.xe = b.responsesRequiredToBeHealthy || 0;var c = qg(a, a.I),
          d = rg(a, a.I);a.Xc = a.I;a.Rc = a.I;a.D = null;a.Bb = !1;setTimeout(function () {
        a.I && a.I.open(c, d);
      }, Math.floor(0));b = b.healthyTimeout || 0;0 < b && (a.md = hc(function () {
        a.md = null;a.Bb || (a.I && 102400 < a.I.pb ? (a.f("Connection exceeded healthy timeout but has received " + a.I.pb + " bytes.  Marking connection healthy."), a.Bb = !0, a.I.sd()) : a.I && 10240 < a.I.qb ? a.f("Connection exceeded healthy timeout but has sent " + a.I.qb + " bytes.  Leaving connection alive.") : (a.f("Closing unhealthy connection after timeout."), a.close()));
      }, Math.floor(b)));
    }function rg(a, b) {
      return function (c) {
        b === a.I ? (a.I = null, c || 0 !== a.Ua ? 1 === a.Ua && a.f("Realtime connection lost.") : (a.f("Realtime connection failed."), "s-" === a.L.$a.substr(0, 2) && (xb.remove("host:" + a.L.host), a.L.$a = a.L.host)), a.close()) : b === a.D ? (a.f("Secondary connection lost."), c = a.D, a.D = null, a.Xc !== c && a.Rc !== c || a.close()) : a.f("closing an old connection");
      };
    }
    function qg(a, b) {
      return function (c) {
        if (2 != a.Ua) if (b === a.Rc) {
          var d = $b("t", c);c = $b("d", c);if ("c" == d) {
            if (d = $b("t", c), "d" in c) if (c = c.d, "h" === d) {
              var d = c.ts,
                  e = c.v,
                  f = c.h;a.qf = c.s;Ab(a.L, f);0 == a.Ua && (a.I.start(), sg(a, a.I, d), "5" !== e && J("Protocol version mismatch detected"), c = a.sf, (c = 1 < c.Wc.length ? c.Wc[1] : null) && tg(a, c));
            } else if ("n" === d) {
              a.f("recvd end transmission on primary");a.Rc = a.D;for (c = 0; c < a.Ad.length; ++c) {
                a.wd(a.Ad[c]);
              }a.Ad = [];ug(a);
            } else "s" === d ? (a.f("Connection shutdown command received. Shutting down..."), a.se && (a.se(c), a.se = null), a.ia = null, a.close()) : "r" === d ? (a.f("Reset packet received.  New host: " + c), Ab(a.L, c), 1 === a.Ua ? a.close() : (vg(a), pg(a))) : "e" === d ? Ub("Server Error: " + c) : "o" === d ? (a.f("got pong on primary."), wg(a), xg(a)) : Ub("Unknown control packet command: " + d);
          } else "d" == d && a.wd(c);
        } else if (b === a.D) {
          if (d = $b("t", c), c = $b("d", c), "c" == d) "t" in c && (c = c.t, "a" === c ? yg(a) : "r" === c ? (a.f("Got a reset on secondary, closing it"), a.D.close(), a.Xc !== a.D && a.Rc !== a.D || a.close()) : "o" === c && (a.f("got pong on secondary."), a.pf--, yg(a)));else if ("d" == d) a.Ad.push(c);else throw Error("Unknown protocol layer: " + d);
        } else a.f("message on old connection");
      };
    }og.prototype.ua = function (a) {
      zg(this, { t: "d", d: a });
    };function ug(a) {
      a.Xc === a.D && a.Rc === a.D && (a.f("cleaning up and promoting a connection: " + a.D.Zd), a.I = a.D, a.D = null);
    }
    function yg(a) {
      0 >= a.pf ? (a.f("Secondary connection is healthy."), a.Bb = !0, a.D.sd(), a.D.start(), a.f("sending client ack on secondary"), a.D.send({ t: "c", d: { t: "a", d: {} } }), a.f("Ending transmission on primary"), a.I.send({ t: "c", d: { t: "n", d: {} } }), a.Xc = a.D, ug(a)) : (a.f("sending ping on secondary."), a.D.send({ t: "c", d: { t: "p", d: {} } }));
    }og.prototype.wd = function (a) {
      wg(this);this.te(a);
    };function wg(a) {
      a.Bb || (a.xe--, 0 >= a.xe && (a.f("Primary connection is healthy."), a.Bb = !0, a.I.sd()));
    }
    function tg(a, b) {
      a.D = new b("c:" + a.id + ":" + a.Le++, a.L, a.qf);a.pf = b.responsesRequiredToBeHealthy || 0;a.D.open(qg(a, a.D), rg(a, a.D));hc(function () {
        a.D && (a.f("Timed out trying to upgrade."), a.D.close());
      }, Math.floor(6E4));
    }function sg(a, b, c) {
      a.f("Realtime connection established.");a.I = b;a.Ua = 1;a.Lc && (a.Lc(c, a.qf), a.Lc = null);0 === a.xe ? (a.f("Primary connection is healthy."), a.Bb = !0) : hc(function () {
        xg(a);
      }, Math.floor(5E3));
    }
    function xg(a) {
      a.Bb || 1 !== a.Ua || (a.f("sending ping on primary."), zg(a, { t: "c", d: { t: "p", d: {} } }));
    }function zg(a, b) {
      if (1 !== a.Ua) throw "Connection is not connected";a.Xc.send(b);
    }og.prototype.close = function () {
      2 !== this.Ua && (this.f("Closing realtime connection."), this.Ua = 2, vg(this), this.ia && (this.ia(), this.ia = null));
    };function vg(a) {
      a.f("Shutting down all connections");a.I && (a.I.close(), a.I = null);a.D && (a.D.close(), a.D = null);a.md && (clearTimeout(a.md), a.md = null);
    };function Ag(a, b, c, d, e, f) {
      this.id = Bg++;this.f = Tb("p:" + this.id + ":");this.qd = {};this.$ = {};this.pa = [];this.Oc = 0;this.Kc = [];this.ma = !1;this.Sa = 1E3;this.td = 3E5;this.Gb = b;this.Jc = c;this.ue = d;this.L = a;this.ob = this.Fa = this.Cb = this.ze = null;this.$c = e;this.de = !1;this.ke = 0;if (f) throw Error("Auth override specified in options, but not supported on non Node.js platforms");this.Vd = f;this.ub = null;this.Mb = !1;this.Gd = {};this.ig = 0;this.Re = !0;this.Ac = this.me = null;Cg(this, 0);Mc.Vb().gc("visible", this.Zf, this);-1 === a.host.indexOf("fblocal") && Lc.Vb().gc("online", this.Yf, this);
    }var Bg = 0,
        Dg = 0;g = Ag.prototype;g.ua = function (a, b, c) {
      var d = ++this.ig;a = { r: d, a: a, b: b };this.f(x(a));D(this.ma, "sendRequest call when we're not connected not allowed.");this.Fa.ua(a);c && (this.Gd[d] = c);
    };
    g.$e = function (a, b, c, d) {
      var e = a.ja(),
          f = a.path.toString();this.f("Listen called for " + f + " " + e);this.$[f] = this.$[f] || {};D(qf(a.m) || !T(a.m), "listen() called for non-default but complete query");D(!this.$[f][e], "listen() called twice for same path/queryId.");a = { G: d, ld: b, eg: a, tag: c };this.$[f][e] = a;this.ma && Eg(this, a);
    };
    function Eg(a, b) {
      var c = b.eg,
          d = c.path.toString(),
          e = c.ja();a.f("Listen on " + d + " for " + e);var f = { p: d };b.tag && (f.q = pf(c.m), f.t = b.tag);f.h = b.ld();a.ua("q", f, function (f) {
        var k = f.d,
            m = f.s;if (k && "object" === typeof k && eb(k, "w")) {
          var l = w(k, "w");ea(l) && 0 <= xa(l, "no_index") && J("Using an unspecified index. Consider adding " + ('".indexOn": "' + c.m.g.toString() + '"') + " at " + c.path.toString() + " to your security rules for better performance");
        }(a.$[d] && a.$[d][e]) === b && (a.f("listen response", f), "ok" !== m && Fg(a, d, e), b.G && b.G(m, k));
      });
    }g.kf = function (a) {
      this.ob = a;this.f("Auth token refreshed");this.ob ? Gg(this) : this.ma && this.ua("unauth", {}, function () {});if (a && 40 === a.length || kc(a)) this.f("Admin auth credential detected.  Reducing max reconnect time."), this.td = 3E4;
    };function Gg(a) {
      if (a.ma && a.ob) {
        var b = a.ob,
            c = jc(b) ? "auth" : "gauth",
            d = { cred: b };null === a.Vd ? d.noauth = !0 : "object" === typeof a.Vd && (d.authvar = a.Vd);a.ua(c, d, function (c) {
          var d = c.s;c = c.d || "error";a.ob === b && ("ok" === d ? a.ke = 0 : Hg(a, d, c));
        });
      }
    }
    g.uf = function (a, b) {
      var c = a.path.toString(),
          d = a.ja();this.f("Unlisten called for " + c + " " + d);D(qf(a.m) || !T(a.m), "unlisten() called for non-default but complete query");if (Fg(this, c, d) && this.ma) {
        var e = pf(a.m);this.f("Unlisten on " + c + " for " + d);c = { p: c };b && (c.q = e, c.t = b);this.ua("n", c);
      }
    };g.re = function (a, b, c) {
      this.ma ? Ig(this, "o", a, b, c) : this.Kc.push({ we: a, action: "o", data: b, G: c });
    };g.cf = function (a, b, c) {
      this.ma ? Ig(this, "om", a, b, c) : this.Kc.push({ we: a, action: "om", data: b, G: c });
    };
    g.xd = function (a, b) {
      this.ma ? Ig(this, "oc", a, null, b) : this.Kc.push({ we: a, action: "oc", data: null, G: b });
    };function Ig(a, b, c, d, e) {
      c = { p: c, d: d };a.f("onDisconnect " + b, c);a.ua(b, c, function (a) {
        e && setTimeout(function () {
          e(a.s, a.d);
        }, Math.floor(0));
      });
    }g.put = function (a, b, c, d) {
      Jg(this, "p", a, b, c, d);
    };g.af = function (a, b, c, d) {
      Jg(this, "m", a, b, c, d);
    };function Jg(a, b, c, d, e, f) {
      d = { p: c, d: d };n(f) && (d.h = f);a.pa.push({ action: b, mf: d, G: e });a.Oc++;b = a.pa.length - 1;a.ma ? Kg(a, b) : a.f("Buffering put: " + c);
    }
    function Kg(a, b) {
      var c = a.pa[b].action,
          d = a.pa[b].mf,
          e = a.pa[b].G;a.pa[b].fg = a.ma;a.ua(c, d, function (d) {
        a.f(c + " response", d);delete a.pa[b];a.Oc--;0 === a.Oc && (a.pa = []);e && e(d.s, d.d);
      });
    }g.ye = function (a) {
      this.ma && (a = { c: a }, this.f("reportStats", a), this.ua("s", a, function (a) {
        "ok" !== a.s && this.f("reportStats", "Error sending stats: " + a.d);
      }));
    };
    g.wd = function (a) {
      if ("r" in a) {
        this.f("from server: " + x(a));var b = a.r,
            c = this.Gd[b];c && (delete this.Gd[b], c(a.b));
      } else {
        if ("error" in a) throw "A server-side error has occurred: " + a.error;"a" in a && (b = a.a, a = a.b, this.f("handleServerMessage", b, a), "d" === b ? this.Gb(a.p, a.d, !1, a.t) : "m" === b ? this.Gb(a.p, a.d, !0, a.t) : "c" === b ? Lg(this, a.p, a.q) : "ac" === b ? Hg(this, a.s, a.d) : "sd" === b ? this.ze ? this.ze(a) : "msg" in a && "undefined" !== typeof console && console.log("FIREBASE: " + a.msg.replace("\n", "\nFIREBASE: ")) : Ub("Unrecognized action received from server: " + x(b) + "\nAre you using the latest client?"));
      }
    };g.Lc = function (a, b) {
      this.f("connection ready");this.ma = !0;this.Ac = new Date().getTime();this.ue({ serverTimeOffset: a - new Date().getTime() });this.Cb = b;if (this.Re) {
        var c = {};c["sdk.js." + firebase.SDK_VERSION.replace(/\./g, "-")] = 1;pb() ? c["framework.cordova"] = 1 : "object" === typeof navigator && "ReactNative" === navigator.product && (c["framework.reactnative"] = 1);this.ye(c);
      }Mg(this);this.Re = !1;this.Jc(!0);
    };
    function Cg(a, b) {
      D(!a.Fa, "Scheduling a connect when we're already connected/ing?");a.ub && clearTimeout(a.ub);a.ub = setTimeout(function () {
        a.ub = null;Ng(a);
      }, Math.floor(b));
    }g.Zf = function (a) {
      a && !this.Mb && this.Sa === this.td && (this.f("Window became visible.  Reducing delay."), this.Sa = 1E3, this.Fa || Cg(this, 0));this.Mb = a;
    };g.Yf = function (a) {
      a ? (this.f("Browser went online."), this.Sa = 1E3, this.Fa || Cg(this, 0)) : (this.f("Browser went offline.  Killing connection."), this.Fa && this.Fa.close());
    };
    g.df = function () {
      this.f("data client disconnected");this.ma = !1;this.Fa = null;for (var a = 0; a < this.pa.length; a++) {
        var b = this.pa[a];b && "h" in b.mf && b.fg && (b.G && b.G("disconnect"), delete this.pa[a], this.Oc--);
      }0 === this.Oc && (this.pa = []);this.Gd = {};Og(this) && (this.Mb ? this.Ac && (3E4 < new Date().getTime() - this.Ac && (this.Sa = 1E3), this.Ac = null) : (this.f("Window isn't visible.  Delaying reconnect."), this.Sa = this.td, this.me = new Date().getTime()), a = Math.max(0, this.Sa - (new Date().getTime() - this.me)), a *= Math.random(), this.f("Trying to reconnect in " + a + "ms"), Cg(this, a), this.Sa = Math.min(this.td, 1.3 * this.Sa));this.Jc(!1);
    };
    function Ng(a) {
      if (Og(a)) {
        a.f("Making a connection attempt");a.me = new Date().getTime();a.Ac = null;var b = q(a.wd, a),
            c = q(a.Lc, a),
            d = q(a.df, a),
            e = a.id + ":" + Dg++,
            f = a.Cb,
            h = !1,
            k = null,
            m = function m() {
          k ? k.close() : (h = !0, d());
        };a.Fa = { close: m, ua: function ua(a) {
            D(k, "sendRequest call when we're not connected not allowed.");k.ua(a);
          } };var l = a.de;a.de = !1;a.$c.getToken(l).then(function (l) {
          h ? I("getToken() completed but was canceled") : (I("getToken() completed. Creating connection."), a.ob = l && l.accessToken, k = new og(e, a.L, b, c, d, function (b) {
            J(b + " (" + a.L.toString() + ")");a.ab("server_kill");
          }, f));
        }).then(null, function (b) {
          a.f("Failed to get token: " + b);h || m();
        });
      }
    }g.ab = function (a) {
      I("Interrupting connection for reason: " + a);this.qd[a] = !0;this.Fa ? this.Fa.close() : (this.ub && (clearTimeout(this.ub), this.ub = null), this.ma && this.df());
    };g.kc = function (a) {
      I("Resuming connection for reason: " + a);delete this.qd[a];Sa(this.qd) && (this.Sa = 1E3, this.Fa || Cg(this, 0));
    };
    function Lg(a, b, c) {
      c = c ? Aa(c, function (a) {
        return ac(a);
      }).join("$") : "default";(a = Fg(a, b, c)) && a.G && a.G("permission_denied");
    }function Fg(a, b, c) {
      b = new E(b).toString();var d;n(a.$[b]) ? (d = a.$[b][c], delete a.$[b][c], 0 === La(a.$[b]) && delete a.$[b]) : d = void 0;return d;
    }
    function Hg(a, b, c) {
      I("Auth token revoked: " + b + "/" + c);a.ob = null;a.de = !0;a.Fa.close();if ("invalid_token" === b || "permission_denied" === b) a.ke++, 3 <= a.ke && (a.Sa = 3E4, a = a.$c, b = 'Provided authentication credentials for the app named "' + a.oc.name + '" are invalid. This usually indicates your app was not initialized correctly. ', b = "credential" in a.oc.options ? b + 'Make sure the "credential" property provided to initializeApp() is authorized to access the specified "databaseURL" and is from the correct project.' : "serviceAccount" in a.oc.options ? b + 'Make sure the "serviceAccount" property provided to initializeApp() is authorized to access the specified "databaseURL" and is from the correct project.' : b + 'Make sure the "apiKey" and "databaseURL" properties provided to initializeApp() match the values provided for your app at https://console.firebase.google.com/.', J(b));
    }
    function Mg(a) {
      Gg(a);v(a.$, function (b) {
        v(b, function (b) {
          Eg(a, b);
        });
      });for (var b = 0; b < a.pa.length; b++) {
        a.pa[b] && Kg(a, b);
      }for (; a.Kc.length;) {
        b = a.Kc.shift(), Ig(a, b.action, b.we, b.data, b.G);
      }
    }function Og(a) {
      var b;b = Lc.Vb().hc;return Sa(a.qd) && b;
    };function Pg(a) {
      a instanceof Qg || Vb("Don't call new Database() directly - please use firebase.database().");this.ta = a;this.ba = new U(a, Q);this.INTERNAL = new Rg(this);
    }var Sg = { TIMESTAMP: { ".sv": "timestamp" } };g = Pg.prototype;g.app = null;g.jf = function (a) {
      Tg(this, "ref");y("database.ref", 0, 1, arguments.length);return n(a) ? this.ba.n(a) : this.ba;
    };
    g.gg = function (a) {
      Tg(this, "database.refFromURL");y("database.refFromURL", 1, 1, arguments.length);var b = Wb(a);Xd("database.refFromURL", b);var c = b.jc;c.host !== this.ta.L.host && Vb("database.refFromURL: Host name does not match the current database: (found " + c.host + " but expected " + this.ta.L.host + ")");return this.jf(b.path.toString());
    };function Tg(a, b) {
      null === a.ta && Vb("Cannot call " + b + " on a deleted database.");
    }g.Pf = function () {
      y("database.goOffline", 0, 0, arguments.length);Tg(this, "goOffline");this.ta.ab();
    };
    g.Qf = function () {
      y("database.goOnline", 0, 0, arguments.length);Tg(this, "goOnline");this.ta.kc();
    };Object.defineProperty(Pg.prototype, "app", { get: function get() {
        return this.ta.app;
      } });function Rg(a) {
      this.Ya = a;
    }Rg.prototype.delete = function () {
      Tg(this.Ya, "delete");var a = Ug.Vb(),
          b = this.Ya.ta;w(a.lb, b.app.name) !== b && Vb("Database " + b.app.name + " has already been deleted.");b.ab();delete a.lb[b.app.name];this.Ya.ta = null;this.Ya.ba = null;this.Ya = this.Ya.INTERNAL = null;return firebase.Promise.resolve();
    };
    Pg.prototype.ref = Pg.prototype.jf;Pg.prototype.refFromURL = Pg.prototype.gg;Pg.prototype.goOnline = Pg.prototype.Qf;Pg.prototype.goOffline = Pg.prototype.Pf;Rg.prototype["delete"] = Rg.prototype.delete;function V(a, b, c) {
      this.A = a;this.V = b;this.g = c;
    }V.prototype.H = function () {
      y("Firebase.DataSnapshot.val", 0, 0, arguments.length);return this.A.H();
    };V.prototype.val = V.prototype.H;V.prototype.be = function () {
      y("Firebase.DataSnapshot.exportVal", 0, 0, arguments.length);return this.A.H(!0);
    };V.prototype.exportVal = V.prototype.be;V.prototype.toJSON = function () {
      y("Firebase.DataSnapshot.toJSON", 0, 1, arguments.length);return this.be();
    };V.prototype.toJSON = V.prototype.toJSON;
    V.prototype.Lf = function () {
      y("Firebase.DataSnapshot.exists", 0, 0, arguments.length);return !this.A.e();
    };V.prototype.exists = V.prototype.Lf;V.prototype.n = function (a) {
      y("Firebase.DataSnapshot.child", 0, 1, arguments.length);ga(a) && (a = String(a));Vd("Firebase.DataSnapshot.child", a);var b = new E(a),
          c = this.V.n(b);return new V(this.A.P(b), c, H);
    };V.prototype.child = V.prototype.n;
    V.prototype.Da = function (a) {
      y("Firebase.DataSnapshot.hasChild", 1, 1, arguments.length);Vd("Firebase.DataSnapshot.hasChild", a);var b = new E(a);return !this.A.P(b).e();
    };V.prototype.hasChild = V.prototype.Da;V.prototype.C = function () {
      y("Firebase.DataSnapshot.getPriority", 0, 0, arguments.length);return this.A.C().H();
    };V.prototype.getPriority = V.prototype.C;
    V.prototype.forEach = function (a) {
      y("Firebase.DataSnapshot.forEach", 1, 1, arguments.length);B("Firebase.DataSnapshot.forEach", 1, a, !1);if (this.A.J()) return !1;var b = this;return !!this.A.O(this.g, function (c, d) {
        return a(new V(d, b.V.n(c), H));
      });
    };V.prototype.forEach = V.prototype.forEach;V.prototype.kd = function () {
      y("Firebase.DataSnapshot.hasChildren", 0, 0, arguments.length);return this.A.J() ? !1 : !this.A.e();
    };V.prototype.hasChildren = V.prototype.kd;
    V.prototype.getKey = function () {
      y("Firebase.DataSnapshot.key", 0, 0, arguments.length);return this.V.getKey();
    };gc(V.prototype, "key", V.prototype.getKey);V.prototype.Eb = function () {
      y("Firebase.DataSnapshot.numChildren", 0, 0, arguments.length);return this.A.Eb();
    };V.prototype.numChildren = V.prototype.Eb;V.prototype.wb = function () {
      y("Firebase.DataSnapshot.ref", 0, 0, arguments.length);return this.V;
    };gc(V.prototype, "ref", V.prototype.wb);function Vg(a, b, c) {
      this.Pb = a;this.rb = b;this.tb = c || null;
    }g = Vg.prototype;g.nf = function (a) {
      return "value" === a;
    };g.createEvent = function (a, b) {
      var c = b.m.g;return new We("value", this, new V(a.Ja, b.wb(), c));
    };g.Tb = function (a) {
      var b = this.tb;if ("cancel" === a.ge()) {
        D(this.rb, "Raising a cancel event on a listener with no cancel callback");var c = this.rb;return function () {
          c.call(b, a.error);
        };
      }var d = this.Pb;return function () {
        d.call(b, a.Md);
      };
    };g.Me = function (a, b) {
      return this.rb ? new Xe(this, a, b) : null;
    };
    g.matches = function (a) {
      return a instanceof Vg ? a.Pb && this.Pb ? a.Pb === this.Pb && a.tb === this.tb : !0 : !1;
    };g.Xe = function () {
      return null !== this.Pb;
    };function Wg(a, b, c) {
      this.ga = a;this.rb = b;this.tb = c;
    }g = Wg.prototype;g.nf = function (a) {
      a = "children_added" === a ? "child_added" : a;return ("children_removed" === a ? "child_removed" : a) in this.ga;
    };g.Me = function (a, b) {
      return this.rb ? new Xe(this, a, b) : null;
    };
    g.createEvent = function (a, b) {
      D(null != a.Xa, "Child events should have a childName.");var c = b.wb().n(a.Xa);return new We(a.type, this, new V(a.Ja, c, b.m.g), a.Dd);
    };g.Tb = function (a) {
      var b = this.tb;if ("cancel" === a.ge()) {
        D(this.rb, "Raising a cancel event on a listener with no cancel callback");var c = this.rb;return function () {
          c.call(b, a.error);
        };
      }var d = this.ga[a.hd];return function () {
        d.call(b, a.Md, a.Dd);
      };
    };
    g.matches = function (a) {
      if (a instanceof Wg) {
        if (!this.ga || !a.ga) return !0;if (this.tb === a.tb) {
          var b = La(a.ga);if (b === La(this.ga)) {
            if (1 === b) {
              var b = Ma(a.ga),
                  c = Ma(this.ga);return c === b && (!a.ga[b] || !this.ga[c] || a.ga[b] === this.ga[c]);
            }return Ka(this.ga, function (b, c) {
              return a.ga[c] === b;
            });
          }
        }
      }return !1;
    };g.Xe = function () {
      return null !== this.ga;
    };function Xg() {
      this.za = {};
    }g = Xg.prototype;g.e = function () {
      return Sa(this.za);
    };g.eb = function (a, b, c) {
      var d = a.source.Hb;if (null !== d) return d = w(this.za, d), D(null != d, "SyncTree gave us an op for an invalid query."), d.eb(a, b, c);var e = [];v(this.za, function (d) {
        e = e.concat(d.eb(a, b, c));
      });return e;
    };g.Nb = function (a, b, c, d, e) {
      var f = a.ja(),
          h = w(this.za, f);if (!h) {
        var h = c.Aa(e ? d : null),
            k = !1;h ? k = !0 : (h = d instanceof O ? c.rc(d) : L, k = !1);h = new Pe(a, new oe(new je(h, k, !1), new je(d, e, !1)));this.za[f] = h;
      }h.Nb(b);return Ve(h, b);
    };
    g.kb = function (a, b, c) {
      var d = a.ja(),
          e = [],
          f = [],
          h = null != Yg(this);if ("default" === d) {
        var k = this;v(this.za, function (a, d) {
          f = f.concat(a.kb(b, c));a.e() && (delete k.za[d], T(a.V.m) || e.push(a.V));
        });
      } else {
        var m = w(this.za, d);m && (f = f.concat(m.kb(b, c)), m.e() && (delete this.za[d], T(m.V.m) || e.push(m.V)));
      }h && null == Yg(this) && e.push(new U(a.u, a.path));return { hg: e, Kf: f };
    };function Zg(a) {
      return za(Na(a.za), function (a) {
        return !T(a.V.m);
      });
    }g.hb = function (a) {
      var b = null;v(this.za, function (c) {
        b = b || c.hb(a);
      });return b;
    };
    function $g(a, b) {
      if (T(b.m)) return Yg(a);var c = b.ja();return w(a.za, c);
    }function Yg(a) {
      return Ra(a.za, function (a) {
        return T(a.V.m);
      }) || null;
    };function ah(a) {
      this.wa = R;this.jb = new Df();this.De = {};this.ic = {};this.Cc = a;
    }function bh(a, b, c, d, e) {
      var f = a.jb,
          h = e;D(d > f.Bc, "Stacking an older write on top of newer ones");n(h) || (h = !0);f.la.push({ path: b, Ga: c, Zc: d, visible: h });h && (f.S = uf(f.S, b, c));f.Bc = d;return e ? ch(a, new ce(fe, b, c)) : [];
    }function dh(a, b, c, d) {
      var e = a.jb;D(d > e.Bc, "Stacking an older merge on top of newer ones");e.la.push({ path: b, children: c, Zc: d, visible: !0 });e.S = vf(e.S, b, c);e.Bc = d;c = xd(c);return ch(a, new ae(fe, b, c));
    }
    function eh(a, b, c) {
      c = c || !1;var d = Ef(a.jb, b);if (a.jb.Ed(b)) {
        var e = R;null != d.Ga ? e = e.set(Q, !0) : fb(d.children, function (a, b) {
          e = e.set(new E(a), b);
        });return ch(a, new de(d.path, e, c));
      }return [];
    }function fh(a, b, c) {
      c = xd(c);return ch(a, new ae(ie, b, c));
    }function gh(a, b, c, d) {
      d = hh(a, d);if (null != d) {
        var e = ih(d);d = e.path;e = e.Hb;b = P(d, b);c = new ce(new he(!1, !0, e, !0), b, c);return jh(a, d, c);
      }return [];
    }
    function kh(a, b, c, d) {
      if (d = hh(a, d)) {
        var e = ih(d);d = e.path;e = e.Hb;b = P(d, b);c = xd(c);c = new ae(new he(!1, !0, e, !0), b, c);return jh(a, d, c);
      }return [];
    }
    ah.prototype.Nb = function (a, b) {
      var c = a.path,
          d = null,
          e = !1;Fd(this.wa, c, function (a, b) {
        var f = P(a, c);d = d || b.hb(f);e = e || null != Yg(b);
      });var f = this.wa.get(c);f ? (e = e || null != Yg(f), d = d || f.hb(Q)) : (f = new Xg(), this.wa = this.wa.set(c, f));var h;null != d ? h = !0 : (h = !1, d = L, Jd(this.wa.subtree(c), function (a, b) {
        var c = b.hb(Q);c && (d = d.T(a, c));
      }));var k = null != $g(f, a);if (!k && !T(a.m)) {
        var m = lh(a);D(!(m in this.ic), "View does not exist, but we have a tag");var l = mh++;this.ic[m] = l;this.De["_" + l] = m;
      }h = f.Nb(a, b, new If(c, this.jb), d, h);k || e || (f = $g(f, a), h = h.concat(nh(this, a, f)));return h;
    };
    ah.prototype.kb = function (a, b, c) {
      var d = a.path,
          e = this.wa.get(d),
          f = [];if (e && ("default" === a.ja() || null != $g(e, a))) {
        f = e.kb(a, b, c);e.e() && (this.wa = this.wa.remove(d));e = f.hg;f = f.Kf;b = -1 !== Ea(e, function (a) {
          return T(a.m);
        });var h = Dd(this.wa, d, function (a, b) {
          return null != Yg(b);
        });if (b && !h && (d = this.wa.subtree(d), !d.e())) for (var d = oh(d), k = 0; k < d.length; ++k) {
          var m = d[k],
              l = m.V,
              m = ph(this, m);this.Cc.Ae(qh(l), rh(this, l), m.ld, m.G);
        }if (!h && 0 < e.length && !c) if (b) this.Cc.Od(qh(a), null);else {
          var u = this;ya(e, function (a) {
            a.ja();
            var b = u.ic[lh(a)];u.Cc.Od(qh(a), b);
          });
        }sh(this, e);
      }return f;
    };ah.prototype.Aa = function (a, b) {
      var c = this.jb,
          d = Dd(this.wa, a, function (b, c) {
        var d = P(b, a);if (d = c.hb(d)) return d;
      });return c.Aa(a, d, b, !0);
    };function oh(a) {
      return Bd(a, function (a, c, d) {
        if (c && null != Yg(c)) return [Yg(c)];var e = [];c && (e = Zg(c));v(d, function (a) {
          e = e.concat(a);
        });return e;
      });
    }function sh(a, b) {
      for (var c = 0; c < b.length; ++c) {
        var d = b[c];if (!T(d.m)) {
          var d = lh(d),
              e = a.ic[d];delete a.ic[d];delete a.De["_" + e];
        }
      }
    }
    function qh(a) {
      return T(a.m) && !qf(a.m) ? a.wb() : a;
    }function nh(a, b, c) {
      var d = b.path,
          e = rh(a, b);c = ph(a, c);b = a.Cc.Ae(qh(b), e, c.ld, c.G);d = a.wa.subtree(d);if (e) D(null == Yg(d.value), "If we're adding a query, it shouldn't be shadowed");else for (e = Bd(d, function (a, b, c) {
        if (!a.e() && b && null != Yg(b)) return [Te(Yg(b))];var d = [];b && (d = d.concat(Aa(Zg(b), function (a) {
          return a.V;
        })));v(c, function (a) {
          d = d.concat(a);
        });return d;
      }), d = 0; d < e.length; ++d) {
        c = e[d], a.Cc.Od(qh(c), rh(a, c));
      }return b;
    }
    function ph(a, b) {
      var c = b.V,
          d = rh(a, c);return { ld: function ld() {
          return (b.w() || L).hash();
        }, G: function G(b) {
          if ("ok" === b) {
            if (d) {
              var f = c.path;if (b = hh(a, d)) {
                var h = ih(b);b = h.path;h = h.Hb;f = P(b, f);f = new Zd(new he(!1, !0, h, !0), f);b = jh(a, b, f);
              } else b = [];
            } else b = ch(a, new Zd(ie, c.path));return b;
          }f = "Unknown Error";"too_big" === b ? f = "The data requested exceeds the maximum size that can be accessed with a single request." : "permission_denied" == b ? f = "Client doesn't have permission to access the desired data." : "unavailable" == b && (f = "The service is unavailable");f = Error(b + " at " + c.path.toString() + ": " + f);f.code = b.toUpperCase();return a.kb(c, null, f);
        } };
    }function lh(a) {
      return a.path.toString() + "$" + a.ja();
    }function ih(a) {
      var b = a.indexOf("$");D(-1 !== b && b < a.length - 1, "Bad queryKey.");return { Hb: a.substr(b + 1), path: new E(a.substr(0, b)) };
    }function hh(a, b) {
      var c = a.De,
          d = "_" + b;return d in c ? c[d] : void 0;
    }function rh(a, b) {
      var c = lh(b);return w(a.ic, c);
    }var mh = 1;
    function jh(a, b, c) {
      var d = a.wa.get(b);D(d, "Missing sync point for query tag that we're tracking");return d.eb(c, new If(b, a.jb), null);
    }function ch(a, b) {
      return th(a, b, a.wa, null, new If(Q, a.jb));
    }function th(a, b, c, d, e) {
      if (b.path.e()) return uh(a, b, c, d, e);var f = c.get(Q);null == d && null != f && (d = f.hb(Q));var h = [],
          k = K(b.path),
          m = b.Mc(k);if ((c = c.children.get(k)) && m) var l = d ? d.Q(k) : null,
          k = e.n(k),
          h = h.concat(th(a, m, c, l, k));f && (h = h.concat(f.eb(b, e, d)));return h;
    }
    function uh(a, b, c, d, e) {
      var f = c.get(Q);null == d && null != f && (d = f.hb(Q));var h = [];c.children.ha(function (c, f) {
        var l = d ? d.Q(c) : null,
            u = e.n(c),
            z = b.Mc(c);z && (h = h.concat(uh(a, z, f, l, u)));
      });f && (h = h.concat(f.eb(b, e, d)));return h;
    };function Qg(a, b, c) {
      this.app = c;var d = new Bf(c);this.L = a;this.Va = Pf(a);this.Vc = null;this.ca = new Ye();this.vd = 1;this.Ra = null;if (b || 0 <= ("object" === typeof window && window.navigator && window.navigator.userAgent || "").search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i)) this.va = new Rf(this.L, q(this.Gb, this), d), setTimeout(q(this.Jc, this, !0), 0);else {
        b = c.options.databaseAuthVariableOverride;if ("undefined" !== da(b) && null !== b) {
          if ("object" !== da(b)) throw Error("Only objects are supported for option databaseAuthVariableOverride");
          try {
            x(b);
          } catch (e) {
            throw Error("Invalid authOverride provided: " + e);
          }
        }this.va = this.Ra = new Ag(this.L, q(this.Gb, this), q(this.Jc, this), q(this.ue, this), d, b);
      }var f = this;Cf(d, function (a) {
        f.va.kf(a);
      });this.og = Qf(a, q(function () {
        return new Jf(this.Va, this.va);
      }, this));this.mc = new Tc();this.ie = new Af();this.pd = new ah({ Ae: function Ae(a, b, c, d) {
          b = [];c = f.ie.j(a.path);c.e() || (b = ch(f.pd, new ce(ie, a.path, c)), setTimeout(function () {
            d("ok");
          }, 0));return b;
        }, Od: ba });vh(this, "connected", !1);this.ia = new Gb();this.Ya = new Pg(this);this.fd = 0;this.je = null;this.K = new ah({ Ae: function Ae(a, b, c, d) {
          f.va.$e(a, c, b, function (b, c) {
            var e = d(b, c);cf(f.ca, a.path, e);
          });return [];
        }, Od: function Od(a, b) {
          f.va.uf(a, b);
        } });
    }g = Qg.prototype;g.toString = function () {
      return (this.L.Sc ? "https://" : "http://") + this.L.host;
    };g.name = function () {
      return this.L.pe;
    };function wh(a) {
      a = a.ie.j(new E(".info/serverTimeOffset")).H() || 0;return new Date().getTime() + a;
    }function xh(a) {
      a = a = { timestamp: wh(a) };a.timestamp = a.timestamp || new Date().getTime();return a;
    }
    g.Gb = function (a, b, c, d) {
      this.fd++;var e = new E(a);b = this.je ? this.je(a, b) : b;a = [];d ? c ? (b = Ja(b, function (a) {
        return G(a);
      }), a = kh(this.K, e, b, d)) : (b = G(b), a = gh(this.K, e, b, d)) : c ? (d = Ja(b, function (a) {
        return G(a);
      }), a = fh(this.K, e, d)) : (d = G(b), a = ch(this.K, new ce(ie, e, d)));d = e;0 < a.length && (d = yh(this, e));cf(this.ca, d, a);
    };g.Jc = function (a) {
      vh(this, "connected", a);!1 === a && zh(this);
    };g.ue = function (a) {
      var b = this;cc(a, function (a, d) {
        vh(b, d, a);
      });
    };
    function vh(a, b, c) {
      b = new E("/.info/" + b);c = G(c);var d = a.ie;d.Jd = d.Jd.F(b, c);c = ch(a.pd, new ce(ie, b, c));cf(a.ca, b, c);
    }g.Jb = function (a, b, c, d) {
      this.f("set", { path: a.toString(), value: b, ug: c });var e = xh(this);b = G(b, c);var e = Jb(b, e),
          f = this.vd++,
          e = bh(this.K, a, e, f, !0);Ze(this.ca, e);var h = this;this.va.put(a.toString(), b.H(!0), function (b, c) {
        var e = "ok" === b;e || J("set at " + a + " failed: " + b);e = eh(h.K, f, !e);cf(h.ca, a, e);Ah(d, b, c);
      });e = Bh(this, a);yh(this, e);cf(this.ca, e, []);
    };
    g.update = function (a, b, c) {
      this.f("update", { path: a.toString(), value: b });var d = !0,
          e = xh(this),
          f = {};v(b, function (a, b) {
        d = !1;var c = G(a);f[b] = Jb(c, e);
      });if (d) I("update() called with empty data.  Don't do anything."), Ah(c, "ok");else {
        var h = this.vd++,
            k = dh(this.K, a, f, h);Ze(this.ca, k);var m = this;this.va.af(a.toString(), b, function (b, d) {
          var e = "ok" === b;e || J("update at " + a + " failed: " + b);var e = eh(m.K, h, !e),
              f = a;0 < e.length && (f = yh(m, a));cf(m.ca, f, e);Ah(c, b, d);
        });v(b, function (b, c) {
          var d = Bh(m, a.n(c));yh(m, d);
        });cf(this.ca, a, []);
      }
    };function zh(a) {
      a.f("onDisconnectEvents");var b = xh(a),
          c = [];Hb(Fb(a.ia, b), Q, function (b, e) {
        c = c.concat(ch(a.K, new ce(ie, b, e)));var f = Bh(a, b);yh(a, f);
      });a.ia = new Gb();cf(a.ca, Q, c);
    }g.xd = function (a, b) {
      var c = this;this.va.xd(a.toString(), function (d, e) {
        "ok" === d && Yd(c.ia, a);Ah(b, d, e);
      });
    };function Ch(a, b, c, d) {
      var e = G(c);a.va.re(b.toString(), e.H(!0), function (c, h) {
        "ok" === c && Ib(a.ia, b, e);Ah(d, c, h);
      });
    }
    function Dh(a, b, c, d, e) {
      var f = G(c, d);a.va.re(b.toString(), f.H(!0), function (c, d) {
        "ok" === c && Ib(a.ia, b, f);Ah(e, c, d);
      });
    }function Eh(a, b, c, d) {
      var e = !0,
          f;for (f in c) {
        e = !1;
      }e ? (I("onDisconnect().update() called with empty data.  Don't do anything."), Ah(d, "ok")) : a.va.cf(b.toString(), c, function (e, f) {
        if ("ok" === e) for (var m in c) {
          var l = G(c[m]);Ib(a.ia, b.n(m), l);
        }Ah(d, e, f);
      });
    }function Fh(a, b, c) {
      c = ".info" === K(b.path) ? a.pd.Nb(b, c) : a.K.Nb(b, c);af(a.ca, b.path, c);
    }g.ab = function () {
      this.Ra && this.Ra.ab("repo_interrupt");
    };
    g.kc = function () {
      this.Ra && this.Ra.kc("repo_interrupt");
    };g.Be = function (a) {
      if ("undefined" !== typeof console) {
        a ? (this.Vc || (this.Vc = new Kf(this.Va)), a = this.Vc.get()) : a = this.Va.get();var b = Ba(Oa(a), function (a, b) {
          return Math.max(b.length, a);
        }, 0),
            c;for (c in a) {
          for (var d = a[c], e = c.length; e < b + 2; e++) {
            c += " ";
          }console.log(c + d);
        }
      }
    };g.Ce = function (a) {
      Mf(this.Va, a);this.og.rf[a] = !0;
    };g.f = function (a) {
      var b = "";this.Ra && (b = this.Ra.id + ":");I(b, arguments);
    };
    function Ah(a, b, c) {
      a && fc(function () {
        if ("ok" == b) a(null);else {
          var d = (b || "error").toUpperCase(),
              e = d;c && (e += ": " + c);e = Error(e);e.code = d;a(e);
        }
      });
    };function Gh(a, b, c, d, e) {
      function f() {}a.f("transaction on " + b);var h = new U(a, b);h.gc("value", f);c = { path: b, update: c, G: d, status: null, ef: Lb(), He: e, of: 0, Rd: function Rd() {
          h.Ic("value", f);
        }, Td: null, Ba: null, cd: null, dd: null, ed: null };d = a.K.Aa(b, void 0) || L;c.cd = d;d = c.update(d.H());if (n(d)) {
        Pd("transaction failed: Data returned ", d, c.path);c.status = 1;e = Uc(a.mc, b);var k = e.Ca() || [];k.push(c);Vc(e, k);"object" === typeof d && null !== d && eb(d, ".priority") ? (k = w(d, ".priority"), D(Nd(k), "Invalid priority returned by transaction. Priority must be a valid string, finite number, server value, or null.")) : k = (a.K.Aa(b) || L).C().H();e = xh(a);d = G(d, k);e = Jb(d, e);c.dd = d;c.ed = e;c.Ba = a.vd++;c = bh(a.K, b, e, c.Ba, c.He);cf(a.ca, b, c);Hh(a);
      } else c.Rd(), c.dd = null, c.ed = null, c.G && (a = new V(c.cd, new U(a, c.path), H), c.G(null, !1, a));
    }function Hh(a, b) {
      var c = b || a.mc;b || Ih(a, c);if (null !== c.Ca()) {
        var d = Jh(a, c);D(0 < d.length, "Sending zero length transaction queue");Ca(d, function (a) {
          return 1 === a.status;
        }) && Kh(a, c.path(), d);
      } else c.kd() && c.O(function (b) {
        Hh(a, b);
      });
    }
    function Kh(a, b, c) {
      for (var d = Aa(c, function (a) {
        return a.Ba;
      }), e = a.K.Aa(b, d) || L, d = e, e = e.hash(), f = 0; f < c.length; f++) {
        var h = c[f];D(1 === h.status, "tryToSendTransactionQueue_: items in queue should all be run.");h.status = 2;h.of++;var k = P(b, h.path),
            d = d.F(k, h.dd);
      }d = d.H(!0);a.va.put(b.toString(), d, function (d) {
        a.f("transaction put response", { path: b.toString(), status: d });var e = [];if ("ok" === d) {
          d = [];for (f = 0; f < c.length; f++) {
            c[f].status = 3;e = e.concat(eh(a.K, c[f].Ba));if (c[f].G) {
              var h = c[f].ed,
                  k = new U(a, c[f].path);d.push(q(c[f].G, null, null, !0, new V(h, k, H)));
            }c[f].Rd();
          }Ih(a, Uc(a.mc, b));Hh(a);cf(a.ca, b, e);for (f = 0; f < d.length; f++) {
            fc(d[f]);
          }
        } else {
          if ("datastale" === d) for (f = 0; f < c.length; f++) {
            c[f].status = 4 === c[f].status ? 5 : 1;
          } else for (J("transaction at " + b.toString() + " failed: " + d), f = 0; f < c.length; f++) {
            c[f].status = 5, c[f].Td = d;
          }yh(a, b);
        }
      }, e);
    }function yh(a, b) {
      var c = Lh(a, b),
          d = c.path(),
          c = Jh(a, c);Mh(a, c, d);return d;
    }
    function Mh(a, b, c) {
      if (0 !== b.length) {
        for (var d = [], e = [], f = za(b, function (a) {
          return 1 === a.status;
        }), f = Aa(f, function (a) {
          return a.Ba;
        }), h = 0; h < b.length; h++) {
          var k = b[h],
              m = P(c, k.path),
              l = !1,
              u;D(null !== m, "rerunTransactionsUnderNode_: relativePath should not be null.");if (5 === k.status) l = !0, u = k.Td, e = e.concat(eh(a.K, k.Ba, !0));else if (1 === k.status) if (25 <= k.of) l = !0, u = "maxretry", e = e.concat(eh(a.K, k.Ba, !0));else {
            var z = a.K.Aa(k.path, f) || L;k.cd = z;var F = b[h].update(z.H());n(F) ? (Pd("transaction failed: Data returned ", F, k.path), m = G(F), "object" === typeof F && null != F && eb(F, ".priority") || (m = m.fa(z.C())), z = k.Ba, F = xh(a), F = Jb(m, F), k.dd = m, k.ed = F, k.Ba = a.vd++, Fa(f, z), e = e.concat(bh(a.K, k.path, F, k.Ba, k.He)), e = e.concat(eh(a.K, z, !0))) : (l = !0, u = "nodata", e = e.concat(eh(a.K, k.Ba, !0)));
          }cf(a.ca, c, e);e = [];l && (b[h].status = 3, setTimeout(b[h].Rd, Math.floor(0)), b[h].G && ("nodata" === u ? (k = new U(a, b[h].path), d.push(q(b[h].G, null, null, !1, new V(b[h].cd, k, H)))) : d.push(q(b[h].G, null, Error(u), !1, null))));
        }Ih(a, a.mc);for (h = 0; h < d.length; h++) {
          fc(d[h]);
        }Hh(a);
      }
    }
    function Lh(a, b) {
      for (var c, d = a.mc; null !== (c = K(b)) && null === d.Ca();) {
        d = Uc(d, c), b = N(b);
      }return d;
    }function Jh(a, b) {
      var c = [];Nh(a, b, c);c.sort(function (a, b) {
        return a.ef - b.ef;
      });return c;
    }function Nh(a, b, c) {
      var d = b.Ca();if (null !== d) for (var e = 0; e < d.length; e++) {
        c.push(d[e]);
      }b.O(function (b) {
        Nh(a, b, c);
      });
    }function Ih(a, b) {
      var c = b.Ca();if (c) {
        for (var d = 0, e = 0; e < c.length; e++) {
          3 !== c[e].status && (c[d] = c[e], d++);
        }c.length = d;Vc(b, 0 < c.length ? c : null);
      }b.O(function (b) {
        Ih(a, b);
      });
    }
    function Bh(a, b) {
      var c = Lh(a, b).path(),
          d = Uc(a.mc, b);Yc(d, function (b) {
        Oh(a, b);
      });Oh(a, d);Xc(d, function (b) {
        Oh(a, b);
      });return c;
    }
    function Oh(a, b) {
      var c = b.Ca();if (null !== c) {
        for (var d = [], e = [], f = -1, h = 0; h < c.length; h++) {
          4 !== c[h].status && (2 === c[h].status ? (D(f === h - 1, "All SENT items should be at beginning of queue."), f = h, c[h].status = 4, c[h].Td = "set") : (D(1 === c[h].status, "Unexpected transaction status in abort"), c[h].Rd(), e = e.concat(eh(a.K, c[h].Ba, !0)), c[h].G && d.push(q(c[h].G, null, Error("set"), !1, null))));
        }-1 === f ? Vc(b, null) : c.length = f + 1;cf(a.ca, b.path(), e);for (h = 0; h < d.length; h++) {
          fc(d[h]);
        }
      }
    };function Ug() {
      this.lb = {};this.wf = !1;
    }Ug.prototype.ab = function () {
      for (var a in this.lb) {
        this.lb[a].ab();
      }
    };Ug.prototype.kc = function () {
      for (var a in this.lb) {
        this.lb[a].kc();
      }
    };Ug.prototype.ce = function (a) {
      this.wf = a;
    };ca(Ug);Ug.prototype.interrupt = Ug.prototype.ab;Ug.prototype.resume = Ug.prototype.kc;var W = {};W.nc = Ag;W.DataConnection = W.nc;Ag.prototype.ng = function (a, b) {
      this.ua("q", { p: a }, b);
    };W.nc.prototype.simpleListen = W.nc.prototype.ng;Ag.prototype.Hf = function (a, b) {
      this.ua("echo", { d: a }, b);
    };W.nc.prototype.echo = W.nc.prototype.Hf;Ag.prototype.interrupt = Ag.prototype.ab;W.zf = og;W.RealTimeConnection = W.zf;og.prototype.sendRequest = og.prototype.ua;og.prototype.close = og.prototype.close;
    W.Rf = function (a) {
      var b = Ag.prototype.put;Ag.prototype.put = function (c, d, e, f) {
        n(f) && (f = a());b.call(this, c, d, e, f);
      };return function () {
        Ag.prototype.put = b;
      };
    };W.hijackHash = W.Rf;W.yf = zb;W.ConnectionTarget = W.yf;W.ja = function (a) {
      return a.ja();
    };W.queryIdentifier = W.ja;W.Uf = function (a) {
      return a.u.Ra.$;
    };W.listens = W.Uf;W.ce = function (a) {
      Ug.Vb().ce(a);
    };W.forceRestClient = W.ce;W.Context = Ug;function Ph(a, b) {
      this.committed = a;this.snapshot = b;
    };function X(a, b, c, d) {
      this.u = a;this.path = b;this.m = c;this.Nc = d;
    }
    function Qh(a) {
      var b = null,
          c = null;a.ka && (b = ff(a));a.na && (c = hf(a));if (a.g === tc) {
        if (a.ka) {
          if ("[MIN_NAME]" != ef(a)) throw Error("Query: When ordering by key, you may only pass one argument to startAt(), endAt(), or equalTo().");if ("string" !== typeof b) throw Error("Query: When ordering by key, the argument passed to startAt(), endAt(),or equalTo() must be a string.");
        }if (a.na) {
          if ("[MAX_NAME]" != gf(a)) throw Error("Query: When ordering by key, you may only pass one argument to startAt(), endAt(), or equalTo().");if ("string" !== typeof c) throw Error("Query: When ordering by key, the argument passed to startAt(), endAt(),or equalTo() must be a string.");
        }
      } else if (a.g === H) {
        if (null != b && !Nd(b) || null != c && !Nd(c)) throw Error("Query: When ordering by priority, the first argument passed to startAt(), endAt(), or equalTo() must be a valid priority value (null, a number, or a string).");
      } else if (D(a.g instanceof pc || a.g === wc, "unknown index type."), null != b && "object" === typeof b || null != c && "object" === typeof c) throw Error("Query: First argument passed to startAt(), endAt(), or equalTo() cannot be an object.");
    }function Rh(a) {
      if (a.ka && a.na && a.xa && (!a.xa || "" === a.mb)) throw Error("Query: Can't combine startAt(), endAt(), and limit(). Use limitToFirst() or limitToLast() instead.");
    }function Sh(a, b) {
      if (!0 === a.Nc) throw Error(b + ": You can't combine multiple orderBy calls.");
    }g = X.prototype;g.wb = function () {
      y("Query.ref", 0, 0, arguments.length);return new U(this.u, this.path);
    };
    g.gc = function (a, b, c, d) {
      y("Query.on", 2, 4, arguments.length);Td("Query.on", a, !1);B("Query.on", 2, b, !1);var e = Th("Query.on", c, d);if ("value" === a) Fh(this.u, this, new Vg(b, e.cancel || null, e.Ma || null));else {
        var f = {};f[a] = b;Fh(this.u, this, new Wg(f, e.cancel, e.Ma));
      }return b;
    };
    g.Ic = function (a, b, c) {
      y("Query.off", 0, 3, arguments.length);Td("Query.off", a, !0);B("Query.off", 2, b, !0);ob("Query.off", 3, c);var d = null,
          e = null;"value" === a ? d = new Vg(b || null, null, c || null) : a && (b && (e = {}, e[a] = b), d = new Wg(e, null, c || null));e = this.u;d = ".info" === K(this.path) ? e.pd.kb(this, d) : e.K.kb(this, d);af(e.ca, this.path, d);
    };
    g.$f = function (a, b) {
      function c(k) {
        f && (f = !1, e.Ic(a, c), b && b.call(d.Ma, k), h.resolve(k));
      }y("Query.once", 1, 4, arguments.length);Td("Query.once", a, !1);B("Query.once", 2, b, !0);var d = Th("Query.once", arguments[2], arguments[3]),
          e = this,
          f = !0,
          h = new ib();kb(h.ra);this.gc(a, c, function (b) {
        e.Ic(a, c);d.cancel && d.cancel.call(d.Ma, b);h.reject(b);
      });return h.ra;
    };
    g.ne = function (a) {
      y("Query.limitToFirst", 1, 1, arguments.length);if (!ga(a) || Math.floor(a) !== a || 0 >= a) throw Error("Query.limitToFirst: First argument must be a positive integer.");if (this.m.xa) throw Error("Query.limitToFirst: Limit was already set (by another call to limit, limitToFirst, or limitToLast).");return new X(this.u, this.path, this.m.ne(a), this.Nc);
    };
    g.oe = function (a) {
      y("Query.limitToLast", 1, 1, arguments.length);if (!ga(a) || Math.floor(a) !== a || 0 >= a) throw Error("Query.limitToLast: First argument must be a positive integer.");if (this.m.xa) throw Error("Query.limitToLast: Limit was already set (by another call to limit, limitToFirst, or limitToLast).");return new X(this.u, this.path, this.m.oe(a), this.Nc);
    };
    g.ag = function (a) {
      y("Query.orderByChild", 1, 1, arguments.length);if ("$key" === a) throw Error('Query.orderByChild: "$key" is invalid.  Use Query.orderByKey() instead.');if ("$priority" === a) throw Error('Query.orderByChild: "$priority" is invalid.  Use Query.orderByPriority() instead.');if ("$value" === a) throw Error('Query.orderByChild: "$value" is invalid.  Use Query.orderByValue() instead.');Vd("Query.orderByChild", a);Sh(this, "Query.orderByChild");var b = new E(a);if (b.e()) throw Error("Query.orderByChild: cannot pass in empty path.  Use Query.orderByValue() instead.");
      b = new pc(b);b = of(this.m, b);Qh(b);return new X(this.u, this.path, b, !0);
    };g.bg = function () {
      y("Query.orderByKey", 0, 0, arguments.length);Sh(this, "Query.orderByKey");var a = of(this.m, tc);Qh(a);return new X(this.u, this.path, a, !0);
    };g.cg = function () {
      y("Query.orderByPriority", 0, 0, arguments.length);Sh(this, "Query.orderByPriority");var a = of(this.m, H);Qh(a);return new X(this.u, this.path, a, !0);
    };
    g.dg = function () {
      y("Query.orderByValue", 0, 0, arguments.length);Sh(this, "Query.orderByValue");var a = of(this.m, wc);Qh(a);return new X(this.u, this.path, a, !0);
    };g.Nd = function (a, b) {
      y("Query.startAt", 0, 2, arguments.length);Od("Query.startAt", a, this.path, !0);Ud("Query.startAt", b);var c = this.m.Nd(a, b);Rh(c);Qh(c);if (this.m.ka) throw Error("Query.startAt: Starting point was already set (by another call to startAt or equalTo).");n(a) || (b = a = null);return new X(this.u, this.path, c, this.Nc);
    };
    g.gd = function (a, b) {
      y("Query.endAt", 0, 2, arguments.length);Od("Query.endAt", a, this.path, !0);Ud("Query.endAt", b);var c = this.m.gd(a, b);Rh(c);Qh(c);if (this.m.na) throw Error("Query.endAt: Ending point was already set (by another call to endAt or equalTo).");return new X(this.u, this.path, c, this.Nc);
    };
    g.If = function (a, b) {
      y("Query.equalTo", 1, 2, arguments.length);Od("Query.equalTo", a, this.path, !1);Ud("Query.equalTo", b);if (this.m.ka) throw Error("Query.equalTo: Starting point was already set (by another call to startAt or equalTo).");if (this.m.na) throw Error("Query.equalTo: Ending point was already set (by another call to endAt or equalTo).");return this.Nd(a, b).gd(a, b);
    };
    g.toString = function () {
      y("Query.toString", 0, 0, arguments.length);for (var a = this.path, b = "", c = a.Y; c < a.o.length; c++) {
        "" !== a.o[c] && (b += "/" + encodeURIComponent(String(a.o[c])));
      }return this.u.toString() + (b || "/");
    };g.toJSON = function () {
      y("Query.toJSON", 0, 1, arguments.length);return this.toString();
    };g.ja = function () {
      var a = ac(pf(this.m));return "{}" === a ? "default" : a;
    };
    g.isEqual = function (a) {
      y("Query.isEqual", 1, 1, arguments.length);if (!(a instanceof X)) throw Error("Query.isEqual failed: First argument must be an instance of firebase.database.Query.");var b = this.u === a.u,
          c = this.path.Z(a.path),
          d = this.ja() === a.ja();return b && c && d;
    };
    function Th(a, b, c) {
      var d = { cancel: null, Ma: null };if (b && c) d.cancel = b, B(a, 3, d.cancel, !0), d.Ma = c, ob(a, 4, d.Ma);else if (b) if ("object" === typeof b && null !== b) d.Ma = b;else if ("function" === typeof b) d.cancel = b;else throw Error(A(a, 3, !0) + " must either be a cancel callback or a context object.");return d;
    }X.prototype.on = X.prototype.gc;X.prototype.off = X.prototype.Ic;X.prototype.once = X.prototype.$f;X.prototype.limitToFirst = X.prototype.ne;X.prototype.limitToLast = X.prototype.oe;X.prototype.orderByChild = X.prototype.ag;
    X.prototype.orderByKey = X.prototype.bg;X.prototype.orderByPriority = X.prototype.cg;X.prototype.orderByValue = X.prototype.dg;X.prototype.startAt = X.prototype.Nd;X.prototype.endAt = X.prototype.gd;X.prototype.equalTo = X.prototype.If;X.prototype.toString = X.prototype.toString;X.prototype.isEqual = X.prototype.isEqual;gc(X.prototype, "ref", X.prototype.wb);function Y(a, b) {
      this.ta = a;this.qa = b;
    }Y.prototype.cancel = function (a) {
      y("Firebase.onDisconnect().cancel", 0, 1, arguments.length);B("Firebase.onDisconnect().cancel", 1, a, !0);var b = new ib();this.ta.xd(this.qa, jb(b, a));return b.ra;
    };Y.prototype.cancel = Y.prototype.cancel;Y.prototype.remove = function (a) {
      y("Firebase.onDisconnect().remove", 0, 1, arguments.length);Wd("Firebase.onDisconnect().remove", this.qa);B("Firebase.onDisconnect().remove", 1, a, !0);var b = new ib();Ch(this.ta, this.qa, null, jb(b, a));return b.ra;
    };
    Y.prototype.remove = Y.prototype.remove;Y.prototype.set = function (a, b) {
      y("Firebase.onDisconnect().set", 1, 2, arguments.length);Wd("Firebase.onDisconnect().set", this.qa);Od("Firebase.onDisconnect().set", a, this.qa, !1);B("Firebase.onDisconnect().set", 2, b, !0);var c = new ib();Ch(this.ta, this.qa, a, jb(c, b));return c.ra;
    };Y.prototype.set = Y.prototype.set;
    Y.prototype.Jb = function (a, b, c) {
      y("Firebase.onDisconnect().setWithPriority", 2, 3, arguments.length);Wd("Firebase.onDisconnect().setWithPriority", this.qa);Od("Firebase.onDisconnect().setWithPriority", a, this.qa, !1);Sd("Firebase.onDisconnect().setWithPriority", 2, b);B("Firebase.onDisconnect().setWithPriority", 3, c, !0);var d = new ib();Dh(this.ta, this.qa, a, b, jb(d, c));return d.ra;
    };Y.prototype.setWithPriority = Y.prototype.Jb;
    Y.prototype.update = function (a, b) {
      y("Firebase.onDisconnect().update", 1, 2, arguments.length);Wd("Firebase.onDisconnect().update", this.qa);if (ea(a)) {
        for (var c = {}, d = 0; d < a.length; ++d) {
          c["" + d] = a[d];
        }a = c;J("Passing an Array to Firebase.onDisconnect().update() is deprecated. Use set() if you want to overwrite the existing data, or an Object with integer keys if you really do want to only update some of the children.");
      }Rd("Firebase.onDisconnect().update", a, this.qa);B("Firebase.onDisconnect().update", 2, b, !0);
      c = new ib();Eh(this.ta, this.qa, a, jb(c, b));return c.ra;
    };Y.prototype.update = Y.prototype.update;var Z = { Mf: function Mf() {
        dg = Zf = !0;
      } };Z.forceLongPolling = Z.Mf;Z.Nf = function () {
      eg = !0;
    };Z.forceWebSockets = Z.Nf;Z.Tf = function () {
      return Yf.isAvailable();
    };Z.isWebSocketsAvailable = Z.Tf;Z.lg = function (a, b) {
      a.u.Ra.ze = b;
    };Z.setSecurityDebugCallback = Z.lg;Z.Be = function (a, b) {
      a.u.Be(b);
    };Z.stats = Z.Be;Z.Ce = function (a, b) {
      a.u.Ce(b);
    };Z.statsIncrementCounter = Z.Ce;Z.fd = function (a) {
      return a.u.fd;
    };Z.dataUpdateCount = Z.fd;Z.Sf = function (a, b) {
      a.u.je = b;
    };Z.interceptServerData = Z.Sf;function U(a, b) {
      if (!(a instanceof Qg)) throw Error("new Firebase() no longer supported - use app.database().");X.call(this, a, b, mf, !1);this.then = void 0;this["catch"] = void 0;
    }la(U, X);g = U.prototype;g.getKey = function () {
      y("Firebase.key", 0, 0, arguments.length);return this.path.e() ? null : Oc(this.path);
    };
    g.n = function (a) {
      y("Firebase.child", 1, 1, arguments.length);if (ga(a)) a = String(a);else if (!(a instanceof E)) if (null === K(this.path)) {
        var b = a;b && (b = b.replace(/^\/*\.info(\/|$)/, "/"));Vd("Firebase.child", b);
      } else Vd("Firebase.child", a);return new U(this.u, this.path.n(a));
    };g.getParent = function () {
      y("Firebase.parent", 0, 0, arguments.length);var a = this.path.parent();return null === a ? null : new U(this.u, a);
    };
    g.Of = function () {
      y("Firebase.ref", 0, 0, arguments.length);for (var a = this; null !== a.getParent();) {
        a = a.getParent();
      }return a;
    };g.Gf = function () {
      return this.u.Ya;
    };g.set = function (a, b) {
      y("Firebase.set", 1, 2, arguments.length);Wd("Firebase.set", this.path);Od("Firebase.set", a, this.path, !1);B("Firebase.set", 2, b, !0);var c = new ib();this.u.Jb(this.path, a, null, jb(c, b));return c.ra;
    };
    g.update = function (a, b) {
      y("Firebase.update", 1, 2, arguments.length);Wd("Firebase.update", this.path);if (ea(a)) {
        for (var c = {}, d = 0; d < a.length; ++d) {
          c["" + d] = a[d];
        }a = c;J("Passing an Array to Firebase.update() is deprecated. Use set() if you want to overwrite the existing data, or an Object with integer keys if you really do want to only update some of the children.");
      }Rd("Firebase.update", a, this.path);B("Firebase.update", 2, b, !0);c = new ib();this.u.update(this.path, a, jb(c, b));return c.ra;
    };
    g.Jb = function (a, b, c) {
      y("Firebase.setWithPriority", 2, 3, arguments.length);Wd("Firebase.setWithPriority", this.path);Od("Firebase.setWithPriority", a, this.path, !1);Sd("Firebase.setWithPriority", 2, b);B("Firebase.setWithPriority", 3, c, !0);if (".length" === this.getKey() || ".keys" === this.getKey()) throw "Firebase.setWithPriority failed: " + this.getKey() + " is a read-only object.";var d = new ib();this.u.Jb(this.path, a, b, jb(d, c));return d.ra;
    };
    g.remove = function (a) {
      y("Firebase.remove", 0, 1, arguments.length);Wd("Firebase.remove", this.path);B("Firebase.remove", 1, a, !0);return this.set(null, a);
    };
    g.transaction = function (a, b, c) {
      y("Firebase.transaction", 1, 3, arguments.length);Wd("Firebase.transaction", this.path);B("Firebase.transaction", 1, a, !1);B("Firebase.transaction", 2, b, !0);if (n(c) && "boolean" != typeof c) throw Error(A("Firebase.transaction", 3, !0) + "must be a boolean.");if (".length" === this.getKey() || ".keys" === this.getKey()) throw "Firebase.transaction failed: " + this.getKey() + " is a read-only object.";"undefined" === typeof c && (c = !0);var d = new ib();ha(b) && kb(d.ra);Gh(this.u, this.path, a, function (a, c, h) {
        a ? d.reject(a) : d.resolve(new Ph(c, h));ha(b) && b(a, c, h);
      }, c);return d.ra;
    };g.kg = function (a, b) {
      y("Firebase.setPriority", 1, 2, arguments.length);Wd("Firebase.setPriority", this.path);Sd("Firebase.setPriority", 1, a);B("Firebase.setPriority", 2, b, !0);var c = new ib();this.u.Jb(this.path.n(".priority"), a, null, jb(c, b));return c.ra;
    };
    g.push = function (a, b) {
      y("Firebase.push", 0, 2, arguments.length);Wd("Firebase.push", this.path);Od("Firebase.push", a, this.path, !0);B("Firebase.push", 2, b, !0);var c = wh(this.u),
          d = Kc(c),
          c = this.n(d),
          e = this.n(d),
          d = null != a ? c.set(a, b).then(function () {
        return e;
      }) : hb.resolve(e);c.then = q(d.then, d);c["catch"] = q(d.then, d, void 0);ha(b) && kb(d);return c;
    };g.ib = function () {
      Wd("Firebase.onDisconnect", this.path);return new Y(this.u, this.path);
    };U.prototype.child = U.prototype.n;U.prototype.set = U.prototype.set;
    U.prototype.update = U.prototype.update;U.prototype.setWithPriority = U.prototype.Jb;U.prototype.remove = U.prototype.remove;U.prototype.transaction = U.prototype.transaction;U.prototype.setPriority = U.prototype.kg;U.prototype.push = U.prototype.push;U.prototype.onDisconnect = U.prototype.ib;gc(U.prototype, "database", U.prototype.Gf);gc(U.prototype, "key", U.prototype.getKey);gc(U.prototype, "parent", U.prototype.getParent);gc(U.prototype, "root", U.prototype.Of);if ("undefined" === typeof firebase) throw Error("Cannot install Firebase Database - be sure to load firebase-app.js first.");
    try {
      firebase.INTERNAL.registerService("database", function (a) {
        var b = Ug.Vb(),
            c = a.options.databaseURL;n(c) || Vb("Can't determine Firebase Database URL.  Be sure to include databaseURL option when calling firebase.intializeApp().");var d = Wb(c),
            c = d.jc;Xd("Invalid Firebase Database URL", d);d.path.e() || Vb("Database URL must point to the root of a Firebase Database (not including a child path).");(d = w(b.lb, a.name)) && Vb("FIREBASE INTERNAL ERROR: Database initialized multiple times.");d = new Qg(c, b.wf, a);b.lb[a.name] = d;return d.Ya;
      }, { Reference: U, Query: X, Database: Pg, enableLogging: Sb, INTERNAL: Z, TEST_ACCESS: W, ServerValue: Sg });
    } catch (Uh) {
      Vb("Failed to register the Firebase Database Service (" + Uh + ")");
    };
  })();
}).call(typeof global !== undefined ? global : typeof self !== undefined ? self : typeof window !== undefined ? window : {});
module.exports = firebase.database;
}, 443, null, "firebase/database.js");
__d(/* firebase/storage.js */function(global, require, module, exports) {/*! @license Firebase v3.9.0
Build: rev-cc77c9e
Terms: https://firebase.google.com/terms/ */

var firebase = require(441    ); // 441 = ./app
(function () {
  (function () {
    for (var h, aa = "function" == typeof Object.defineProperties ? Object.defineProperty : function (a, b, c) {
      a != Array.prototype && a != Object.prototype && (a[b] = c.value);
    }, l = "undefined" != typeof window && window === this ? this : "undefined" != typeof global && null != global ? global : this, n = ["Number", "MIN_SAFE_INTEGER"], ba = 0; ba < n.length - 1; ba++) {
      var ca = n[ba];ca in l || (l[ca] = {});l = l[ca];
    }var da = n[n.length - 1];-9007199254740991 != l[da] && aa(l, da, { configurable: !0, writable: !0, value: -9007199254740991 });
    var p = this,
        q = function q(a) {
      return void 0 !== a;
    },
        ea = function ea(a) {
      var b = typeof a;if ("object" == b) {
        if (a) {
          if (a instanceof Array) return "array";if (a instanceof Object) return b;var c = Object.prototype.toString.call(a);if ("[object Window]" == c) return "object";if ("[object Array]" == c || "number" == typeof a.length && "undefined" != typeof a.splice && "undefined" != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable("splice")) return "array";if ("[object Function]" == c || "undefined" != typeof a.call && "undefined" != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable("call")) return "function";
        } else return "null";
      } else if ("function" == b && "undefined" == typeof a.call) return "object";return b;
    };var r = function r(a, b) {
      this.code = "storage/" + a;this.message = "Firebase Storage: " + b;this.serverResponse = null;this.name = "FirebaseError";
    };(function () {
      var a = Error;function b() {}b.prototype = a.prototype;r.b = a.prototype;r.prototype = new b();r.a = function (b, d, e) {
        for (var c = Array(arguments.length - 2), f = 2; f < arguments.length; f++) {
          c[f - 2] = arguments[f];
        }return a.prototype[d].apply(b, c);
      };
    })();
    var fa = function fa() {
      return new r("unknown", "An unknown error occurred, please check the error payload for server response.");
    },
        ga = function ga() {
      return new r("canceled", "User canceled the upload/download.");
    },
        ha = function ha() {
      return new r("cannot-slice-blob", "Cannot slice blob for upload. Please retry the upload.");
    },
        ia = function ia(a, b, c) {
      return new r("invalid-argument", "Invalid argument in `" + b + "` at index " + a + ": " + c);
    },
        ja = function ja() {
      return new r("app-deleted", "The Firebase app was deleted.");
    },
        t = function t(a, b) {
      return new r("invalid-format", "String does not match format '" + a + "': " + b);
    },
        u = function u(a) {
      throw new r("internal-error", "Internal error: " + a);
    };var v = "https://firebasestorage.googleapis.com";var ka = function ka(a) {
      if ("undefined" !== typeof firebase) return new firebase.Promise(a);throw Error("Error in Firebase Storage - be sure to load firebase-app.js first.");
    };var la = function la(a, b) {
      return -1 !== a.indexOf(b);
    };var ma = function ma(a, b, c) {
      function d() {
        C || (C = !0, b.apply(null, arguments));
      }function e(b) {
        m = setTimeout(function () {
          m = null;a(g, 2 === y);
        }, b);
      }function g(a, b) {
        if (!C) if (a) d.apply(null, arguments);else if (2 === y || z) d.apply(null, arguments);else {
          64 > k && (k *= 2);var c;1 === y ? (y = 2, c = 0) : c = 1E3 * (k + Math.random());e(c);
        }
      }function f(a) {
        Pa || (Pa = !0, C || (null !== m ? (a || (y = 2), clearTimeout(m), e(0)) : a || (y = 1)));
      }var k = 1,
          m = null,
          z = !1,
          y = 0,
          C = !1,
          Pa = !1;e(0);setTimeout(function () {
        z = !0;f(!0);
      }, c);return f;
    };var na = function na(a, b) {
      for (var c in a) {
        Object.prototype.hasOwnProperty.call(a, c) && b(c, a[c]);
      }
    },
        oa = function oa(a) {
      var b = {};na(a, function (a, d) {
        b[a] = d;
      });return b;
    };var w = function w(a, b, c, d) {
      this.l = a;this.b = {};this.method = b;this.headers = {};this.body = null;this.m = c;this.c = this.a = null;this.f = [200];this.i = [];this.timeout = d;this.g = !0;
    };var pa = function pa(a) {
      var b = encodeURIComponent,
          c = "?";na(a, function (a, e) {
        a = b(a) + "=" + b(e);c = c + a + "&";
      });return c = c.slice(0, -1);
    };var ra = function ra(a, b, c, d, e, g, f, k, m, z, y) {
      this.F = a;this.D = b;this.A = c;this.u = d;this.B = e.slice();this.s = g.slice();this.m = this.o = this.c = this.b = null;this.g = this.i = !1;this.v = f;this.l = k;this.f = z;this.G = y;this.C = m;var C = this;this.w = ka(function (a, b) {
        C.o = a;C.m = b;qa(C);
      });
    },
        sa = function sa(a, b, c) {
      this.b = a;this.c = b;this.a = !!c;
    },
        qa = function qa(a) {
      function b(a, b) {
        function c(a) {
          d.f(a.loaded, a.lengthComputable ? a.total : -1);
        }b ? a(!1, new sa(!1, null, !0)) : (b = new ta(), b.h.withCredentials = d.G, d.b = b, null !== d.f && q(b.h.upload) && b.h.upload.addEventListener("progress", c), ua(b, d.F, d.D, d.u, d.A).then(function (b) {
          null !== d.f && q(b.h.upload) && b.h.upload.removeEventListener("progress", c);d.b = null;var e = 0 === va(b),
              f = x(b);if (!(e = !e)) var e = la([408, 429], f),
              g = la(d.s, f),
              e = 500 <= f && 600 > f || e || g;e ? (b = 2 === va(b), a(!1, new sa(!1, null, b))) : a(!0, new sa(la(d.B, f), b));
        }));
      }function c(a, b) {
        var c = d.o;a = d.m;var e = b.c;if (b.b) try {
          var g = d.v(e, wa(e));q(g) ? c(g) : c();
        } catch (z) {
          a(z);
        } else null !== e ? (b = fa(), g = wa(e), b.serverResponse = g, d.l ? a(d.l(e, b)) : a(b)) : (b = b.a ? d.g ? ja() : ga() : new r("retry-limit-exceeded", "Max retry time for operation exceeded, please try again."), a(b));
      }var d = a;a.i ? c(0, new sa(!1, null, !0)) : a.c = ma(b, c, a.C);
    };ra.prototype.a = function () {
      return this.w;
    };ra.prototype.cancel = function (a) {
      this.i = !0;this.g = a || !1;null !== this.c && (0, this.c)(!1);null !== this.b && this.b.abort();
    };
    var xa = function xa(a, b, c) {
      var d = pa(a.b),
          d = a.l + d,
          e = a.headers ? oa(a.headers) : {};null !== b && 0 < b.length && (e.Authorization = "Firebase " + b);e["X-Firebase-Storage-Version"] = "webjs/" + ("undefined" !== typeof firebase ? firebase.SDK_VERSION : "AppManager");return new ra(d, a.method, e, a.body, a.f, a.i, a.m, a.a, a.timeout, a.c, c);
    };var ya = function ya(a) {
      this.b = firebase.Promise.reject(a);
    };ya.prototype.a = function () {
      return this.b;
    };ya.prototype.cancel = function () {};var A = function A(a, b) {
      this.bucket = a;this.path = b;
    },
        za = function za(a) {
      var b = encodeURIComponent;return "/b/" + b(a.bucket) + "/o/" + b(a.path);
    },
        Ba = function Ba(a) {
      var b;try {
        b = Aa(a);
      } catch (c) {
        return new A(a, "");
      }if ("" === b.path) return b;throw new r("invalid-default-bucket", "Invalid default bucket '" + a + "'.");
    },
        Aa = function Aa(a) {
      for (var b = null, c = [{ M: /^gs:\/\/([A-Za-z0-9.\-]+)(\/(.*))?$/i, H: { bucket: 1, path: 3 }, L: function L(a) {
          "/" === a.path.charAt(a.path.length - 1) && (a.path = a.path.slice(0, -1));
        } }, { M: /^https?:\/\/firebasestorage\.googleapis\.com\/v[A-Za-z0-9_]+\/b\/([A-Za-z0-9.\-]+)\/o(\/([^?#]*).*)?$/i,
        H: { bucket: 1, path: 3 }, L: function L(a) {
          a.path = decodeURIComponent(a.path);
        } }], d = 0; d < c.length; d++) {
        var e = c[d],
            g = e.M.exec(a);if (g) {
          b = g[e.H.bucket];(g = g[e.H.path]) || (g = "");b = new A(b, g);e.L(b);break;
        }
      }if (null == b) throw new r("invalid-url", "Invalid URL '" + a + "'.");return b;
    };var Ca = function Ca() {
      this.a = {};this.b = Number.MIN_SAFE_INTEGER;
    },
        Da = function Da(a, b) {
      function c() {
        delete e.a[d];
      }var d = a.b;a.b++;a.a[d] = b;var e = a;b.a().then(c, c);
    },
        Ea = function Ea(a) {
      na(a.a, function (a, c) {
        c && c.cancel(!0);
      });a.a = {};
    };var B = function B(a) {
      return q(a) && null !== a;
    },
        Fa = function Fa(a) {
      return "string" === typeof a || a instanceof String;
    },
        Ga = function Ga() {
      return "undefined" !== typeof Blob;
    };var Ha = function Ha(a, b, c, d, e) {
      this.a = a;this.g = null;null !== this.a && (a = this.a.options, B(a) && (a = a.storageBucket || null, this.g = null == a ? null : Ba(a).bucket));this.s = b;this.o = c;this.l = e;this.m = d;this.c = 12E4;this.b = 6E4;this.i = new Ca();this.f = !1;
    },
        Ia = function Ia(a) {
      return null !== a.a && B(a.a.INTERNAL) && B(a.a.INTERNAL.getToken) ? a.a.INTERNAL.getToken().then(function (a) {
        return B(a) ? a.accessToken : null;
      }, function () {
        return null;
      }) : firebase.Promise.resolve(null);
    };Ha.prototype.bucket = function () {
      if (this.f) throw ja();return this.g;
    };
    var D = function D(a, b, c) {
      if (a.f) return new ya(ja());b = a.o(b, c, null === a.a, a.l);Da(a.i, b);return b;
    };var Ja = function Ja(a, b) {
      b = b.split("/").filter(function (a) {
        return 0 < a.length;
      }).join("/");return 0 === a.length ? b : a + "/" + b;
    },
        Ka = function Ka(a) {
      var b = a.lastIndexOf("/", a.length - 2);return -1 === b ? a : a.slice(b + 1);
    };var La = function La(a, b) {
      return b;
    },
        E = function E(a, b, c, d) {
      this.c = a;this.b = b || a;this.writable = !!c;this.a = d || La;
    },
        Ma = null,
        Na = function Na() {
      if (Ma) return Ma;var a = [];a.push(new E("bucket"));a.push(new E("generation"));a.push(new E("metageneration"));a.push(new E("name", "fullPath", !0));var b = new E("name");b.a = function (a, b) {
        return !Fa(b) || 2 > b.length ? b : Ka(b);
      };a.push(b);b = new E("size");b.a = function (a, b) {
        return B(b) ? +b : b;
      };a.push(b);a.push(new E("timeCreated"));a.push(new E("updated"));a.push(new E("md5Hash", null, !0));
      a.push(new E("cacheControl", null, !0));a.push(new E("contentDisposition", null, !0));a.push(new E("contentEncoding", null, !0));a.push(new E("contentLanguage", null, !0));a.push(new E("contentType", null, !0));a.push(new E("metadata", "customMetadata", !0));a.push(new E("downloadTokens", "downloadURLs", !1, function (a, b) {
        if (!(Fa(b) && 0 < b.length)) return [];var c = encodeURIComponent;return b.split(",").map(function (b) {
          var d = a.fullPath,
              d = "https://firebasestorage.googleapis.com/v0" + ("/b/" + c(a.bucket) + "/o/" + c(d));b = pa({ alt: "media",
            token: b });return d + b;
        });
      }));return Ma = a;
    },
        Oa = function Oa(a, b) {
      Object.defineProperty(a, "ref", { get: function get() {
          return b.s(b, new A(a.bucket, a.fullPath));
        } });
    },
        Qa = function Qa(a, b) {
      for (var c = {}, d = b.length, e = 0; e < d; e++) {
        var g = b[e];g.writable && (c[g.c] = a[g.b]);
      }return JSON.stringify(c);
    },
        Ra = function Ra(a) {
      if (!a || "object" !== typeof a) throw "Expected Metadata object.";for (var b in a) {
        var c = a[b];if ("customMetadata" === b) {
          if ("object" !== typeof c) throw "Expected object for 'customMetadata' mapping.";
        } else if (null != c && "object" === typeof c) throw "Mapping for '" + b + "' cannot be an object.";
      }
    };var F = function F(a, b, c) {
      for (var d = b.length, e = b.length, g = 0; g < b.length; g++) {
        if (b[g].b) {
          d = g;break;
        }
      }if (!(d <= c.length && c.length <= e)) throw d === e ? (b = d, d = 1 === d ? "argument" : "arguments") : (b = "between " + d + " and " + e, d = "arguments"), new r("invalid-argument-count", "Invalid argument count in `" + a + "`: Expected " + b + " " + d + ", received " + c.length + ".");for (g = 0; g < c.length; g++) {
        try {
          b[g].a(c[g]);
        } catch (f) {
          if (f instanceof Error) throw ia(g, a, f.message);throw ia(g, a, f);
        }
      }
    },
        G = function G(a, b) {
      var c = this;this.a = function (b) {
        c.b && !q(b) || a(b);
      };
      this.b = !!b;
    },
        Sa = function Sa(a, b) {
      return function (c) {
        a(c);b(c);
      };
    },
        H = function H(a, b) {
      function c(a) {
        if (!("string" === typeof a || a instanceof String)) throw "Expected string.";
      }var d;a ? d = Sa(c, a) : d = c;return new G(d, b);
    },
        Ta = function Ta() {
      return new G(function (a) {
        if (!(a instanceof Uint8Array || a instanceof ArrayBuffer || Ga() && a instanceof Blob)) throw "Expected Blob or File.";
      });
    },
        Ua = function Ua() {
      return new G(function (a) {
        if (!(("number" === typeof a || a instanceof Number) && 0 <= a)) throw "Expected a number 0 or greater.";
      });
    },
        Va = function Va(a, b) {
      return new G(function (b) {
        if (!(null === b || B(b) && b instanceof Object)) throw "Expected an Object.";B(a) && a(b);
      }, b);
    },
        I = function I() {
      return new G(function (a) {
        if (null !== a && "function" != ea(a)) throw "Expected a Function.";
      }, !0);
    };var J = function J(a) {
      return function () {
        var b = [];Array.prototype.push.apply(b, arguments);firebase.Promise.resolve(!0).then(function () {
          a.apply(null, b);
        });
      };
    };var Wa = String.prototype.trim ? function (a) {
      return a.trim();
    } : function (a) {
      return a.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
    },
        Xa = function Xa(a, b) {
      return a < b ? -1 : a > b ? 1 : 0;
    };var K;a: {
      var Ya = p.navigator;if (Ya) {
        var Za = Ya.userAgent;if (Za) {
          K = Za;break a;
        }
      }K = "";
    };var ab = function ab(a, b) {
      var c = $a;return Object.prototype.hasOwnProperty.call(c, a) ? c[a] : c[a] = b(a);
    };var bb = -1 != K.indexOf("Opera"),
        cb = -1 != K.indexOf("Trident") || -1 != K.indexOf("MSIE"),
        db = -1 != K.indexOf("Edge"),
        eb = -1 != K.indexOf("Gecko") && !(-1 != K.toLowerCase().indexOf("webkit") && -1 == K.indexOf("Edge")) && !(-1 != K.indexOf("Trident") || -1 != K.indexOf("MSIE")) && -1 == K.indexOf("Edge"),
        fb = -1 != K.toLowerCase().indexOf("webkit") && -1 == K.indexOf("Edge"),
        gb;
    a: {
      var hb = "",
          ib = function () {
        var a = K;if (eb) return (/rv\:([^\);]+)(\)|;)/.exec(a)
        );if (db) return (/Edge\/([\d\.]+)/.exec(a)
        );if (cb) return (/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a)
        );if (fb) return (/WebKit\/(\S+)/.exec(a)
        );if (bb) return (/(?:Version)[ \/]?(\S+)/.exec(a)
        );
      }();ib && (hb = ib ? ib[1] : "");if (cb) {
        var jb,
            kb = p.document;jb = kb ? kb.documentMode : void 0;if (null != jb && jb > parseFloat(hb)) {
          gb = String(jb);break a;
        }
      }gb = hb;
    }
    var lb = gb,
        $a = {},
        mb = function mb(a) {
      return ab(a, function () {
        for (var b = 0, c = Wa(String(lb)).split("."), d = Wa(String(a)).split("."), e = Math.max(c.length, d.length), g = 0; 0 == b && g < e; g++) {
          var f = c[g] || "",
              k = d[g] || "";do {
            f = /(\d*)(\D*)(.*)/.exec(f) || ["", "", "", ""];k = /(\d*)(\D*)(.*)/.exec(k) || ["", "", "", ""];if (0 == f[0].length && 0 == k[0].length) break;b = Xa(0 == f[1].length ? 0 : parseInt(f[1], 10), 0 == k[1].length ? 0 : parseInt(k[1], 10)) || Xa(0 == f[2].length, 0 == k[2].length) || Xa(f[2], k[2]);f = f[3];k = k[3];
          } while (0 == b);
        }return 0 <= b;
      });
    };var nb = function nb(a) {
      var b = p.BlobBuilder || p.WebKitBlobBuilder;if (q(b)) {
        for (var b = new b(), c = 0; c < arguments.length; c++) {
          b.append(arguments[c]);
        }return b.getBlob();
      }b = Array.prototype.slice.call(arguments);c = p.BlobBuilder || p.WebKitBlobBuilder;if (q(c)) {
        for (var c = new c(), d = 0; d < b.length; d++) {
          c.append(b[d], void 0);
        }b = c.getBlob(void 0);
      } else if (q(p.Blob)) b = new Blob(b, {});else throw Error("This browser doesn't seem to support creating Blobs");return b;
    },
        ob = function ob(a, b, c) {
      q(c) || (c = a.size);return a.webkitSlice ? a.webkitSlice(b, c) : a.mozSlice ? a.mozSlice(b, c) : a.slice ? eb && !mb("13.0") || fb && !mb("537.1") ? (0 > b && (b += a.size), 0 > b && (b = 0), 0 > c && (c += a.size), c < b && (c = b), a.slice(b, c - b)) : a.slice(b, c) : null;
    };var L = { RAW: "raw", BASE64: "base64", BASE64URL: "base64url", DATA_URL: "data_url" },
        pb = function pb(a) {
      switch (a) {case "raw":case "base64":case "base64url":case "data_url":
          break;default:
          throw "Expected one of the event types: [raw, base64, base64url, data_url].";}
    },
        qb = function qb(a, b) {
      this.data = a;this.a = b || null;
    },
        ub = function ub(a, b) {
      switch (a) {case "raw":
          return new qb(rb(b));case "base64":case "base64url":
          return new qb(sb(a, b));case "data_url":
          a = new tb(b);var c;if (a.a) c = sb("base64", a.c);else {
            try {
              c = decodeURIComponent(a.c);
            } catch (d) {
              throw t("data_url", "Malformed data URL.");
            }c = rb(c);
          }return new qb(c, new tb(b).b);}throw fa();
    },
        rb = function rb(a) {
      for (var b = [], c = 0; c < a.length; c++) {
        var d = a.charCodeAt(c);if (127 >= d) b.push(d);else if (2047 >= d) b.push(192 | d >> 6, 128 | d & 63);else if (55296 == (d & 64512)) {
          if (c < a.length - 1 && 56320 == (a.charCodeAt(c + 1) & 64512)) {
            var e = a.charCodeAt(++c),
                d = 65536 | (d & 1023) << 10 | e & 1023;b.push(240 | d >> 18, 128 | d >> 12 & 63, 128 | d >> 6 & 63, 128 | d & 63);
          } else b.push(239, 191, 189);
        } else 56320 == (d & 64512) ? b.push(239, 191, 189) : b.push(224 | d >> 12, 128 | d >> 6 & 63, 128 | d & 63);
      }return new Uint8Array(b);
    },
        sb = function sb(a, b) {
      switch (a) {case "base64":
          var c = -1 !== b.indexOf("-"),
              d = -1 !== b.indexOf("_");if (c || d) throw t(a, "Invalid character '" + (c ? "-" : "_") + "' found: is it base64url encoded?");break;case "base64url":
          c = -1 !== b.indexOf("+");d = -1 !== b.indexOf("/");if (c || d) throw t(a, "Invalid character '" + (c ? "+" : "/") + "' found: is it base64 encoded?");b = b.replace(/-/g, "+").replace(/_/g, "/");}var e;try {
        e = atob(b);
      } catch (g) {
        throw t(a, "Invalid character found");
      }a = new Uint8Array(e.length);for (b = 0; b < e.length; b++) {
        a[b] = e.charCodeAt(b);
      }return a;
    },
        tb = function tb(a) {
      var b = a.match(/^data:([^,]+)?,/);if (null === b) throw t("data_url", "Must be formatted 'data:[<mediatype>][;base64],<data>");b = b[1] || null;this.a = !1;this.b = null;if (null != b) {
        var c = b.length - 7;this.b = (this.a = 0 <= c && b.indexOf(";base64", c) == c) ? b.substring(0, b.length - 7) : b;
      }this.c = a.substring(a.indexOf(",") + 1);
    };var M = function M(a, b) {
      Ga() && a instanceof Blob ? (this.j = a, b = a.size, a = a.type) : (a instanceof ArrayBuffer ? (b ? this.j = new Uint8Array(a) : (this.j = new Uint8Array(a.byteLength), this.j.set(new Uint8Array(a))), b = this.j.length) : (b ? this.j = a : (this.j = new Uint8Array(a.length), this.j.set(a)), b = a.length), a = "");this.a = b;this.b = a;
    };M.prototype.type = function () {
      return this.b;
    };
    M.prototype.slice = function (a, b) {
      if (Ga() && this.j instanceof Blob) return a = ob(this.j, a, b), null === a ? null : new M(a);a = new Uint8Array(this.j.buffer, a, b - a);return new M(a, !0);
    };
    var vb = function vb(a) {
      var b = [];Array.prototype.push.apply(b, arguments);if (Ga()) return b = b.map(function (a) {
        return a instanceof M ? a.j : a;
      }), new M(nb.apply(null, b));var b = b.map(function (a) {
        return Fa(a) ? ub("raw", a).data : a.j;
      }),
          c = 0;b.forEach(function (a) {
        c += a.byteLength;
      });var d = new Uint8Array(c),
          e = 0;b.forEach(function (a) {
        for (var b = 0; b < a.length; b++) {
          d[e++] = a[b];
        }
      });return new M(d, !0);
    };var wb = function wb(a, b, c) {
      "function" == ea(a) || B(b) || B(c) ? (this.b = a, this.error = b || null, this.a = c || null) : (this.b = a.next || null, this.error = a.error || null, this.a = a.complete || null);
    };var N = function N(a) {
      if (!a) throw fa();
    },
        xb = function xb(a, b) {
      return function (c, d) {
        var e;a: {
          try {
            e = JSON.parse(d);
          } catch (k) {
            e = null;break a;
          }c = typeof e;e = "object" == c && null != e || "function" == c ? e : null;
        }if (null === e) e = null;else {
          c = { type: "file" };d = b.length;for (var g = 0; g < d; g++) {
            var f = b[g];c[f.b] = f.a(c, e[f.c]);
          }Oa(c, a);e = c;
        }N(null !== e);return e;
      };
    },
        O = function O(a) {
      return function (b, c) {
        b = 401 === x(b) ? new r("unauthenticated", "User is not authenticated, please authenticate using Firebase Authentication and try again.") : 402 === x(b) ? new r("quota-exceeded", "Quota for bucket '" + a.bucket + "' exceeded, please view quota on https://firebase.google.com/pricing/.") : 403 === x(b) ? new r("unauthorized", "User does not have permission to access '" + a.path + "'.") : c;b.serverResponse = c.serverResponse;return b;
      };
    },
        yb = function yb(a) {
      var b = O(a);return function (c, d) {
        var e = b(c, d);404 === x(c) && (e = new r("object-not-found", "Object '" + a.path + "' does not exist."));e.serverResponse = d.serverResponse;return e;
      };
    },
        zb = function zb(a, b, c) {
      var d = za(b);a = new w(v + "/v0" + d, "GET", xb(a, c), a.c);a.a = yb(b);return a;
    },
        Ab = function Ab(a, b) {
      var c = za(b);a = new w(v + "/v0" + c, "DELETE", function () {}, a.c);a.f = [200, 204];a.a = yb(b);return a;
    },
        Bb = function Bb(a, b, c) {
      c = c ? oa(c) : {};c.fullPath = a.path;c.size = b.a;c.contentType || (a = b && b.type() || "application/octet-stream", c.contentType = a);return c;
    },
        Cb = function Cb(a, b, c, d, e) {
      var g = "/b/" + encodeURIComponent(b.bucket) + "/o",
          f = { "X-Goog-Upload-Protocol": "multipart" },
          k;k = "";for (var m = 0; 2 > m; m++) {
        k += Math.random().toString().slice(2);
      }f["Content-Type"] = "multipart/related; boundary=" + k;e = Bb(b, d, e);m = Qa(e, c);d = vb("--" + k + "\r\nContent-Type: application/json; charset=utf-8\r\n\r\n" + m + "\r\n--" + k + "\r\nContent-Type: " + e.contentType + "\r\n\r\n", d, "\r\n--" + k + "--");if (null === d) throw ha();a = new w(v + "/v0" + g, "POST", xb(a, c), a.b);a.b = { name: e.fullPath };a.headers = f;a.body = d.j;a.a = O(b);return a;
    },
        Db = function Db(a, b, c, d) {
      this.current = a;this.total = b;this.I = !!c;this.metadata = d || null;
    },
        Eb = function Eb(a, b) {
      var c;try {
        c = a.h.getResponseHeader("X-Goog-Upload-Status");
      } catch (d) {
        N(!1);
      }N(la(b || ["active"], c));return c;
    },
        Fb = function Fb(a, b, c, d, e) {
      var g = "/b/" + encodeURIComponent(b.bucket) + "/o",
          f = Bb(b, d, e);e = { name: f.fullPath };g = v + "/v0" + g;d = { "X-Goog-Upload-Protocol": "resumable", "X-Goog-Upload-Command": "start", "X-Goog-Upload-Header-Content-Length": d.a, "X-Goog-Upload-Header-Content-Type": f.contentType, "Content-Type": "application/json; charset=utf-8" };c = Qa(f, c);a = new w(g, "POST", function (a) {
        Eb(a);var b;try {
          b = a.h.getResponseHeader("X-Goog-Upload-URL");
        } catch (z) {
          N(!1);
        }N(Fa(b));return b;
      }, a.b);a.b = e;a.headers = d;a.body = c;a.a = O(b);
      return a;
    },
        Gb = function Gb(a, b, c, d) {
      a = new w(c, "POST", function (a) {
        var b = Eb(a, ["active", "final"]),
            c;try {
          c = a.h.getResponseHeader("X-Goog-Upload-Size-Received");
        } catch (k) {
          N(!1);
        }a = c;isFinite(a) && (a = String(a));a = "string" == typeof a ? /^\s*-?0x/i.test(a) ? parseInt(a, 16) : parseInt(a, 10) : NaN;N(!isNaN(a));return new Db(a, d.a, "final" === b);
      }, a.b);a.headers = { "X-Goog-Upload-Command": "query" };a.a = O(b);a.g = !1;return a;
    },
        Hb = function Hb(a, b, c, d, e, g, f, k) {
      var m = new Db(0, 0);f ? (m.current = f.current, m.total = f.total) : (m.current = 0, m.total = d.a);if (d.a !== m.total) throw new r("server-file-wrong-size", "Server recorded incorrect upload file size, please retry the upload.");var z = f = m.total - m.current;0 < e && (z = Math.min(z, e));var y = m.current;e = { "X-Goog-Upload-Command": z === f ? "upload, finalize" : "upload", "X-Goog-Upload-Offset": m.current };f = d.slice(y, y + z);if (null === f) throw ha();c = new w(c, "POST", function (a, c) {
        var e = Eb(a, ["active", "final"]),
            f = m.current + z,
            k = d.a,
            y;"final" === e ? y = xb(b, g)(a, c) : y = null;return new Db(f, k, "final" === e, y);
      }, b.b);c.headers = e;c.body = f.j;c.c = k || null;c.a = O(a);c.g = !1;return c;
    };var Ib = { STATE_CHANGED: "state_changed" },
        P = { RUNNING: "running", PAUSED: "paused", SUCCESS: "success", CANCELED: "canceled", ERROR: "error" },
        Jb = function Jb(a) {
      switch (a) {case "running":case "pausing":case "canceling":
          return "running";case "paused":
          return "paused";case "success":
          return "success";case "canceled":
          return "canceled";case "error":
          return "error";default:
          return "error";}
    };var ta = function ta() {
      var a = this;this.h = new XMLHttpRequest();this.b = 0;this.c = ka(function (b) {
        a.h.addEventListener("abort", function () {
          a.b = 2;b(a);
        });a.h.addEventListener("error", function () {
          a.b = 1;b(a);
        });a.h.addEventListener("load", function () {
          b(a);
        });
      });this.a = !1;
    },
        ua = function ua(a, b, c, d, e) {
      if (a.a) throw u("cannot .send() more than once");a.a = !0;a.h.open(c, b, !0);B(e) && na(e, function (b, c) {
        a.h.setRequestHeader(b, c.toString());
      });B(d) ? a.h.send(d) : a.h.send();return a.c;
    },
        va = function va(a) {
      if (!a.a) throw u("cannot .getErrorCode() before sending");
      return a.b;
    },
        x = function x(a) {
      if (!a.a) throw u("cannot .getStatus() before sending");try {
        return a.h.status;
      } catch (b) {
        return -1;
      }
    },
        wa = function wa(a) {
      if (!a.a) throw u("cannot .getResponseText() before sending");return a.h.responseText;
    };ta.prototype.abort = function () {
      this.h.abort();
    };var Kb = function Kb() {};var Q = function Q(a, b, c, d, e, g) {
      this.b = a;this.i = b;this.f = c;this.a = d;this.g = e;this.c = g;
    };h = Q.prototype;h.X = function () {
      return this.b;
    };h.sa = function () {
      return this.i;
    };h.pa = function () {
      return this.f;
    };h.ka = function () {
      return this.a;
    };h.Y = function () {
      if (B(this.a)) {
        var a = this.a.downloadURLs;return B(a) && B(a[0]) ? a[0] : null;
      }return null;
    };h.ra = function () {
      return this.g;
    };h.na = function () {
      return this.c;
    };var T = function T(a, b, c, d, e, g) {
      var f = this;this.O = a;this.c = b;this.o = c;this.f = e;this.i = void 0 === g ? null : g;this.u = d;this.l = 0;this.G = this.w = !1;this.B = [];this.U = 262144 < this.f.a;this.b = "running";this.a = this.A = this.g = null;this.m = 1;this.s = function (a) {
        f.a = null;f.m = 1;"storage/canceled" === a.code ? (f.w = !0, R(f)) : (f.g = a, S(f, "error"));
      };this.N = function (a) {
        f.a = null;"storage/canceled" === a.code ? R(f) : (f.g = a, S(f, "error"));
      };this.D = this.v = null;this.F = ka(function (a, b) {
        f.v = a;f.D = b;Lb(f);
      });this.F.then(null, function () {});
    },
        Nb = function Nb(a) {
      var b = a.l;return function (c) {
        Mb(a, b + c);
      };
    },
        Lb = function Lb(a) {
      "running" === a.b && null === a.a && (a.U ? null === a.A ? Ob(a) : a.w ? Pb(a) : a.G ? Qb(a) : Rb(a) : Sb(a));
    },
        U = function U(a, b) {
      Ia(a.c).then(function (c) {
        switch (a.b) {case "running":
            b(c);break;case "canceling":
            S(a, "canceled");break;case "pausing":
            S(a, "paused");}
      });
    },
        Ob = function Ob(a) {
      U(a, function (b) {
        var c = Fb(a.c, a.o, a.u, a.f, a.i);a.a = D(a.c, c, b);a.a.a().then(function (b) {
          a.a = null;a.A = b;a.w = !1;R(a);
        }, a.s);
      });
    },
        Pb = function Pb(a) {
      var b = a.A;U(a, function (c) {
        var d = Gb(a.c, a.o, b, a.f);a.a = D(a.c, d, c);
        a.a.a().then(function (b) {
          a.a = null;Mb(a, b.current);a.w = !1;b.I && (a.G = !0);R(a);
        }, a.s);
      });
    },
        Rb = function Rb(a) {
      var b = 262144 * a.m,
          c = new Db(a.l, a.f.a),
          d = a.A;U(a, function (e) {
        var g;try {
          g = Hb(a.o, a.c, d, a.f, b, a.u, c, Nb(a));
        } catch (f) {
          a.g = f;S(a, "error");return;
        }a.a = D(a.c, g, e);a.a.a().then(function (b) {
          33554432 > 262144 * a.m && (a.m *= 2);a.a = null;Mb(a, b.current);b.I ? (a.i = b.metadata, S(a, "success")) : R(a);
        }, a.s);
      });
    },
        Qb = function Qb(a) {
      U(a, function (b) {
        var c = zb(a.c, a.o, a.u);a.a = D(a.c, c, b);a.a.a().then(function (b) {
          a.a = null;a.i = b;S(a, "success");
        }, a.N);
      });
    },
        Sb = function Sb(a) {
      U(a, function (b) {
        var c = Cb(a.c, a.o, a.u, a.f, a.i);a.a = D(a.c, c, b);a.a.a().then(function (b) {
          a.a = null;a.i = b;Mb(a, a.f.a);S(a, "success");
        }, a.s);
      });
    },
        Mb = function Mb(a, b) {
      var c = a.l;a.l = b;a.l !== c && V(a);
    },
        S = function S(a, b) {
      if (a.b !== b) switch (b) {case "canceling":
          a.b = b;null !== a.a && a.a.cancel();break;case "pausing":
          a.b = b;null !== a.a && a.a.cancel();break;case "running":
          var c = "paused" === a.b;a.b = b;c && (V(a), Lb(a));break;case "paused":
          a.b = b;V(a);break;case "canceled":
          a.g = ga();a.b = b;V(a);break;case "error":
          a.b = b;V(a);break;case "success":
          a.b = b, V(a);}
    },
        R = function R(a) {
      switch (a.b) {case "pausing":
          S(a, "paused");break;case "canceling":
          S(a, "canceled");break;case "running":
          Lb(a);}
    };T.prototype.C = function () {
      return new Q(this.l, this.f.a, Jb(this.b), this.i, this, this.O);
    };
    T.prototype.P = function (a, b, c, d) {
      function e(a) {
        try {
          f(a);return;
        } catch (C) {}try {
          if (k(a), !(q(a.next) || q(a.error) || q(a.complete))) throw "";
        } catch (C) {
          throw "Expected a function or an Object with one of `next`, `error`, `complete` properties.";
        }
      }function g(a) {
        return function (b, c, d) {
          null !== a && F("on", a, arguments);var e = new wb(b, c, d);m.B.push(e);Tb(m, e);return function () {
            var a = m.B,
                b = a.indexOf(e);-1 !== b && a.splice(b, 1);
          };
        };
      }var f = I().a,
          k = Va(null, !0).a;F("on", [H(function () {
        if ("state_changed" !== a) throw "Expected one of the event types: [state_changed].";
      }), Va(e, !0), I(), I()], arguments);var m = this,
          z = [Va(function (a) {
        if (null === a) throw "Expected a function or an Object with one of `next`, `error`, `complete` properties.";e(a);
      }), I(), I()];return q(b) || q(c) || q(d) ? g(null)(b, c, d) : g(z);
    };T.prototype.then = function (a, b) {
      return this.F.then(void 0 === a ? null : a, void 0 === b ? null : b);
    };T.prototype["catch"] = function (a) {
      return this.then(null, a);
    };
    var V = function V(a) {
      Ub(a);Array.prototype.slice.call(a.B).forEach(function (b) {
        Tb(a, b);
      });
    },
        Ub = function Ub(a) {
      if (null !== a.v) {
        var b = !0;switch (Jb(a.b)) {case "success":
            J(a.v.bind(null, a.C()))();break;case "canceled":case "error":
            J(a.D.bind(null, a.g))();break;default:
            b = !1;}b && (a.v = null, a.D = null);
      }
    },
        Tb = function Tb(a, b) {
      switch (Jb(a.b)) {case "running":case "paused":
          null !== b.b && J(b.b.bind(b, a.C()))();break;case "success":
          null !== b.a && J(b.a.bind(b))();break;case "canceled":case "error":
          null !== b.error && J(b.error.bind(b, a.g))();break;default:
          null !== b.error && J(b.error.bind(b, a.g))();}
    };T.prototype.T = function () {
      F("resume", [], arguments);var a = "paused" === this.b || "pausing" === this.b;a && S(this, "running");return a;
    };T.prototype.R = function () {
      F("pause", [], arguments);var a = "running" === this.b;a && S(this, "pausing");return a;
    };T.prototype.cancel = function () {
      F("cancel", [], arguments);var a = "running" === this.b || "pausing" === this.b;a && S(this, "canceling");return a;
    };var W = function W(a, b) {
      this.a = a;this.location = b instanceof A ? b : Aa(b);
    };W.prototype.toString = function () {
      F("toString", [], arguments);return "gs://" + this.location.bucket + "/" + this.location.path;
    };var Vb = function Vb(a, b) {
      return new W(a, b);
    };h = W.prototype;h.J = function (a) {
      F("child", [H()], arguments);var b = Ja(this.location.path, a);return Vb(this.a, new A(this.location.bucket, b));
    };
    h.ma = function () {
      var a;a = this.location.path;if (0 == a.length) a = null;else {
        var b = a.lastIndexOf("/");a = -1 === b ? "" : a.slice(0, b);
      }return null === a ? null : Vb(this.a, new A(this.location.bucket, a));
    };h.oa = function () {
      return Vb(this.a, new A(this.location.bucket, ""));
    };h.W = function () {
      return this.location.bucket;
    };h.ha = function () {
      return this.location.path;
    };h.la = function () {
      return Ka(this.location.path);
    };h.qa = function () {
      return this.a.m;
    };
    h.aa = function (a, b) {
      F("put", [Ta(), new G(Ra, !0)], arguments);X(this, "put");return new T(this, this.a, this.location, Na(), new M(a), b);
    };h.ba = function (a, b, c) {
      F("putString", [H(), H(pb, !0), new G(Ra, !0)], arguments);X(this, "putString");var d = ub(B(b) ? b : "raw", a),
          e = c ? oa(c) : {};!B(e.contentType) && B(d.a) && (e.contentType = d.a);return new T(this, this.a, this.location, Na(), new M(d.data, !0), e);
    };
    h.Z = function () {
      F("delete", [], arguments);X(this, "delete");var a = this;return Ia(this.a).then(function (b) {
        var c = Ab(a.a, a.location);return D(a.a, c, b).a();
      });
    };h.K = function () {
      F("getMetadata", [], arguments);X(this, "getMetadata");var a = this;return Ia(this.a).then(function (b) {
        var c = zb(a.a, a.location, Na());return D(a.a, c, b).a();
      });
    };
    h.ca = function (a) {
      F("updateMetadata", [new G(Ra, void 0)], arguments);X(this, "updateMetadata");var b = this;return Ia(this.a).then(function (c) {
        var d = b.a,
            e = b.location,
            g = a,
            f = Na(),
            k = za(e),
            k = v + "/v0" + k,
            g = Qa(g, f),
            d = new w(k, "PATCH", xb(d, f), d.c);d.headers = { "Content-Type": "application/json; charset=utf-8" };d.body = g;d.a = yb(e);return D(b.a, d, c).a();
      });
    };
    h.$ = function () {
      F("getDownloadURL", [], arguments);X(this, "getDownloadURL");return this.K().then(function (a) {
        a = a.downloadURLs[0];if (B(a)) return a;throw new r("no-download-url", "The given file does not have any download URLs.");
      });
    };var X = function X(a, b) {
      if ("" === a.location.path) throw new r("invalid-root-operation", "The operation '" + b + "' cannot be performed on a root reference, create a non-root reference using child, such as .child('file.png').");
    };var Y = function Y(a, b, c) {
      this.a = new Ha(a, function (a, b) {
        return new W(a, b);
      }, xa, this, b);this.c = a;q(c) ? this.b = Ba(c) : null != this.a.bucket() && (this.b = new A(this.a.bucket(), ""));this.f = new Wb(this);
    };h = Y.prototype;h.da = function (a) {
      F("ref", [H(function (a) {
        if (/^[A-Za-z]+:\/\//.test(a)) throw "Expected child path but got a URL, use refFromURL instead.";
      }, !0)], arguments);if (null === this.b) throw Error("No Storage Bucket defined in Firebase Options.");var b = new W(this.a, this.b);return q(a) ? b.J(a) : b;
    };
    h.ea = function (a) {
      F("refFromURL", [H(function (a) {
        if (!/^[A-Za-z]+:\/\//.test(a)) throw "Expected full URL but got a child path, use ref instead.";try {
          Aa(a);
        } catch (c) {
          throw "Expected valid full URL but got an invalid one.";
        }
      }, !1)], arguments);return new W(this.a, a);
    };h.ja = function () {
      return this.a.b;
    };h.ga = function (a) {
      F("setMaxUploadRetryTime", [Ua()], arguments);this.a.b = a;
    };h.ia = function () {
      return this.a.c;
    };h.fa = function (a) {
      F("setMaxOperationRetryTime", [Ua()], arguments);this.a.c = a;
    };h.V = function () {
      return this.c;
    };
    h.S = function () {
      return this.f;
    };var Wb = function Wb(a) {
      this.a = a;
    };Wb.prototype.b = function () {
      var a = this.a.a;a.f = !0;a.a = null;Ea(a.i);
    };var Z = function Z(a, b, c) {
      Object.defineProperty(a, b, { get: c });
    };W.prototype.toString = W.prototype.toString;W.prototype.child = W.prototype.J;W.prototype.put = W.prototype.aa;W.prototype.putString = W.prototype.ba;W.prototype["delete"] = W.prototype.Z;W.prototype.getMetadata = W.prototype.K;W.prototype.updateMetadata = W.prototype.ca;W.prototype.getDownloadURL = W.prototype.$;Z(W.prototype, "parent", W.prototype.ma);Z(W.prototype, "root", W.prototype.oa);Z(W.prototype, "bucket", W.prototype.W);Z(W.prototype, "fullPath", W.prototype.ha);
    Z(W.prototype, "name", W.prototype.la);Z(W.prototype, "storage", W.prototype.qa);Y.prototype.ref = Y.prototype.da;Y.prototype.refFromURL = Y.prototype.ea;Z(Y.prototype, "maxOperationRetryTime", Y.prototype.ia);Y.prototype.setMaxOperationRetryTime = Y.prototype.fa;Z(Y.prototype, "maxUploadRetryTime", Y.prototype.ja);Y.prototype.setMaxUploadRetryTime = Y.prototype.ga;Z(Y.prototype, "app", Y.prototype.V);Z(Y.prototype, "INTERNAL", Y.prototype.S);Wb.prototype["delete"] = Wb.prototype.b;Y.prototype.capi_ = function (a) {
      v = a;
    };
    T.prototype.on = T.prototype.P;T.prototype.resume = T.prototype.T;T.prototype.pause = T.prototype.R;T.prototype.cancel = T.prototype.cancel;T.prototype.then = T.prototype.then;T.prototype["catch"] = T.prototype["catch"];Z(T.prototype, "snapshot", T.prototype.C);Z(Q.prototype, "bytesTransferred", Q.prototype.X);Z(Q.prototype, "totalBytes", Q.prototype.sa);Z(Q.prototype, "state", Q.prototype.pa);Z(Q.prototype, "metadata", Q.prototype.ka);Z(Q.prototype, "downloadURL", Q.prototype.Y);Z(Q.prototype, "task", Q.prototype.ra);
    Z(Q.prototype, "ref", Q.prototype.na);Ib.STATE_CHANGED = "state_changed";P.RUNNING = "running";P.PAUSED = "paused";P.SUCCESS = "success";P.CANCELED = "canceled";P.ERROR = "error";L.RAW = "raw";L.BASE64 = "base64";L.BASE64URL = "base64url";L.DATA_URL = "data_url";
    (function () {
      function a(a, b, e) {
        return new Y(a, new Kb(), e);
      }var b = { TaskState: P, TaskEvent: Ib, StringFormat: L, Storage: Y, Reference: W };if ("undefined" !== typeof firebase) firebase.INTERNAL.registerService("storage", a, b, void 0, !0);else throw Error("Cannot install Firebase Storage - be sure to load firebase-app.js first.");
    })();
  }).call(this);
}).call(typeof global !== undefined ? global : typeof self !== undefined ? self : typeof window !== undefined ? window : {});
module.exports = firebase.storage;
}, 444, null, "firebase/storage.js");
__d(/* Runner_SNA/src/reducers/index.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var _redux = require(413    ); // 413 = redux

var _AuthReducer = require(446            ); // 446 = ./AuthReducer

var _AuthReducer2 = babelHelpers.interopRequireDefault(_AuthReducer);

var _DepartureReducer = require(448                 ); // 448 = ./DepartureReducer

var _DepartureReducer2 = babelHelpers.interopRequireDefault(_DepartureReducer);

exports.default = (0, _redux.combineReducers)({
  auth: _AuthReducer2.default,
  departure: _DepartureReducer2.default
});
}, 445, null, "Runner_SNA/src/reducers/index.js");
__d(/* Runner_SNA/src/reducers/AuthReducer.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var _types = require(447               ); // 447 = ../actions/types

var INITIAL_STATE = {
  email: '',
  password: '',
  user: null,
  error: '',
  loading: false
};

exports.default = function () {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_STATE;
  var action = arguments[1];

  switch (action.type) {
    case _types.EMAIL_CHANGED:
      return babelHelpers.extends({}, state, { email: action.payload });
    case _types.PASSWORD_CHANGED:
      return babelHelpers.extends({}, state, { password: action.payload });
    case _types.LOGIN_USER:
      return babelHelpers.extends({}, state, { loading: true, error: '' });
    case _types.LOGIN_USER_SUCCESS:
      return babelHelpers.extends({}, state, INITIAL_STATE, { user: action.payload });
    case _types.LOGIN_USER_FAIL:
      return babelHelpers.extends({}, state, { error: 'Login Failed. Please Try Again.', password: '', loading: false });
    default:
      return state;
  }
};
}, 446, null, "Runner_SNA/src/reducers/AuthReducer.js");
__d(/* Runner_SNA/src/actions/types.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
var EMAIL_CHANGED = exports.EMAIL_CHANGED = 'email_changed';
var PASSWORD_CHANGED = exports.PASSWORD_CHANGED = 'password_changed';
var LOGIN_USER_SUCCESS = exports.LOGIN_USER_SUCCESS = 'login_user_success';
var LOGIN_USER_FAIL = exports.LOGIN_USER_FAIL = 'login_user_fail';
var LOGIN_USER = exports.LOGIN_USER = 'login_user';

var SELECT_WHEELCHAIR_1 = exports.SELECT_WHEELCHAIR_1 = 'select_wheelchair_1';
var SELECT_WHEELCHAIR_2 = exports.SELECT_WHEELCHAIR_2 = 'select_wheelchair_2';
var SET_NUMBER_OF_PASSENGERS = exports.SET_NUMBER_OF_PASSENGERS = 'set_number_of_passengers';
var SCAN_BOARDING_PASS_1 = exports.SCAN_BOARDING_PASS_1 = 'scan_boarding_pass_1';
var SCAN_BOARDING_PASS_2 = exports.SCAN_BOARDING_PASS_2 = 'scan_boarding_pass_2';
var ALTERNATE_BOARDING_PASS_INPUT = exports.ALTERNATE_BOARDING_PASS_INPUT = 'alternate_boaring_pass_input';
var PASSENGER_1_FIRST_NAME_CHANGED = exports.PASSENGER_1_FIRST_NAME_CHANGED = 'passenger_1_first_name_changed';
var PASSENGER_1_LAST_NAME_CHANGED = exports.PASSENGER_1_LAST_NAME_CHANGED = 'passenger_1_last_name_changed';
var PASSENGER_2_FIRST_NAME_CHANGED = exports.PASSENGER_2_FIRST_NAME_CHANGED = 'passenger_2_first_name_changed';
var PASSENGER_2_LAST_NAME_CHANGED = exports.PASSENGER_2_LAST_NAME_CHANGED = 'passenger_2_last_name_changed';
var AIRLINE_CHANGED = exports.AIRLINE_CHANGED = 'airline_changed';
var FLIGHT_NUMBER_CHANGED = exports.FLIGHT_NUMBER_CHANGED = 'flight_number_changed';
var SELECT_GATE_NUMBER = exports.SELECT_GATE_NUMBER = 'select_gate_number';
var SELECT_STOP = exports.SELECT_STOP = 'select_stop';
var TSA_START = exports.TSA_START = 'tsa_start';
var TSA_END = exports.TSA_END = 'tsa_end';
var SET_FINAL_GATE_NUMBER = exports.SET_FINAL_GATE_NUMBER = 'set_final_gate_number';
var ADD_STOP = exports.ADD_STOP = 'add_stop';
var ADD_STARTING_POINT = exports.ADD_STARTING_POINT = 'add_starting_point';
var UPDATE_CURRENT_POSITION = exports.UPDATE_CURRENT_POSITION = 'update_current_position';
var SET_TIME_START = exports.SET_TIME_START = 'set_time_start';
var SET_TIME_END = exports.SET_TIME_END = 'set_time_end';
var SET_RUN_TYPE = exports.SET_RUN_TYPE = 'set_run_type';
var ADD_STARTING_POINT_ARRIVAL = exports.ADD_STARTING_POINT_ARRIVAL = 'add_starting_point_arrival';
var ADD_STARTING_LOCATION_ARRIVAL = exports.ADD_STARTING_LOCATION_ARRIVAL = 'add_starting_location_arrival';
var ADD_DESTINATION = exports.ADD_DESTINATION = 'add_destination';
var RETURN_TO_START = exports.RETURN_TO_START = 'return_to_start';

var UPDATE_WHEELCHAIR_POSITION = exports.UPDATE_WHEELCHAIR_POSITION = 'update_wheelchair_position';
}, 447, null, "Runner_SNA/src/actions/types.js");
__d(/* Runner_SNA/src/reducers/DepartureReducer.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var _types = require(447               ); // 447 = ../actions/types

var INITIAL_STATE = {
  runType: '',
  passenger1Wheelchair: '',
  passenger1FirstName: '',
  passenger1LastName: '',
  passenger2Wheelchair: '',
  passenger2FirstName: '',
  passenger2LastName: '',
  numPassengers: 1,
  airline: '',
  flightNumber: '',
  destinationGate: '',
  finalGate: '',
  employeeLogin: '',
  deviceID: '',
  currentGPS: {
    latitude: '',
    longitude: '',
    timestamp: ''
  },
  timeStart: '',
  timeGateArrival: '',
  locationFirstContact: {
    buttonValue: '',
    gps: {
      latitude: '',
      longitude: '',
      timestamp: ''
    }
  },
  timeTSAStart: '',
  timeTSAEnd: '',
  numStops: 0,
  stops: {},
  timeEnd: '',
  commentsTSA: '',
  commentsEnd: '',
  destination: ''
};

exports.default = function () {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_STATE;
  var action = arguments[1];

  switch (action.type) {
    case _types.SET_RUN_TYPE:
      return babelHelpers.extends({}, state, { runType: action.payload.runType, deviceID: action.payload.deviceID, timeStart: Date.now() });
    case _types.SET_NUMBER_OF_PASSENGERS:
      return babelHelpers.extends({}, state, { numPassengers: action.payload });
    case _types.SELECT_WHEELCHAIR_1:
      return babelHelpers.extends({}, state, { passenger1Wheelchair: action.payload });
    case _types.SELECT_WHEELCHAIR_2:
      return babelHelpers.extends({}, state, { passenger2Wheelchair: action.payload });
    case _types.SCAN_BOARDING_PASS_1:
      console.log('SBP 1: ', action.payload.airline, action.payload.flightNumber);
      return babelHelpers.extends({}, state, { passenger1FirstName: action.payload.firstName, passenger1LastName: action.payload.lastName, airline: action.payload.airline, flightNumber: action.payload.flightNumber });
    case _types.SCAN_BOARDING_PASS_2:
      console.log('SBP 2: ', action.payload);
      return babelHelpers.extends({}, state, { passenger2FirstName: action.payload.firstName, passenger2LastName: action.payload.lastName, airline: action.payload.airline, flightNumber: action.payload.flightNumber });

    case _types.PASSENGER_1_FIRST_NAME_CHANGED:
      return babelHelpers.extends({}, state, { passenger1FirstName: action.payload });
    case _types.PASSENGER_1_LAST_NAME_CHANGED:
      return babelHelpers.extends({}, state, { passenger1LastName: action.payload });
    case _types.PASSENGER_2_FIRST_NAME_CHANGED:
      return babelHelpers.extends({}, state, { passenger2FirstName: action.payload });
    case _types.PASSENGER_2_LAST_NAME_CHANGED:
      return babelHelpers.extends({}, state, { passenger2LastName: action.payload });
    case _types.AIRLINE_CHANGED:
      return babelHelpers.extends({}, state, { airline: action.payload });
    case _types.FLIGHT_NUMBER_CHANGED:
      return babelHelpers.extends({}, state, { flightNumber: action.payload });
    case _types.SELECT_GATE_NUMBER:
      return babelHelpers.extends({}, state, { destinationGate: action.payload });
    case _types.ADD_STARTING_POINT:
      return babelHelpers.extends({}, state, { startLocation: action.payload.startLocation, startLocationGPS: action.payload.startLocationGPS });
    case _types.ADD_STARTING_POINT_ARRIVAL:
      return babelHelpers.extends({}, state, { startLocationGPS: action.payload.startLocationGPS });
    case _types.ADD_STARTING_LOCATION_ARRIVAL:
      return babelHelpers.extends({}, state, { startLocation: action.payload });
    case _types.SELECT_STOP:
      return babelHelpers.extends({}, state, { error: 'Login Failed. Please Try Again.', password: '', loading: false });
    case _types.TSA_START:
      return babelHelpers.extends({}, state, { timeTSAStart: action.payload });
    case _types.TSA_END:
      return babelHelpers.extends({}, state, { commentsTSA: action.payload.commentsTSA, timeTSAStart: action.payload.timeTSAStart, timeTSAEnd: action.payload.timeTSAEnd });
    case _types.ADD_STOP:
      return babelHelpers.extends({}, state, { stops: action.payload });
    case _types.ADD_DESTINATION:
      return babelHelpers.extends({}, state, { destination: action.payload });
    case _types.UPDATE_CURRENT_POSITION:
      return babelHelpers.extends({}, state, { currentGPS: action.payload });
    case _types.SET_FINAL_GATE_NUMBER:
      return babelHelpers.extends({}, state, { finalGate: action.payload });
    case _types.SET_TIME_START:
      return babelHelpers.extends({}, state, { timeStart: action.payload });
    case _types.SET_TIME_END:
      return babelHelpers.extends({}, state, { timeEnd: action.payload });
    case _types.RETURN_TO_START:
      return babelHelpers.extends({}, state, INITIAL_STATE);
    default:
      return state;
  }
};
}, 448, null, "Runner_SNA/src/reducers/DepartureReducer.js");
__d(/* Runner_SNA/config.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
    value: true
});
var config = {
    apiKey: "AIzaSyANZkJFfO_h_h-TIFtevNMYrkBb0pRv_AA",
    authDomain: "sna-test.firebaseapp.com",
    databaseURL: "https://sna-test.firebaseio.com",
    storageBucket: "sna-test.appspot.com",
    messagingSenderId: "1051847567636"
};

exports.config = config;
}, 449, null, "Runner_SNA/config.js");
__d(/* Runner_SNA/src/components/LoginForm.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require(282    ); // 282 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(12            ); // 12 = react-native

var _reactRedux = require(402          ); // 402 = react-redux

var _actions = require(451         ); // 451 = ../actions

var _common = require(501       ); // 501 = ./common

var LoginForm = function (_Component) {
  babelHelpers.inherits(LoginForm, _Component);

  function LoginForm(props) {
    babelHelpers.classCallCheck(this, LoginForm);
    return babelHelpers.possibleConstructorReturn(this, (LoginForm.__proto__ || Object.getPrototypeOf(LoginForm)).call(this, props));
  }

  babelHelpers.createClass(LoginForm, [{
    key: 'onEmailChange',
    value: function onEmailChange(text) {
      this.props.emailChanged(text);
    }
  }, {
    key: 'onPasswordChange',
    value: function onPasswordChange(text) {
      this.props.passwordChanged(text);
    }
  }, {
    key: 'onButtonPress',
    value: function onButtonPress() {
      var _props = this.props,
          email = _props.email,
          password = _props.password;


      this.props.loginUser({ email: email, password: password });
    }
  }, {
    key: 'renderButton',
    value: function renderButton() {
      if (this.props.loading) {
        return _react2.default.createElement(_common.Spinner, { size: 'large' });
      }
      return _react2.default.createElement(
        _common.Button,
        { onPress: this.onButtonPress.bind(this) },
        'Log In'
      );
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        _common.Card,
        null,
        _react2.default.createElement(
          _common.CardSection,
          null,
          _react2.default.createElement(_common.Input, {
            label: 'Email',
            placeholder: 'email@gmail.com',
            onChangeText: this.onEmailChange.bind(this),
            value: this.props.email
          })
        ),
        _react2.default.createElement(
          _common.CardSection,
          null,
          _react2.default.createElement(_common.Input, {
            secureTextEntry: true,
            label: 'Password',
            placeholder: 'password',
            onChangeText: this.onPasswordChange.bind(this),
            value: this.props.password
          })
        ),
        _react2.default.createElement(
          _reactNative.Text,
          { style: styles.errorTextStyle },
          this.props.error
        ),
        _react2.default.createElement(
          _common.CardSection,
          null,
          this.renderButton()
        )
      );
    }
  }]);
  return LoginForm;
}(_react.Component);

var styles = {
  errorTextStyle: {
    fontSize: 20,
    alignSelf: 'center',
    color: 'red'
  }
};

var mapStateToProps = function mapStateToProps(_ref) {
  var auth = _ref.auth;
  var email = auth.email,
      password = auth.password,
      error = auth.error,
      loading = auth.loading;

  return { email: email, password: password, error: error, loading: loading };
};

exports.default = (0, _reactRedux.connect)(mapStateToProps, {
  emailChanged: _actions.emailChanged, passwordChanged: _actions.passwordChanged, loginUser: _actions.loginUser, updateCurrentPosition: _actions.updateCurrentPosition
})(LoginForm);
}, 450, null, "Runner_SNA/src/components/LoginForm.js");
__d(/* Runner_SNA/src/actions/index.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var _AuthActions = require(452            ); // 452 = ./AuthActions

Object.keys(_AuthActions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _AuthActions[key];
    }
  });
});

var _DepartureActions = require(500                 ); // 500 = ./DepartureActions

Object.keys(_DepartureActions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _DepartureActions[key];
    }
  });
});
}, 451, null, "Runner_SNA/src/actions/index.js");
__d(/* Runner_SNA/src/actions/AuthActions.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loginUser = exports.passwordChanged = exports.emailChanged = undefined;

var _firebase = require(440       ); // 440 = firebase

var _firebase2 = babelHelpers.interopRequireDefault(_firebase);

var _reactNativeRouterFlux = require(453                       ); // 453 = react-native-router-flux

var _types = require(447      ); // 447 = ./types

var emailChanged = exports.emailChanged = function emailChanged(text) {
  return {
    type: _types.EMAIL_CHANGED,
    payload: text
  };
};

var passwordChanged = exports.passwordChanged = function passwordChanged(text) {
  return {
    type: _types.PASSWORD_CHANGED,
    payload: text
  };
};

var loginUser = exports.loginUser = function loginUser(_ref) {
  var email = _ref.email,
      password = _ref.password;

  return function (dispatch) {
    dispatch({ type: _types.LOGIN_USER });

    _firebase2.default.auth().signInWithEmailAndPassword(email, password).then(function (user) {
      return loginUserSuccess(dispatch, user);
    }).catch(function (error) {
      console.log(error);

      _firebase2.default.auth().createUserWithEmailAndPassword(email, password).then(function (user) {
        return loginUserSuccess(dispatch, user);
      }).catch(function () {
        return loginUserFail(dispatch);
      });
    });
  };
};

var loginUserFail = function loginUserFail(dispatch) {
  dispatch({ type: _types.LOGIN_USER_FAIL });
};

var loginUserSuccess = function loginUserSuccess(dispatch, user) {
  dispatch({
    type: _types.LOGIN_USER_SUCCESS,
    payload: user
  });

  _reactNativeRouterFlux.Actions.home();
};
}, 452, null, "Runner_SNA/src/actions/AuthActions.js");
__d(/* react-native-router-flux/index.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Util = exports.getInitialState = exports.TabBar = exports.Switch = exports.Scene = exports.Router = exports.Reducer = exports.NavBar = exports.Modal = exports.DefaultRenderer = exports.ActionConst = exports.Actions = undefined;

var _Actions = require(454            ); // 454 = ./src/Actions

var _Actions2 = babelHelpers.interopRequireDefault(_Actions);

var _ActionConst = require(457                ); // 457 = ./src/ActionConst

var ActionConst = babelHelpers.interopRequireWildcard(_ActionConst);

var _DefaultRenderer = require(458                    ); // 458 = ./src/DefaultRenderer

var _DefaultRenderer2 = babelHelpers.interopRequireDefault(_DefaultRenderer);

var _Modal = require(495          ); // 495 = ./src/Modal

var _Modal2 = babelHelpers.interopRequireDefault(_Modal);

var _NavBar = require(464           ); // 464 = ./src/NavBar

var _NavBar2 = babelHelpers.interopRequireDefault(_NavBar);

var _Reducer = require(496            ); // 496 = ./src/Reducer

var _Reducer2 = babelHelpers.interopRequireDefault(_Reducer);

var _Router = require(498           ); // 498 = ./src/Router

var _Router2 = babelHelpers.interopRequireDefault(_Router);

var _Scene = require(456          ); // 456 = ./src/Scene

var _Scene2 = babelHelpers.interopRequireDefault(_Scene);

var _Switch = require(499           ); // 499 = ./src/Switch

var _Switch2 = babelHelpers.interopRequireDefault(_Switch);

var _TabBar = require(459           ); // 459 = ./src/TabBar

var _TabBar2 = babelHelpers.interopRequireDefault(_TabBar);

var _State = require(497          ); // 497 = ./src/State

var _State2 = babelHelpers.interopRequireDefault(_State);

var _Util = require(455         ); // 455 = ./src/Util

var _Util2 = babelHelpers.interopRequireDefault(_Util);

exports.Actions = _Actions2.default;
exports.ActionConst = ActionConst;
exports.DefaultRenderer = _DefaultRenderer2.default;
exports.Modal = _Modal2.default;
exports.NavBar = _NavBar2.default;
exports.Reducer = _Reducer2.default;
exports.Router = _Router2.default;
exports.Scene = _Scene2.default;
exports.Switch = _Switch2.default;
exports.TabBar = _TabBar2.default;
exports.getInitialState = _State2.default;
exports.Util = _Util2.default;
}, 453, null, "react-native-router-flux/index.js");
__d(/* react-native-router-flux/src/Actions.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ActionMap = undefined;

var _ActionMap;

var _Util = require(455     ); // 455 = ./Util

var _Scene = require(456      ); // 456 = ./Scene

var _Scene2 = babelHelpers.interopRequireDefault(_Scene);

var _ActionConst = require(457            ); // 457 = ./ActionConst

var ActionConst = babelHelpers.interopRequireWildcard(_ActionConst);
var ActionMap = exports.ActionMap = (_ActionMap = {
  jump: ActionConst.JUMP,
  push: ActionConst.PUSH,
  replace: ActionConst.REPLACE,
  back: ActionConst.BACK,
  BackAction: ActionConst.BACK_ACTION,
  popTo: ActionConst.POP_TO,
  refresh: ActionConst.REFRESH,
  reset: ActionConst.RESET,
  focus: ActionConst.FOCUS,
  pushOrPop: ActionConst.PUSH_OR_POP
}, babelHelpers.defineProperty(_ActionMap, ActionConst.JUMP, ActionConst.JUMP), babelHelpers.defineProperty(_ActionMap, ActionConst.PUSH, ActionConst.PUSH), babelHelpers.defineProperty(_ActionMap, ActionConst.REPLACE, ActionConst.REPLACE), babelHelpers.defineProperty(_ActionMap, ActionConst.BACK, ActionConst.BACK), babelHelpers.defineProperty(_ActionMap, ActionConst.BACK_ACTION, ActionConst.BACK_ACTION), babelHelpers.defineProperty(_ActionMap, ActionConst.POP_TO, ActionConst.POP_TO), babelHelpers.defineProperty(_ActionMap, ActionConst.REFRESH, ActionConst.REFRESH), babelHelpers.defineProperty(_ActionMap, ActionConst.RESET, ActionConst.RESET), babelHelpers.defineProperty(_ActionMap, ActionConst.FOCUS, ActionConst.FOCUS), babelHelpers.defineProperty(_ActionMap, ActionConst.PUSH_OR_POP, ActionConst.PUSH_OR_POP), _ActionMap);

function filterParam(data) {
  if (data.toString() !== '[object Object]') {
    return { data: data };
  }
  var proto = (data || {}).constructor.name;

  if (!data || proto !== 'Object') {
    return {};
  }
  return data;
}

var reservedKeys = ['create', 'callback', 'iterate', 'current'].concat(babelHelpers.toConsumableArray(Object.keys(ActionMap)));

function getInheritProps(props) {
  var key = props.key,
      style = props.style,
      type = props.type,
      component = props.component,
      tabs = props.tabs,
      sceneKey = props.sceneKey,
      parent = props.parent,
      children = props.children,
      parentProps = babelHelpers.objectWithoutProperties(props, ['key', 'style', 'type', 'component', 'tabs', 'sceneKey', 'parent', 'children']);

  return parentProps.passProps ? parentProps : {};
}

var Actions = function () {
  function Actions() {
    babelHelpers.classCallCheck(this, Actions);

    this.callback = null;
    this.create = this.create.bind(this);
    this.iterate = this.iterate.bind(this);
    this.pop = this.pop.bind(this);
    this.refresh = this.refresh.bind(this);
    this.focus = this.focus.bind(this);
  }

  babelHelpers.createClass(Actions, [{
    key: 'iterate',
    value: function iterate(root) {
      var parentProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var _this = this;

      var refsParam = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var wrapBy = arguments[3];

      var refs = refsParam;
      (0, _Util.assert)(root.props, 'props should be defined for stack');
      var key = root.key;
      (0, _Util.assert)(key, 'unique key should be defined ');
      (0, _Util.assert)(reservedKeys.indexOf(key) === -1, '\'' + key + '\' is not allowed as key name. Reserved keys: [' + reservedKeys.join(', ') + ']');
      var _root$props = root.props,
          children = _root$props.children,
          component = _root$props.component,
          staticProps = babelHelpers.objectWithoutProperties(_root$props, ['children', 'component']);

      var type = root.props.type || (parentProps.tabs ? ActionConst.JUMP : ActionConst.PUSH);
      if (type === 'switch') {
        type = ActionConst.JUMP;
      }
      var inheritProps = getInheritProps(parentProps);
      var componentProps = component ? { component: wrapBy(component) } : {};

      if (wrapBy) {
        Object.keys(staticProps).forEach(function (prop) {
          var componentClass = staticProps[prop];
          if (componentClass && componentClass.prototype && componentClass.prototype.render) {
            componentProps[prop] = wrapBy(componentClass);
            delete staticProps[prop];
          }
        });
      }
      var res = babelHelpers.extends({
        key: key,
        name: key,
        sceneKey: key,
        parent: parentProps.key,
        type: type
      }, inheritProps, staticProps, componentProps);
      var list = children || [];
      var normalized = [];
      if (!(list instanceof Array)) {
        list = [list];
      }
      list.forEach(function (item) {
        if (item) {
          if (item instanceof Array) {
            item.forEach(function (it) {
              normalized.push(it);
            });
          } else {
            normalized.push(item);
          }
        }
      });
      list = normalized;

      var condition = function condition(el) {
        return !el.props.component && !el.props.children && !el.props.onPress && (!el.props.type || ActionMap[el.props.type] === ActionConst.REFRESH);
      };

      var baseKey = root.key;
      var subStateParent = parentProps.key;
      var subStates = list.filter(condition);
      list = list.filter(function (el) {
        return !condition(el);
      });
      if (list.length) {
        res.children = list.map(function (c) {
          return _this.iterate(c, res, refs, wrapBy).key;
        });
      } else {
        if (!staticProps.onPress) {
          (0, _Util.assert)(component, 'component property is not set for key=' + key);
        }

        if (parentProps.tabs) {
          var innerKey = res.key + '_';
          baseKey = innerKey;
          subStateParent = res.key;
          var inner = babelHelpers.extends({}, res, { name: key, key: innerKey,
            sceneKey: innerKey, type: ActionConst.PUSH, parent: res.key });
          refs[innerKey] = inner;
          res.children = [innerKey];
          delete res.component;
        }
        res.index = 0;
      }

      var _loop = function _loop(el) {
        refs[el.key] = babelHelpers.extends({ key: el.key, name: el.key }, el.props, { type: ActionConst.REFRESH,
          base: baseKey, parent: subStateParent });
        if (_this[el.key]) {
          console.log('Key ' + el.key + ' is already defined!');
        }
        _this[el.key] = function () {
          var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

          (0, _Util.assert)(_this.callback, 'Actions.callback is not defined!');
          _this.callback(babelHelpers.extends({ key: el.key, type: ActionConst.REFRESH }, filterParam(props)));
        };
      };

      for (var _iterator = subStates, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
        var _ref;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref = _i.value;
        }

        var el = _ref;

        _loop(el);
      }
      if (this[key]) {
        console.log('Key ' + key + ' is already defined!');
      }
      this[key] = function () {
        var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        (0, _Util.assert)(_this.callback, 'Actions.callback is not defined!');
        _this.callback(babelHelpers.extends({ key: key, type: type }, filterParam(props)));
      };
      refs[res.key] = res;

      return res;
    }
  }, {
    key: 'popTo',
    value: function popTo() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      return this.callback(babelHelpers.extends({}, filterParam(props), { type: ActionConst.POP_TO }));
    }
  }, {
    key: 'pop',
    value: function pop() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      return this.callback(babelHelpers.extends({}, filterParam(props), { type: ActionConst.BACK_ACTION }));
    }
  }, {
    key: 'jump',
    value: function jump() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      return this.callback(babelHelpers.extends({}, filterParam(props), { type: ActionConst.JUMP }));
    }
  }, {
    key: 'refresh',
    value: function refresh() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      return this.callback(babelHelpers.extends({}, filterParam(props), { type: ActionConst.REFRESH }));
    }
  }, {
    key: 'focus',
    value: function focus() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      return this.callback(babelHelpers.extends({}, filterParam(props), { type: ActionConst.FOCUS }));
    }
  }, {
    key: 'create',
    value: function create(scene) {
      var wrapBy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (x) {
        return x;
      };

      (0, _Util.assert)(scene, 'root scene should be defined');
      var refs = {};
      this.iterate(scene, {}, refs, wrapBy);
      return refs;
    }
  }]);
  return Actions;
}();

exports.default = new Actions();
}, 454, null, "react-native-router-flux/src/Actions.js");
__d(/* react-native-router-flux/src/Util.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deepestExplicitValueForKey = deepestExplicitValueForKey;
exports.assert = assert;
function deepestExplicitValueForKey(navigationState, key) {
  var current = void 0;
  var selected = navigationState;

  while (selected.hasOwnProperty('children')) {
    if (!selected.tabs) {
      for (var i = 0; i < selected.index; i++) {
        if (typeof selected.children[i][key] !== 'undefined') {
          current = selected.children[i][key];
        }
      }
    }

    selected = selected.children[selected.index];
    if (typeof selected[key] !== 'undefined') {
      current = selected[key];
    }
  }

  if (typeof current === 'undefined') {
    current = navigationState[key];
  }

  return current;
}

function assert(expr, failDescription) {
  if (!expr) {
    throw new Error('[react-native-router-flux] ' + failDescription);
  }
}

exports.default = {
  deepestExplicitValueForKey: deepestExplicitValueForKey,
  assert: assert
};
}, 455, null, "react-native-router-flux/src/Util.js");
__d(/* react-native-router-flux/src/Scene.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require(282    ); // 282 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(12            ); // 12 = react-native

var _class = function (_React$Component) {
  babelHelpers.inherits(_class, _React$Component);

  function _class() {
    babelHelpers.classCallCheck(this, _class);
    return babelHelpers.possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));
  }

  babelHelpers.createClass(_class, [{
    key: 'render',
    value: function render() {
      return null;
    }
  }]);
  return _class;
}(_react2.default.Component);

_class.propTypes = {
  tabBarStyle: _reactNative.View.propTypes.style,
  tabBarSelectedItemStyle: _reactNative.View.propTypes.style,
  tabBarIconContainerStyle: _reactNative.View.propTypes.style,
  tabBarShadowStyle: _reactNative.View.propTypes.style,
  tabSceneStyle: _reactNative.View.propTypes.style,
  tabStyle: _reactNative.View.propTypes.style,
  tabTitleStyle: _reactNative.Text.propTypes.style,
  tabSelectedTitleStyle: _reactNative.Text.propTypes.style,
  tabTitle: _react.PropTypes.string
};
exports.default = _class;
}, 456, null, "react-native-router-flux/src/Scene.js");
__d(/* react-native-router-flux/src/ActionConst.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
var JUMP = exports.JUMP = 'REACT_NATIVE_ROUTER_FLUX_JUMP';
var PUSH = exports.PUSH = 'REACT_NATIVE_ROUTER_FLUX_PUSH';
var PUSH_OR_POP = exports.PUSH_OR_POP = 'REACT_NATIVE_ROUTER_FLUX_PUSH_OR_POP';
var REPLACE = exports.REPLACE = 'REACT_NATIVE_ROUTER_FLUX_REPLACE';
var BACK = exports.BACK = 'REACT_NATIVE_ROUTER_FLUX_BACK';
var BACK_ACTION = exports.BACK_ACTION = 'REACT_NATIVE_ROUTER_FLUX_BACK_ACTION';
var POP_TO = exports.POP_TO = 'REACT_NATIVE_ROUTER_FLUX_POP_TO';
var REFRESH = exports.REFRESH = 'REACT_NATIVE_ROUTER_FLUX_REFRESH';
var RESET = exports.RESET = 'REACT_NATIVE_ROUTER_FLUX_RESET';
var FOCUS = exports.FOCUS = 'REACT_NATIVE_ROUTER_FLUX_FOCUS';
}, 457, null, "react-native-router-flux/src/ActionConst.js");
__d(/* react-native-router-flux/src/DefaultRenderer.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require(282    ); // 282 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(12            ); // 12 = react-native

var _TabBar = require(459       ); // 459 = ./TabBar

var _TabBar2 = babelHelpers.interopRequireDefault(_TabBar);

var _NavBar = require(464       ); // 464 = ./NavBar

var _NavBar2 = babelHelpers.interopRequireDefault(_NavBar);

var _Actions = require(454        ); // 454 = ./Actions

var _Actions2 = babelHelpers.interopRequireDefault(_Actions);

var _Util = require(455     ); // 455 = ./Util

var _reactNativeExperimentalNavigation = require(467                                   ); // 467 = react-native-experimental-navigation

var _reactNativeExperimentalNavigation2 = babelHelpers.interopRequireDefault(_reactNativeExperimentalNavigation);

var _reactAddonsPureRenderMixin = require(483                             ); // 483 = react-addons-pure-render-mixin

var _reactAddonsPureRenderMixin2 = babelHelpers.interopRequireDefault(_reactAddonsPureRenderMixin);

var SCREEN_WIDTH = _reactNative.Dimensions.get('window').width;

var NavigationAnimatedView = _reactNativeExperimentalNavigation2.default.AnimatedView,
    NavigationCard = _reactNativeExperimentalNavigation2.default.Card;
var NavigationCardStackPanResponder = NavigationCard.CardStackPanResponder,
    NavigationCardStackStyleInterpolator = NavigationCard.CardStackStyleInterpolator;


var styles = _reactNative.StyleSheet.create({
  animatedView: {
    flex: 1,
    backgroundColor: 'transparent'
  },
  sceneStyle: {
    flex: 1
  }
});

function fadeInScene(props) {
  var position = props.position,
      scene = props.scene;


  var index = scene.index;
  var inputRange = [index - 1, index, index + 1];

  var opacity = position.interpolate({
    inputRange: inputRange,
    outputRange: [0, 1, 0.3]
  });

  var scale = position.interpolate({
    inputRange: inputRange,
    outputRange: [1, 1, 0.95]
  });

  var translateY = 0;
  var translateX = 0;

  return {
    opacity: opacity,
    transform: [{ scale: scale }, { translateX: translateX }, { translateY: translateY }]
  };
}

function leftToRight(props) {
  var position = props.position,
      scene = props.scene;


  var index = scene.index;
  var inputRange = [index - 1, index, index + 1];

  var translateX = position.interpolate({
    inputRange: inputRange,
    outputRange: [-SCREEN_WIDTH, 0, 0]
  });

  return {
    transform: [{ translateX: translateX }]
  };
}

var DefaultRenderer = function (_Component) {
  babelHelpers.inherits(DefaultRenderer, _Component);

  function DefaultRenderer(props) {
    babelHelpers.classCallCheck(this, DefaultRenderer);

    var _this = babelHelpers.possibleConstructorReturn(this, (DefaultRenderer.__proto__ || Object.getPrototypeOf(DefaultRenderer)).call(this, props));

    _this.shouldComponentUpdate = _reactAddonsPureRenderMixin2.default.shouldComponentUpdate.bind(_this);
    _this.renderCard = _this.renderCard.bind(_this);
    _this.renderScene = _this.renderScene.bind(_this);
    _this.renderHeader = _this.renderHeader.bind(_this);
    return _this;
  }

  babelHelpers.createClass(DefaultRenderer, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return {
        navigationState: this.props.navigationState
      };
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.dispatchFocusAction(this.props);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.navigationState !== this.props.navigationState) {
        this.dispatchFocusAction(nextProps);
      }
    }
  }, {
    key: 'getPanHandlers',
    value: function getPanHandlers(direction, props) {
      return direction === 'vertical' ? NavigationCardStackPanResponder.forVertical(props) : NavigationCardStackPanResponder.forHorizontal(props);
    }
  }, {
    key: 'dispatchFocusAction',
    value: function dispatchFocusAction(_ref) {
      var navigationState = _ref.navigationState;

      if (!navigationState || navigationState.component || navigationState.tabs) {
        return;
      }
      var scene = navigationState.children[navigationState.index];
      _Actions2.default.focus({ scene: scene });
    }
  }, {
    key: 'chooseInterpolator',
    value: function chooseInterpolator(direction, props) {
      switch (direction) {
        case 'vertical':
          return NavigationCardStackStyleInterpolator.forVertical(props);
        case 'fade':
          return fadeInScene(props);
        case 'leftToRight':
          return leftToRight(props);
        default:
          return NavigationCardStackStyleInterpolator.forHorizontal(props);
      }
    }
  }, {
    key: 'renderCard',
    value: function renderCard(props) {
      var _props$scene$navigati = props.scene.navigationState,
          key = _props$scene$navigati.key,
          direction = _props$scene$navigati.direction,
          animation = _props$scene$navigati.animation,
          getSceneStyle = _props$scene$navigati.getSceneStyle,
          getPanHandlers = _props$scene$navigati.getPanHandlers;


      var state = props.navigationState;
      var child = state.children[state.index];
      var selected = state.children[state.index];
      while (selected.hasOwnProperty('children')) {
        selected = selected.children[selected.index];
      }
      var _selected = selected,
          panHandlers = _selected.panHandlers,
          animationStyle = _selected.animationStyle;

      var isActive = child === selected;
      var computedProps = { isActive: isActive };
      if (isActive) {
        computedProps.hideNavBar = (0, _Util.deepestExplicitValueForKey)(props.navigationState, 'hideNavBar');
        computedProps.hideTabBar = (0, _Util.deepestExplicitValueForKey)(props.navigationState, 'hideTabBar');
      }

      var style = getSceneStyle ? getSceneStyle(props, computedProps) : null;

      var animType = animation && !direction ? animation : direction;

      if (typeof animationStyle === 'undefined') {
        animationStyle = this.chooseInterpolator(animType, props);
      }

      if (typeof animationStyle === 'function') {
        animationStyle = animationStyle(props);
      }

      if (typeof panHandlers === 'undefined') {
        panHandlers = getPanHandlers ? getPanHandlers(props) : this.getPanHandlers(direction, props);
      }
      return _react2.default.createElement(NavigationCard, babelHelpers.extends({}, props, {
        key: 'card_' + key,
        style: [animationStyle, style],
        panHandlers: panHandlers,
        renderScene: this.renderScene
      }));
    }
  }, {
    key: 'renderScene',
    value: function renderScene(props) {
      return _react2.default.createElement(DefaultRenderer, {
        key: props.scene.navigationState.key,
        onNavigate: props.onNavigate,
        navigationState: props.scene.navigationState
      });
    }
  }, {
    key: 'renderHeader',
    value: function renderHeader(props) {
      var state = props.navigationState;
      var child = state.children[state.index];
      var selected = state.children[state.index];
      while (selected.hasOwnProperty('children')) {
        selected = selected.children[selected.index];
      }
      if (child !== selected) {
        return null;
      }
      var hideNavBar = (0, _Util.deepestExplicitValueForKey)(state, 'hideNavBar');
      if (hideNavBar) {
        return null;
      }

      if (selected.component && selected.component.renderNavigationBar) {
        return selected.component.renderNavigationBar(babelHelpers.extends({}, props, selected));
      }

      var HeaderComponent = selected.navBar || child.navBar || state.navBar || _NavBar2.default;
      var navBarProps = babelHelpers.extends({}, state, child, selected);

      if (selected.component && selected.component.onRight) {
        navBarProps.onRight = selected.component.onRight;
      }

      if (selected.component && selected.component.onLeft) {
        navBarProps.onLeft = selected.component.onLeft;
      }

      if ((navBarProps.leftTitle || navBarProps.leftButtonImage) && navBarProps.onLeft) {
        delete navBarProps.leftButton;
      }

      if ((navBarProps.rightTitle || navBarProps.rightButtonImage) && navBarProps.onRight) {
        delete navBarProps.rightButton;
      }

      if (navBarProps.rightButton) {
        delete navBarProps.rightTitle;
        delete navBarProps.onRight;
        delete navBarProps.rightButtonImage;
      }

      if (navBarProps.leftButton) {
        delete navBarProps.leftTitle;
        delete navBarProps.onLeft;
        delete navBarProps.leftButtonImage;
      }
      delete navBarProps.style;

      var getTitle = selected.getTitle || function (opts) {
        return opts.title;
      };
      return _react2.default.createElement(HeaderComponent, babelHelpers.extends({}, props, navBarProps, { getTitle: getTitle }));
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          navigationState = _props.navigationState,
          onNavigate = _props.onNavigate;


      if (!navigationState || !onNavigate) {
        console.error('navigationState and onNavigate property should be not null');
        return null;
      }

      var SceneComponent = navigationState.component;

      if (navigationState.tabs && !SceneComponent) {
        SceneComponent = _TabBar2.default;
      }

      if (SceneComponent) {
        return _react2.default.createElement(
          _reactNative.View,
          {
            style: [styles.sceneStyle, navigationState.sceneStyle]
          },
          _react2.default.createElement(SceneComponent, babelHelpers.extends({}, this.props, navigationState))
        );
      }

      var optionals = {};
      var selected = navigationState.children[navigationState.index];
      var applyAnimation = selected.applyAnimation || navigationState.applyAnimation;
      var style = selected.style || navigationState.style;

      if (applyAnimation) {
        optionals.applyAnimation = applyAnimation;
      } else {
        var duration = selected.duration;
        if (duration === null || duration === undefined) duration = navigationState.duration;
        if (duration !== null && duration !== undefined) {
          optionals.applyAnimation = function (pos, navState) {
            if (duration === 0) {
              pos.setValue(navState.index);
            } else {
              _reactNative.Animated.timing(pos, { toValue: navState.index, duration: duration }).start();
            }
          };
        }
      }

      return _react2.default.createElement(NavigationAnimatedView, babelHelpers.extends({
        navigationState: navigationState,
        style: [styles.animatedView, style],
        renderOverlay: this.renderHeader,
        renderScene: this.renderCard
      }, optionals));
    }
  }]);
  return DefaultRenderer;
}(_react.Component);

DefaultRenderer.propTypes = {
  navigationState: _react.PropTypes.object,
  onNavigate: _react.PropTypes.func
};
DefaultRenderer.childContextTypes = {
  navigationState: _react.PropTypes.any
};
exports.default = DefaultRenderer;
}, 458, null, "react-native-router-flux/src/DefaultRenderer.js");
__d(/* react-native-router-flux/src/TabBar.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require(282    ); // 282 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(12            ); // 12 = react-native

var _reactNativeTabs = require(460                ); // 460 = react-native-tabs

var _reactNativeTabs2 = babelHelpers.interopRequireDefault(_reactNativeTabs);

var _DefaultRenderer = require(458                ); // 458 = ./DefaultRenderer

var _DefaultRenderer2 = babelHelpers.interopRequireDefault(_DefaultRenderer);

var _Actions = require(454        ); // 454 = ./Actions

var _Actions2 = babelHelpers.interopRequireDefault(_Actions);

var _TabbedView = require(461           ); // 461 = ./TabbedView

var _TabbedView2 = babelHelpers.interopRequireDefault(_TabbedView);

var _Util = require(455     ); // 455 = ./Util

var TabBar = function (_Component) {
  babelHelpers.inherits(TabBar, _Component);

  function TabBar(props, context) {
    babelHelpers.classCallCheck(this, TabBar);

    var _this = babelHelpers.possibleConstructorReturn(this, (TabBar.__proto__ || Object.getPrototypeOf(TabBar)).call(this, props, context));

    _this.renderScene = _this.renderScene.bind(_this);
    return _this;
  }

  babelHelpers.createClass(TabBar, [{
    key: 'onSelect',
    value: function onSelect(el) {
      if (!_Actions2.default[el.props.name]) {
        throw new Error('No action is defined for name=' + el.props.name + ' ' + ('actions: ' + JSON.stringify(Object.keys(_Actions2.default))));
      }
      if (typeof el.props.onPress === 'function') {
        el.props.onPress();
      } else {
        _Actions2.default[el.props.name]();
      }
    }
  }, {
    key: 'renderScene',
    value: function renderScene(navigationState) {
      return _react2.default.createElement(_DefaultRenderer2.default, {
        key: navigationState.key,
        onNavigate: this.props.onNavigate,
        navigationState: navigationState
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var state = this.props.navigationState;

      var hideTabBar = this.props.unmountScenes ? true : (0, _Util.deepestExplicitValueForKey)(state, 'hideTabBar');

      return _react2.default.createElement(
        _reactNative.View,
        {
          style: { flex: 1 }
        },
        _react2.default.createElement(_TabbedView2.default, {
          navigationState: this.props.navigationState,
          style: { flex: 1 },
          renderScene: this.renderScene
        }),
        !hideTabBar && state.children.filter(function (el) {
          return el.icon;
        }).length > 0 && _react2.default.createElement(
          _reactNativeTabs2.default,
          babelHelpers.extends({
            style: state.tabBarStyle,
            selectedIconStyle: state.tabBarSelectedItemStyle,
            iconStyle: state.tabBarIconContainerStyle,
            onSelect: this.onSelect }, state, {
            selected: state.children[state.index].sceneKey,
            pressOpacity: this.props.pressOpacity
          }),
          state.children.filter(function (el) {
            return el.icon || _this2.props.tabIcon;
          }).map(function (el) {
            var Icon = el.icon || _this2.props.tabIcon;
            return _react2.default.createElement(Icon, babelHelpers.extends({}, _this2.props, el));
          })
        )
      );
    }
  }]);
  return TabBar;
}(_react.Component);

TabBar.propTypes = {
  navigationState: _react.PropTypes.object,
  tabIcon: _react.PropTypes.any,
  onNavigate: _react.PropTypes.func,
  unmountScenes: _react.PropTypes.bool,
  pressOpacity: _react.PropTypes.number
};
exports.default = TabBar;
}, 459, null, "react-native-router-flux/src/TabBar.js");
__d(/* react-native-tabs/index.js */function(global, require, module, exports) {'use strict';

var _react = require(282    ); // 282 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(12            ); // 12 = react-native

var Tabs = function (_Component) {
    babelHelpers.inherits(Tabs, _Component);

    function Tabs() {
        babelHelpers.classCallCheck(this, Tabs);
        return babelHelpers.possibleConstructorReturn(this, (Tabs.__proto__ || Object.getPrototypeOf(Tabs)).apply(this, arguments));
    }

    babelHelpers.createClass(Tabs, [{
        key: 'onSelect',
        value: function onSelect(el) {
            if (el.props.onSelect) {
                el.props.onSelect(el);
            } else if (this.props.onSelect) {
                this.props.onSelect(el);
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            var self = this;
            var selected = this.props.selected;
            if (!selected) {
                _react2.default.Children.forEach(this.props.children.filter(function (c) {
                    return c;
                }), function (el) {
                    if (!selected || el.props.initial) {
                        selected = el.props.name || el.key;
                    }
                });
            }
            return _react2.default.createElement(
                _reactNative.View,
                { style: [styles.tabbarView, this.props.style] },
                _react2.default.Children.map(this.props.children.filter(function (c) {
                    return c;
                }), function (el) {
                    return _react2.default.createElement(
                        _reactNative.TouchableOpacity,
                        { key: el.props.name + "touch",
                            style: [styles.iconView, _this2.props.iconStyle, (el.props.name || el.key) == selected ? _this2.props.selectedIconStyle || el.props.selectedIconStyle || {} : {}],
                            onPress: function onPress() {
                                return !self.props.locked && self.onSelect(el);
                            },
                            onLongPress: function onLongPress() {
                                return self.onSelect(el);
                            },
                            activeOpacity: el.props.pressOpacity },
                        selected == (el.props.name || el.key) ? _react2.default.cloneElement(el, { selected: true, style: [el.props.style, _this2.props.selectedStyle, el.props.selectedStyle] }) : el
                    );
                })
            );
        }
    }]);
    return Tabs;
}(_react.Component);

var styles = _reactNative.StyleSheet.create({
    tabbarView: {
        position: 'absolute',
        bottom: 0,
        right: 0,
        left: 0,
        height: 50,
        opacity: 1,
        backgroundColor: 'transparent',
        flexDirection: 'row',
        justifyContent: 'center',
        alignItems: 'center'
    },
    iconView: {
        flex: 1,
        height: 50,
        justifyContent: 'center',
        alignItems: 'center'
    }
});

module.exports = Tabs;
}, 460, null, "react-native-tabs/index.js");
__d(/* react-native-router-flux/src/TabbedView.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require(282    ); // 282 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(12            ); // 12 = react-native

var _reactStaticContainer = require(462                     ); // 462 = react-static-container

var _reactStaticContainer2 = babelHelpers.interopRequireDefault(_reactStaticContainer);

var styles = _reactNative.StyleSheet.create({
  scene: {
    bottom: 0,
    left: 0,
    position: 'absolute',
    right: 0,
    top: 0
  }
});

var TabbedView = function (_Component) {
  babelHelpers.inherits(TabbedView, _Component);

  function TabbedView(props, context) {
    babelHelpers.classCallCheck(this, TabbedView);

    var _this = babelHelpers.possibleConstructorReturn(this, (TabbedView.__proto__ || Object.getPrototypeOf(TabbedView)).call(this, props, context));

    _this.renderedSceneKeys = {};
    _this.renderScene = _this.renderScene.bind(_this);
    return _this;
  }

  babelHelpers.createClass(TabbedView, [{
    key: 'renderScene',
    value: function renderScene(navigationState, index) {
      var isSelected = index === this.props.navigationState.index;
      return _react2.default.createElement(
        _reactNative.View,
        {
          key: navigationState.key,
          pointerEvents: isSelected ? 'auto' : 'none',
          removeClippedSubviews: !isSelected,
          style: [styles.scene, { opacity: isSelected ? 1 : 0 }]
        },
        _react2.default.createElement(
          _reactStaticContainer2.default,
          { shouldUpdate: isSelected },
          this.props.renderScene(navigationState, index)
        )
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var scenes = [];
      var _props$navigationStat = this.props.navigationState,
          index = _props$navigationStat.index,
          children = _props$navigationStat.children;

      children.forEach(function (item, i) {
        var key = item.key;
        if (i !== index && !_this2.renderedSceneKeys[key]) {
          return;
        }
        _this2.renderedSceneKeys[key] = true;
        scenes.push(_this2.renderScene(item, i));
      });
      return _react2.default.createElement(
        _reactNative.View,
        { style: this.props.style },
        scenes
      );
    }
  }]);
  return TabbedView;
}(_react.Component);

TabbedView.propTypes = {
  navigationState: _react.PropTypes.object.isRequired,
  renderScene: _react.PropTypes.func.isRequired,
  style: _reactNative.View.propTypes.style
};
exports.default = TabbedView;
}, 461, null, "react-native-router-flux/src/TabbedView.js");
__d(/* react-static-container/index.js */function(global, require, module, exports) {

module.exports = require(463                          ); // 463 = ./lib/StaticContainer.react
}, 462, null, "react-static-container/index.js");
__d(/* react-static-container/lib/StaticContainer.react.js */function(global, require, module, exports) {

'use strict';

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ('value' in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

var _get = function get(_x, _x2, _x3) {
  var _again = true;_function: while (_again) {
    var object = _x,
        property = _x2,
        receiver = _x3;_again = false;if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
      var parent = Object.getPrototypeOf(object);if (parent === null) {
        return undefined;
      } else {
        _x = parent;_x2 = property;_x3 = receiver;_again = true;desc = parent = undefined;continue _function;
      }
    } else if ('value' in desc) {
      return desc.value;
    } else {
      var getter = desc.get;if (getter === undefined) {
        return undefined;
      }return getter.call(receiver);
    }
  }
};

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError('Cannot call a class as a function');
  }
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== 'function' && superClass !== null) {
    throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var React = require(282    ); // 282 = react

var StaticContainer = function (_React$Component) {
  _inherits(StaticContainer, _React$Component);

  function StaticContainer() {
    _classCallCheck(this, StaticContainer);

    _get(Object.getPrototypeOf(StaticContainer.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(StaticContainer, [{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps) {
      return !!nextProps.shouldUpdate;
    }
  }, {
    key: 'render',
    value: function render() {
      var child = this.props.children;
      if (child === null || child === false) {
        return null;
      }
      return React.Children.only(child);
    }
  }]);

  return StaticContainer;
}(React.Component);

module.exports = StaticContainer;
}, 463, null, "react-static-container/lib/StaticContainer.react.js");
__d(/* react-native-router-flux/src/NavBar.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require(282    ); // 282 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(12            ); // 12 = react-native

var _Actions = require(454        ); // 454 = ./Actions

var _Actions2 = babelHelpers.interopRequireDefault(_Actions);

var _menu_burger = require(465                ); // 465 = ./menu_burger.png

var _menu_burger2 = babelHelpers.interopRequireDefault(_menu_burger);

var _back_chevron = require(466                 ); // 466 = ./back_chevron.png

var _back_chevron2 = babelHelpers.interopRequireDefault(_back_chevron);

var styles = _reactNative.StyleSheet.create({
  title: babelHelpers.extends({
    textAlign: 'center',
    marginTop: 10,
    fontSize: 18,
    color: '#0A0A0A',
    position: 'absolute'
  }, _reactNative.Platform.select({
    ios: {
      top: 20
    },
    android: {
      top: 5
    }
  }), {
    left: 0,
    right: 0
  }),
  header: babelHelpers.extends({
    backgroundColor: '#EFEFF2',
    paddingTop: 0,
    top: 0
  }, _reactNative.Platform.select({
    ios: {
      height: 64
    },
    android: {
      height: 54
    }
  }), {
    right: 0,
    left: 0,
    borderBottomWidth: 0.5,
    borderBottomColor: '#828287',
    position: 'absolute'
  }),
  backButton: babelHelpers.extends({
    width: 130,
    height: 37,
    position: 'absolute'
  }, _reactNative.Platform.select({
    ios: {
      top: 22
    },
    android: {
      top: 10
    }
  }), {
    left: 2,
    padding: 8,
    flexDirection: 'row'
  }),
  rightButton: babelHelpers.extends({
    width: 100,
    height: 37,
    position: 'absolute'
  }, _reactNative.Platform.select({
    ios: {
      top: 22
    },
    android: {
      top: 10
    }
  }), {
    right: 2,
    padding: 8
  }),
  leftButton: babelHelpers.extends({
    width: 100,
    height: 37,
    position: 'absolute'
  }, _reactNative.Platform.select({
    ios: {
      top: 20
    },
    android: {
      top: 8
    }
  }), {
    left: 2,
    padding: 8
  }),
  barRightButtonText: {
    color: 'rgb(0, 122, 255)',
    textAlign: 'right',
    fontSize: 17
  },
  barBackButtonText: {
    color: 'rgb(0, 122, 255)',
    textAlign: 'left',
    fontSize: 17,
    paddingLeft: 6
  },
  barLeftButtonText: {
    color: 'rgb(0, 122, 255)',
    textAlign: 'left',
    fontSize: 17
  },
  backButtonImage: {
    width: 13,
    height: 21
  },
  rightButtonIconStyle: {},
  defaultImageStyle: {
    height: 24,
    resizeMode: 'contain'
  }
});

var propTypes = {
  navigationState: _react.PropTypes.object,
  backButtonImage: _reactNative.Image.propTypes.source,
  wrapBy: _react.PropTypes.any,
  component: _react.PropTypes.any,
  backButtonTextStyle: _reactNative.Text.propTypes.style,
  leftButtonStyle: _reactNative.View.propTypes.style,
  leftButtonIconStyle: _reactNative.Image.propTypes.style,
  getTitle: _react.PropTypes.func,
  titleStyle: _reactNative.Text.propTypes.style,
  titleOpacity: _react.PropTypes.number,
  titleProps: _react.PropTypes.any,
  position: _react.PropTypes.object,
  navigationBarStyle: _reactNative.View.propTypes.style,
  renderTitle: _react.PropTypes.any
};

var contextTypes = {
  drawer: _react.PropTypes.object
};

var defaultProps = {
  drawerImage: _menu_burger2.default,
  backButtonImage: _back_chevron2.default,
  titleOpacity: 1
};

var NavBar = function (_React$Component) {
  babelHelpers.inherits(NavBar, _React$Component);

  function NavBar(props) {
    babelHelpers.classCallCheck(this, NavBar);

    var _this = babelHelpers.possibleConstructorReturn(this, (NavBar.__proto__ || Object.getPrototypeOf(NavBar)).call(this, props));

    _this.renderRightButton = _this.renderRightButton.bind(_this);
    _this.renderBackButton = _this.renderBackButton.bind(_this);
    _this.renderLeftButton = _this.renderLeftButton.bind(_this);
    _this.renderTitle = _this.renderTitle.bind(_this);
    return _this;
  }

  babelHelpers.createClass(NavBar, [{
    key: 'renderBackButton',
    value: function renderBackButton() {
      var state = this.props.navigationState;
      var childState = state.children[state.index];
      var BackButton = childState.component && childState.component.backButton || state.backButton || childState.backButton;
      var textButtonStyle = [styles.barBackButtonText, this.props.backButtonTextStyle, state.backButtonTextStyle, childState.backButtonTextStyle];
      var style = [styles.backButton, this.props.leftButtonStyle, state.leftButtonStyle, childState.leftButtonStyle];

      if (state.index === 0) {
        return null;
      }

      if (BackButton) {
        return _react2.default.createElement(BackButton, babelHelpers.extends({
          testID: 'backNavButton',
          textButtonStyle: textButtonStyle
        }, childState, {
          style: style
        }));
      }
      var buttonImage = childState.backButtonImage || state.backButtonImage || this.props.backButtonImage;
      var onPress = childState.onBack || childState.component.onBack;
      if (onPress) {
        onPress = onPress.bind(null, state);
      } else {
        onPress = _Actions2.default.pop;
      }

      var text = childState.backTitle ? _react2.default.createElement(
        _reactNative.Text,
        { style: textButtonStyle },
        childState.backTitle
      ) : null;

      return _react2.default.createElement(
        _reactNative.TouchableOpacity,
        {
          testID: 'backNavButton',
          style: style,
          onPress: onPress
        },
        buttonImage && !childState.hideBackImage && _react2.default.createElement(_reactNative.Image, {
          source: buttonImage,
          style: [styles.backButtonImage, this.props.leftButtonIconStyle, state.barButtonIconStyle, state.leftButtonIconStyle, childState.leftButtonIconStyle]
        }),
        text
      );
    }
  }, {
    key: 'renderRightButton',
    value: function renderRightButton(navProps) {
      var self = this;
      function tryRender(state, wrapBy) {
        if (!state) {
          return null;
        }
        var rightTitle = state.getRightTitle ? state.getRightTitle(navProps) : state.rightTitle;

        var textStyle = [styles.barRightButtonText, self.props.rightButtonTextStyle, state.rightButtonTextStyle];
        var style = [styles.rightButton, self.props.rightButtonStyle, state.rightButtonStyle];
        if (state.rightButton) {
          var Button = state.rightButton;
          if (wrapBy) {
            Button = wrapBy(Button);
          }
          return _react2.default.createElement(Button, babelHelpers.extends({}, self.props, state, {
            key: 'rightNavBarBtn',
            testID: 'rightNavButton',
            style: style,
            textButtonStyle: textStyle
          }));
        }
        if (state.onRight && (rightTitle || state.rightButtonImage)) {
          var onPress = state.onRight.bind(null, state);
          return _react2.default.createElement(
            _reactNative.TouchableOpacity,
            {
              key: 'rightNavBarBtn',
              testID: 'rightNavButton',
              style: style,
              onPress: onPress
            },
            rightTitle && _react2.default.createElement(
              _reactNative.Text,
              { style: textStyle },
              rightTitle
            ),
            state.rightButtonImage && _react2.default.createElement(
              _reactNative.View,
              { style: { flex: 1, justifyContent: 'center', alignItems: 'flex-end' } },
              _react2.default.createElement(_reactNative.Image, {
                source: state.rightButtonImage,
                style: state.rightButtonIconStyle
              })
            )
          );
        }
        if (!!state.onRight ^ !!(typeof rightTitle !== 'undefined' || typeof state.rightButtonImage !== 'undefined')) {
          console.warn('Both onRight and rightTitle/rightButtonImage\n            must be specified for the scene: ' + state.name);
        }
        return null;
      }
      return tryRender(this.props.component, this.props.wrapBy) || tryRender(this.props);
    }
  }, {
    key: 'renderLeftButton',
    value: function renderLeftButton(navProps) {
      var self = this;
      var drawer = this.context.drawer;
      function tryRender(state, wrapBy) {
        var onPress = state.onLeft;
        var buttonImage = state.leftButtonImage;
        var menuIcon = state.drawerIcon;
        var style = [styles.leftButton, self.props.leftButtonStyle, state.leftButtonStyle];
        var textStyle = [styles.barLeftButtonText, self.props.leftButtonTextStyle, state.leftButtonTextStyle];
        var leftButtonStyle = [styles.defaultImageStyle, state.leftButtonIconStyle];
        var leftTitle = state.getLeftTitle ? state.getLeftTitle(navProps) : state.leftTitle;

        if (state.leftButton) {
          var Button = state.leftButton;
          if (wrapBy) {
            Button = wrapBy(Button);
          }
          return _react2.default.createElement(Button, babelHelpers.extends({}, self.props, state, {
            key: 'leftNavBarBtn',
            testID: 'leftNavButton',
            style: style,
            textStyle: textStyle
          }));
        }

        if (!onPress && !!drawer && typeof drawer.toggle === 'function') {
          buttonImage = state.drawerImage;
          if (buttonImage || menuIcon) {
            onPress = drawer.toggle;
          }
          if (!menuIcon) {
            menuIcon = _react2.default.createElement(_reactNative.Image, {
              source: buttonImage,
              style: leftButtonStyle
            });
          }
        }

        if (onPress && (leftTitle || buttonImage)) {
          onPress = onPress.bind(null, state);
          return _react2.default.createElement(
            _reactNative.TouchableOpacity,
            {
              key: 'leftNavBarBtn',
              testID: 'leftNavButton',
              style: style,
              onPress: onPress
            },
            leftTitle && _react2.default.createElement(
              _reactNative.Text,
              { style: textStyle },
              leftTitle
            ),
            buttonImage && _react2.default.createElement(
              _reactNative.View,
              { style: { flex: 1, justifyContent: 'center', alignItems: 'flex-start' } },
              menuIcon || _react2.default.createElement(_reactNative.Image, {
                source: buttonImage,
                style: state.leftButtonIconStyle || styles.defaultImageStyle
              })
            )
          );
        }
        if (!!state.onLeft ^ !!(leftTitle || buttonImage)) {
          console.warn('Both onLeft and leftTitle/leftButtonImage\n            must be specified for the scene: ' + state.name);
        }
        return null;
      }
      return tryRender(this.props.component, this.props.wrapBy) || tryRender(this.props);
    }
  }, {
    key: 'renderTitle',
    value: function renderTitle(childState, index) {
      var title = this.props.getTitle ? this.props.getTitle(childState) : childState.title;
      if (title === undefined && childState.component && childState.component.title) {
        title = childState.component.title;
      }
      if (typeof title === 'function') {
        title = title(childState);
      }
      return _react2.default.createElement(
        _reactNative.Animated.Text,
        babelHelpers.extends({}, this.props.titleProps, {
          key: childState.key,
          style: [styles.title, this.props.titleStyle, this.props.navigationState.titleStyle, childState.titleStyle, {
            opacity: this.props.position.interpolate({
              inputRange: [index - 1, index, index + 1],
              outputRange: [0, this.props.titleOpacity, 0]
            }),
            left: this.props.position.interpolate({
              inputRange: [index - 1, index + 1],
              outputRange: [200, -200]
            }),
            right: this.props.position.interpolate({
              inputRange: [index - 1, index + 1],
              outputRange: [-200, 200]
            })
          }]
        }),
        title
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var state = this.props.navigationState;
      var selected = state.children[state.index];
      while (selected.hasOwnProperty('children')) {
        state = selected;
        selected = selected.children[selected.index];
      }
      var navProps = babelHelpers.extends({}, this.props, selected);

      var wrapByStyle = function wrapByStyle(component, wrapStyle) {
        if (!component) {
          return null;
        }
        return function (props) {
          return _react2.default.createElement(
            _reactNative.View,
            { style: wrapStyle },
            component(props)
          );
        };
      };

      var leftButtonStyle = [styles.leftButton, { alignItems: 'flex-start' }];
      var rightButtonStyle = [styles.rightButton, { alignItems: 'flex-end' }];

      var renderLeftButton = wrapByStyle(selected.renderLeftButton, leftButtonStyle) || wrapByStyle(selected.component.renderLeftButton, leftButtonStyle) || this.renderLeftButton;
      var renderRightButton = wrapByStyle(selected.renderRightButton, rightButtonStyle) || wrapByStyle(selected.component.renderRightButton, rightButtonStyle) || this.renderRightButton;
      var renderBackButton = wrapByStyle(selected.renderBackButton, leftButtonStyle) || wrapByStyle(selected.component.renderBackButton, leftButtonStyle) || this.renderBackButton;
      var renderTitle = selected.renderTitle || selected.component.renderTitle || this.props.renderTitle;
      return _react2.default.createElement(
        _reactNative.Animated.View,
        {
          style: [styles.header, this.props.navigationBarStyle, state.navigationBarStyle, selected.navigationBarStyle]
        },
        renderTitle ? renderTitle(navProps) : state.children.map(this.renderTitle, this),
        renderBackButton(navProps) || renderLeftButton(navProps),
        renderRightButton(navProps)
      );
    }
  }]);
  return NavBar;
}(_react2.default.Component);

NavBar.propTypes = propTypes;
NavBar.contextTypes = contextTypes;
NavBar.defaultProps = defaultProps;

exports.default = NavBar;
}, 464, null, "react-native-router-flux/src/NavBar.js");
__d(/* react-native-router-flux/src/menu_burger.png */function(global, require, module, exports) {module.exports = require(172                                         ).registerAsset({"__packager_asset":true,"httpServerLocation":"/assets/node_modules/react-native-router-flux/src","width":26,"height":42,"scales":[1],"hash":"315b6bc9518b83448be6761e6cc5cb7e","name":"menu_burger","type":"png"}); // 172 = react-native/Libraries/Image/AssetRegistry
}, 465, null, "react-native-router-flux/src/menu_burger.png");
__d(/* react-native-router-flux/src/back_chevron.png */function(global, require, module, exports) {module.exports = require(172                                         ).registerAsset({"__packager_asset":true,"httpServerLocation":"/assets/node_modules/react-native-router-flux/src","width":26,"height":42,"scales":[1],"hash":"fb13fafd1da1ad19e708c53cfad2e514","name":"back_chevron","type":"png"}); // 172 = react-native/Libraries/Image/AssetRegistry
}, 466, null, "react-native-router-flux/src/back_chevron.png");
__d(/* react-native-experimental-navigation/NavigationExperimental.js */function(global, require, module, exports) {
'use strict';

var NavigationAnimatedView = require(468                       ); // 468 = ./NavigationAnimatedView
var NavigationCard = require(474               ); // 474 = ./NavigationCard
var NavigationCardStack = require(484                    ); // 484 = ./NavigationCardStack
var NavigationContainer = require(469                    ); // 469 = ./NavigationContainer
var NavigationHeader = require(485                 ); // 485 = ./NavigationHeader
var NavigationLegacyNavigator = null;
var NavigationReducer = require(490                  ); // 490 = ./NavigationReducer
var NavigationRootContainer = require(470                        ); // 470 = ./NavigationRootContainer
var NavigationStateUtils = require(472                     ); // 472 = ./NavigationStateUtils
var NavigationView = require(494               ); // 494 = ./NavigationView
var NavigationPropTypes = require(471                    ); // 471 = ./NavigationPropTypes

var NavigationExperimental = {
  StateUtils: NavigationStateUtils,
  Reducer: NavigationReducer,

  Container: NavigationContainer,
  RootContainer: NavigationRootContainer,

  View: NavigationView,
  AnimatedView: NavigationAnimatedView,

  Card: NavigationCard,
  CardStack: NavigationCardStack,
  Header: NavigationHeader,
  LegacyNavigator: NavigationLegacyNavigator,

  PropTypes: NavigationPropTypes
};

module.exports = NavigationExperimental;
}, 467, null, "react-native-experimental-navigation/NavigationExperimental.js");
__d(/* react-native-experimental-navigation/NavigationAnimatedView.js */function(global, require, module, exports) {
'use strict';

var Animated = require(12            ).Animated; // 12 = react-native
var NavigationContainer = require(469                    ); // 469 = ./NavigationContainer
var NavigationPropTypes = require(471                    ); // 471 = ./NavigationPropTypes
var NavigationScenesReducer = require(473                        ); // 473 = ./NavigationScenesReducer
var React = require(282    ); // 282 = react
var StyleSheet = require(12            ).StyleSheet; // 12 = react-native
var View = require(12            ).View; // 12 = react-native

var PropTypes = React.PropTypes;


function applyDefaultAnimation(position, navigationState) {
  Animated.spring(position, {
    bounciness: 0,
    toValue: navigationState.index
  }).start();
}

var NavigationAnimatedView = function (_React$Component) {
  babelHelpers.inherits(NavigationAnimatedView, _React$Component);

  function NavigationAnimatedView(props, context) {
    babelHelpers.classCallCheck(this, NavigationAnimatedView);

    var _this = babelHelpers.possibleConstructorReturn(this, (NavigationAnimatedView.__proto__ || Object.getPrototypeOf(NavigationAnimatedView)).call(this, props, context));

    var layout = {
      height: new Animated.Value(0),
      initHeight: 0,
      initWidth: 0,
      isMeasured: false,
      width: new Animated.Value(0)
    };

    _this.state = {
      layout: layout,
      position: new Animated.Value(_this.props.navigationState.index),
      scenes: NavigationScenesReducer([], _this.props.navigationState)
    };
    return _this;
  }

  babelHelpers.createClass(NavigationAnimatedView, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this._onLayout = this._onLayout.bind(this);
      this._onProgressChange = this._onProgressChange.bind(this);
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this._positionListener = this.state.position.addListener(this._onProgressChange);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.navigationState !== this.props.navigationState) {
        this.setState({
          scenes: NavigationScenesReducer(this.state.scenes, nextProps.navigationState, this.props.navigationState)
        });
      }
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(lastProps) {
      if (lastProps.navigationState.index !== this.props.navigationState.index) {
        this.props.applyAnimation(this.state.position, this.props.navigationState, lastProps.navigationState);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.state.position.removeListener(this._positionListener);
    }
  }, {
    key: '_onProgressChange',
    value: function _onProgressChange(data) {
      var delta = Math.abs(data.value - this.props.navigationState.index);
      if (delta > Number.EPSILON) {
        return;
      }

      var scenes = this.state.scenes.filter(function (scene) {
        return !scene.isStale;
      });

      if (scenes.length !== this.state.scenes.length) {
        this.setState({ scenes: scenes });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var overlay = this._renderOverlay();
      var scenes = this._renderScenes();
      return React.createElement(
        View,
        {
          onLayout: this._onLayout,
          style: this.props.style },
        React.createElement(
          View,
          { style: styles.scenes, key: 'scenes' },
          scenes
        ),
        overlay
      );
    }
  }, {
    key: '_renderScenes',
    value: function _renderScenes() {
      return this.state.scenes.map(this._renderScene, this);
    }
  }, {
    key: '_renderScene',
    value: function _renderScene(scene) {
      var _props = this.props,
          navigationState = _props.navigationState,
          onNavigate = _props.onNavigate,
          renderScene = _props.renderScene;
      var _state = this.state,
          position = _state.position,
          scenes = _state.scenes;


      return renderScene({
        layout: this.state.layout,
        navigationState: navigationState,
        onNavigate: onNavigate,
        position: position,
        scene: scene,
        scenes: scenes
      });
    }
  }, {
    key: '_renderOverlay',
    value: function _renderOverlay() {
      if (this.props.renderOverlay) {
        var _props2 = this.props,
            _navigationState = _props2.navigationState,
            _onNavigate = _props2.onNavigate,
            _renderOverlay2 = _props2.renderOverlay;
        var _state2 = this.state,
            _position = _state2.position,
            _scenes = _state2.scenes;


        return _renderOverlay2({
          layout: this.state.layout,
          navigationState: _navigationState,
          onNavigate: _onNavigate,
          position: _position,
          scene: _scenes[_navigationState.index],
          scenes: _scenes
        });
      }
      return null;
    }
  }, {
    key: '_onLayout',
    value: function _onLayout(event) {
      var _event$nativeEvent$la = event.nativeEvent.layout,
          height = _event$nativeEvent$la.height,
          width = _event$nativeEvent$la.width;


      var layout = babelHelpers.extends({}, this.state.layout, {
        initHeight: height,
        initWidth: width,
        isMeasured: true
      });

      layout.height.setValue(height);
      layout.width.setValue(width);

      this.setState({ layout: layout });
    }
  }]);
  return NavigationAnimatedView;
}(React.Component);

NavigationAnimatedView.propTypes = {
  applyAnimation: PropTypes.func,
  navigationState: NavigationPropTypes.navigationState.isRequired,
  onNavigate: PropTypes.func.isRequired,
  renderOverlay: PropTypes.func,
  renderScene: PropTypes.func.isRequired
};
NavigationAnimatedView.defaultProps = {
  applyAnimation: applyDefaultAnimation
};


var styles = StyleSheet.create({
  scenes: {
    flex: 1
  }
});

NavigationAnimatedView = NavigationContainer.create(NavigationAnimatedView);

module.exports = NavigationAnimatedView;
}, 468, null, "react-native-experimental-navigation/NavigationAnimatedView.js");
__d(/* react-native-experimental-navigation/NavigationContainer.js */function(global, require, module, exports) {
'use strict';

var React = require(282    ); // 282 = react
var NavigationRootContainer = require(470                        ); // 470 = ./NavigationRootContainer

function createNavigationContainer(Component) {
  var NavigationComponent = function (_React$Component) {
    babelHelpers.inherits(NavigationComponent, _React$Component);

    function NavigationComponent() {
      babelHelpers.classCallCheck(this, NavigationComponent);
      return babelHelpers.possibleConstructorReturn(this, (NavigationComponent.__proto__ || Object.getPrototypeOf(NavigationComponent)).apply(this, arguments));
    }

    babelHelpers.createClass(NavigationComponent, [{
      key: 'render',
      value: function render() {
        return React.createElement(Component, babelHelpers.extends({
          onNavigate: this.getNavigationHandler()
        }, this.props));
      }
    }, {
      key: 'getNavigationHandler',
      value: function getNavigationHandler() {
        return this.props.onNavigate || this.context.onNavigate;
      }
    }, {
      key: 'getChildContext',
      value: function getChildContext() {
        return {
          onNavigate: this.getNavigationHandler()
        };
      }
    }]);
    return NavigationComponent;
  }(React.Component);

  NavigationComponent.contextTypes = {
    onNavigate: React.PropTypes.func
  };
  NavigationComponent.childContextTypes = {
    onNavigate: React.PropTypes.func
  };
  return NavigationComponent;
}

var NavigationContainer = {
  create: createNavigationContainer,
  RootContainer: NavigationRootContainer
};

module.exports = NavigationContainer;
}, 469, null, "react-native-experimental-navigation/NavigationContainer.js");
__d(/* react-native-experimental-navigation/NavigationRootContainer.js */function(global, require, module, exports) {
'use strict';

var AsyncStorage = require(12            ).AsyncStorage; // 12 = react-native
var Linking = require(12            ).Linking; // 12 = react-native
var NavigationPropTypes = require(471                    ); // 471 = ./NavigationPropTypes
var NavigationStateUtils = require(472                     ); // 472 = ./NavigationStateUtils
var Platform = require(12            ).Platform; // 12 = react-native
var React = require(282    ); // 282 = react

function getBackAction() {
  return { type: 'BackAction' };
}

var PropTypes = React.PropTypes;

var NavigationRootContainer = function (_React$Component) {
  babelHelpers.inherits(NavigationRootContainer, _React$Component);

  function NavigationRootContainer(props) {
    babelHelpers.classCallCheck(this, NavigationRootContainer);

    var _this = babelHelpers.possibleConstructorReturn(this, (NavigationRootContainer.__proto__ || Object.getPrototypeOf(NavigationRootContainer)).call(this, props));

    var navState = null;
    if (!_this.props.persistenceKey) {
      navState = NavigationStateUtils.getParent(_this.props.reducer(null, props.initialAction));
    }
    _this.state = { navState: navState };
    return _this;
  }

  babelHelpers.createClass(NavigationRootContainer, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.handleNavigation = this.handleNavigation.bind(this);
      this._handleOpenURLEvent = this._handleOpenURLEvent.bind(this);
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      if (this.props.linkingActionMap) {
        Linking.getInitialURL().then(this._handleOpenURL.bind(this));
        Platform.OS === 'ios' && Linking.addEventListener('url', this._handleOpenURLEvent);
      }
      if (this.props.persistenceKey) {
        AsyncStorage.getItem(this.props.persistenceKey, function (err, storedString) {
          if (err || !storedString) {
            _this2.setState({
              navState: _this2.props.reducer(null, _this2.props.initialAction)
            });
            return;
          }
          _this2.setState({
            navState: JSON.parse(storedString)
          });
        });
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (Platform.OS === 'ios') {
        Linking.removeEventListener('url', this._handleOpenURLEvent);
      }
    }
  }, {
    key: '_handleOpenURLEvent',
    value: function _handleOpenURLEvent(event) {
      this._handleOpenURL(event.url);
    }
  }, {
    key: '_handleOpenURL',
    value: function _handleOpenURL(url) {
      if (!this.props.linkingActionMap) {
        return;
      }
      var action = this.props.linkingActionMap(url);
      if (action) {
        this.handleNavigation(action);
      }
    }
  }, {
    key: 'getChildContext',
    value: function getChildContext() {
      return {
        onNavigate: this.handleNavigation
      };
    }
  }, {
    key: 'handleNavigation',
    value: function handleNavigation(action) {
      var navState = this.props.reducer(this.state.navState, action);
      if (navState === this.state.navState) {
        return false;
      }
      this.setState({
        navState: navState
      });

      if (this.props.persistenceKey) {
        AsyncStorage.setItem(this.props.persistenceKey, JSON.stringify(navState));
      }

      return true;
    }
  }, {
    key: 'render',
    value: function render() {
      var navigation = this.props.renderNavigation(this.state.navState, this.handleNavigation);
      return navigation;
    }
  }]);
  return NavigationRootContainer;
}(React.Component);

NavigationRootContainer.propTypes = {
  initialAction: NavigationPropTypes.action.isRequired,
  linkingActionMap: PropTypes.func,
  persistenceKey: PropTypes.string,
  reducer: PropTypes.func.isRequired,
  renderNavigation: PropTypes.func.isRequired
};
NavigationRootContainer.defaultProps = {
  initialAction: { type: 'RootContainerInitialAction' }
};
NavigationRootContainer.childContextTypes = {
  onNavigate: PropTypes.func
};
NavigationRootContainer.getBackAction = getBackAction;


module.exports = NavigationRootContainer;
}, 470, null, "react-native-experimental-navigation/NavigationRootContainer.js");
__d(/* react-native-experimental-navigation/NavigationPropTypes.js */function(global, require, module, exports) {
'use strict';

var Animated = require(12            ).Animated; // 12 = react-native
var React = require(282    ); // 282 = react

var PropTypes = React.PropTypes;

var action = PropTypes.shape({
  type: PropTypes.string.isRequired
});

var animatedValue = PropTypes.instanceOf(Animated.Value);

var navigationState = PropTypes.shape({
  key: PropTypes.string.isRequired
});

var navigationParentState = PropTypes.shape({
  index: PropTypes.number.isRequired,
  key: PropTypes.string.isRequired,
  children: PropTypes.arrayOf(navigationState)
});

var layout = PropTypes.shape({
  height: animatedValue,
  initHeight: PropTypes.number.isRequired,
  initWidth: PropTypes.number.isRequired,
  isMeasured: PropTypes.bool.isRequired,
  width: animatedValue
});

var scene = PropTypes.shape({
  index: PropTypes.number.isRequired,
  isStale: PropTypes.bool.isRequired,
  key: PropTypes.string.isRequired,
  navigationState: navigationState
});

var SceneRendererProps = {
  layout: layout.isRequired,
  navigationState: navigationParentState.isRequired,
  onNavigate: PropTypes.func.isRequired,
  position: animatedValue.isRequired,
  scene: scene.isRequired,
  scenes: PropTypes.arrayOf(scene).isRequired
};

var SceneRenderer = PropTypes.shape(SceneRendererProps);

var panHandlers = PropTypes.shape({
  onMoveShouldSetResponder: PropTypes.func.isRequired,
  onMoveShouldSetResponderCapture: PropTypes.func.isRequired,
  onResponderEnd: PropTypes.func.isRequired,
  onResponderGrant: PropTypes.func.isRequired,
  onResponderMove: PropTypes.func.isRequired,
  onResponderReject: PropTypes.func.isRequired,
  onResponderRelease: PropTypes.func.isRequired,
  onResponderStart: PropTypes.func.isRequired,
  onResponderTerminate: PropTypes.func.isRequired,
  onResponderTerminationRequest: PropTypes.func.isRequired,
  onStartShouldSetResponder: PropTypes.func.isRequired,
  onStartShouldSetResponderCapture: PropTypes.func.isRequired
});

function extractSceneRendererProps(props) {
  return {
    layout: props.layout,
    navigationState: props.navigationState,
    onNavigate: props.onNavigate,
    position: props.position,
    scene: props.scene,
    scenes: props.scenes
  };
}

module.exports = {
  extractSceneRendererProps: extractSceneRendererProps,

  SceneRendererProps: SceneRendererProps,

  action: action,
  navigationParentState: navigationParentState,
  navigationState: navigationState,
  panHandlers: panHandlers,
  SceneRenderer: SceneRenderer
};
}, 471, null, "react-native-experimental-navigation/NavigationPropTypes.js");
__d(/* react-native-experimental-navigation/NavigationStateUtils.js */function(global, require, module, exports) {
'use strict';

var invariant = require(24                  ); // 24 = fbjs/lib/invariant

function getParent(state) {
  if (state instanceof Object && state.children instanceof Array && state.children[0] !== undefined && typeof state.index === 'number' && state.children[state.index] !== undefined) {
    return state;
  }
  return null;
}

function get(state, key) {
  var parentState = getParent(state);
  if (!parentState) {
    return null;
  }
  var childState = parentState.children.find(function (child) {
    return child.key === key;
  });
  return childState || null;
}

function indexOf(state, key) {
  var parentState = getParent(state);
  if (!parentState) {
    return null;
  }
  var index = parentState.children.map(function (child) {
    return child.key;
  }).indexOf(key);
  if (index === -1) {
    return null;
  }
  return index;
}

function push(state, newChildState) {
  var lastChildren = state.children;
  return babelHelpers.extends({}, state, {
    children: [].concat(babelHelpers.toConsumableArray(lastChildren), [newChildState]),
    index: lastChildren.length
  });
}

function pop(state) {
  var lastChildren = state.children;
  return babelHelpers.extends({}, state, {
    children: lastChildren.slice(0, lastChildren.length - 1),
    index: lastChildren.length - 2
  });
}

function reset(state, nextChildren, nextIndex) {
  var parentState = getParent(state);
  if (!parentState) {
    return state;
  }
  var children = nextChildren || parentState.children;
  var index = nextIndex == null ? parentState.index : nextIndex;
  if (children === parentState.children && index === parentState.index) {
    return state;
  }
  return babelHelpers.extends({}, parentState, {
    children: children,
    index: index
  });
}

function set(state, key, nextChildren, nextIndex) {
  if (!state) {
    return {
      children: nextChildren,
      index: nextIndex,
      key: key
    };
  }
  var parentState = getParent(state);
  if (!parentState) {
    return {
      children: nextChildren,
      index: nextIndex,
      key: key
    };
  }
  if (nextChildren === parentState.children && nextIndex === parentState.index && key === parentState.key) {
    return parentState;
  }
  return babelHelpers.extends({}, parentState, {
    children: nextChildren,
    index: nextIndex,
    key: key
  });
}

function jumpToIndex(state, index) {
  var parentState = getParent(state);
  if (parentState && parentState.index === index) {
    return parentState;
  }
  return babelHelpers.extends({}, parentState, {
    index: index
  });
}

function jumpTo(state, key) {
  var parentState = getParent(state);
  if (!parentState) {
    return state;
  }
  var index = parentState.children.indexOf(parentState.children.find(function (child) {
    return child.key === key;
  }));
  invariant(index !== -1, 'Cannot find child with matching key in this NavigationState');
  return babelHelpers.extends({}, parentState, {
    index: index
  });
}

function replaceAt(state, key, newState) {
  var parentState = getParent(state);
  if (!parentState) {
    return state;
  }
  var children = [].concat(babelHelpers.toConsumableArray(parentState.children));
  var index = parentState.children.indexOf(parentState.children.find(function (child) {
    return child.key === key;
  }));
  invariant(index !== -1, 'Cannot find child with matching key in this NavigationState');
  children[index] = newState;
  return babelHelpers.extends({}, parentState, {
    children: children
  });
}

function replaceAtIndex(state, index, newState) {
  var parentState = getParent(state);
  if (!parentState) {
    return state;
  }
  var children = [].concat(babelHelpers.toConsumableArray(parentState.children));
  children[index] = newState;
  return babelHelpers.extends({}, parentState, {
    children: children
  });
}

var NavigationStateUtils = {
  getParent: getParent,
  get: get,
  indexOf: indexOf,
  push: push,
  pop: pop,
  reset: reset,
  set: set,
  jumpToIndex: jumpToIndex,
  jumpTo: jumpTo,
  replaceAt: replaceAt,
  replaceAtIndex: replaceAtIndex
};

module.exports = NavigationStateUtils;
}, 472, null, "react-native-experimental-navigation/NavigationStateUtils.js");
__d(/* react-native-experimental-navigation/NavigationScenesReducer.js */function(global, require, module, exports) {
'use strict';

var invariant = require(24                  ); // 24 = fbjs/lib/invariant

var SCENE_KEY_PREFIX = 'scene_';

function compareKey(one, two) {
  var delta = one.length - two.length;
  if (delta > 0) {
    return 1;
  }
  if (delta < 0) {
    return -1;
  }
  return one > two ? 1 : -1;
}

function compareScenes(one, two) {
  if (one.index > two.index) {
    return 1;
  }
  if (one.index < two.index) {
    return -1;
  }

  return compareKey(one.key, two.key);
}

function areScenesShallowEqual(one, two) {
  return one.key === two.key && one.index === two.index && one.isStale === two.isStale && one.navigationState === two.navigationState && one.navigationState.key === two.navigationState.key;
}

function NavigationScenesReducer(scenes, nextState, prevState) {

  var prevScenes = new Map();
  var freshScenes = new Map();
  var staleScenes = new Map();

  scenes.forEach(function (scene) {
    var key = scene.key;

    if (scene.isStale) {
      staleScenes.set(key, scene);
    }
    prevScenes.set(key, scene);
  });

  var nextKeys = new Set();
  nextState.children.forEach(function (navigationState, index) {
    var key = SCENE_KEY_PREFIX + navigationState.key;
    var scene = {
      index: index,
      isStale: false,
      key: key,
      navigationState: navigationState
    };
    invariant(!nextKeys.has(key), 'navigationState.children[' + index + '].key "' + key + '" conflicts with' + 'another child!');
    nextKeys.add(key);

    if (staleScenes.has(key)) {
      staleScenes.delete(key);
    }
    freshScenes.set(key, scene);
  });

  if (prevState) {
    prevState.children.forEach(function (navigationState, index) {
      var key = SCENE_KEY_PREFIX + navigationState.key;
      if (freshScenes.has(key)) {
        return;
      }
      staleScenes.set(key, {
        index: index,
        isStale: true,
        key: key,
        navigationState: navigationState
      });
    });
  }

  var nextScenes = [];

  var mergeScene = function mergeScene(nextScene) {
    var key = nextScene.key;

    var prevScene = prevScenes.has(key) ? prevScenes.get(key) : null;
    if (prevScene && areScenesShallowEqual(prevScene, nextScene)) {
      nextScenes.push(prevScene);
    } else {
      nextScenes.push(nextScene);
    }
  };

  staleScenes.forEach(mergeScene);
  freshScenes.forEach(mergeScene);

  return nextScenes.sort(compareScenes);
}

module.exports = NavigationScenesReducer;
}, 473, null, "react-native-experimental-navigation/NavigationScenesReducer.js");
__d(/* react-native-experimental-navigation/NavigationCard.js */function(global, require, module, exports) {
'use strict';

var Animated = require(12            ).Animated; // 12 = react-native
var NavigationCardStackPanResponder = require(475                                ); // 475 = ./NavigationCardStackPanResponder
var NavigationCardStackStyleInterpolator = require(478                                     ); // 478 = ./NavigationCardStackStyleInterpolator
var NavigationContainer = require(469                    ); // 469 = ./NavigationContainer
var NavigationPagerPanResponder = require(479                            ); // 479 = ./NavigationPagerPanResponder
var NavigationPagerStyleInterpolator = require(480                                 ); // 480 = ./NavigationPagerStyleInterpolator
var NavigationPointerEventsContainer = require(481                                 ); // 481 = ./NavigationPointerEventsContainer
var NavigationPropTypes = require(471                    ); // 471 = ./NavigationPropTypes
var React = require(282    ); // 282 = react
var ReactComponentWithPureRenderMixin = require(483                             ); // 483 = react-addons-pure-render-mixin
var StyleSheet = require(12            ).StyleSheet; // 12 = react-native
var View = require(12            ).View; // 12 = react-native

var PropTypes = React.PropTypes;

var SceneView = function (_React$Component) {
  babelHelpers.inherits(SceneView, _React$Component);

  function SceneView() {
    babelHelpers.classCallCheck(this, SceneView);
    return babelHelpers.possibleConstructorReturn(this, (SceneView.__proto__ || Object.getPrototypeOf(SceneView)).apply(this, arguments));
  }

  babelHelpers.createClass(SceneView, [{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps, nextState) {
      return nextProps.sceneRendererProps.scene.navigationState !== this.props.sceneRendererProps.scene.navigationState;
    }
  }, {
    key: 'render',
    value: function render() {
      return this.props.sceneRenderer(this.props.sceneRendererProps);
    }
  }]);
  return SceneView;
}(React.Component);

SceneView.propTypes = {
  sceneRenderer: PropTypes.func.isRequired,
  sceneRendererProps: NavigationPropTypes.SceneRenderer
};

var NavigationCard = function (_React$Component2) {
  babelHelpers.inherits(NavigationCard, _React$Component2);

  function NavigationCard() {
    babelHelpers.classCallCheck(this, NavigationCard);
    return babelHelpers.possibleConstructorReturn(this, (NavigationCard.__proto__ || Object.getPrototypeOf(NavigationCard)).apply(this, arguments));
  }

  babelHelpers.createClass(NavigationCard, [{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps, nextState) {
      return ReactComponentWithPureRenderMixin.shouldComponentUpdate.call(this, nextProps, nextState);
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          panHandlers = _props.panHandlers,
          pointerEvents = _props.pointerEvents,
          renderScene = _props.renderScene,
          style = _props.style,
          props = babelHelpers.objectWithoutProperties(_props, ['panHandlers', 'pointerEvents', 'renderScene', 'style']);


      var viewStyle = style === undefined ? NavigationCardStackStyleInterpolator.forHorizontal(props) : style;

      var viewPanHandlers = panHandlers === undefined ? NavigationCardStackPanResponder.forHorizontal(props) : panHandlers;

      return React.createElement(
        Animated.View,
        babelHelpers.extends({}, viewPanHandlers, {
          pointerEvents: pointerEvents,
          ref: this.props.onComponentRef,
          style: [styles.main, viewStyle] }),
        React.createElement(SceneView, {
          sceneRenderer: renderScene,
          sceneRendererProps: props
        })
      );
    }
  }]);
  return NavigationCard;
}(React.Component);

NavigationCard.propTypes = babelHelpers.extends({}, NavigationPropTypes.SceneRendererProps, {
  onComponentRef: PropTypes.func.isRequired,
  panHandlers: NavigationPropTypes.panHandlers,
  pointerEvents: PropTypes.string.isRequired,
  renderScene: PropTypes.func.isRequired,
  style: PropTypes.any
});


var styles = StyleSheet.create({
  main: {
    backgroundColor: 'white',
    bottom: 0,
    left: 0,
    position: 'absolute',
    right: 0,
    top: 0
  }
});

NavigationCard = NavigationPointerEventsContainer.create(NavigationCard);
NavigationCard = NavigationContainer.create(NavigationCard);

NavigationCard.CardStackPanResponder = NavigationCardStackPanResponder;
NavigationCard.CardStackStyleInterpolator = NavigationCardStackStyleInterpolator;
NavigationCard.PagerPanResponder = NavigationPagerPanResponder;
NavigationCard.PagerStyleInterpolator = NavigationPagerStyleInterpolator;

module.exports = NavigationCard;
}, 474, null, "react-native-experimental-navigation/NavigationCard.js");
__d(/* react-native-experimental-navigation/NavigationCardStackPanResponder.js */function(global, require, module, exports) {
'use strict';

var Animated = require(12            ).Animated; // 12 = react-native
var NavigationAbstractPanResponder = require(476                               ); // 476 = ./NavigationAbstractPanResponder

var clamp = require(477    ); // 477 = clamp

var ANIMATION_DURATION = 250;

var POSITION_THRESHOLD = 1 / 3;

var RESPOND_THRESHOLD = 15;

var RESPOND_POSITION_MAX_HORIZONTAL = 30;
var RESPOND_POSITION_MAX_VERTICAL = null;

var DISTANCE_THRESHOLD = 100;

var Directions = {
  'HORIZONTAL': 'horizontal',
  'VERTICAL': 'vertical'
};

var Actions = {
  BACK: { type: 'back' }
};

var NavigationCardStackPanResponder = function (_NavigationAbstractPa) {
  babelHelpers.inherits(NavigationCardStackPanResponder, _NavigationAbstractPa);

  function NavigationCardStackPanResponder(direction, props) {
    babelHelpers.classCallCheck(this, NavigationCardStackPanResponder);

    var _this = babelHelpers.possibleConstructorReturn(this, (NavigationCardStackPanResponder.__proto__ || Object.getPrototypeOf(NavigationCardStackPanResponder)).call(this));

    _this._isResponding = false;
    _this._isVertical = direction === Directions.VERTICAL;
    _this._props = props;
    _this._startValue = 0;
    return _this;
  }

  babelHelpers.createClass(NavigationCardStackPanResponder, [{
    key: 'onMoveShouldSetPanResponder',
    value: function onMoveShouldSetPanResponder(event, gesture) {
      var props = this._props;

      if (props.navigationState.index !== props.scene.index) {
        return false;
      }

      var layout = props.layout;
      var isVertical = this._isVertical;
      var index = props.navigationState.index;
      var currentDragDistance = gesture[isVertical ? 'dy' : 'dx'];
      var currentDragPosition = gesture[isVertical ? 'moveY' : 'moveX'];
      var maxDragDistance = isVertical ? layout.height.__getValue() : layout.width.__getValue();

      var positionMax = isVertical ? RESPOND_POSITION_MAX_VERTICAL : RESPOND_POSITION_MAX_HORIZONTAL;

      if (positionMax != null && currentDragPosition > positionMax) {
        return false;
      }

      return Math.abs(currentDragDistance) > RESPOND_THRESHOLD && maxDragDistance > 0 && index > 0;
    }
  }, {
    key: 'onPanResponderGrant',
    value: function onPanResponderGrant() {
      var _this2 = this;

      this._isResponding = false;
      this._props.position.stopAnimation(function (value) {
        _this2._isResponding = true;
        _this2._startValue = value;
      });
    }
  }, {
    key: 'onPanResponderMove',
    value: function onPanResponderMove(event, gesture) {
      if (!this._isResponding) {
        return;
      }

      var props = this._props;
      var layout = props.layout;
      var isVertical = this._isVertical;
      var axis = isVertical ? 'dy' : 'dx';
      var index = props.navigationState.index;
      var distance = isVertical ? layout.height.__getValue() : layout.width.__getValue();

      var value = clamp(index - 1, this._startValue - gesture[axis] / distance, index);

      props.position.setValue(value);
    }
  }, {
    key: 'onPanResponderRelease',
    value: function onPanResponderRelease(event, gesture) {
      var _this3 = this;

      if (!this._isResponding) {
        return;
      }

      this._isResponding = false;

      var props = this._props;
      var isVertical = this._isVertical;
      var axis = isVertical ? 'dy' : 'dx';
      var index = props.navigationState.index;
      var distance = gesture[axis];

      props.position.stopAnimation(function (value) {
        _this3._reset();
        if (distance > DISTANCE_THRESHOLD || value <= index - POSITION_THRESHOLD) {
          props.onNavigate(Actions.BACK);
        }
      });
    }
  }, {
    key: 'onPanResponderTerminate',
    value: function onPanResponderTerminate() {
      this._isResponding = false;
      this._reset();
    }
  }, {
    key: '_reset',
    value: function _reset() {
      var props = this._props;
      Animated.timing(props.position, {
        toValue: props.navigationState.index,
        duration: ANIMATION_DURATION
      }).start();
    }
  }]);
  return NavigationCardStackPanResponder;
}(NavigationAbstractPanResponder);

function createPanHandlers(direction, props) {
  var responder = new NavigationCardStackPanResponder(direction, props);
  return responder.panHandlers;
}

function forHorizontal(props) {
  return createPanHandlers(Directions.HORIZONTAL, props);
}

function forVertical(props) {
  return createPanHandlers(Directions.VERTICAL, props);
}

module.exports = {
  ANIMATION_DURATION: ANIMATION_DURATION,
  DISTANCE_THRESHOLD: DISTANCE_THRESHOLD,
  POSITION_THRESHOLD: POSITION_THRESHOLD,
  RESPOND_THRESHOLD: RESPOND_THRESHOLD,

  Actions: Actions,
  Directions: Directions,

  forHorizontal: forHorizontal,
  forVertical: forVertical
};
}, 475, null, "react-native-experimental-navigation/NavigationCardStackPanResponder.js");
__d(/* react-native-experimental-navigation/NavigationAbstractPanResponder.js */function(global, require, module, exports) {
'use strict';

var PanResponder = require(12            ).PanResponder; // 12 = react-native

var invariant = require(24                  ); // 24 = fbjs/lib/invariant

var EmptyPanHandlers = {
  onMoveShouldSetPanResponder: null,
  onPanResponderGrant: null,
  onPanResponderMove: null,
  onPanResponderRelease: null,
  onPanResponderTerminate: null
};

var NavigationAbstractPanResponder = function NavigationAbstractPanResponder() {
  var _this = this;

  babelHelpers.classCallCheck(this, NavigationAbstractPanResponder);

  var config = {};
  Object.keys(EmptyPanHandlers).forEach(function (name) {
    var fn = _this[name];

    invariant(typeof fn === 'function', 'subclass of `NavigationAbstractPanResponder` must implement method %s', name);

    config[name] = fn.bind(_this);
  }, this);

  this.panHandlers = PanResponder.create(config).panHandlers;
};

module.exports = NavigationAbstractPanResponder;
}, 476, null, "react-native-experimental-navigation/NavigationAbstractPanResponder.js");
__d(/* clamp/index.js */function(global, require, module, exports) {module.exports = clamp;

function clamp(value, min, max) {
  return min < max ? value < min ? min : value > max ? max : value : value < max ? max : value > min ? min : value;
}
}, 477, null, "clamp/index.js");
__d(/* react-native-experimental-navigation/NavigationCardStackStyleInterpolator.js */function(global, require, module, exports) {
'use strict';

function forInitial(props) {
  var navigationState = props.navigationState,
      scene = props.scene;


  var focused = navigationState.index === scene.index;
  var opacity = focused ? 1 : 0;

  var translate = focused ? 0 : 1000000;
  return {
    opacity: opacity,
    transform: [{ translateX: translate }, { translateY: translate }]
  };
}

function forHorizontal(props) {
  var layout = props.layout,
      position = props.position,
      scene = props.scene;


  if (!layout.isMeasured) {
    return forInitial(props);
  }

  var index = scene.index;
  var inputRange = [index - 1, index, index + 1];
  var width = layout.initWidth;

  var opacity = position.interpolate({
    inputRange: inputRange,
    outputRange: [1, 1, 0.3]
  });

  var scale = position.interpolate({
    inputRange: inputRange,
    outputRange: [1, 1, 0.95]
  });

  var translateY = 0;
  var translateX = position.interpolate({
    inputRange: inputRange,
    outputRange: [width, 0, -10]
  });

  return {
    opacity: opacity,
    transform: [{ scale: scale }, { translateX: translateX }, { translateY: translateY }]
  };
}

function forVertical(props) {
  var layout = props.layout,
      position = props.position,
      scene = props.scene;


  if (!layout.isMeasured) {
    return forInitial(props);
  }

  var index = scene.index;
  var inputRange = [index - 1, index, index + 1];
  var height = layout.initHeight;

  var opacity = position.interpolate({
    inputRange: inputRange,
    outputRange: [1, 1, 0.3]
  });

  var scale = position.interpolate({
    inputRange: inputRange,
    outputRange: [1, 1, 0.95]
  });

  var translateX = 0;
  var translateY = position.interpolate({
    inputRange: inputRange,
    outputRange: [height, 0, -10]
  });

  return {
    opacity: opacity,
    transform: [{ scale: scale }, { translateX: translateX }, { translateY: translateY }]
  };
}

module.exports = {
  forHorizontal: forHorizontal,
  forVertical: forVertical
};
}, 478, null, "react-native-experimental-navigation/NavigationCardStackStyleInterpolator.js");
__d(/* react-native-experimental-navigation/NavigationPagerPanResponder.js */function(global, require, module, exports) {
'use strict';

var Animated = require(12            ).Animated; // 12 = react-native
var NavigationAbstractPanResponder = require(476                               ); // 476 = ./NavigationAbstractPanResponder
var NavigationCardStackPanResponder = require(475                                ); // 475 = ./NavigationCardStackPanResponder

var clamp = require(477    ); // 477 = clamp

var ANIMATION_DURATION = NavigationCardStackPanResponder.ANIMATION_DURATION,
    DISTANCE_THRESHOLD = NavigationCardStackPanResponder.DISTANCE_THRESHOLD,
    POSITION_THRESHOLD = NavigationCardStackPanResponder.POSITION_THRESHOLD,
    RESPOND_THRESHOLD = NavigationCardStackPanResponder.RESPOND_THRESHOLD,
    Directions = NavigationCardStackPanResponder.Directions;

var Actions = {
  JUMP_BACK: { type: 'jump_back' },
  JUMP_FORWARD: { type: 'jump_forward' }
};

var NavigationPagerPanResponder = function (_NavigationAbstractPa) {
  babelHelpers.inherits(NavigationPagerPanResponder, _NavigationAbstractPa);

  function NavigationPagerPanResponder(direction, props) {
    babelHelpers.classCallCheck(this, NavigationPagerPanResponder);

    var _this = babelHelpers.possibleConstructorReturn(this, (NavigationPagerPanResponder.__proto__ || Object.getPrototypeOf(NavigationPagerPanResponder)).call(this));

    _this._isResponding = false;
    _this._isVertical = direction === Directions.VERTICAL;
    _this._props = props;
    _this._startValue = 0;
    return _this;
  }

  babelHelpers.createClass(NavigationPagerPanResponder, [{
    key: 'onMoveShouldSetPanResponder',
    value: function onMoveShouldSetPanResponder(event, gesture) {
      var props = this._props;

      if (props.navigationState.index !== props.scene.index) {
        return false;
      }

      var layout = props.layout;
      var isVertical = this._isVertical;
      var axis = isVertical ? 'dy' : 'dx';
      var index = props.navigationState.index;
      var distance = isVertical ? layout.height.__getValue() : layout.width.__getValue();

      return Math.abs(gesture[axis]) > RESPOND_THRESHOLD && distance > 0 && index > 0;
    }
  }, {
    key: 'onPanResponderGrant',
    value: function onPanResponderGrant() {
      var _this2 = this;

      this._isResponding = false;
      this._props.position.stopAnimation(function (value) {
        _this2._isResponding = true;
        _this2._startValue = value;
      });
    }
  }, {
    key: 'onPanResponderMove',
    value: function onPanResponderMove(event, gesture) {
      if (!this._isResponding) {
        return;
      }

      var _props = this._props,
          layout = _props.layout,
          navigationState = _props.navigationState,
          position = _props.position,
          scenes = _props.scenes;


      var isVertical = this._isVertical;
      var axis = isVertical ? 'dy' : 'dx';
      var index = navigationState.index;
      var distance = isVertical ? layout.height.__getValue() : layout.width.__getValue();

      var prevIndex = Math.max(0, index - 1);

      var nextIndex = Math.min(index + 1, scenes.length - 1);

      var value = clamp(prevIndex, this._startValue - gesture[axis] / distance, nextIndex);

      position.setValue(value);
    }
  }, {
    key: 'onPanResponderRelease',
    value: function onPanResponderRelease(event, gesture) {
      var _this3 = this;

      if (!this._isResponding) {
        return;
      }

      this._isResponding = false;

      var _props2 = this._props,
          navigationState = _props2.navigationState,
          onNavigate = _props2.onNavigate,
          position = _props2.position;


      var isVertical = this._isVertical;
      var axis = isVertical ? 'dy' : 'dx';
      var index = navigationState.index;
      var distance = gesture[axis];

      position.stopAnimation(function (value) {
        _this3._reset();
        if (distance > DISTANCE_THRESHOLD || value <= index - POSITION_THRESHOLD) {
          onNavigate(Actions.JUMP_BACK);
          return;
        }

        if (distance < -DISTANCE_THRESHOLD || value >= index + POSITION_THRESHOLD) {
          onNavigate(Actions.JUMP_FORWARD);
        }
      });
    }
  }, {
    key: 'onPanResponderTerminate',
    value: function onPanResponderTerminate() {
      this._isResponding = false;
      this._reset();
    }
  }, {
    key: '_reset',
    value: function _reset() {
      var props = this._props;
      Animated.timing(props.position, {
        toValue: props.navigationState.index,
        duration: ANIMATION_DURATION
      }).start();
    }
  }]);
  return NavigationPagerPanResponder;
}(NavigationAbstractPanResponder);

function createPanHandlers(direction, props) {
  var responder = new NavigationPagerPanResponder(direction, props);
  return responder.panHandlers;
}

function forHorizontal(props) {
  return createPanHandlers(Directions.HORIZONTAL, props);
}

module.exports = {
  Actions: Actions,
  forHorizontal: forHorizontal
};
}, 479, null, "react-native-experimental-navigation/NavigationPagerPanResponder.js");
__d(/* react-native-experimental-navigation/NavigationPagerStyleInterpolator.js */function(global, require, module, exports) {
'use strict';

function forInitial(props) {
  var navigationState = props.navigationState,
      scene = props.scene;


  var focused = navigationState.index === scene.index;
  var opacity = focused ? 1 : 0;

  var dir = scene.index > navigationState.index ? 1 : -1;
  var translate = focused ? 0 : 1000000 * dir;
  return {
    opacity: opacity,
    transform: [{ translateX: translate }, { translateY: translate }]
  };
}

function forHorizontal(props) {
  var layout = props.layout,
      position = props.position,
      scene = props.scene;


  if (!layout.isMeasured) {
    return forInitial(props);
  }

  var index = scene.index;
  var inputRange = [index - 1, index, index + 1];

  var width = layout.initWidth;
  var translateX = position.interpolate({
    inputRange: inputRange,
    outputRange: [width, 0, -width]
  });

  return {
    opacity: 1,
    shadowColor: 'transparent',
    shadowRadius: 0,
    transform: [{ scale: 1 }, { translateX: translateX }, { translateY: 0 }]
  };
}

module.exports = {
  forHorizontal: forHorizontal
};
}, 480, null, "react-native-experimental-navigation/NavigationPagerStyleInterpolator.js");
__d(/* react-native-experimental-navigation/NavigationPointerEventsContainer.js */function(global, require, module, exports) {
'use strict';

var React = require(282    ); // 282 = react
var NavigationAnimatedValueSubscription = require(482                                    ); // 482 = ./NavigationAnimatedValueSubscription

var invariant = require(24                  ); // 24 = fbjs/lib/invariant

var MIN_POSITION_OFFSET = 0.01;

function create(Component) {
  var Container = function (_React$Component) {
    babelHelpers.inherits(Container, _React$Component);

    function Container(props, context) {
      babelHelpers.classCallCheck(this, Container);

      var _this = babelHelpers.possibleConstructorReturn(this, (Container.__proto__ || Object.getPrototypeOf(Container)).call(this, props, context));

      _this._pointerEvents = _this._computePointerEvents();
      return _this;
    }

    babelHelpers.createClass(Container, [{
      key: 'componentWillMount',
      value: function componentWillMount() {
        this._onPositionChange = this._onPositionChange.bind(this);
        this._onComponentRef = this._onComponentRef.bind(this);
      }
    }, {
      key: 'componentDidMount',
      value: function componentDidMount() {
        this._bindPosition(this.props);
      }
    }, {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        this._positionListener && this._positionListener.remove();
      }
    }, {
      key: 'componentWillReceiveProps',
      value: function componentWillReceiveProps(nextProps) {
        this._bindPosition(nextProps);
      }
    }, {
      key: 'render',
      value: function render() {
        this._pointerEvents = this._computePointerEvents();
        return React.createElement(Component, babelHelpers.extends({}, this.props, {
          pointerEvents: this._pointerEvents,
          onComponentRef: this._onComponentRef
        }));
      }
    }, {
      key: '_onComponentRef',
      value: function _onComponentRef(component) {
        this._component = component;
        if (component) {
          invariant(typeof component.setNativeProps === 'function', 'component must implement method `setNativeProps`');
        }
      }
    }, {
      key: '_bindPosition',
      value: function _bindPosition(props) {
        this._positionListener && this._positionListener.remove();
        this._positionListener = new NavigationAnimatedValueSubscription(props.position, this._onPositionChange);
      }
    }, {
      key: '_onPositionChange',
      value: function _onPositionChange() {
        if (this._component) {
          var pointerEvents = this._computePointerEvents();
          if (this._pointerEvents !== pointerEvents) {
            this._pointerEvents = pointerEvents;
            this._component.setNativeProps({ pointerEvents: pointerEvents });
          }
        }
      }
    }, {
      key: '_computePointerEvents',
      value: function _computePointerEvents() {
        var _props = this.props,
            navigationState = _props.navigationState,
            position = _props.position,
            scene = _props.scene;


        if (scene.isStale || navigationState.index !== scene.index) {
          return scene.index > navigationState.index ? 'box-only' : 'none';
        }

        var offset = position.__getAnimatedValue() - navigationState.index;
        if (Math.abs(offset) > MIN_POSITION_OFFSET) {
          return 'box-only';
        }

        return 'auto';
      }
    }]);
    return Container;
  }(React.Component);

  return Container;
}

module.exports = {
  create: create
};
}, 481, null, "react-native-experimental-navigation/NavigationPointerEventsContainer.js");
__d(/* react-native-experimental-navigation/NavigationAnimatedValueSubscription.js */function(global, require, module, exports) {
'use strict';

var NavigationAnimatedValueSubscription = function () {
  function NavigationAnimatedValueSubscription(value, callback) {
    babelHelpers.classCallCheck(this, NavigationAnimatedValueSubscription);

    this._value = value;
    this._token = value.addListener(callback);
  }

  babelHelpers.createClass(NavigationAnimatedValueSubscription, [{
    key: 'remove',
    value: function remove() {
      this._value.removeListener(this._token);
    }
  }]);
  return NavigationAnimatedValueSubscription;
}();

module.exports = NavigationAnimatedValueSubscription;
}, 482, null, "react-native-experimental-navigation/NavigationAnimatedValueSubscription.js");
__d(/* react-addons-pure-render-mixin/index.js */function(global, require, module, exports) {module.exports = require(384                                          ); // 384 = react/lib/ReactComponentWithPureRenderMixin
}, 483, null, "react-addons-pure-render-mixin/index.js");
__d(/* react-native-experimental-navigation/NavigationCardStack.js */function(global, require, module, exports) {
'use strict';

var NavigationAnimatedView = require(468                       ); // 468 = ./NavigationAnimatedView
var NavigationCard = require(474               ); // 474 = ./NavigationCard
var NavigationCardStackStyleInterpolator = require(478                                     ); // 478 = ./NavigationCardStackStyleInterpolator
var NavigationContainer = require(469                    ); // 469 = ./NavigationContainer
var NavigationCardStackPanResponder = require(475                                ); // 475 = ./NavigationCardStackPanResponder
var NavigationPropTypes = require(471                    ); // 471 = ./NavigationPropTypes
var React = require(282    ); // 282 = react
var ReactComponentWithPureRenderMixin = require(483                             ); // 483 = react-addons-pure-render-mixin
var StyleSheet = require(12            ).StyleSheet; // 12 = react-native

var emptyFunction = require(14                      ); // 14 = fbjs/lib/emptyFunction

var PropTypes = React.PropTypes;
var Directions = NavigationCardStackPanResponder.Directions;

var NavigationCardStack = function (_React$Component) {
  babelHelpers.inherits(NavigationCardStack, _React$Component);

  function NavigationCardStack(props, context) {
    babelHelpers.classCallCheck(this, NavigationCardStack);
    return babelHelpers.possibleConstructorReturn(this, (NavigationCardStack.__proto__ || Object.getPrototypeOf(NavigationCardStack)).call(this, props, context));
  }

  babelHelpers.createClass(NavigationCardStack, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this._renderScene = this._renderScene.bind(this);
    }
  }, {
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps, nextState) {
      return ReactComponentWithPureRenderMixin.shouldComponentUpdate.call(this, nextProps, nextState);
    }
  }, {
    key: 'render',
    value: function render() {
      return React.createElement(NavigationAnimatedView, {
        navigationState: this.props.navigationState,
        renderOverlay: this.props.renderOverlay,
        renderScene: this._renderScene,

        style: [styles.animatedView, this.props.style]
      });
    }
  }, {
    key: '_renderScene',
    value: function _renderScene(props) {
      var isVertical = this.props.direction === 'vertical';

      var style = isVertical ? NavigationCardStackStyleInterpolator.forVertical(props) : NavigationCardStackStyleInterpolator.forHorizontal(props);

      var panHandlers = isVertical ? NavigationCardStackPanResponder.forVertical(props) : NavigationCardStackPanResponder.forHorizontal(props);

      return React.createElement(NavigationCard, babelHelpers.extends({}, props, {
        key: 'card_' + props.scene.key,
        panHandlers: panHandlers,
        renderScene: this.props.renderScene,
        style: style
      }));
    }
  }]);
  return NavigationCardStack;
}(React.Component);

NavigationCardStack.propTypes = {
  direction: PropTypes.oneOf([Directions.HORIZONTAL, Directions.VERTICAL]),
  navigationState: NavigationPropTypes.navigationParentState.isRequired,
  renderOverlay: PropTypes.func,
  renderScene: PropTypes.func.isRequired
};
NavigationCardStack.defaultProps = {
  direction: Directions.HORIZONTAL,
  renderOverlay: emptyFunction.thatReturnsNull
};


var styles = StyleSheet.create({
  animatedView: {
    flex: 1
  }
});

module.exports = NavigationContainer.create(NavigationCardStack);
}, 484, null, "react-native-experimental-navigation/NavigationCardStack.js");
__d(/* react-native-experimental-navigation/NavigationHeader.js */function(global, require, module, exports) {
'use strict';

var React = require(282    ); // 282 = react
var ReactNative = require(12            ); // 12 = react-native
var NavigationContainer = require(469                    ); // 469 = ./NavigationContainer
var NavigationHeaderTitle = require(486                      ); // 486 = ./NavigationHeaderTitle
var NavigationHeaderBackButton = require(487                           ); // 487 = ./NavigationHeaderBackButton
var NavigationPropTypes = require(471                    ); // 471 = ./NavigationPropTypes
var NavigationHeaderStyleInterpolator = require(489                                  ); // 489 = ./NavigationHeaderStyleInterpolator
var ReactComponentWithPureRenderMixin = require(483                             ); // 483 = react-addons-pure-render-mixin

var Animated = ReactNative.Animated,
    Platform = ReactNative.Platform,
    StyleSheet = ReactNative.StyleSheet,
    View = ReactNative.View;


var APPBAR_HEIGHT = Platform.OS === 'ios' ? 44 : 56;
var STATUSBAR_HEIGHT = Platform.OS === 'ios' ? 20 : 0;
var PropTypes = React.PropTypes;

var NavigationHeader = function (_React$Component) {
  babelHelpers.inherits(NavigationHeader, _React$Component);

  function NavigationHeader() {
    babelHelpers.classCallCheck(this, NavigationHeader);
    return babelHelpers.possibleConstructorReturn(this, (NavigationHeader.__proto__ || Object.getPrototypeOf(NavigationHeader)).apply(this, arguments));
  }

  babelHelpers.createClass(NavigationHeader, [{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps, nextState) {
      return ReactComponentWithPureRenderMixin.shouldComponentUpdate.call(this, nextProps, nextState);
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          scenes = _props.scenes,
          style = _props.style,
          viewProps = _props.viewProps;


      var scenesProps = scenes.map(function (scene) {
        var props = NavigationPropTypes.extractSceneRendererProps(_this2.props);
        props.scene = scene;
        return props;
      });

      return React.createElement(
        View,
        babelHelpers.extends({ style: [styles.appbar, style] }, viewProps),
        scenesProps.map(this._renderLeft, this),
        scenesProps.map(this._renderTitle, this),
        scenesProps.map(this._renderRight, this)
      );
    }
  }, {
    key: '_renderLeft',
    value: function _renderLeft(props) {
      return this._renderSubView(props, 'left', this.props.renderLeftComponent, NavigationHeaderStyleInterpolator.forLeft);
    }
  }, {
    key: '_renderTitle',
    value: function _renderTitle(props) {
      return this._renderSubView(props, 'title', this.props.renderTitleComponent, NavigationHeaderStyleInterpolator.forCenter);
    }
  }, {
    key: '_renderRight',
    value: function _renderRight(props) {
      return this._renderSubView(props, 'right', this.props.renderRightComponent, NavigationHeaderStyleInterpolator.forRight);
    }
  }, {
    key: '_renderSubView',
    value: function _renderSubView(props, name, renderer, styleInterpolator) {
      var scene = props.scene,
          navigationState = props.navigationState;
      var index = scene.index,
          isStale = scene.isStale,
          key = scene.key;


      var offset = navigationState.index - index;

      if (Math.abs(offset) > 2) {
        return null;
      }

      var subView = renderer(props);
      if (subView === null) {
        return null;
      }

      var pointerEvents = offset !== 0 || isStale ? 'none' : 'box-none';
      return React.createElement(
        Animated.View,
        {
          pointerEvents: pointerEvents,
          key: name + '_' + key,
          style: [styles[name], styleInterpolator(props)] },
        subView
      );
    }
  }]);
  return NavigationHeader;
}(React.Component);

NavigationHeader.defaultProps = {

  renderTitleComponent: function renderTitleComponent(props) {
    var navigationState = props.navigationState;

    var title = String(navigationState.title || '');
    return React.createElement(
      NavigationHeaderTitle,
      null,
      title
    );
  },

  renderLeftComponent: function renderLeftComponent(props) {
    return props.scene.index > 0 ? React.createElement(NavigationHeaderBackButton, null) : null;
  },

  renderRightComponent: function renderRightComponent(props) {
    return null;
  }
};
NavigationHeader.propTypes = babelHelpers.extends({}, NavigationPropTypes.SceneRendererProps, {
  renderLeftComponent: PropTypes.func,
  renderRightComponent: PropTypes.func,
  renderTitleComponent: PropTypes.func,
  style: View.propTypes.style,
  viewProps: PropTypes.shape(View.propTypes)
});


var styles = StyleSheet.create({
  appbar: {
    alignItems: 'center',
    backgroundColor: Platform.OS === 'ios' ? '#EFEFF2' : '#FFF',
    borderBottomColor: 'rgba(0, 0, 0, .15)',
    borderBottomWidth: Platform.OS === 'ios' ? StyleSheet.hairlineWidth : 0,
    elevation: 2,
    flexDirection: 'row',
    height: APPBAR_HEIGHT + STATUSBAR_HEIGHT,
    justifyContent: 'flex-start',
    left: 0,
    marginBottom: 16,
    position: 'absolute',
    right: 0,
    top: 0
  },

  title: {
    bottom: 0,
    left: APPBAR_HEIGHT,
    marginTop: STATUSBAR_HEIGHT,
    position: 'absolute',
    right: APPBAR_HEIGHT,
    top: 0
  },

  left: {
    bottom: 0,
    left: 0,
    marginTop: STATUSBAR_HEIGHT,
    position: 'absolute',
    top: 0
  },

  right: {
    bottom: 0,
    marginTop: STATUSBAR_HEIGHT,
    position: 'absolute',
    right: 0,
    top: 0
  }
});

var NavigationHeaderContainer = NavigationContainer.create(NavigationHeader);

NavigationHeaderContainer.HEIGHT = APPBAR_HEIGHT + STATUSBAR_HEIGHT;
NavigationHeaderContainer.Title = NavigationHeaderTitle;
NavigationHeaderContainer.BackButton = NavigationHeaderBackButton;

module.exports = NavigationHeaderContainer;
}, 485, null, "react-native-experimental-navigation/NavigationHeader.js");
__d(/* react-native-experimental-navigation/NavigationHeaderTitle.js */function(global, require, module, exports) {
'use strict';

var React = require(282    ); // 282 = react
var ReactNative = require(12            ); // 12 = react-native

var Platform = ReactNative.Platform,
    StyleSheet = ReactNative.StyleSheet,
    View = ReactNative.View,
    Text = ReactNative.Text;


var NavigationHeaderTitle = function NavigationHeaderTitle(_ref) {
  var children = _ref.children,
      style = _ref.style,
      textStyle = _ref.textStyle,
      viewProps = _ref.viewProps;
  return React.createElement(
    View,
    babelHelpers.extends({ style: [styles.title, style] }, viewProps),
    React.createElement(
      Text,
      { style: [styles.titleText, textStyle] },
      children
    )
  );
};

var styles = StyleSheet.create({
  title: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    marginHorizontal: 16
  },

  titleText: {
    flex: 1,
    fontSize: 18,
    fontWeight: '500',
    color: 'rgba(0, 0, 0, .9)',
    textAlign: Platform.OS === 'ios' ? 'center' : 'left'
  }
});

NavigationHeaderTitle.propTypes = {
  children: React.PropTypes.string.isRequired,
  style: View.propTypes.style,
  textStyle: Text.propTypes.style
};

module.exports = NavigationHeaderTitle;
}, 486, null, "react-native-experimental-navigation/NavigationHeaderTitle.js");
__d(/* react-native-experimental-navigation/NavigationHeaderBackButton.js */function(global, require, module, exports) {
'use strict';

var React = require(282    ); // 282 = react
var ReactNative = require(12            ); // 12 = react-native
var NavigationContainer = require(469                    ); // 469 = ./NavigationContainer
var NavigationRootContainer = require(470                        ); // 470 = ./NavigationRootContainer

var Image = ReactNative.Image,
    Platform = ReactNative.Platform,
    StyleSheet = ReactNative.StyleSheet,
    TouchableOpacity = ReactNative.TouchableOpacity;


var NavigationHeaderBackButton = function NavigationHeaderBackButton(props) {
  return React.createElement(
    TouchableOpacity,
    { style: styles.buttonContainer, onPress: function onPress() {
        return props.onNavigate(NavigationRootContainer.getBackAction());
      } },
    React.createElement(Image, { style: styles.button, source: require(488                ) }) // 488 = ./assets/back.png
  );
};

NavigationHeaderBackButton.propTypes = {
  onNavigate: React.PropTypes.func.isRequired
};

var styles = StyleSheet.create({
  buttonContainer: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center'
  },
  button: {
    height: 24,
    width: 24,
    margin: Platform.OS === 'ios' ? 10 : 16,
    resizeMode: 'contain'
  }
});

module.exports = NavigationContainer.create(NavigationHeaderBackButton);
}, 487, null, "react-native-experimental-navigation/NavigationHeaderBackButton.js");
__d(/* react-native-experimental-navigation/assets/back.png */function(global, require, module, exports) {module.exports = require(172                                         ).registerAsset({"__packager_asset":true,"httpServerLocation":"/assets/node_modules/react-native-experimental-navigation/assets","width":24,"height":24,"scales":[1,1.5,2,3,4],"hash":"a364dc7a784101f7c8f6791c7b4514ce","name":"back","type":"png"}); // 172 = react-native/Libraries/Image/AssetRegistry
}, 488, null, "react-native-experimental-navigation/assets/back.png");
__d(/* react-native-experimental-navigation/NavigationHeaderStyleInterpolator.js */function(global, require, module, exports) {
'use strict';

function forLeft(props) {
  var position = props.position,
      scene = props.scene;
  var index = scene.index;

  return {
    opacity: position.interpolate({
      inputRange: [index - 1, index, index + 1],
      outputRange: [0, 1, 0]
    })
  };
}

function forCenter(props) {
  var position = props.position,
      scene = props.scene;
  var index = scene.index;

  return {
    opacity: position.interpolate({
      inputRange: [index - 1, index, index + 1],
      outputRange: [0, 1, 0]
    }),
    transform: [{
      translateX: position.interpolate({
        inputRange: [index - 1, index + 1],
        outputRange: [200, -200]
      })
    }]
  };
}

function forRight(props) {
  var position = props.position,
      scene = props.scene;
  var index = scene.index;

  return {
    opacity: position.interpolate({
      inputRange: [index - 1, index, index + 1],
      outputRange: [0, 1, 0]
    })
  };
}

module.exports = {
  forCenter: forCenter,
  forLeft: forLeft,
  forRight: forRight
};
}, 489, null, "react-native-experimental-navigation/NavigationHeaderStyleInterpolator.js");
__d(/* react-native-experimental-navigation/NavigationReducer.js */function(global, require, module, exports) {
'use strict';

var NavigationFindReducer = require(491                      ); // 491 = ./NavigationFindReducer
var NavigationStackReducer = require(492                       ); // 492 = ./NavigationStackReducer
var NavigationTabsReducer = require(493                      ); // 493 = ./NavigationTabsReducer

var NavigationReducer = {
  FindReducer: NavigationFindReducer,
  StackReducer: NavigationStackReducer,
  TabsReducer: NavigationTabsReducer
};

module.exports = NavigationReducer;
}, 490, null, "react-native-experimental-navigation/NavigationReducer.js");
__d(/* react-native-experimental-navigation/NavigationFindReducer.js */function(global, require, module, exports) {
'use strict';

function NavigationFindReducer(reducers, defaultState) {
  return function (lastState, action) {
    for (var i = 0; i < reducers.length; i++) {
      var reducer = reducers[i];
      var newState = reducer(lastState, action);
      if (newState !== lastState) {
        return newState || defaultState;
      }
    }
    return lastState || defaultState;
  };
}

module.exports = NavigationFindReducer;
}, 491, null, "react-native-experimental-navigation/NavigationFindReducer.js");
__d(/* react-native-experimental-navigation/NavigationStackReducer.js */function(global, require, module, exports) {
'use strict';

var NavigationStateUtils = require(472                     ); // 472 = ./NavigationStateUtils

var defaultGetReducerForState = function defaultGetReducerForState(initialState) {
  return function (state) {
    return state || initialState;
  };
};

function NavigationStackReducer(_ref) {
  var initialState = _ref.initialState,
      getReducerForState = _ref.getReducerForState,
      getPushedReducerForAction = _ref.getPushedReducerForAction;

  var getReducerForStateWithDefault = getReducerForState || defaultGetReducerForState;
  return function (lastState, action) {
    if (!lastState) {
      return initialState;
    }
    var lastParentState = NavigationStateUtils.getParent(lastState);
    if (!lastParentState) {
      return lastState;
    }

    var activeSubState = lastParentState.children[lastParentState.index];
    var activeSubReducer = getReducerForStateWithDefault(activeSubState);
    var nextActiveState = activeSubReducer(activeSubState, action);
    if (nextActiveState !== activeSubState) {
      var nextChildren = [].concat(babelHelpers.toConsumableArray(lastParentState.children));
      nextChildren[lastParentState.index] = nextActiveState;
      return babelHelpers.extends({}, lastParentState, {
        children: nextChildren
      });
    }

    var subReducerToPush = getPushedReducerForAction(action, lastParentState);
    if (subReducerToPush) {
      return NavigationStateUtils.push(lastParentState, subReducerToPush(null, action));
    }

    switch (action.type) {
      case 'back':
      case 'BackAction':
        if (lastParentState.index === 0 || lastParentState.children.length === 1) {
          return lastParentState;
        }
        return NavigationStateUtils.pop(lastParentState);
    }

    return lastParentState;
  };
}

module.exports = NavigationStackReducer;
}, 492, null, "react-native-experimental-navigation/NavigationStackReducer.js");
__d(/* react-native-experimental-navigation/NavigationTabsReducer.js */function(global, require, module, exports) {
'use strict';

var NavigationFindReducer = require(491                      ); // 491 = ./NavigationFindReducer
var NavigationStateUtils = require(472                     ); // 472 = ./NavigationStateUtils

var ActionTypes = {
  JUMP_TO: 'react-native/NavigationExperimental/tabs-jumpTo'
};

function NavigationTabsJumpToAction(index) {
  return {
    type: ActionTypes.JUMP_TO,
    index: index
  };
}

function NavigationTabsReducer(_ref) {
  var key = _ref.key,
      initialIndex = _ref.initialIndex,
      tabReducers = _ref.tabReducers;

  return function (lastNavState, action) {
    if (!lastNavState) {
      lastNavState = {
        children: tabReducers.map(function (reducer) {
          return reducer(null, null);
        }),
        index: initialIndex || 0,
        key: key
      };
    }
    var lastParentNavState = NavigationStateUtils.getParent(lastNavState);
    if (!action || !lastParentNavState) {
      return lastNavState;
    }
    if (action.type === ActionTypes.JUMP_TO && action.index !== lastParentNavState.index) {
      return NavigationStateUtils.jumpToIndex(lastParentNavState, action.index);
    }
    var subReducers = tabReducers.map(function (tabReducer, tabIndex) {
      return function (navState, tabAction) {
        if (!navState) {
          return lastParentNavState;
        }
        var parentState = NavigationStateUtils.getParent(navState);
        var tabState = parentState && parentState.children[tabIndex];
        var nextTabState = tabReducer(tabState, tabAction);
        if (nextTabState && tabState !== nextTabState) {
          var tabs = parentState && parentState.children || [];
          tabs[tabIndex] = nextTabState;
          return babelHelpers.extends({}, lastParentNavState, {
            tabs: tabs,
            index: tabIndex
          });
        }
        return lastParentNavState;
      };
    });
    var selectedTabReducer = subReducers.splice(lastParentNavState.index, 1)[0];
    subReducers.unshift(function (navState, action) {
      if (navState && action.type === 'BackAction') {
        return NavigationStateUtils.jumpToIndex(lastParentNavState, initialIndex || 0);
      }
      return lastParentNavState;
    });
    subReducers.unshift(selectedTabReducer);
    var findReducer = NavigationFindReducer(subReducers, lastParentNavState);
    return findReducer(lastParentNavState, action);
  };
}

NavigationTabsReducer.JumpToAction = NavigationTabsJumpToAction;

module.exports = NavigationTabsReducer;
}, 493, null, "react-native-experimental-navigation/NavigationTabsReducer.js");
__d(/* react-native-experimental-navigation/NavigationView.js */function(global, require, module, exports) {
'use strict';

var Animated = require(12            ).Animated; // 12 = react-native
var NavigationContainer = require(469                    ); // 469 = ./NavigationContainer
var React = require(282    ); // 282 = react
var StyleSheet = require(12            ).StyleSheet; // 12 = react-native
var View = require(12            ).View; // 12 = react-native
var NavigationScenesReducer = require(473                        ); // 473 = ./NavigationScenesReducer
var ReactComponentWithPureRenderMixin = require(483                             ); // 483 = react-addons-pure-render-mixin

var PropTypes = React.PropTypes;

var NavigationView = function (_React$Component) {
  babelHelpers.inherits(NavigationView, _React$Component);

  function NavigationView(props, context) {
    babelHelpers.classCallCheck(this, NavigationView);

    var _this = babelHelpers.possibleConstructorReturn(this, (NavigationView.__proto__ || Object.getPrototypeOf(NavigationView)).call(this, props, context));

    var layout = {
      initWidth: 0,
      initHeight: 0,
      isMeasured: false,
      width: new Animated.Value(0),
      height: new Animated.Value(0)
    };

    var navigationState = _this.props.navigationState;


    _this._position = new Animated.Value(navigationState.index);

    _this.state = {
      layout: layout,
      scenes: NavigationScenesReducer([], navigationState)
    };
    return _this;
  }

  babelHelpers.createClass(NavigationView, [{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps, nextState) {
      return ReactComponentWithPureRenderMixin.shouldComponentUpdate.call(this, nextProps, nextState);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var _this2 = this;

      if (nextProps.navigationState !== this.props.navigationState) {
        var _navigationState = nextProps.navigationState;

        this.setState({
          scenes: NavigationScenesReducer(this.state.scenes, _navigationState, null)
        }, function () {
          _this2._position.setValue(_navigationState.index);
        });
      }
    }
  }, {
    key: 'componentWillMount',
    value: function componentWillMount() {
      this._onLayout = this._onLayout.bind(this);
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          navigationState = _props.navigationState,
          onNavigate = _props.onNavigate;
      var _state = this.state,
          layout = _state.layout,
          scenes = _state.scenes;


      var sceneProps = {
        layout: layout,
        navigationState: navigationState,
        onNavigate: onNavigate,
        position: this._position,
        scene: scenes[navigationState.index],
        scenes: scenes
      };

      return React.createElement(
        View,
        {
          onLayout: this._onLayout,
          style: this.props.style },
        this._renderScene(sceneProps)
      );
    }
  }, {
    key: '_renderScene',
    value: function _renderScene(props) {

      var child = this.props.renderScene(props);
      if (child === null) {
        return null;
      }
      return React.createElement(
        View,
        { key: props.scene.key, style: styles.scene },
        child
      );
    }
  }, {
    key: '_onLayout',
    value: function _onLayout(event) {
      var _event$nativeEvent$la = event.nativeEvent.layout,
          height = _event$nativeEvent$la.height,
          width = _event$nativeEvent$la.width;


      var layout = babelHelpers.extends({}, this.state.layout, {
        initHeight: height,
        initWidth: width,
        isMeasured: true
      });

      layout.height.setValue(height);
      layout.width.setValue(width);

      this.setState({ layout: layout });
    }
  }]);
  return NavigationView;
}(React.Component);

NavigationView.propTypes = {
  navigationState: PropTypes.object.isRequired,
  onNavigate: PropTypes.func.isRequired,
  renderScene: PropTypes.func.isRequired
};


var styles = StyleSheet.create({
  scene: {
    bottom: 0,
    left: 0,
    position: 'absolute',
    right: 0,
    top: 0
  }
});

module.exports = NavigationContainer.create(NavigationView);
}, 494, null, "react-native-experimental-navigation/NavigationView.js");
__d(/* react-native-router-flux/src/Modal.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Modal;

var _react = require(282    ); // 282 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(12            ); // 12 = react-native

var _DefaultRenderer = require(458                ); // 458 = ./DefaultRenderer

var _DefaultRenderer2 = babelHelpers.interopRequireDefault(_DefaultRenderer);

var propTypes = {
  navigationState: _react.PropTypes.shape({
    children: _react.PropTypes.array
  }),
  onNavigate: _react.PropTypes.func
};

function Modal(props) {
  var children = props.navigationState.children;
  var state = children[0];

  return _react2.default.createElement(
    _reactNative.View,
    { style: { flex: 1 } },
    _react2.default.createElement(_DefaultRenderer2.default, babelHelpers.extends({
      navigationState: state,
      key: state.key
    }, state, {
      onNavigate: props.onNavigate
    })),
    children.length > 1 && children.map(function (el, i) {
      if (i > 0 && el.component) {
        var Component = el.component;
        return _react2.default.createElement(Component, babelHelpers.extends({ key: el.key }, el));
      }

      return null;
    })
  );
}

Modal.propTypes = propTypes;
}, 495, null, "react-native-router-flux/src/Modal.js");
__d(/* react-native-router-flux/src/Reducer.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findElement = findElement;

var _ActionConst = require(457            ); // 457 = ./ActionConst

var ActionConst = babelHelpers.interopRequireWildcard(_ActionConst);

var _Actions = require(454        ); // 454 = ./Actions

var _Util = require(455     ); // 455 = ./Util

var _State = require(497      ); // 497 = ./State

var _reactNative = require(12            ); // 12 = react-native

function checkPropertiesEqual(action, lastAction) {
  var isEqual = true;
  for (var _iterator = Object.keys(action), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
    var _ref;

    if (_isArray) {
      if (_i >= _iterator.length) break;
      _ref = _iterator[_i++];
    } else {
      _i = _iterator.next();
      if (_i.done) break;
      _ref = _i.value;
    }

    var key = _ref;

    if (['key', 'type', 'parent'].indexOf(key) === -1) {
      if (action[key] !== lastAction[key]) {
        isEqual = false;
      }
    }
  }
  return isEqual;
}

function resetHistoryStack(child) {
  var newChild = child;
  newChild.index = 0;
  child.children.map(function (el, i) {
    if (el.initial) {
      newChild.index = i;
      if (!newChild.tabs) {
        newChild.children = [el];
      }
    }
    if (el.children) {
      resetHistoryStack(el);
    }
    return newChild;
  });
}

function refreshTopChild(children, refresh) {
  if (refresh) {
    var topChild = children[children.length - 1];
    return [].concat(babelHelpers.toConsumableArray(children.slice(0, -1)), [babelHelpers.extends({}, topChild, refresh)]);
  }
  return children;
}

function inject(state, action, props, scenes) {
  var condition = _Actions.ActionMap[action.type] === ActionConst.REFRESH ? state.key === props.key || state.sceneKey === action.key : state.sceneKey === props.parent;

  if (!condition) {
    if (state.children) {
      var res = state.children.map(function (el) {
        return inject(el, action, props, scenes);
      });
      var changed = false;
      var changedIndex = -1;
      for (var i = 0; i < res.length; i++) {
        if (res[i] !== state.children[i]) {
          changed = true;
          changedIndex = i;
          break;
        }
      }
      return changed ? babelHelpers.extends({}, state, { children: res, index: changedIndex }) : state;
    }
    return state;
  }
  var ind = void 0;

  switch (_Actions.ActionMap[action.type]) {
    case ActionConst.POP_TO:
      {
        var targetIndex = action.targetIndex;

        return babelHelpers.extends({}, state, {
          index: targetIndex,
          children: refreshTopChild(state.children.slice(0, targetIndex + 1), action.refresh)
        });
      }

    case ActionConst.BACK:
    case ActionConst.BACK_ACTION:
      {
        (0, _Util.assert)(!state.tabs, 'pop() operation cannot be run on tab bar (tabs=true)');

        if (_reactNative.Platform.OS === 'android') {
          (0, _Util.assert)(state.index > 0, 'You are already in the root scene.');
        }

        if (state.index === 0) {
          return state;
        }

        var popNum = 1;
        if (action.popNum) {
          (0, _Util.assert)(typeof action.popNum === 'number', 'The data is the number of scenes you want to pop, it must be Number');
          popNum = action.popNum;
          (0, _Util.assert)(popNum % 1 === 0, 'The data is the number of scenes you want to pop, it must be integer.');
          (0, _Util.assert)(popNum > 1, 'The data is the number of scenes you want to pop, it must be bigger than 1.');
          (0, _Util.assert)(popNum <= state.index, 'The data is the number of scenes you want to pop, ' + "it must be smaller than scenes stack's length.");
        }

        return babelHelpers.extends({}, state, {
          index: state.index - popNum,
          from: state.children[state.children.length - popNum],
          children: refreshTopChild(state.children.slice(0, -1 * popNum), action.refresh)
        });
      }
    case ActionConst.REFRESH:
      return props.base ? babelHelpers.extends({ navBar: state.navBar
      }, scenes.rootProps, props, {
        key: state.key,
        from: null }) : babelHelpers.extends({}, state, props, {
        key: state.key,
        from: null
      });
    case ActionConst.PUSH_OR_POP:
      ind = state.children.findIndex(function (el) {
        return el.sceneKey === action.key;
      });
      if (ind !== -1) {
        return babelHelpers.extends({}, state, {
          index: ind,
          from: state.children[state.index],
          children: refreshTopChild(state.children.slice(0, ind + 1), action.refresh)
        });
      }
      return babelHelpers.extends({}, state, {
        index: state.index + 1,
        from: null,
        children: [].concat(babelHelpers.toConsumableArray(state.children), [(0, _State.getInitialState)(props, scenes, state.index + 1, action)])
      });
    case ActionConst.PUSH:
      if (state.children[state.index].sceneKey === action.key && !props.clone && checkPropertiesEqual(action, state.children[state.index])) {
        return state;
      }
      return babelHelpers.extends({}, state, {
        index: state.index + 1,
        from: null,
        children: [].concat(babelHelpers.toConsumableArray(state.children), [(0, _State.getInitialState)(props, scenes, state.index + 1, action)])
      });
    case ActionConst.JUMP:
      (0, _Util.assert)(state.tabs, 'Parent=' + state.key + ' is not tab bar, jump action is not valid');
      ind = -1;
      state.children.forEach(function (c, i) {
        if (c.sceneKey === action.key) {
          ind = i;
        }
      });
      (0, _Util.assert)(ind !== -1, 'Cannot find route with key=' + action.key + ' for parent=' + state.key);

      if (action.unmountScenes) {
        resetHistoryStack(state.children[ind]);
      }
      return babelHelpers.extends({}, state, { index: ind });
    case ActionConst.REPLACE:
      if (state.children[state.index].sceneKey === action.key) {
        return state;
      }

      state.children[state.children.length - 1] = (0, _State.getInitialState)(props, scenes, state.index, action);

      return babelHelpers.extends({}, state, { children: state.children });
    case ActionConst.RESET:
      if (state.children[state.index].sceneKey === action.key) {
        return state;
      }

      state.children = state.children.splice(0, 1);
      state.children[0] = (0, _State.getInitialState)(props, scenes, state.index, action);

      return babelHelpers.extends({}, state, {
        index: 0,
        from: null,
        children: state.children
      });
    default:
      return state;
  }
}

function findElement(state, key, type) {
  if (_Actions.ActionMap[type] === ActionConst.REFRESH && state.key === key || state.sceneKey === key) {
    return state;
  }
  if (state.children) {
    for (var _iterator2 = state.children, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
      var _ref2;

      if (_isArray2) {
        if (_i2 >= _iterator2.length) break;
        _ref2 = _iterator2[_i2++];
      } else {
        _i2 = _iterator2.next();
        if (_i2.done) break;
        _ref2 = _i2.value;
      }

      var child = _ref2;

      var current = findElement(child, key, type);
      if (current) return current;
    }
  }
  return null;
}

function getCurrent(state) {
  if (!state.children) {
    return state;
  }
  return getCurrent(state.children[state.index]);
}

function update(state, action) {
  var props = babelHelpers.extends({}, state.scenes[action.key], action);
  (0, _Util.assert)(props.parent, 'No parent is defined for route=' + action.key);
  return inject(state, action, props, state.scenes);
}

function reducer(_ref3) {
  var initialState = _ref3.initialState,
      scenes = _ref3.scenes;

  (0, _Util.assert)(initialState, 'initialState should not be null');
  (0, _Util.assert)(initialState.key, 'initialState.key should not be null');
  (0, _Util.assert)(scenes, 'scenes should not be null');
  return function (stateParam, actionParam) {
    var state = stateParam;
    var action = actionParam;
    state = state || babelHelpers.extends({}, initialState, { scenes: scenes });
    (0, _Util.assert)(action, 'action should be defined');
    (0, _Util.assert)(action.type, 'action type should be defined');
    (0, _Util.assert)(state.scenes, 'state.scenes is missed');

    if (action.key) {
      if (_Actions.ActionMap[action.type] === ActionConst.REFRESH) {
        var key = action.key;
        var child = findElement(state, key, action.type) || state.scenes[key];
        var sceneKey = child.sceneKey;
        if (child.base) {
          child = babelHelpers.extends({}, state.scenes[child.base], child);
          (0, _Util.assert)(state.scenes[child.base], 'No scene exists for base=' + child.base);
          key = state.scenes[child.base].key;
          sceneKey = state.scenes[child.base].sceneKey;
        }
        (0, _Util.assert)(child, 'missed child data for key=' + key);

        var evaluated = {};
        Object.keys(action).forEach(function (el) {
          if (typeof action[el] === 'function' && typeof child[el] !== 'undefined' && typeof child[el] !== typeof action[el]) {
            evaluated[el] = action[el](child[el], child);
          }
        });
        action = babelHelpers.extends({}, child, action, evaluated, { sceneKey: sceneKey, key: key });
      } else {
        var scene = state.scenes[action.key];
        (0, _Util.assert)(scene, 'missed route data for key=' + action.key);

        if (scene.clone) {
          action.parent = getCurrent(state).parent;
        }
      }
    } else {
      if (_Actions.ActionMap[action.type] === ActionConst.BACK_ACTION || _Actions.ActionMap[action.type] === ActionConst.BACK || _Actions.ActionMap[action.type] === ActionConst.REFRESH || _Actions.ActionMap[action.type] === ActionConst.POP_TO) {
        if (!action.key && !action.parent) {
          action = babelHelpers.extends({}, getCurrent(state), action);
        }
      }

      if (_Actions.ActionMap[action.type] === ActionConst.POP_TO) {
        var target = action.data;
        (0, _Util.assert)(target, 'PopTo() must be called with scene name');

        var targetEl = findElement(state, target, action.type);
        (0, _Util.assert)(targetEl, 'Cannot find element name named ' + target + ' within current state');

        var parent = targetEl.sceneKey;
        var targetIndex = 0;

        if (!targetEl.children) {
          var targetParent = findElement(state, targetEl.parent, action.type);
          (0, _Util.assert)(targetParent, 'Cannot find parent for target ' + target);
          parent = targetParent.sceneKey;

          targetIndex = targetParent.children.indexOf(targetEl);
          (0, _Util.assert)(targetIndex > -1, target + ' does not belong to ' + targetParent.sceneKey);
        }

        action.parent = parent;
        action.targetIndex = targetIndex;
      }

      if (_Actions.ActionMap[action.type] === ActionConst.BACK_ACTION || _Actions.ActionMap[action.type] === ActionConst.BACK) {
        var _parent = action.parent || state.scenes[action.key].parent;
        var el = findElement(state, _parent, action.type);
        while (el.parent && (el.children.length <= 1 || el.tabs)) {
          el = findElement(state, el.parent, action.type);
          (0, _Util.assert)(el, 'Cannot find element for parent=' + el.parent + ' within current state');
        }
        action.parent = el.sceneKey;
      }
    }

    switch (_Actions.ActionMap[action.type]) {
      case ActionConst.BACK:
      case ActionConst.BACK_ACTION:
      case ActionConst.POP_TO:
      case ActionConst.REFRESH:
      case ActionConst.PUSH:
      case ActionConst.PUSH_OR_POP:
      case ActionConst.JUMP:
      case ActionConst.REPLACE:
      case ActionConst.RESET:
        return update(state, action);

      default:
        return state;

    }
  };
}

exports.default = reducer;
}, 496, null, "react-native-router-flux/src/Reducer.js");
__d(/* react-native-router-flux/src/State.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getInitialState = getInitialState;

exports.default = function (scenes) {
  var rootRoute = Object.keys(scenes).find(function (route) {
    return scenes.hasOwnProperty(route) && !scenes[route].parent;
  });

  return getInitialState(scenes[rootRoute], scenes);
};

var _Util = require(455     ); // 455 = ./Util

function getStateFromScenes(route, scenes, props) {
  var getters = [];
  var result = {};
  var scene = route;
  while (scene) {
    if (scene.getInitialState) {
      getters.push(scene.getInitialState);
    }
    scene = scenes[scene.parent];
  }

  if (scenes.rootProps && scenes.rootProps.getInitialState) {
    getters.push(scenes.rootProps.getInitialState);
  }

  getters.reverse().forEach(function (fn) {
    result = babelHelpers.extends({}, result, fn(props));
  });

  return result;
}

function getSceneKey(parent, key, position, sceneKey) {
  return [parent, key, position, sceneKey].filter(function (v) {
    return typeof v !== 'undefined' && v !== null;
  }).join('_');
}

function getInitialState(route, scenes) {
  var position = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var props = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  var parent = props.parent,
      key = props.key,
      style = props.style,
      type = props.type,
      parentProps = babelHelpers.objectWithoutProperties(props, ['parent', 'key', 'style', 'type']);

  if (!route.children) {
    return babelHelpers.extends({}, scenes.rootProps, route, {
      key: getSceneKey(parent, key, position, route.sceneKey)
    }, parentProps, getStateFromScenes(route, scenes, props));
  }
  var res = babelHelpers.extends({}, route, scenes.rootProps, parentProps);
  var index = 0;
  route.children.forEach(function (r, i) {
    (0, _Util.assert)(scenes[r], 'Empty scene for key=' + route.key);
    if (scenes[r].initial) {
      index = i;
    }
  });

  if (route.tabs) {
    res.children = route.children.map(function (r, i) {
      return getInitialState(scenes[r], scenes, i, props);
    });
    res.index = index;
  } else {
    res.children = [getInitialState(scenes[route.children[index]], scenes, 0, props)];
    res.index = 0;
  }
  res.key = position + '_' + res.key;
  return res;
}
}, 497, null, "react-native-router-flux/src/State.js");
__d(/* react-native-router-flux/src/Router.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require(282    ); // 282 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(12            ); // 12 = react-native

var _reactNativeExperimentalNavigation = require(467                                   ); // 467 = react-native-experimental-navigation

var _reactNativeExperimentalNavigation2 = babelHelpers.interopRequireDefault(_reactNativeExperimentalNavigation);

var _Actions = require(454        ); // 454 = ./Actions

var _Actions2 = babelHelpers.interopRequireDefault(_Actions);

var _State = require(497      ); // 497 = ./State

var _State2 = babelHelpers.interopRequireDefault(_State);

var _Reducer = require(496        ); // 496 = ./Reducer

var _Reducer2 = babelHelpers.interopRequireDefault(_Reducer);

var _DefaultRenderer = require(458                ); // 458 = ./DefaultRenderer

var _DefaultRenderer2 = babelHelpers.interopRequireDefault(_DefaultRenderer);

var _Scene = require(456      ); // 456 = ./Scene

var _Scene2 = babelHelpers.interopRequireDefault(_Scene);

var _ActionConst = require(457            ); // 457 = ./ActionConst

var ActionConst = babelHelpers.interopRequireWildcard(_ActionConst);
var NavigationRootContainer = _reactNativeExperimentalNavigation2.default.RootContainer;


var propTypes = {
  dispatch: _react.PropTypes.func,
  backAndroidHandler: _react.PropTypes.func,
  onBackAndroid: _react.PropTypes.func,
  onExitApp: _react.PropTypes.func
};

var Router = function (_Component) {
  babelHelpers.inherits(Router, _Component);

  function Router(props) {
    babelHelpers.classCallCheck(this, Router);

    var _this = babelHelpers.possibleConstructorReturn(this, (Router.__proto__ || Object.getPrototypeOf(Router)).call(this, props));

    _this.state = {};
    _this.renderNavigation = _this.renderNavigation.bind(_this);
    _this.handleProps = _this.handleProps.bind(_this);
    _this.handleBackAndroid = _this.handleBackAndroid.bind(_this);
    return _this;
  }

  babelHelpers.createClass(Router, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.handleProps(this.props);

      _reactNative.BackAndroid.addEventListener('hardwareBackPress', this.handleBackAndroid);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(props) {
      this.handleProps(props);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      _reactNative.BackAndroid.removeEventListener('hardwareBackPress', this.handleBackAndroid);
    }
  }, {
    key: 'handleBackAndroid',
    value: function handleBackAndroid() {
      var _props = this.props,
          backAndroidHandler = _props.backAndroidHandler,
          onBackAndroid = _props.onBackAndroid,
          onExitApp = _props.onExitApp;

      if (backAndroidHandler) {
        return backAndroidHandler();
      }

      try {
        _Actions2.default.pop();
        if (onBackAndroid) {
          onBackAndroid();
        }
        return true;
      } catch (err) {
        if (onExitApp) {
          return onExitApp();
        }

        return false;
      }
    }
  }, {
    key: 'handleProps',
    value: function handleProps(props) {
      var scenesMap = void 0;

      if (props.scenes) {
        scenesMap = props.scenes;
      } else {
        var _scenes = props.children;

        if (Array.isArray(props.children) || props.children.props.component) {
          _scenes = _react2.default.createElement(
            _Scene2.default,
            babelHelpers.extends({
              key: '__root',
              hideNav: true
            }, this.props),
            props.children
          );
        }
        scenesMap = _Actions2.default.create(_scenes, props.wrapBy);
      }

      var children = props.children,
          styles = props.styles,
          scenes = props.scenes,
          reducer = props.reducer,
          createReducer = props.createReducer,
          parentProps = babelHelpers.objectWithoutProperties(props, ['children', 'styles', 'scenes', 'reducer', 'createReducer']);


      scenesMap.rootProps = parentProps;

      var initialState = (0, _State2.default)(scenesMap);
      var reducerCreator = props.createReducer || _Reducer2.default;

      var routerReducer = props.reducer || reducerCreator({
        initialState: initialState,
        scenes: scenesMap
      });

      this.setState({ reducer: routerReducer });
    }
  }, {
    key: 'renderNavigation',
    value: function renderNavigation(navigationState, onNavigate) {
      var _this2 = this;

      if (!navigationState) {
        return null;
      }
      _Actions2.default.get = function (key) {
        return (0, _Reducer.findElement)(navigationState, key, ActionConst.REFRESH);
      };
      _Actions2.default.callback = function (props) {
        var constAction = props.type && _Actions.ActionMap[props.type] ? _Actions.ActionMap[props.type] : null;
        if (_this2.props.dispatch) {
          if (constAction) {
            _this2.props.dispatch(babelHelpers.extends({}, props, { type: constAction }));
          } else {
            _this2.props.dispatch(props);
          }
        }
        return constAction ? onNavigate(babelHelpers.extends({}, props, { type: constAction })) : onNavigate(props);
      };

      return _react2.default.createElement(_DefaultRenderer2.default, { onNavigate: onNavigate, navigationState: navigationState });
    }
  }, {
    key: 'render',
    value: function render() {
      if (!this.state.reducer) return null;

      return _react2.default.createElement(NavigationRootContainer, {
        reducer: this.state.reducer,
        renderNavigation: this.renderNavigation
      });
    }
  }]);
  return Router;
}(_react.Component);

Router.propTypes = propTypes;

exports.default = Router;
}, 498, null, "react-native-router-flux/src/Router.js");
__d(/* react-native-router-flux/src/Switch.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Switch;

var _react = require(282    ); // 282 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _TabBar = require(459       ); // 459 = ./TabBar

var _TabBar2 = babelHelpers.interopRequireDefault(_TabBar);

var _Actions = require(454        ); // 454 = ./Actions

var _Actions2 = babelHelpers.interopRequireDefault(_Actions);

function Switch(props) {
  var navState = props.navigationState;

  var selector = props.selector;
  var statem = props.statem;
  if (!selector && !statem) console.error('Selector should be defined.');
  var index = -1;
  var selectedKey = undefined;
  if (!selector) {
    navState.children.forEach(function (el, i) {
      if (!(el.default || el.state)) {
        console.error('Either default or state should be defined for element=' + el.key);
      }
      if (el.default) {
        index = i;
      } else {
        if (el.state.active) {
          index = i;
        }
      }
    });
  } else {
    selectedKey = selector(props);
    if (!selectedKey) console.error('Selector should return key.');
    navState.children.forEach(function (el, i) {
      if (el.sceneKey === selectedKey) {
        index = i;
      }
    });
  }
  if (index === -1) console.error('A scene for key \u201C' + selectedKey + '\u201D does not exist.');
  selectedKey = navState.children[index].sceneKey;

  var navigationState = void 0;
  if (index !== navState.index) {
    if (props.unmountScenes) {
      navigationState = babelHelpers.extends({}, navState, {
        children: [navState.children[navState.index]],
        index: 0
      });
      setTimeout(function () {
        _Actions2.default[selectedKey]({ unmountScenes: true });
      }, 1);
    } else {
      navigationState = babelHelpers.extends({}, navState, { index: index });
      setTimeout(function () {
        _Actions2.default[selectedKey]();
      }, 1);
    }
  } else {
    navigationState = navState;
  }

  return _react2.default.createElement(_TabBar2.default, {
    onNavigate: props.onNavigate,
    navigationState: navigationState
  });
}

Switch.propTypes = {
  navigationState: _react.PropTypes.object,
  onNavigate: _react.PropTypes.func,
  selector: _react.PropTypes.func,
  statem: _react.PropTypes.any,
  unmountScenes: _react.PropTypes.bool
};
}, 499, null, "react-native-router-flux/src/Switch.js");
__d(/* Runner_SNA/src/actions/DepartureActions.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.flightNumberChanged = exports.airlineChanged = exports.passenger2LastNameChanged = exports.passenger2FirstNameChanged = exports.passenger1LastNameChanged = exports.passenger1FirstNameChanged = exports.returnToStart = exports.closeDeparture = exports.setTimeEnd = exports.setTimeStart = exports.updateCurrentPosition = exports.addDestination = exports.addStop = exports.setFinalGateNumber = exports.addCommentsTSA = exports.startTSA = exports.selectGateNumber = exports.scanBoardingPass = exports.selectWheelchair = exports.addStartingLocationArrival = exports.addStartingPointArrival = exports.setNumberOfPassengers = exports.addStartingPoint = exports.setRunType = undefined;

var _reactNativeRouterFlux = require(453                       ); // 453 = react-native-router-flux

var _types = require(447      ); // 447 = ./types

var setRunType = exports.setRunType = function setRunType(runType, deviceID) {
	var payload = {
		runType: runType,
		deviceID: deviceID
	};

	if (runType === 'departure') {
		_reactNativeRouterFlux.Actions.selectStartingPoint();
		return function (dispatch) {
			dispatch({
				type: _types.SET_RUN_TYPE,
				payload: payload
			});
		};
	} else if (runType === 'arrival') {
		_reactNativeRouterFlux.Actions.selectGate();
		return function (dispatch) {
			dispatch({
				type: _types.SET_RUN_TYPE,
				payload: payload
			});
		};
	} else if (runType == 'checkin') {
		_reactNativeRouterFlux.Actions.selectWheelchair();
		return function (dispatch) {
			dispatch({
				type: _types.SET_RUN_TYPE,
				payload: payload
			});
		};
	}
};

var addStartingPoint = exports.addStartingPoint = function addStartingPoint(props, buttonLocation) {
	var runType = props.runType,
	    currentGPS = props.currentGPS;
	var latitude = currentGPS.latitude,
	    longitude = currentGPS.longitude,
	    timestamp = currentGPS.timestamp;

	var startLocationGPS = {
		latitude: latitude,
		longitude: longitude,
		timestamp: timestamp
	};
	var payload = {
		startLocationGPS: startLocationGPS,
		startLocation: buttonLocation
	};

	_reactNativeRouterFlux.Actions.selectNumberOfWheelchairs();
	return function (dispatch) {
		dispatch({
			type: _types.ADD_STARTING_POINT,
			payload: payload
		});
	};
};

var setNumberOfPassengers = exports.setNumberOfPassengers = function setNumberOfPassengers(runType, number) {
	if (runType === 'departure') {
		_reactNativeRouterFlux.Actions.selectWheelchair({ title: "Select Wheelchair #1" });
		return function (dispatch) {
			dispatch({
				type: _types.SET_NUMBER_OF_PASSENGERS,
				payload: number
			});
		};
	} else if (runType === 'arrival') {
		_reactNativeRouterFlux.Actions.selectWheelchair({ title: "Select Wheelchair #1" });
		return function (dispatch) {
			dispatch({
				type: _types.SET_NUMBER_OF_PASSENGERS,
				payload: number
			});
		};
	}
};

var addStartingPointArrival = exports.addStartingPointArrival = function addStartingPointArrival(runType, position) {
	var coords = position.coords,
	    timestamp = position.timestamp;
	var latitude = coords.latitude,
	    longitude = coords.longitude;

	var startLocationGPS = {
		latitude: latitude,
		longitude: longitude,
		timestamp: timestamp
	};
	var payload = {
		startLocationGPS: startLocationGPS
	};

	return function (dispatch) {
		dispatch({
			type: _types.ADD_STARTING_POINT_ARRIVAL,
			payload: payload
		});
	};
};

var addStartingLocationArrival = exports.addStartingLocationArrival = function addStartingLocationArrival(text) {
	return function (dispatch) {
		dispatch({
			type: _types.ADD_STARTING_LOCATION_ARRIVAL,
			payload: text
		});
	};
};

var selectWheelchair = exports.selectWheelchair = function selectWheelchair(props, buttonValue) {
	var runType = props.runType,
	    numPassengers = props.numPassengers,
	    passenger1Wheelchair = props.passenger1Wheelchair,
	    passenger2Wheelchair = props.passenger2Wheelchair,
	    passenger1FirstName = props.passenger1FirstName,
	    passenger1LastName = props.passenger1LastName,
	    passenger2FirstName = props.passenger2FirstName,
	    passenger2LastName = props.passenger2LastName,
	    airline = props.airline,
	    flightNumber = props.flightNumber;


	if (numPassengers === 1) {
		_reactNativeRouterFlux.Actions.scanBoardingPass({ title: "Scan Boarding Pass" });
		return function (dispatch) {
			dispatch({
				type: _types.SELECT_WHEELCHAIR_1,
				payload: buttonValue
			});
		};
	}
	if (numPassengers === 2) {
		if (passenger1Wheelchair == '') {
			_reactNativeRouterFlux.Actions.scanBoardingPass({ title: "Scan Boarding Pass #1" });
			return function (dispatch) {
				dispatch({
					type: _types.SELECT_WHEELCHAIR_1,
					payload: buttonValue
				});
			};
		} else if (passenger1FirstName != '' && passenger1LastName != '' && passenger2FirstName != '' && passenger2LastName != '' && airline != '' && flightNumber != '') {
			if (runType === 'departure') {
				_reactNativeRouterFlux.Actions.selectGate();
				return function (dispatch) {
					dispatch({
						type: _types.SELECT_WHEELCHAIR_2,
						payload: buttonValue
					});
				};
			}
			if (runType === 'arrival') {
				_reactNativeRouterFlux.Actions.selectStopsSterile();
				return function (dispatch) {
					dispatch({
						type: _types.SELECT_WHEELCHAIR_2,
						payload: buttonValue
					});
				};
			}
		} else {
			_reactNativeRouterFlux.Actions.scanBoardingPass({ title: "Scan Boarding Pass #2" });
			return function (dispatch) {
				dispatch({
					type: _types.SELECT_WHEELCHAIR_2,
					payload: buttonValue
				});
			};
		}
	}
};

var scanBoardingPass = exports.scanBoardingPass = function scanBoardingPass(props, boardingPassData) {
	var runType = props.runType,
	    timeStart = props.timeStart,
	    numPassengers = props.numPassengers,
	    passenger1Wheelchair = props.passenger1Wheelchair,
	    passenger2Wheelchair = props.passenger2Wheelchair,
	    passenger1FirstName = props.passenger1FirstName,
	    passenger1LastName = props.passenger1LastName,
	    passenger2FirstName = props.passenger2FirstName,
	    passenger2LastName = props.passenger2LastName,
	    airline = props.airline,
	    flightNumber = props.flightNumber;


	console.log('scanBoardingPassData', runType, timeStart, numPassengers, passenger1Wheelchair, passenger2Wheelchair, passenger1FirstName, passenger1LastName, passenger2FirstName, passenger2LastName, airline, flightNumber);
	if (numPassengers === 1) {
		console.log('here');
		if (runType === 'departure') {
			console.log('sbp 1');
			_reactNativeRouterFlux.Actions.selectGate();
			return function (dispatch) {
				dispatch({
					type: _types.SCAN_BOARDING_PASS_1,
					payload: boardingPassData
				});
			};
		} else if (runType === 'arrival') {
			console.log('sbp 2');
			_reactNativeRouterFlux.Actions.selectStopsSterile({ runType: runType, timeStart: timeStart, p1FirstName: boardingPassData.firstName, p1LastName: boardingPassData.lastName, al: boardingPassData.airline, fn: boardingPassData.flightNumber, type: 'reset' });
			return function (dispatch) {
				dispatch({
					type: _types.SCAN_BOARDING_PASS_1,
					payload: boardingPassData
				});
			};
		}
	}
	if (numPassengers === 2) {
		if (runType === 'departure') {
			if (passenger2Wheelchair == '') {
				_reactNativeRouterFlux.Actions.selectWheelchair({ type: 'reset', title: "Select Wheelchair #2" });
				return function (dispatch) {
					dispatch({
						type: _types.SCAN_BOARDING_PASS_1,
						payload: boardingPassData
					});
				};
			} else {
				_reactNativeRouterFlux.Actions.selectGate();
				return function (dispatch) {
					dispatch({
						type: _types.SCAN_BOARDING_PASS_2,
						payload: boardingPassData
					});
				};
			}
		}
		if (runType === 'arrival') {
			if (passenger2Wheelchair == '') {
				_reactNativeRouterFlux.Actions.selectWheelchair({ type: 'reset', title: "Select Wheelchair #2" });
				return function (dispatch) {
					dispatch({
						type: _types.SCAN_BOARDING_PASS_1,
						payload: boardingPassData
					});
				};
			} else {
				_reactNativeRouterFlux.Actions.selectStopsSterile({ runType: runType, timeStart: timeStart, p2FirstName: boardingPassData.firstName, p2LastName: boardingPassData.lastName, al: boardingPassData.airline, fn: boardingPassData.flightNumber, type: 'reset' });
				return function (dispatch) {
					dispatch({
						type: _types.SCAN_BOARDING_PASS_2,
						payload: boardingPassData
					});
				};
			}
		}
	}
};

var selectGateNumber = exports.selectGateNumber = function selectGateNumber(runType, text) {

	if (runType === 'departure') {
		_reactNativeRouterFlux.Actions.selectStopsNonSterile();
		return function (dispatch) {
			dispatch({
				type: _types.SELECT_GATE_NUMBER,
				payload: text
			});
		};
	} else if (runType === 'arrival') {
		_reactNativeRouterFlux.Actions.selectNumberOfWheelchairs();
		return function (dispatch) {
			dispatch({
				type: _types.SELECT_GATE_NUMBER,
				payload: text
			});
		};
	}
};

var startTSA = exports.startTSA = function startTSA() {

	var timeTSAStart = Date.now();
	_reactNativeRouterFlux.Actions.tsa();
	return function (dispatch) {
		dispatch({
			type: _types.TSA_START,
			payload: timeTSAStart
		});
	};
};

var addCommentsTSA = exports.addCommentsTSA = function addCommentsTSA(text, timeTSAStart) {

	var timeTSAEnd = Date.now();
	var commentsTSA = text;

	payload = {
		timeTSAStart: timeTSAStart,
		timeTSAEnd: timeTSAEnd,
		commentsTSA: commentsTSA
	};

	_reactNativeRouterFlux.Actions.selectStopsSterile({ type: 'reset' });
	return function (dispatch) {
		dispatch({
			type: _types.TSA_END,
			payload: payload
		});
	};
};

var setFinalGateNumber = exports.setFinalGateNumber = function setFinalGateNumber(text) {

	_reactNativeRouterFlux.Actions.closing({ reset: true });
	console.log(text);
	return function (dispatch) {
		dispatch({
			type: _types.SET_FINAL_GATE_NUMBER,
			payload: text
		});
	};
};

var addStop = exports.addStop = function addStop(text) {
	return function (dispatch) {
		dispatch({
			type: _types.ADD_STOP,
			payload: text
		});
	};
};

var addDestination = exports.addDestination = function addDestination(text) {
	_reactNativeRouterFlux.Actions.closing();
	return function (dispatch) {
		dispatch({
			type: _types.ADD_DESTINATION,
			payload: text
		});
	};
};

var updateCurrentPosition = exports.updateCurrentPosition = function updateCurrentPosition(position) {
	var coords = position.coords,
	    timestamp = position.timestamp;
	var latitude = coords.latitude,
	    longitude = coords.longitude;

	var payload = {
		latitude: latitude,
		longitude: longitude,
		timestamp: timestamp
	};

	return function (dispatch) {
		dispatch({
			type: _types.UPDATE_CURRENT_POSITION,
			payload: payload
		});
	};
};
var setTimeStart = exports.setTimeStart = function setTimeStart() {
	return function (dispatch) {
		dispatch({
			type: _types.SET_TIME_START,
			payload: Date.now()
		});
	};
};

var setTimeEnd = exports.setTimeEnd = function setTimeEnd() {
	return function (dispatch) {
		dispatch({
			type: _types.SET_TIME_END,
			payload: Date.now()
		});
	};
};

var closeDeparture = exports.closeDeparture = function closeDeparture() {};

var returnToStart = exports.returnToStart = function returnToStart() {
	_reactNativeRouterFlux.Actions.main({ type: 'reset' });
	return function (dispatch) {
		dispatch({
			type: _types.RETURN_TO_START
		});
	};
};

var passenger1FirstNameChanged = exports.passenger1FirstNameChanged = function passenger1FirstNameChanged(text) {
	return {
		type: _types.PASSENGER_1_FIRST_NAME_CHANGED,
		payload: text
	};
};

var passenger1LastNameChanged = exports.passenger1LastNameChanged = function passenger1LastNameChanged(text) {
	return {
		type: _types.PASSENGER_1_LAST_NAME_CHANGED,
		payload: text
	};
};

var passenger2FirstNameChanged = exports.passenger2FirstNameChanged = function passenger2FirstNameChanged(text) {
	return {
		type: _types.PASSENGER_2_FIRST_NAME_CHANGED,
		payload: text
	};
};

var passenger2LastNameChanged = exports.passenger2LastNameChanged = function passenger2LastNameChanged(text) {
	return {
		type: _types.PASSENGER_2_LAST_NAME_CHANGED,
		payload: text
	};
};

var airlineChanged = exports.airlineChanged = function airlineChanged(text) {
	return {
		type: _types.AIRLINE_CHANGED,
		payload: text
	};
};

var flightNumberChanged = exports.flightNumberChanged = function flightNumberChanged(text) {
	return {
		type: _types.FLIGHT_NUMBER_CHANGED,
		payload: text
	};
};
}, 500, null, "Runner_SNA/src/actions/DepartureActions.js");
__d(/* Runner_SNA/src/components/common/index.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Button = require(502       ); // 502 = ./Button

Object.keys(_Button).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _Button[key];
    }
  });
});

var _Card = require(503     ); // 503 = ./Card

Object.keys(_Card).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _Card[key];
    }
  });
});

var _CardSection = require(504            ); // 504 = ./CardSection

Object.keys(_CardSection).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _CardSection[key];
    }
  });
});

var _Header = require(505       ); // 505 = ./Header

Object.keys(_Header).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _Header[key];
    }
  });
});

var _Input = require(506      ); // 506 = ./Input

Object.keys(_Input).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _Input[key];
    }
  });
});

var _Spinner = require(507        ); // 507 = ./Spinner

Object.keys(_Spinner).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _Spinner[key];
    }
  });
});

var _ImageButton = require(508            ); // 508 = ./ImageButton

Object.keys(_ImageButton).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _ImageButton[key];
    }
  });
});

var _TerminalA = require(509          ); // 509 = ./TerminalA

Object.keys(_TerminalA).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _TerminalA[key];
    }
  });
});

var _TerminalB = require(555          ); // 555 = ./TerminalB

Object.keys(_TerminalB).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _TerminalB[key];
    }
  });
});

var _TerminalC = require(556          ); // 556 = ./TerminalC

Object.keys(_TerminalC).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _TerminalC[key];
    }
  });
});
}, 501, null, "Runner_SNA/src/components/common/index.js");
__d(/* Runner_SNA/src/components/common/Button.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Button = undefined;

var _react = require(282    ); // 282 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(12            ); // 12 = react-native

var Button = function Button(_ref) {
  var onPress = _ref.onPress,
      children = _ref.children;
  var buttonStyle = styles.buttonStyle,
      textStyle = styles.textStyle;


  return _react2.default.createElement(
    _reactNative.TouchableOpacity,
    { onPress: onPress, style: buttonStyle },
    _react2.default.createElement(
      _reactNative.Text,
      { style: textStyle },
      children
    )
  );
};

var styles = {
  textStyle: {
    alignSelf: 'center',
    color: '#000',
    fontSize: 16,
    fontWeight: '600',
    paddingTop: 10,
    paddingBottom: 10
  },
  buttonStyle: {
    flex: 1,
    alignSelf: 'stretch',
    backgroundColor: '#fff',
    borderRadius: 5,
    borderWidth: 1,
    borderColor: '#000',
    margin: 1
  }
};

exports.Button = Button;
}, 502, null, "Runner_SNA/src/components/common/Button.js");
__d(/* Runner_SNA/src/components/common/Card.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.Card = undefined;

var _react = require(282    ); // 282 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(12            ); // 12 = react-native

var Card = function Card(props) {
	return _react2.default.createElement(
		_reactNative.View,
		{ style: styles.containerStyle },
		props.children
	);
};

var styles = {
	containerStyle: {
		borderWidth: 1,
		borderRadius: 2,
		borderColor: '#ddd',
		borderBottomWidth: 0,
		shadowColor: '#000',
		shadowOffset: { width: 0, height: 2 },
		shadowOpacity: 0.1,
		shadowRadius: 2,
		elevation: 1,
		marginLeft: 5,
		marginRight: 5,
		marginTop: 10
	}
};
exports.Card = Card;
}, 503, null, "Runner_SNA/src/components/common/Card.js");
__d(/* Runner_SNA/src/components/common/CardSection.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.CardSection = undefined;

var _react = require(282    ); // 282 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(12            ); // 12 = react-native

var CardSection = function CardSection(props) {
	return _react2.default.createElement(
		_reactNative.View,
		{ style: [styles.containerStyle, props.style] },
		props.children
	);
};

var styles = {
	containerStyle: {
		borderBottomWidth: 1,
		padding: 5,
		backgroundColor: '#fff',
		justifyContent: 'center',
		flexDirection: 'row',
		borderColor: '#ddd',
		position: 'relative'
	}
};

exports.CardSection = CardSection;
}, 504, null, "Runner_SNA/src/components/common/CardSection.js");
__d(/* Runner_SNA/src/components/common/Header.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.Header = undefined;

var _react = require(282    ); // 282 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(12            ); // 12 = react-native

var Header = function Header(props) {
	var textStyle = styles.textStyle,
	    viewStyle = styles.viewStyle;


	return _react2.default.createElement(
		_reactNative.View,
		{ style: viewStyle },
		_react2.default.createElement(
			_reactNative.Text,
			{ style: textStyle },
			props.headerText
		)
	);
};

var styles = {
	viewStyle: {
		backgroundColor: '#f8f8f8',
		justifyContent: 'center',
		alignItems: 'center',
		height: 60,
		paddingTop: 15,
		shadowColor: '#000',
		shadowOffset: { width: 0, height: 2 },
		shadowOpacity: 0.2,
		elevation: 2,
		position: 'relative'
	},
	textStyle: {
		fontSize: 20
	}
};

exports.Header = Header;
}, 505, null, "Runner_SNA/src/components/common/Header.js");
__d(/* Runner_SNA/src/components/common/Input.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Input = undefined;

var _react = require(282    ); // 282 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(12            ); // 12 = react-native

var Input = function Input(_ref) {
  var label = _ref.label,
      value = _ref.value,
      onChangeText = _ref.onChangeText,
      placeholder = _ref.placeholder,
      secureTextEntry = _ref.secureTextEntry;
  var inputStyle = styles.inputStyle,
      labelStyle = styles.labelStyle,
      containerStyle = styles.containerStyle;


  return _react2.default.createElement(
    _reactNative.View,
    { style: containerStyle },
    _react2.default.createElement(
      _reactNative.Text,
      { style: labelStyle },
      label
    ),
    _react2.default.createElement(_reactNative.TextInput, {
      secureTextEntry: secureTextEntry,
      placeholder: placeholder,
      autoCorrect: false,
      style: inputStyle,
      value: value,
      onChangeText: onChangeText
    })
  );
};

var styles = {
  inputStyle: {
    color: '#000',
    paddingRight: 5,
    paddingLeft: 5,
    fontSize: 18,
    lineHeight: 23,
    flex: 2
  },
  labelStyle: {
    fontSize: 18,
    paddingLeft: 20,
    flex: 1
  },
  containerStyle: {
    height: 40,
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center'
  }
};

exports.Input = Input;
}, 506, null, "Runner_SNA/src/components/common/Input.js");
__d(/* Runner_SNA/src/components/common/Spinner.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.Spinner = undefined;

var _react = require(282    ); // 282 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(12            ); // 12 = react-native

var Spinner = function Spinner(_ref) {
	var size = _ref.size;

	return _react2.default.createElement(
		_reactNative.View,
		{ style: styles.spinnerStyle },
		_react2.default.createElement(_reactNative.ActivityIndicator, { size: size || 'large' })
	);
};

var styles = {
	spinnerStyle: {
		flex: 1,
		justifyContent: 'center',
		alignItems: 'center'
	}
};

exports.Spinner = Spinner;
}, 507, null, "Runner_SNA/src/components/common/Spinner.js");
__d(/* Runner_SNA/src/components/common/ImageButton.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ImageButton = undefined;

var _react = require(282    ); // 282 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(12            ); // 12 = react-native

var ImageButton = function ImageButton(_ref) {
  var onPress = _ref.onPress,
      source = _ref.source;


  return _react2.default.createElement(
    _reactNative.TouchableOpacity,
    { onPress: onPress },
    _react2.default.createElement(_reactNative.Image, {
      style: style.imageButton,
      source: source,
      resizeMode: 'contain'
    })
  );
};

var style = {
  imageButton: {
    flex: 1,
    height: 100,
    width: 150
  }
};

exports.ImageButton = ImageButton;
}, 508, null, "Runner_SNA/src/components/common/ImageButton.js");
__d(/* Runner_SNA/src/components/common/TerminalA.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.TerminalA = undefined;

var _this = this;

var _react = require(282    ); // 282 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(12            ); // 12 = react-native

var _ = require(501 ); // 501 = ./

var _assets = require(510              ); // 510 = ../../../assets

var _Style = require(554       ); // 554 = ../Style

var _Style2 = babelHelpers.interopRequireDefault(_Style);

var _reactNativeRouterFlux = require(453                       ); // 453 = react-native-router-flux

var TerminalA = function TerminalA(_ref) {
	var _onPress = _ref.onPress;

	return _react2.default.createElement(
		_reactNative.View,
		{ style: _Style2.default.content },
		_react2.default.createElement(
			_.CardSection,
			null,
			_react2.default.createElement(
				_reactNative.View,
				{ style: _Style2.default.row },
				_react2.default.createElement(
					_.Button,
					{ onPress: function onPress() {
							return _this.setState({ terminal: 'a' });
						} },
					'Terminal A'
				),
				_react2.default.createElement(
					_.Button,
					{ onPress: function onPress() {
							return _this.setState({ terminal: 'b' });
						} },
					'Terminal B'
				),
				_react2.default.createElement(
					_.Button,
					{ onPress: function onPress() {
							return _this.setState({ terminal: 'c' });
						} },
					'Terminal C'
				)
			)
		),
		_react2.default.createElement(
			_reactNative.View,
			{ style: _Style2.default.row },
			_react2.default.createElement(_.ImageButton, {
				source: _assets.hudsonnews,
				onPress: function onPress() {
					return _onPress('hudsonNews');
				}
			}),
			_react2.default.createElement(_.ImageButton, {
				source: _assets.hudsonnewsdiscoveroc,
				onPress: function onPress() {
					return _onPress('hudsonNewsDiscoverOc');
				}
			}),
			_react2.default.createElement(_.ImageButton, {
				source: _assets.ocmarket,
				onPress: function onPress() {
					return _onPress('ocMarket');
				}
			}),
			_react2.default.createElement(_.ImageButton, {
				source: _assets.ripcurl,
				onPress: function onPress() {
					return _onPress('ripCurl');
				}
			})
		),
		_react2.default.createElement(
			_reactNative.View,
			{ style: _Style2.default.row },
			_react2.default.createElement(_.ImageButton, {
				source: _assets.sunglasshut,
				onPress: function onPress() {
					return _onPress('sunglassHut');
				}
			}),
			_react2.default.createElement(_.ImageButton, {
				source: _assets.cpk,
				onPress: function onPress() {
					return _onPress('cpk');
				}
			}),
			_react2.default.createElement(_.ImageButton, {
				source: _assets.mcdonalds,
				onPress: function onPress() {
					return _onPress('mcDonalds');
				}
			}),
			_react2.default.createElement(_.ImageButton, {
				source: _assets.starbucks,
				onPress: function onPress() {
					return _onPress('starbucks');
				}
			})
		),
		_react2.default.createElement(
			_reactNative.View,
			{ style: _Style2.default.row },
			_react2.default.createElement(_.ImageButton, {
				source: _assets.farmersmarket,
				onPress: function onPress() {
					return _onPress('farmersMarket');
				}
			}),
			_react2.default.createElement(_.ImageButton, {
				source: _assets.rubys,
				onPress: function onPress() {
					return _onPress('rubys');
				}
			}),
			_react2.default.createElement(_.ImageButton, {
				source: _assets.rubystogo,
				onPress: function onPress() {
					return _onPress('rubysToGo');
				}
			}),
			_react2.default.createElement(_.ImageButton, {
				source: _assets.americanairlinesadmiralsclub,
				onPress: function onPress() {
					return _onPress('americanAirlinesAdmiralsClub');
				}
			})
		),
		_react2.default.createElement(
			_reactNative.View,
			{ style: _Style2.default.row },
			_react2.default.createElement(_.ImageButton, {
				source: _assets.phone,
				onPress: function onPress() {
					return _onPress('phone');
				}
			}),
			_react2.default.createElement(_.ImageButton, {
				source: _assets.restroom,
				onPress: function onPress() {
					return _onPress('restroom');
				}
			})
		),
		_react2.default.createElement(
			_.CardSection,
			null,
			_react2.default.createElement(
				_.Button,
				{ onPress: function onPress() {
						return _reactNativeRouterFlux.Actions.gateArrival();
					} },
				'Gate Arrival'
			)
		)
	);
};

exports.TerminalA = TerminalA;
}, 509, null, "Runner_SNA/src/components/common/TerminalA.js");
__d(/* Runner_SNA/assets/index.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
var americanairlinesadmiralsclub = { image: require(511                                 ), name: 'americanairlinesadmiralsclub' }; // 511 = ./americanairlinesadmiralsclub.png
var beachfrontnews = { image: require(512                   ), name: 'beachfrontnews' }; // 512 = ./beachfrontnews.png
var belgiumbeerbar = { image: require(513                   ), name: 'belgiumbeerbar' }; // 513 = ./belgiumbeerbar.png
var brookstone = { image: require(514               ), name: 'brookstone' }; // 514 = ./brookstone.png
var carlsjr = { image: require(515            ), name: 'carlsjr' }; // 515 = ./carlsjr.png
var ciao = { image: require(516         ), name: 'ciao' }; // 516 = ./ciao.png
var cnbc = { image: require(517         ), name: 'cnbc' }; // 517 = ./cnbc.png
var cnn = { image: require(518        ), name: 'cnn' }; // 518 = ./cnn.png
var cpk = { image: require(519        ), name: 'cpk' }; // 519 = ./cpk.png
var ducks = { image: require(520          ), name: 'ducks' }; // 520 = ./ducks.png
var farmersmarket = { image: require(521                  ), name: 'farmersmarket' }; // 521 = ./farmersmarket.png
var hobie = { image: require(522          ), name: 'hobie' }; // 522 = ./hobie.png
var hudsonnews = { image: require(523               ), name: 'hudsonnews' }; // 523 = ./hudsonnews.png
var hudsonnewsdiscoveroc = { image: require(524                         ), name: 'hudsonnewsdiscoveroc' }; // 524 = ./hudsonnewsdiscoveroc.png
var inmotion = { image: require(525             ), name: 'inmotion' }; // 525 = ./inmotion.png
var javis = { image: require(526          ), name: 'javis' }; // 526 = ./javis.png
var jerrysdogs = { image: require(527               ), name: 'jerrysdogs' }; // 527 = ./jerrysdogs.png
var latapenade = { image: require(528               ), name: 'latapenade' }; // 528 = ./latapenade.jpg
var mcdonalds = { image: require(529              ), name: 'mcdonalds' }; // 529 = ./mcdonalds.png
var ocmarket = { image: require(530             ), name: 'ocmarket' }; // 530 = ./ocmarket.jpg
var octravelmart = { image: require(531                 ), name: 'octravelmart' }; // 531 = ./octravelmart.png
var peiwei = { image: require(532           ), name: 'peiwei' }; // 532 = ./peiwei.png
var phone = { image: require(533          ), name: 'phone' }; // 533 = ./phone.png
var pinkberry = { image: require(534              ), name: 'pinkberry' }; // 534 = ./pinkberry.png
var restroom = { image: require(535             ), name: 'restroom' }; // 535 = ./restroom.png
var ripcurl = { image: require(536            ), name: 'ripcurl' }; // 536 = ./ripcurl.png
var rubys = { image: require(537          ), name: 'rubys' }; // 537 = ./rubys.png
var rubystogo = { image: require(538              ), name: 'rubystogo' }; // 538 = ./rubystogo.png
var southcoastnews = { image: require(539                   ), name: 'southcoastnews' }; // 539 = ./southcoastnews.png
var starbucks = { image: require(540              ), name: 'starbucks' }; // 540 = ./starbucks.png
var subway = { image: require(541           ), name: 'subway' }; // 541 = ./subway.png
var sunglasshut = { image: require(542                ), name: 'sunglasshut' }; // 542 = ./sunglasshut.png
var unitedairlinesunitedclub = { image: require(543                              ), name: 'unitedairlinesunitedclub' }; // 543 = ./unitedairlinesunitedclub.jpeg
var vinovolo = { image: require(544             ), name: 'vinovolo' }; // 544 = ./vinovolo.png
var xpresspa = { image: require(545             ), name: 'xpresspa' }; // 545 = ./xpresspa.png
var zovs = { image: require(546         ), name: 'zovs' }; // 546 = ./zovs.png
var alaska = { image: require(547           ), name: 'alaska' }; // 547 = ./alaska.png
var american = { image: require(548             ), name: 'american' }; // 548 = ./american.png
var delta = { image: require(549          ), name: 'delta' }; // 549 = ./delta.jpg
var frontier = { image: require(550             ), name: 'frontier' }; // 550 = ./frontier.png
var southwest = { image: require(551              ), name: 'southwest' }; // 551 = ./southwest.png
var united = { image: require(552           ), name: 'united' }; // 552 = ./united.png
var westjet = { image: require(553            ), name: 'westjet' }; // 553 = ./westjet.png

var nonSterile = exports.nonSterile = [cnbc, cnn, latapenade, octravelmart, starbucks, zovs, restroom, phone];
var terminalA = exports.terminalA = [hudsonnews, hudsonnewsdiscoveroc, ocmarket, ripcurl, sunglasshut, cpk, mcdonalds, starbucks, farmersmarket, rubys, rubystogo, americanairlinesadmiralsclub, restroom, phone];
var terminalB = exports.terminalB = [brookstone, xpresspa, southcoastnews, beachfrontnews, inmotion, vinovolo, hobie, javis, jerrysdogs, mcdonalds, pinkberry, peiwei, starbucks, unitedairlinesunitedclub, subway, zovs, restroom, phone];
var terminalC = exports.terminalC = [cnn, cnbc, belgiumbeerbar, carlsjr, ciao, ducks, restroom, phone];
}, 510, null, "Runner_SNA/assets/index.js");
__d(/* Runner_SNA/assets/americanairlinesadmiralsclub.png */function(global, require, module, exports) {module.exports = require(172                                         ).registerAsset({"__packager_asset":true,"httpServerLocation":"/assets/assets","width":409,"height":153,"scales":[1],"hash":"eea0df4557b33d20a5ddc99be4ab7712","name":"americanairlinesadmiralsclub","type":"png"}); // 172 = react-native/Libraries/Image/AssetRegistry
}, 511, null, "Runner_SNA/assets/americanairlinesadmiralsclub.png");
__d(/* Runner_SNA/assets/beachfrontnews.png */function(global, require, module, exports) {module.exports = require(172                                         ).registerAsset({"__packager_asset":true,"httpServerLocation":"/assets/assets","width":232,"height":22,"scales":[1],"hash":"d16810b923f528113c40d1a57cc79573","name":"beachfrontnews","type":"png"}); // 172 = react-native/Libraries/Image/AssetRegistry
}, 512, null, "Runner_SNA/assets/beachfrontnews.png");
__d(/* Runner_SNA/assets/belgiumbeerbar.png */function(global, require, module, exports) {module.exports = require(172                                         ).registerAsset({"__packager_asset":true,"httpServerLocation":"/assets/assets","width":282,"height":75,"scales":[1],"hash":"38599b21d419cb99d027293c308ec5b4","name":"belgiumbeerbar","type":"png"}); // 172 = react-native/Libraries/Image/AssetRegistry
}, 513, null, "Runner_SNA/assets/belgiumbeerbar.png");
__d(/* Runner_SNA/assets/brookstone.png */function(global, require, module, exports) {module.exports = require(172                                         ).registerAsset({"__packager_asset":true,"httpServerLocation":"/assets/assets","width":210,"height":35,"scales":[1],"hash":"f343f52f781a466a86b2dbac10e9bc61","name":"brookstone","type":"png"}); // 172 = react-native/Libraries/Image/AssetRegistry
}, 514, null, "Runner_SNA/assets/brookstone.png");
__d(/* Runner_SNA/assets/carlsjr.png */function(global, require, module, exports) {module.exports = require(172                                         ).registerAsset({"__packager_asset":true,"httpServerLocation":"/assets/assets","width":232,"height":50,"scales":[1],"hash":"177537aece5ae539c2cc345c8130515e","name":"carlsjr","type":"png"}); // 172 = react-native/Libraries/Image/AssetRegistry
}, 515, null, "Runner_SNA/assets/carlsjr.png");
__d(/* Runner_SNA/assets/ciao.png */function(global, require, module, exports) {module.exports = require(172                                         ).registerAsset({"__packager_asset":true,"httpServerLocation":"/assets/assets","width":122,"height":60,"scales":[1],"hash":"3aef0a9ca295df637636da95469a5b09","name":"ciao","type":"png"}); // 172 = react-native/Libraries/Image/AssetRegistry
}, 516, null, "Runner_SNA/assets/ciao.png");
__d(/* Runner_SNA/assets/cnbc.png */function(global, require, module, exports) {module.exports = require(172                                         ).registerAsset({"__packager_asset":true,"httpServerLocation":"/assets/assets","width":94,"height":75,"scales":[1],"hash":"f8ea057d9ddf7f486fae5ebe028ef792","name":"cnbc","type":"png"}); // 172 = react-native/Libraries/Image/AssetRegistry
}, 517, null, "Runner_SNA/assets/cnbc.png");
__d(/* Runner_SNA/assets/cnn.png */function(global, require, module, exports) {module.exports = require(172                                         ).registerAsset({"__packager_asset":true,"httpServerLocation":"/assets/assets","width":214,"height":40,"scales":[1],"hash":"0c76aded9e90b8a27ec5d24e7f1db3f8","name":"cnn","type":"png"}); // 172 = react-native/Libraries/Image/AssetRegistry
}, 518, null, "Runner_SNA/assets/cnn.png");
__d(/* Runner_SNA/assets/cpk.png */function(global, require, module, exports) {module.exports = require(172                                         ).registerAsset({"__packager_asset":true,"httpServerLocation":"/assets/assets","width":104,"height":81,"scales":[1],"hash":"ca9ab88743a8b5d62f34ec61b0204eb8","name":"cpk","type":"png"}); // 172 = react-native/Libraries/Image/AssetRegistry
}, 519, null, "Runner_SNA/assets/cpk.png");
__d(/* Runner_SNA/assets/ducks.png */function(global, require, module, exports) {module.exports = require(172                                         ).registerAsset({"__packager_asset":true,"httpServerLocation":"/assets/assets","width":232,"height":33,"scales":[1],"hash":"f33da5cc4e08ceaca029b467f15a3188","name":"ducks","type":"png"}); // 172 = react-native/Libraries/Image/AssetRegistry
}, 520, null, "Runner_SNA/assets/ducks.png");
__d(/* Runner_SNA/assets/farmersmarket.png */function(global, require, module, exports) {module.exports = require(172                                         ).registerAsset({"__packager_asset":true,"httpServerLocation":"/assets/assets","width":232,"height":65,"scales":[1],"hash":"9912ad3a24a546de9e8df859d5b040a2","name":"farmersmarket","type":"png"}); // 172 = react-native/Libraries/Image/AssetRegistry
}, 521, null, "Runner_SNA/assets/farmersmarket.png");
__d(/* Runner_SNA/assets/hobie.png */function(global, require, module, exports) {module.exports = require(172                                         ).registerAsset({"__packager_asset":true,"httpServerLocation":"/assets/assets","width":193,"height":75,"scales":[1],"hash":"d76e4eb0283ce930a96c1a53bd3b6efc","name":"hobie","type":"png"}); // 172 = react-native/Libraries/Image/AssetRegistry
}, 522, null, "Runner_SNA/assets/hobie.png");
__d(/* Runner_SNA/assets/hudsonnews.png */function(global, require, module, exports) {module.exports = require(172                                         ).registerAsset({"__packager_asset":true,"httpServerLocation":"/assets/assets","width":232,"height":33,"scales":[1],"hash":"6535e26999a2e1ce18f861a8c7add1c2","name":"hudsonnews","type":"png"}); // 172 = react-native/Libraries/Image/AssetRegistry
}, 523, null, "Runner_SNA/assets/hudsonnews.png");
__d(/* Runner_SNA/assets/hudsonnewsdiscoveroc.png */function(global, require, module, exports) {module.exports = require(172                                         ).registerAsset({"__packager_asset":true,"httpServerLocation":"/assets/assets","width":232,"height":40,"scales":[1],"hash":"ee2fe730067ae8bb7ead671ce71adfe5","name":"hudsonnewsdiscoveroc","type":"png"}); // 172 = react-native/Libraries/Image/AssetRegistry
}, 524, null, "Runner_SNA/assets/hudsonnewsdiscoveroc.png");
__d(/* Runner_SNA/assets/inmotion.png */function(global, require, module, exports) {module.exports = require(172                                         ).registerAsset({"__packager_asset":true,"httpServerLocation":"/assets/assets","width":194,"height":50,"scales":[1],"hash":"7556de7a93c390fc1cdc4c985ddc96db","name":"inmotion","type":"png"}); // 172 = react-native/Libraries/Image/AssetRegistry
}, 525, null, "Runner_SNA/assets/inmotion.png");
__d(/* Runner_SNA/assets/javis.png */function(global, require, module, exports) {module.exports = require(172                                         ).registerAsset({"__packager_asset":true,"httpServerLocation":"/assets/assets","width":127,"height":50,"scales":[1],"hash":"89ab9f1305af917162f7f8866b2c9965","name":"javis","type":"png"}); // 172 = react-native/Libraries/Image/AssetRegistry
}, 526, null, "Runner_SNA/assets/javis.png");
__d(/* Runner_SNA/assets/jerrysdogs.png */function(global, require, module, exports) {module.exports = require(172                                         ).registerAsset({"__packager_asset":true,"httpServerLocation":"/assets/assets","width":110,"height":75,"scales":[1],"hash":"6e0134251b7cb3c72a9f0916ae1023db","name":"jerrysdogs","type":"png"}); // 172 = react-native/Libraries/Image/AssetRegistry
}, 527, null, "Runner_SNA/assets/jerrysdogs.png");
__d(/* Runner_SNA/assets/latapenade.jpg */function(global, require, module, exports) {module.exports = require(172                                         ).registerAsset({"__packager_asset":true,"httpServerLocation":"/assets/assets","width":180,"height":100,"scales":[1],"hash":"f96ee7b23abc4b2daacd7487d4a7006d","name":"latapenade","type":"jpg"}); // 172 = react-native/Libraries/Image/AssetRegistry
}, 528, null, "Runner_SNA/assets/latapenade.jpg");
__d(/* Runner_SNA/assets/mcdonalds.png */function(global, require, module, exports) {module.exports = require(172                                         ).registerAsset({"__packager_asset":true,"httpServerLocation":"/assets/assets","width":232,"height":46,"scales":[1],"hash":"9988e53584423abc40bc5b9394c1d1a3","name":"mcdonalds","type":"png"}); // 172 = react-native/Libraries/Image/AssetRegistry
}, 529, null, "Runner_SNA/assets/mcdonalds.png");
__d(/* Runner_SNA/assets/ocmarket.jpg */function(global, require, module, exports) {module.exports = require(172                                         ).registerAsset({"__packager_asset":true,"httpServerLocation":"/assets/assets","width":232,"height":30,"scales":[1],"hash":"9809eacf9da633a162e294b79b366238","name":"ocmarket","type":"jpg"}); // 172 = react-native/Libraries/Image/AssetRegistry
}, 530, null, "Runner_SNA/assets/ocmarket.jpg");
__d(/* Runner_SNA/assets/octravelmart.png */function(global, require, module, exports) {module.exports = require(172                                         ).registerAsset({"__packager_asset":true,"httpServerLocation":"/assets/assets","width":221,"height":50,"scales":[1],"hash":"4ed72744c2365ffbdfa86450f43f1f6f","name":"octravelmart","type":"png"}); // 172 = react-native/Libraries/Image/AssetRegistry
}, 531, null, "Runner_SNA/assets/octravelmart.png");
__d(/* Runner_SNA/assets/peiwei.png */function(global, require, module, exports) {module.exports = require(172                                         ).registerAsset({"__packager_asset":true,"httpServerLocation":"/assets/assets","width":74,"height":75,"scales":[1],"hash":"868a434f622aa524b42f2ade716e1e37","name":"peiwei","type":"png"}); // 172 = react-native/Libraries/Image/AssetRegistry
}, 532, null, "Runner_SNA/assets/peiwei.png");
__d(/* Runner_SNA/assets/phone.png */function(global, require, module, exports) {module.exports = require(172                                         ).registerAsset({"__packager_asset":true,"httpServerLocation":"/assets/assets","width":512,"height":512,"scales":[1],"hash":"1411dd2324aad7fb47216d35ebf4206a","name":"phone","type":"png"}); // 172 = react-native/Libraries/Image/AssetRegistry
}, 533, null, "Runner_SNA/assets/phone.png");
__d(/* Runner_SNA/assets/pinkberry.png */function(global, require, module, exports) {module.exports = require(172                                         ).registerAsset({"__packager_asset":true,"httpServerLocation":"/assets/assets","width":193,"height":50,"scales":[1],"hash":"c40492f2ae1917d31e46163690b5508a","name":"pinkberry","type":"png"}); // 172 = react-native/Libraries/Image/AssetRegistry
}, 534, null, "Runner_SNA/assets/pinkberry.png");
__d(/* Runner_SNA/assets/restroom.png */function(global, require, module, exports) {module.exports = require(172                                         ).registerAsset({"__packager_asset":true,"httpServerLocation":"/assets/assets","width":600,"height":553,"scales":[1],"hash":"861b56003dca001e2083e0c8383b78b4","name":"restroom","type":"png"}); // 172 = react-native/Libraries/Image/AssetRegistry
}, 535, null, "Runner_SNA/assets/restroom.png");
__d(/* Runner_SNA/assets/ripcurl.png */function(global, require, module, exports) {module.exports = require(172                                         ).registerAsset({"__packager_asset":true,"httpServerLocation":"/assets/assets","width":232,"height":33,"scales":[1],"hash":"852de2b014878f7721c7c3625560b573","name":"ripcurl","type":"png"}); // 172 = react-native/Libraries/Image/AssetRegistry
}, 536, null, "Runner_SNA/assets/ripcurl.png");
__d(/* Runner_SNA/assets/rubys.png */function(global, require, module, exports) {module.exports = require(172                                         ).registerAsset({"__packager_asset":true,"httpServerLocation":"/assets/assets","width":115,"height":52,"scales":[1],"hash":"94e6433ffb03493b219f0b33a1b1cfdd","name":"rubys","type":"png"}); // 172 = react-native/Libraries/Image/AssetRegistry
}, 537, null, "Runner_SNA/assets/rubys.png");
__d(/* Runner_SNA/assets/rubystogo.png */function(global, require, module, exports) {module.exports = require(172                                         ).registerAsset({"__packager_asset":true,"httpServerLocation":"/assets/assets","width":115,"height":74,"scales":[1],"hash":"09868dd3f599b5c6de581d0743e486e3","name":"rubystogo","type":"png"}); // 172 = react-native/Libraries/Image/AssetRegistry
}, 538, null, "Runner_SNA/assets/rubystogo.png");
__d(/* Runner_SNA/assets/southcoastnews.png */function(global, require, module, exports) {module.exports = require(172                                         ).registerAsset({"__packager_asset":true,"httpServerLocation":"/assets/assets","width":232,"height":26,"scales":[1],"hash":"2f863d1f292e2dc831737bafb741ab34","name":"southcoastnews","type":"png"}); // 172 = react-native/Libraries/Image/AssetRegistry
}, 539, null, "Runner_SNA/assets/southcoastnews.png");
__d(/* Runner_SNA/assets/starbucks.png */function(global, require, module, exports) {module.exports = require(172                                         ).registerAsset({"__packager_asset":true,"httpServerLocation":"/assets/assets","width":232,"height":47,"scales":[1],"hash":"84364ce2d12df9ccc7feff3f20a2ab7e","name":"starbucks","type":"png"}); // 172 = react-native/Libraries/Image/AssetRegistry
}, 540, null, "Runner_SNA/assets/starbucks.png");
__d(/* Runner_SNA/assets/subway.png */function(global, require, module, exports) {module.exports = require(172                                         ).registerAsset({"__packager_asset":true,"httpServerLocation":"/assets/assets","width":209,"height":50,"scales":[1],"hash":"b4244442e90a67d044fcc5d00508dc31","name":"subway","type":"png"}); // 172 = react-native/Libraries/Image/AssetRegistry
}, 541, null, "Runner_SNA/assets/subway.png");
__d(/* Runner_SNA/assets/sunglasshut.png */function(global, require, module, exports) {module.exports = require(172                                         ).registerAsset({"__packager_asset":true,"httpServerLocation":"/assets/assets","width":232,"height":44,"scales":[1],"hash":"d1951e033ab8c5183a81adf9290e8ac4","name":"sunglasshut","type":"png"}); // 172 = react-native/Libraries/Image/AssetRegistry
}, 542, null, "Runner_SNA/assets/sunglasshut.png");
__d(/* Runner_SNA/assets/unitedairlinesunitedclub.jpeg */function(global, require, module, exports) {module.exports = require(172                                         ).registerAsset({"__packager_asset":true,"httpServerLocation":"/assets/assets","width":576,"height":270,"scales":[1],"hash":"4951e32266bc081f7451096560ad08ca","name":"unitedairlinesunitedclub","type":"jpeg"}); // 172 = react-native/Libraries/Image/AssetRegistry
}, 543, null, "Runner_SNA/assets/unitedairlinesunitedclub.jpeg");
__d(/* Runner_SNA/assets/vinovolo.png */function(global, require, module, exports) {module.exports = require(172                                         ).registerAsset({"__packager_asset":true,"httpServerLocation":"/assets/assets","width":232,"height":59,"scales":[1],"hash":"1a761c9f4f9f97c687a113d4ecddb76e","name":"vinovolo","type":"png"}); // 172 = react-native/Libraries/Image/AssetRegistry
}, 544, null, "Runner_SNA/assets/vinovolo.png");
__d(/* Runner_SNA/assets/xpresspa.png */function(global, require, module, exports) {module.exports = require(172                                         ).registerAsset({"__packager_asset":true,"httpServerLocation":"/assets/assets","width":208,"height":50,"scales":[1],"hash":"11fd20cbd70f455cf5178c616817694b","name":"xpresspa","type":"png"}); // 172 = react-native/Libraries/Image/AssetRegistry
}, 545, null, "Runner_SNA/assets/xpresspa.png");
__d(/* Runner_SNA/assets/zovs.png */function(global, require, module, exports) {module.exports = require(172                                         ).registerAsset({"__packager_asset":true,"httpServerLocation":"/assets/assets","width":276,"height":128,"scales":[1],"hash":"658602c4c6a2e283743d9231253f5b73","name":"zovs","type":"png"}); // 172 = react-native/Libraries/Image/AssetRegistry
}, 546, null, "Runner_SNA/assets/zovs.png");
__d(/* Runner_SNA/assets/alaska.png */function(global, require, module, exports) {module.exports = require(172                                         ).registerAsset({"__packager_asset":true,"httpServerLocation":"/assets/assets","width":1000,"height":310,"scales":[1],"hash":"5b29a3454419cdfab6068fdd6976ba21","name":"alaska","type":"png"}); // 172 = react-native/Libraries/Image/AssetRegistry
}, 547, null, "Runner_SNA/assets/alaska.png");
__d(/* Runner_SNA/assets/american.png */function(global, require, module, exports) {module.exports = require(172                                         ).registerAsset({"__packager_asset":true,"httpServerLocation":"/assets/assets","width":1236,"height":309,"scales":[1],"hash":"bb0cd07a762e959a4471cef62ab1a007","name":"american","type":"png"}); // 172 = react-native/Libraries/Image/AssetRegistry
}, 548, null, "Runner_SNA/assets/american.png");
__d(/* Runner_SNA/assets/delta.jpg */function(global, require, module, exports) {module.exports = require(172                                         ).registerAsset({"__packager_asset":true,"httpServerLocation":"/assets/assets","width":600,"height":600,"scales":[1],"hash":"6c9b294b5b0b6e641b774ab5dc940ddd","name":"delta","type":"jpg"}); // 172 = react-native/Libraries/Image/AssetRegistry
}, 549, null, "Runner_SNA/assets/delta.jpg");
__d(/* Runner_SNA/assets/frontier.png */function(global, require, module, exports) {module.exports = require(172                                         ).registerAsset({"__packager_asset":true,"httpServerLocation":"/assets/assets","width":896,"height":199,"scales":[1],"hash":"0d6a6257724304a4db2f8594f2afe612","name":"frontier","type":"png"}); // 172 = react-native/Libraries/Image/AssetRegistry
}, 550, null, "Runner_SNA/assets/frontier.png");
__d(/* Runner_SNA/assets/southwest.png */function(global, require, module, exports) {module.exports = require(172                                         ).registerAsset({"__packager_asset":true,"httpServerLocation":"/assets/assets","width":1000,"height":151,"scales":[1],"hash":"ee0cbaf5f40818b842ad4dd3f48dd557","name":"southwest","type":"png"}); // 172 = react-native/Libraries/Image/AssetRegistry
}, 551, null, "Runner_SNA/assets/southwest.png");
__d(/* Runner_SNA/assets/united.png */function(global, require, module, exports) {module.exports = require(172                                         ).registerAsset({"__packager_asset":true,"httpServerLocation":"/assets/assets","width":1024,"height":179,"scales":[1],"hash":"bb30d1969de832415311e60504f9aab1","name":"united","type":"png"}); // 172 = react-native/Libraries/Image/AssetRegistry
}, 552, null, "Runner_SNA/assets/united.png");
__d(/* Runner_SNA/assets/westjet.png */function(global, require, module, exports) {module.exports = require(172                                         ).registerAsset({"__packager_asset":true,"httpServerLocation":"/assets/assets","width":486,"height":104,"scales":[1],"hash":"53044f4a4baba65e605fd191c97ee691","name":"westjet","type":"png"}); // 172 = react-native/Libraries/Image/AssetRegistry
}, 553, null, "Runner_SNA/assets/westjet.png");
__d(/* Runner_SNA/src/components/Style.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
var Style = {
  content: {
    flex: 8
  },
  footer: {
    flex: 2,
    backgroundColor: '#fff',
    borderTopWidth: 1
  },
  container: {
    flex: 1,
    flexWrap: 'wrap',
    marginTop: 3
  },
  row: {
    flex: 1,
    flexDirection: 'row'
  },
  alternate: {
    flex: 0,
    backgroundColor: '#fff',
    borderRadius: 5,
    color: '#000',
    padding: 10,
    margin: 40
  }
};

exports.default = Style;
}, 554, null, "Runner_SNA/src/components/Style.js");
__d(/* Runner_SNA/src/components/common/TerminalB.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.TerminalB = undefined;

var _this = this;

var _react = require(282    ); // 282 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(12            ); // 12 = react-native

var _ = require(501 ); // 501 = ./

var _assets = require(510              ); // 510 = ../../../assets

var _Style = require(554       ); // 554 = ../Style

var _Style2 = babelHelpers.interopRequireDefault(_Style);

var _reactNativeRouterFlux = require(453                       ); // 453 = react-native-router-flux

var TerminalB = function TerminalB(_ref) {
	var _onPress = _ref.onPress;

	return _react2.default.createElement(
		_reactNative.View,
		{ style: _Style2.default.content },
		_react2.default.createElement(
			_.CardSection,
			null,
			_react2.default.createElement(
				_reactNative.View,
				{ style: _Style2.default.row },
				_react2.default.createElement(
					_.Button,
					{ onPress: function onPress() {
							return _this.setState({ terminal: 'a' });
						} },
					'Terminal A'
				),
				_react2.default.createElement(
					_.Button,
					{ onPress: function onPress() {
							return _this.setState({ terminal: 'b' });
						} },
					'Terminal B'
				),
				_react2.default.createElement(
					_.Button,
					{ onPress: function onPress() {
							return _this.setState({ terminal: 'c' });
						} },
					'Terminal C'
				)
			)
		),
		_react2.default.createElement(
			_reactNative.View,
			{ style: _Style2.default.row },
			_react2.default.createElement(_.ImageButton, {
				source: _assets.hudsonnews,
				onPress: function onPress() {
					return _onPress('hudsonNews');
				}
			}),
			_react2.default.createElement(_.ImageButton, {
				source: _assets.hudsonnewsdiscoveroc,
				onPress: function onPress() {
					return _onPress('hudsonNewsDiscoverOc');
				}
			}),
			_react2.default.createElement(_.ImageButton, {
				source: _assets.ocmarket,
				onPress: function onPress() {
					return _onPress('ocMarket');
				}
			}),
			_react2.default.createElement(_.ImageButton, {
				source: _assets.ripcurl,
				onPress: function onPress() {
					return _onPress('ripCurl');
				}
			})
		),
		_react2.default.createElement(
			_reactNative.View,
			{ style: _Style2.default.row },
			_react2.default.createElement(_.ImageButton, {
				source: _assets.sunglasshut,
				onPress: function onPress() {
					return _onPress('sunglassHut');
				}
			}),
			_react2.default.createElement(_.ImageButton, {
				source: _assets.cpk,
				onPress: function onPress() {
					return _onPress('cpk');
				}
			}),
			_react2.default.createElement(_.ImageButton, {
				source: _assets.mcdonalds,
				onPress: function onPress() {
					return _onPress('mcDonalds');
				}
			}),
			_react2.default.createElement(_.ImageButton, {
				source: _assets.starbucks,
				onPress: function onPress() {
					return _onPress('starbucks');
				}
			})
		),
		_react2.default.createElement(
			_reactNative.View,
			{ style: _Style2.default.row },
			_react2.default.createElement(_.ImageButton, {
				source: _assets.farmersmarket,
				onPress: function onPress() {
					return _onPress('farmersMarket');
				}
			}),
			_react2.default.createElement(_.ImageButton, {
				source: _assets.rubys,
				onPress: function onPress() {
					return _onPress('rubys');
				}
			}),
			_react2.default.createElement(_.ImageButton, {
				source: _assets.rubystogo,
				onPress: function onPress() {
					return _onPress('rubysToGo');
				}
			}),
			_react2.default.createElement(_.ImageButton, {
				source: _assets.americanairlinesadmiralsclub,
				onPress: function onPress() {
					return _onPress('americanAirlinesAdmiralsClub');
				}
			})
		),
		_react2.default.createElement(
			_reactNative.View,
			{ style: _Style2.default.row },
			_react2.default.createElement(_.ImageButton, {
				source: _assets.phone,
				onPress: function onPress() {
					return _onPress('phone');
				}
			}),
			_react2.default.createElement(_.ImageButton, {
				source: _assets.restroom,
				onPress: function onPress() {
					return _onPress('restroom');
				}
			})
		),
		_react2.default.createElement(
			_.CardSection,
			null,
			_react2.default.createElement(
				_.Button,
				{ onPress: function onPress() {
						return _reactNativeRouterFlux.Actions.gateArrival();
					} },
				'Gate Arrival'
			)
		)
	);
};

exports.TerminalB = TerminalB;
}, 555, null, "Runner_SNA/src/components/common/TerminalB.js");
__d(/* Runner_SNA/src/components/common/TerminalC.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.TerminalC = undefined;

var _this = this;

var _react = require(282    ); // 282 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(12            ); // 12 = react-native

var _ = require(501 ); // 501 = ./

var _assets = require(510              ); // 510 = ../../../assets

var _Style = require(554       ); // 554 = ../Style

var _Style2 = babelHelpers.interopRequireDefault(_Style);

var _reactNativeRouterFlux = require(453                       ); // 453 = react-native-router-flux

var TerminalC = function TerminalC(_ref) {
	var _onPress = _ref.onPress;

	return _react2.default.createElement(
		_reactNative.View,
		{ style: _Style2.default.content },
		_react2.default.createElement(
			_.CardSection,
			null,
			_react2.default.createElement(
				_reactNative.View,
				{ style: _Style2.default.row },
				_react2.default.createElement(
					_.Button,
					{ onPress: function onPress() {
							return _this.setState({ terminal: 'a' });
						} },
					'Terminal A'
				),
				_react2.default.createElement(
					_.Button,
					{ onPress: function onPress() {
							return _this.setState({ terminal: 'b' });
						} },
					'Terminal B'
				),
				_react2.default.createElement(
					_.Button,
					{ onPress: function onPress() {
							return _this.setState({ terminal: 'c' });
						} },
					'Terminal C'
				)
			)
		),
		_react2.default.createElement(
			_reactNative.View,
			{ style: _Style2.default.row },
			_react2.default.createElement(_.ImageButton, {
				source: _assets.hudsonnews,
				onPress: function onPress() {
					return _onPress('hudsonNews');
				}
			}),
			_react2.default.createElement(_.ImageButton, {
				source: _assets.hudsonnewsdiscoveroc,
				onPress: function onPress() {
					return _onPress('hudsonNewsDiscoverOc');
				}
			}),
			_react2.default.createElement(_.ImageButton, {
				source: _assets.ocmarket,
				onPress: function onPress() {
					return _onPress('ocMarket');
				}
			}),
			_react2.default.createElement(_.ImageButton, {
				source: _assets.ripcurl,
				onPress: function onPress() {
					return _onPress('ripCurl');
				}
			})
		),
		_react2.default.createElement(
			_reactNative.View,
			{ style: _Style2.default.row },
			_react2.default.createElement(_.ImageButton, {
				source: _assets.sunglasshut,
				onPress: function onPress() {
					return _onPress('sunglassHut');
				}
			}),
			_react2.default.createElement(_.ImageButton, {
				source: _assets.cpk,
				onPress: function onPress() {
					return _onPress('cpk');
				}
			}),
			_react2.default.createElement(_.ImageButton, {
				source: _assets.mcdonalds,
				onPress: function onPress() {
					return _onPress('mcDonalds');
				}
			}),
			_react2.default.createElement(_.ImageButton, {
				source: _assets.starbucks,
				onPress: function onPress() {
					return _onPress('starbucks');
				}
			})
		),
		_react2.default.createElement(
			_reactNative.View,
			{ style: _Style2.default.row },
			_react2.default.createElement(_.ImageButton, {
				source: _assets.farmersmarket,
				onPress: function onPress() {
					return _onPress('farmersMarket');
				}
			}),
			_react2.default.createElement(_.ImageButton, {
				source: _assets.rubys,
				onPress: function onPress() {
					return _onPress('rubys');
				}
			}),
			_react2.default.createElement(_.ImageButton, {
				source: _assets.rubystogo,
				onPress: function onPress() {
					return _onPress('rubysToGo');
				}
			}),
			_react2.default.createElement(_.ImageButton, {
				source: _assets.americanairlinesadmiralsclub,
				onPress: function onPress() {
					return _onPress('americanAirlinesAdmiralsClub');
				}
			})
		),
		_react2.default.createElement(
			_reactNative.View,
			{ style: _Style2.default.row },
			_react2.default.createElement(_.ImageButton, {
				source: _assets.phone,
				onPress: function onPress() {
					return _onPress('phone');
				}
			}),
			_react2.default.createElement(_.ImageButton, {
				source: _assets.restroom,
				onPress: function onPress() {
					return _onPress('restroom');
				}
			})
		),
		_react2.default.createElement(
			_.CardSection,
			null,
			_react2.default.createElement(
				_.Button,
				{ onPress: function onPress() {
						return _reactNativeRouterFlux.Actions.gateArrival();
					} },
				'Gate Arrival'
			)
		)
	);
};

exports.TerminalC = TerminalC;
}, 556, null, "Runner_SNA/src/components/common/TerminalC.js");
__d(/* Runner_SNA/src/Router.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
	value: true
});

var _react = require(282    ); // 282 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNativeRouterFlux = require(453                       ); // 453 = react-native-router-flux

var _LoginForm = require(450                     ); // 450 = ./components/LoginForm

var _LoginForm2 = babelHelpers.interopRequireDefault(_LoginForm);

var _Main = require(558                ); // 558 = ./components/Main

var _Main2 = babelHelpers.interopRequireDefault(_Main);

var _SelectNumberOfWheelchairs = require(561                                     ); // 561 = ./components/SelectNumberOfWheelchairs

var _SelectNumberOfWheelchairs2 = babelHelpers.interopRequireDefault(_SelectNumberOfWheelchairs);

var _SelectWheelchair = require(563                            ); // 563 = ./components/SelectWheelchair

var _SelectWheelchair2 = babelHelpers.interopRequireDefault(_SelectWheelchair);

var _ScanBoardingPass = require(565                            ); // 565 = ./components/ScanBoardingPass

var _ScanBoardingPass2 = babelHelpers.interopRequireDefault(_ScanBoardingPass);

var _AlternateBoardingPassInput = require(568                                      ); // 568 = ./components/AlternateBoardingPassInput

var _AlternateBoardingPassInput2 = babelHelpers.interopRequireDefault(_AlternateBoardingPassInput);

var _SelectGate = require(569                      ); // 569 = ./components/SelectGate

var _SelectGate2 = babelHelpers.interopRequireDefault(_SelectGate);

var _SelectStartingPoint = require(570                               ); // 570 = ./components/SelectStartingPoint

var _SelectStartingPoint2 = babelHelpers.interopRequireDefault(_SelectStartingPoint);

var _SelectStopsNonSterile = require(571                                 ); // 571 = ./components/SelectStopsNonSterile

var _SelectStopsNonSterile2 = babelHelpers.interopRequireDefault(_SelectStopsNonSterile);

var _TSA = require(585               ); // 585 = ./components/TSA

var _TSA2 = babelHelpers.interopRequireDefault(_TSA);

var _SelectStopsSterile = require(586                              ); // 586 = ./components/SelectStopsSterile

var _SelectStopsSterile2 = babelHelpers.interopRequireDefault(_SelectStopsSterile);

var _GateArrival = require(588                       ); // 588 = ./components/GateArrival

var _GateArrival2 = babelHelpers.interopRequireDefault(_GateArrival);

var _BaggageClaim = require(589                        ); // 589 = ./components/BaggageClaim

var _BaggageClaim2 = babelHelpers.interopRequireDefault(_BaggageClaim);

var _Closing = require(590                   ); // 590 = ./components/Closing

var _Closing2 = babelHelpers.interopRequireDefault(_Closing);

var RouterComponent = function RouterComponent() {

	return _react2.default.createElement(
		_reactNativeRouterFlux.Router,
		{ sceneStyle: { paddingTop: 50 } },
		_react2.default.createElement(
			_reactNativeRouterFlux.Scene,
			{ key: 'auth', initial: true },
			_react2.default.createElement(_reactNativeRouterFlux.Scene, { key: 'login', component: _LoginForm2.default, title: "Please Log In" })
		),
		_react2.default.createElement(
			_reactNativeRouterFlux.Scene,
			{ key: 'home' },
			_react2.default.createElement(_reactNativeRouterFlux.Scene, { key: 'main', component: _Main2.default, title: "Select Task" }),
			_react2.default.createElement(_reactNativeRouterFlux.Scene, { key: 'selectStartingPoint', component: _SelectStartingPoint2.default, title: "Select Staring Point" }),
			_react2.default.createElement(_reactNativeRouterFlux.Scene, { key: 'selectNumberOfWheelchairs', component: _SelectNumberOfWheelchairs2.default, title: "Select Number of Wheelchairs" }),
			_react2.default.createElement(_reactNativeRouterFlux.Scene, { key: 'selectWheelchair', component: _SelectWheelchair2.default }),
			_react2.default.createElement(_reactNativeRouterFlux.Scene, { key: 'scanBoardingPass', component: _ScanBoardingPass2.default }),
			_react2.default.createElement(_reactNativeRouterFlux.Scene, { key: 'alternateBoardingPassInput', component: _AlternateBoardingPassInput2.default, title: "Enter Customer Info" }),
			_react2.default.createElement(_reactNativeRouterFlux.Scene, { key: 'selectGate', component: _SelectGate2.default, title: "Select Gate Number" }),
			_react2.default.createElement(_reactNativeRouterFlux.Scene, { key: 'selectStopsNonSterile', component: _SelectStopsNonSterile2.default, title: "Select Stops | Non-Sterile" }),
			_react2.default.createElement(_reactNativeRouterFlux.Scene, { key: 'tsa', component: _TSA2.default, title: 'TSA' }),
			_react2.default.createElement(_reactNativeRouterFlux.Scene, { key: 'selectStopsSterile', component: _SelectStopsSterile2.default, title: "Select Stops | Sterile " }),
			_react2.default.createElement(_reactNativeRouterFlux.Scene, { key: 'gateArrival', component: _GateArrival2.default, title: "Gate Arrival" }),
			_react2.default.createElement(_reactNativeRouterFlux.Scene, { key: 'baggageClaim', component: _BaggageClaim2.default, title: "Select Drop-Off Location" }),
			_react2.default.createElement(_reactNativeRouterFlux.Scene, { key: 'closing', component: _Closing2.default, title: "Finished!" })
		)
	);
};

exports.default = RouterComponent;
}, 557, null, "Runner_SNA/src/Router.js");
__d(/* Runner_SNA/src/components/Main.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require(282    ); // 282 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(12            ); // 12 = react-native

var _firebase = require(440       ); // 440 = firebase

var _firebase2 = babelHelpers.interopRequireDefault(_firebase);

var _firebaseService = require(559                       ); // 559 = ../utils/firebaseService

var _reactRedux = require(402          ); // 402 = react-redux

var _reactNativeRouterFlux = require(453                       ); // 453 = react-native-router-flux

var _reactNativeDeviceInfo = require(560                       ); // 560 = react-native-device-info

var _reactNativeDeviceInfo2 = babelHelpers.interopRequireDefault(_reactNativeDeviceInfo);

var _actions = require(451         ); // 451 = ../actions

var _common = require(501       ); // 501 = ./common

var Main = function (_Component) {
  babelHelpers.inherits(Main, _Component);

  function Main() {
    babelHelpers.classCallCheck(this, Main);
    return babelHelpers.possibleConstructorReturn(this, (Main.__proto__ || Object.getPrototypeOf(Main)).apply(this, arguments));
  }

  babelHelpers.createClass(Main, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      var _this2 = this;

      _reactNative.Keyboard.dismiss();

      navigator.geolocation.getCurrentPosition(function (position) {
        _this2.props.updateCurrentPosition(position);
      });

      navigator.geolocation.watchPosition(function (position) {
        if (_this2.props.numPassengers != '') {
          if (_this2.props.numPassengers === '1') {
            if (_this2.props.passenger1Wheelchair != '') {
              (0, _firebaseService.updateWheelchair)(_this2.props.passenger1Wheelchair, position);
            }
          } else if (_this2.props.numPassengers === '2') {
            if (_this2.props.passenger1Wheelchair != '' && _this2.props.passenger2Wheelchair != '') {
              (0, _firebaseService.updateWheelchair)(_this2.props.passenger1Wheelchair, position);
              (0, _firebaseService.updateWheelchair)(_this2.props.passenger2Wheelchair, position);
            }
          }
        }
        _this2.props.updateCurrentPosition(position);
      });
    }
  }, {
    key: 'onDeparture',
    value: function onDeparture() {
      this.props.setRunType('departure', _reactNativeDeviceInfo2.default.getUniqueID());
    }
  }, {
    key: 'onArrival',
    value: function onArrival() {
      this.props.setRunType('arrival', _reactNativeDeviceInfo2.default.getUniqueID());
    }
  }, {
    key: 'onCheckIn',
    value: function onCheckIn() {
      this.props.setRunType('checkin', _reactNativeDeviceInfo2.default.getUniqueID());
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        _common.Card,
        null,
        _react2.default.createElement(
          _common.CardSection,
          null,
          _react2.default.createElement(
            _common.Button,
            { onPress: this.onDeparture.bind(this) },
            'Departure'
          )
        ),
        _react2.default.createElement(
          _common.CardSection,
          null,
          _react2.default.createElement(
            _common.Button,
            { onPress: this.onArrival.bind(this) },
            'Arrival'
          )
        ),
        _react2.default.createElement(
          _common.CardSection,
          null,
          _react2.default.createElement(
            _common.Button,
            { onPress: this.onCheckIn.bind(this) },
            'Check-In'
          )
        )
      );
    }
  }]);
  return Main;
}(_react.Component);

var mapStateToProps = function mapStateToProps(_ref) {
  var departure = _ref.departure,
      auth = _ref.auth;
  var currentGPS = departure.currentGPS,
      numPassengers = departure.numPassengers,
      passenger1Wheelchair = departure.passenger1Wheelchair,
      passenger2Wheelchair = departure.passenger2Wheelchair;
  var email = auth.email;


  return { currentGPS: currentGPS, email: email, numPassengers: numPassengers, passenger1Wheelchair: passenger1Wheelchair, passenger2Wheelchair: passenger2Wheelchair };
};

exports.default = (0, _reactRedux.connect)(mapStateToProps, { updateCurrentPosition: _actions.updateCurrentPosition, setRunType: _actions.setRunType })(Main);
}, 558, null, "Runner_SNA/src/components/Main.js");
__d(/* Runner_SNA/src/utils/firebaseService.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.updateWheelchair = exports.addStop = exports.writeArrivalEnd = exports.writeDepartureEnd = exports.writeDepartureData = exports.writeArrivalData = exports.writePassengerData = undefined;

var _firebase = require(440       ); // 440 = firebase

var _firebase2 = babelHelpers.interopRequireDefault(_firebase);

var writePassengerData = exports.writePassengerData = function writePassengerData(props, gateNumber) {
	var runType = props.runType,
	    timeStart = props.timeStart,
	    startLocation = props.startLocation,
	    startLocationGPS = props.startLocationGPS,
	    numPassengers = props.numPassengers,
	    passenger1Wheelchair = props.passenger1Wheelchair,
	    passenger2Wheelchair = props.passenger2Wheelchair,
	    passenger1FirstName = props.passenger1FirstName,
	    passenger1LastName = props.passenger1LastName,
	    passenger2FirstName = props.passenger2FirstName,
	    passenger2LastName = props.passenger2LastName,
	    airline = props.airline,
	    flightNumber = props.flightNumber,
	    user = props.user,
	    deviceID = props.deviceID;

	var path = runType + '/' + timeStart;

	_firebase2.default.database().ref('' + path).set({
		timeStart: timeStart,
		numPassengers: numPassengers,
		startLocation: startLocation,
		startLocationGPS: startLocationGPS,
		passenger1Wheelchair: passenger1Wheelchair,
		passenger2Wheelchair: passenger2Wheelchair,
		passenger1FirstName: passenger1FirstName,
		passenger1LastName: passenger1LastName,
		passenger2FirstName: passenger2FirstName || '',
		passenger2LastName: passenger2LastName || '',
		airline: airline,
		flightNumber: flightNumber,
		destinationGate: gateNumber,
		deviceID: deviceID,
		employeeLogin: user.email
	});
};

var writeArrivalData = exports.writeArrivalData = function writeArrivalData(props) {
	var runType = props.runType,
	    timeStart = props.timeStart,
	    startLocation = props.startLocation,
	    startLocationGPS = props.startLocationGPS,
	    numPassengers = props.numPassengers,
	    passenger1FirstName = props.passenger1FirstName,
	    passenger1LastName = props.passenger1LastName,
	    passenger2FirstName = props.passenger2FirstName,
	    passenger2LastName = props.passenger2LastName,
	    p1FirstName = props.p1FirstName,
	    p1LastName = props.p1LastName,
	    p2FirstName = props.p2FirstName,
	    p2LastName = props.p2LastName,
	    passenger1Wheelchair = props.passenger1Wheelchair,
	    passenger2Wheelchair = props.passenger2Wheelchair,
	    deviceID = props.deviceID,
	    airline = props.airline,
	    flightNumber = props.flightNumber,
	    al = props.al,
	    fn = props.fn,
	    user = props.user;

	var path = runType + '/' + timeStart;
	console.log('FUCKING PROPS JESUS', props);
	_firebase2.default.database().ref('' + path).set({
		timeStart: timeStart,
		numPassengers: numPassengers,
		startLocation: startLocation,
		startLocationGPS: startLocationGPS,
		passenger1FirstName: passenger1FirstName || p1FirstName,
		passenger1LastName: passenger1LastName || p1LastName,
		passenger2FirstName: p2FirstName || passenger2FirstName || '',
		passenger2LastName: p2LastName || passenger2LastName || '',
		passenger1Wheelchair: passenger1Wheelchair,
		passenger2Wheelchair: passenger2Wheelchair,
		airline: al,
		flightNumber: fn,

		deviceID: deviceID,
		employeeLogin: user.email
	});
};

var writeDepartureData = exports.writeDepartureData = function writeDepartureData(_ref) {
	var runType = _ref.runType,
	    timeStart = _ref.timeStart,
	    timeTSAStart = _ref.timeTSAStart,
	    timeTSAEnd = _ref.timeTSAEnd,
	    commentsTSA = _ref.commentsTSA;

	var path = runType + '/' + timeStart;
	_firebase2.default.database().ref('' + path).update({
		timeTSAStart: timeTSAStart,
		timeTSAEnd: timeTSAEnd,
		commentsTSA: commentsTSA
	});
};

var writeDepartureEnd = exports.writeDepartureEnd = function writeDepartureEnd(_ref2, commentsEnd, timeGateArrival) {
	var runType = _ref2.runType,
	    timeStart = _ref2.timeStart,
	    destinationGate = _ref2.destinationGate,
	    finalGate = _ref2.finalGate;

	var path = runType + '/' + timeStart;
	_firebase2.default.database().ref('' + path).update({
		finalGate: finalGate || destinationGate,
		timeGateArrival: timeGateArrival,
		commentsEnd: commentsEnd
	});
};
var writeArrivalEnd = exports.writeArrivalEnd = function writeArrivalEnd(_ref3, commentsEnd, timeGateArrival) {
	var runType = _ref3.runType,
	    timeStart = _ref3.timeStart,
	    destination = _ref3.destination;

	var path = runType + '/' + timeStart;
	_firebase2.default.database().ref('' + path).update({
		destination: destination,
		timeDestinationArrival: timeGateArrival,
		commentsEnd: commentsEnd
	});
};

var addStop = exports.addStop = function addStop(runType, timeStart, currentGPS, stopLocation) {
	var path = runType + '/' + timeStart + '/stops/';
	_firebase2.default.database().ref('' + path).push({
		stopTime: Date.now(),
		stopLocation: stopLocation,
		stopLocationGPS: currentGPS
	});
};

var updateWheelchair = exports.updateWheelchair = function updateWheelchair(wheelchairNumber, gps) {

	var path = 'wheelchairs/' + wheelchairNumber;
	console.log(wheelchairNumber, gps, path);
	_firebase2.default.database().ref('' + path).update({
		latitude: gps.latitude,
		longitude: gps.longitude,
		gpsTimestamp: gps.timestamp,
		timestamp: Date.now()
	});
};
}, 559, null, "Runner_SNA/src/utils/firebaseService.js");
__d(/* react-native-device-info/deviceinfo.js */function(global, require, module, exports) {

var RNDeviceInfo = require(12            ).NativeModules.RNDeviceInfo; // 12 = react-native

module.exports = {
  getUniqueID: function getUniqueID() {
    return RNDeviceInfo.uniqueId;
  },
  getInstanceID: function getInstanceID() {
    return RNDeviceInfo.instanceId;
  },
  getDeviceId: function getDeviceId() {
    return RNDeviceInfo.deviceId;
  },
  getManufacturer: function getManufacturer() {
    return RNDeviceInfo.systemManufacturer;
  },
  getModel: function getModel() {
    return RNDeviceInfo.model;
  },
  getBrand: function getBrand() {
    return RNDeviceInfo.brand;
  },
  getSystemName: function getSystemName() {
    return RNDeviceInfo.systemName;
  },
  getSystemVersion: function getSystemVersion() {
    return RNDeviceInfo.systemVersion;
  },
  getBundleId: function getBundleId() {
    return RNDeviceInfo.bundleId;
  },
  getBuildNumber: function getBuildNumber() {
    return RNDeviceInfo.buildNumber;
  },
  getVersion: function getVersion() {
    return RNDeviceInfo.appVersion;
  },
  getReadableVersion: function getReadableVersion() {
    return RNDeviceInfo.appVersion + "." + RNDeviceInfo.buildNumber;
  },
  getDeviceName: function getDeviceName() {
    return RNDeviceInfo.deviceName;
  },
  getUserAgent: function getUserAgent() {
    return RNDeviceInfo.userAgent;
  },
  getDeviceLocale: function getDeviceLocale() {
    return RNDeviceInfo.deviceLocale;
  },
  getDeviceCountry: function getDeviceCountry() {
    return RNDeviceInfo.deviceCountry;
  },
  getTimezone: function getTimezone() {
    return RNDeviceInfo.timezone;
  },
  isEmulator: function isEmulator() {
    return RNDeviceInfo.isEmulator;
  },
  isTablet: function isTablet() {
    return RNDeviceInfo.isTablet;
  },
  isPinOrFingerprintSet: function isPinOrFingerprintSet() {
    return RNDeviceInfo.isPinOrFingerprintSet;
  }
};
}, 560, null, "react-native-device-info/deviceinfo.js");
__d(/* Runner_SNA/src/components/SelectNumberOfWheelchairs.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
	value: true
});

var _react = require(282    ); // 282 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(12            ); // 12 = react-native

var _reactRedux = require(402          ); // 402 = react-redux

var _actions = require(451         ); // 451 = ../actions

var _common = require(501       ); // 501 = ./common

var _Footer = require(562       ); // 562 = ./Footer

var _Footer2 = babelHelpers.interopRequireDefault(_Footer);

var _Style = require(554      ); // 554 = ./Style

var _Style2 = babelHelpers.interopRequireDefault(_Style);

var _reactNativeRouterFlux = require(453                       ); // 453 = react-native-router-flux

var SelectNumberOfWheelchairs = function (_Component) {
	babelHelpers.inherits(SelectNumberOfWheelchairs, _Component);

	function SelectNumberOfWheelchairs(props) {
		babelHelpers.classCallCheck(this, SelectNumberOfWheelchairs);
		return babelHelpers.possibleConstructorReturn(this, (SelectNumberOfWheelchairs.__proto__ || Object.getPrototypeOf(SelectNumberOfWheelchairs)).call(this, props));
	}

	babelHelpers.createClass(SelectNumberOfWheelchairs, [{
		key: 'onButtonPress',
		value: function onButtonPress(numWheelchairs) {
			this.props.setNumberOfPassengers(this.props.runType, numWheelchairs);
		}
	}, {
		key: 'render',
		value: function render() {
			var _this2 = this;

			return _react2.default.createElement(
				_reactNative.View,
				{ style: _Style2.default.container },
				_react2.default.createElement(
					_reactNative.View,
					{ style: _Style2.default.content },
					_react2.default.createElement(
						_common.CardSection,
						null,
						_react2.default.createElement(
							_reactNative.Text,
							null,
							' Do you need one or two wheelchairs? '
						)
					),
					_react2.default.createElement(
						_common.CardSection,
						null,
						_react2.default.createElement(
							_reactNative.View,
							{ style: _Style2.default.row },
							_react2.default.createElement(
								_common.Button,
								{ onPress: function onPress() {
										return _this2.onButtonPress(1);
									} },
								'One'
							),
							_react2.default.createElement(
								_common.Button,
								{ onPress: function onPress() {
										return _this2.onButtonPress(2);
									} },
								'Two'
							)
						)
					)
				),
				_react2.default.createElement(_Footer2.default, null)
			);
		}
	}]);
	return SelectNumberOfWheelchairs;
}(_react.Component);

var mapStateToProps = function mapStateToProps(_ref) {
	var departure = _ref.departure;
	var runType = departure.runType;


	return { runType: runType };
};

exports.default = (0, _reactRedux.connect)(mapStateToProps, {
	setNumberOfPassengers: _actions.setNumberOfPassengers
})(SelectNumberOfWheelchairs);
}, 561, null, "Runner_SNA/src/components/SelectNumberOfWheelchairs.js");
__d(/* Runner_SNA/src/components/Footer.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require(282    ); // 282 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(12            ); // 12 = react-native

var _reactRedux = require(402          ); // 402 = react-redux

var _Style = require(554      ); // 554 = ./Style

var _Style2 = babelHelpers.interopRequireDefault(_Style);

var Footer = function (_Component) {
  babelHelpers.inherits(Footer, _Component);

  function Footer(props) {
    babelHelpers.classCallCheck(this, Footer);
    return babelHelpers.possibleConstructorReturn(this, (Footer.__proto__ || Object.getPrototypeOf(Footer)).call(this, props));
  }

  babelHelpers.createClass(Footer, [{
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        _reactNative.View,
        { style: _Style2.default.footer },
        _react2.default.createElement(
          _reactNative.Text,
          null,
          'Wheelchair #: ',
          this.props.passenger1Wheelchair
        ),
        _react2.default.createElement(
          _reactNative.Text,
          null,
          'Name: ',
          this.props.passenger1FirstName + ' ' + this.props.passenger1LastName
        ),
        _react2.default.createElement(
          _reactNative.Text,
          null,
          'Airline: ',
          this.props.airline
        ),
        _react2.default.createElement(
          _reactNative.Text,
          null,
          'Flight #: ',
          this.props.flightNumber
        ),
        _react2.default.createElement(
          _reactNative.Text,
          null,
          'Destination Gate #: ',
          this.props.destinationGate
        ),
        _react2.default.createElement(
          _reactNative.Text,
          null,
          'Current GPS: ',
          this.props.currentGPS.latitude + ' ' + this.props.currentGPS.longitude
        ),
        _react2.default.createElement(
          _reactNative.Text,
          null,
          'Time Start: ',
          this.props.timeStart
        )
      );
    }
  }]);
  return Footer;
}(_react.Component);

var mapStateToProps = function mapStateToProps(_ref) {
  var departure = _ref.departure;
  var passenger1FirstName = departure.passenger1FirstName,
      passenger1LastName = departure.passenger1LastName,
      airline = departure.airline,
      flightNumber = departure.flightNumber,
      passenger1Wheelchair = departure.passenger1Wheelchair,
      destinationGate = departure.destinationGate,
      currentGPS = departure.currentGPS,
      timeStart = departure.timeStart;


  return { passenger1FirstName: passenger1FirstName, passenger1LastName: passenger1LastName, airline: airline, flightNumber: flightNumber, passenger1Wheelchair: passenger1Wheelchair, destinationGate: destinationGate, currentGPS: currentGPS, timeStart: timeStart };
};

exports.default = (0, _reactRedux.connect)(mapStateToProps, {})(Footer);
}, 562, null, "Runner_SNA/src/components/Footer.js");
__d(/* Runner_SNA/src/components/SelectWheelchair.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require(282    ); // 282 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(12            ); // 12 = react-native

var _reactRedux = require(402          ); // 402 = react-redux

var _actions = require(451         ); // 451 = ../actions

var _firebaseService = require(559                       ); // 559 = ../utils/firebaseService

var _common = require(501       ); // 501 = ./common

var _NumberButton = require(564                    ); // 564 = ./common/NumberButton

var _NumberButton2 = babelHelpers.interopRequireDefault(_NumberButton);

var _Footer = require(562       ); // 562 = ./Footer

var _Footer2 = babelHelpers.interopRequireDefault(_Footer);

var _Style = require(554      ); // 554 = ./Style

var _Style2 = babelHelpers.interopRequireDefault(_Style);

var _reactNativeRouterFlux = require(453                       ); // 453 = react-native-router-flux

var wheelchairs = [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [31, 32, 33, 34, 35, 36, 37, 38, 39, 40], [41, 42, 43, 44, 45, 46, 47, 48, 49, 50], [51, 52, 53, 54, 55, 56, 57, 58, 59, 60], [61, 62, 63, 64, 65, 66, 67, 68, 69, 70], [71, 72, 73, 74, 75, 76, 77, 78, 79, 80], [81, 82, 83, 84, 85, 86, 87, 88, 89, 90], [91, 92, 93, 94, 95, 96, 97, 98, 99, 100]];

var SelectWheelchair = function (_Component) {
  babelHelpers.inherits(SelectWheelchair, _Component);

  function SelectWheelchair(props) {
    babelHelpers.classCallCheck(this, SelectWheelchair);

    var _this = babelHelpers.possibleConstructorReturn(this, (SelectWheelchair.__proto__ || Object.getPrototypeOf(SelectWheelchair)).call(this, props));

    _reactNative.Keyboard.dismiss();
    return _this;
  }

  babelHelpers.createClass(SelectWheelchair, [{
    key: 'onButtonPress',
    value: function onButtonPress(buttonValue) {

      (0, _firebaseService.updateWheelchair)(buttonValue, this.props.currentGPS);

      if (this.props.runType != 'checkin') {
        this.props.selectWheelchair(this.props, buttonValue);
      }
    }
  }, {
    key: 'renderButtons',
    value: function renderButtons() {
      var _this2 = this;

      var views = wheelchairs.map(function (row, index) {
        var inputRow = row.map(function (buttonValue, columnIndex) {
          return _react2.default.createElement(_NumberButton2.default, {
            value: buttonValue,
            onPress: _this2.onButtonPress.bind(_this2, buttonValue),
            key: 'button-' + columnIndex
          });
        });
        return _react2.default.createElement(
          _reactNative.View,
          { style: _Style2.default.row, key: 'row-' + index },
          inputRow
        );
      });
      return views;
    }
  }, {
    key: 'renderExit',
    value: function renderExit() {
      if (this.props.runType === 'checkin') {
        return _react2.default.createElement(
          _common.Button,
          { onPress: function onPress() {
              return _reactNativeRouterFlux.Actions.main({ type: 'reset' });
            } },
          'Finish Wheelchair Check-In'
        );
      }
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        _reactNative.View,
        { style: _Style2.default.container },
        _react2.default.createElement(
          _reactNative.View,
          { style: _Style2.default.content },
          this.renderButtons(),
          _react2.default.createElement(
            _common.CardSection,
            null,
            this.renderExit()
          )
        ),
        _react2.default.createElement(_Footer2.default, null)
      );
    }
  }]);
  return SelectWheelchair;
}(_react.Component);

;

var mapStateToProps = function mapStateToProps(_ref) {
  var departure = _ref.departure;
  var currentGPS = departure.currentGPS,
      passenger1Wheelchair = departure.passenger1Wheelchair,
      passenger2Wheelchair = departure.passenger2Wheelchair,
      passenger1FirstName = departure.passenger1FirstName,
      passenger1LastName = departure.passenger1LastName,
      passenger2FirstName = departure.passenger2FirstName,
      passenger2LastName = departure.passenger2LastName,
      flightNumber = departure.flightNumber,
      numPassengers = departure.numPassengers,
      airline = departure.airline,
      runType = departure.runType;


  return {
    currentGPS: currentGPS,
    passenger1Wheelchair: passenger1Wheelchair,
    passenger2Wheelchair: passenger2Wheelchair,
    passenger1FirstName: passenger1FirstName,
    passenger1LastName: passenger1LastName,
    passenger2FirstName: passenger2FirstName,
    passenger2LastName: passenger2LastName,
    flightNumber: flightNumber,
    numPassengers: numPassengers,
    airline: airline,
    runType: runType
  };
};

exports.default = (0, _reactRedux.connect)(mapStateToProps, { selectWheelchair: _actions.selectWheelchair })(SelectWheelchair);
}, 563, null, "Runner_SNA/src/components/SelectWheelchair.js");
__d(/* Runner_SNA/src/components/common/NumberButton.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require(282    ); // 282 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(12            ); // 12 = react-native

var NumberButton = function (_Component) {
  babelHelpers.inherits(NumberButton, _Component);

  function NumberButton() {
    babelHelpers.classCallCheck(this, NumberButton);
    return babelHelpers.possibleConstructorReturn(this, (NumberButton.__proto__ || Object.getPrototypeOf(NumberButton)).apply(this, arguments));
  }

  babelHelpers.createClass(NumberButton, [{
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        _reactNative.TouchableOpacity,
        { onPress: this.props.onPress, style: styles.buttonStyle },
        _react2.default.createElement(
          _reactNative.Text,
          { style: styles.textStyle },
          this.props.value
        )
      );
    }
  }]);
  return NumberButton;
}(_react.Component);

var styles = {
  textStyle: {
    alignSelf: 'center',
    color: '#000',
    fontSize: 16,
    fontWeight: '600',
    paddingTop: 10,
    paddingBottom: 10
  },
  buttonStyle: {
    flex: 1,
    alignSelf: 'stretch',
    backgroundColor: '#fff',
    borderRadius: 0,
    borderWidth: 1,
    borderColor: '#000',
    margin: 1
  }
};

exports.default = NumberButton;
}, 564, null, "Runner_SNA/src/components/common/NumberButton.js");
__d(/* Runner_SNA/src/components/ScanBoardingPass.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
	value: true
});

var _react = require(282    ); // 282 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(12            ); // 12 = react-native

var _reactRedux = require(402          ); // 402 = react-redux

var _actions = require(451         ); // 451 = ../actions

var _reactNativeCamera = require(566                  ); // 566 = react-native-camera

var _reactNativeCamera2 = babelHelpers.interopRequireDefault(_reactNativeCamera);

var _reactNativeRouterFlux = require(453                       ); // 453 = react-native-router-flux

var _lodash = require(567     ); // 567 = lodash

var _lodash2 = babelHelpers.interopRequireDefault(_lodash);

var _common = require(501       ); // 501 = ./common

var _Footer = require(562       ); // 562 = ./Footer

var _Footer2 = babelHelpers.interopRequireDefault(_Footer);

var _Style = require(554      ); // 554 = ./Style

var _Style2 = babelHelpers.interopRequireDefault(_Style);

var ScanBoardingPass = function (_Component) {
	babelHelpers.inherits(ScanBoardingPass, _Component);

	function ScanBoardingPass(props) {
		babelHelpers.classCallCheck(this, ScanBoardingPass);
		return babelHelpers.possibleConstructorReturn(this, (ScanBoardingPass.__proto__ || Object.getPrototypeOf(ScanBoardingPass)).call(this, props));
	}

	babelHelpers.createClass(ScanBoardingPass, [{
		key: 'onReadSuccess',
		value: function onReadSuccess(boardingPassString) {
			switch (boardingPassString.data.substring(36, 38)) {
				case 'AS':
					var airline = 'Alaska';
					break;
				case 'AA':
					var airline = 'American';
					break;
				case 'DL':
					var airline = 'Delta';
					break;
				case 'F9':
					var airline = 'Frontier';
					break;
				case 'UA':
					var airline = 'United';
					break;
				case 'WN':
					var airline = 'Southwest';
					break;
				case 'WS':
					var airline = 'WestJet';
					break;
				default:
					var airline = "Scan Failed";
					break;
			}

			var slash = boardingPassString.data.indexOf('/');
			var boardingPassData = {
				firstName: boardingPassString.data.substring(slash + 1, 21).trim(),
				lastName: boardingPassString.data.substring(2, slash),
				airline: airline,
				flightNumber: boardingPassString.data.substring(36, 43)
			};

			this.props.scanBoardingPass(this.props, boardingPassData);
		}
	}, {
		key: 'render',
		value: function render() {
			return _react2.default.createElement(
				_reactNative.View,
				{ style: _Style2.default.container },
				_react2.default.createElement(
					_reactNative.View,
					{ style: _Style2.default.content },
					_react2.default.createElement(_reactNativeCamera2.default, {
						style: { flex: 1 },
						barCodeTypes: ['pdf417'],
						onBarCodeRead: this.onReadSuccess.bind(this)
					}),
					_react2.default.createElement(
						_common.CardSection,
						null,
						_react2.default.createElement(
							_common.Button,
							{ style: _Style2.default.alternate, onPress: function onPress() {
									return _reactNativeRouterFlux.Actions.alternateBoardingPassInput();
								} },
							'Manual Input'
						)
					)
				),
				_react2.default.createElement(_Footer2.default, null)
			);
		}
	}]);
	return ScanBoardingPass;
}(_react.Component);

var mapStateToProps = function mapStateToProps(_ref) {
	var departure = _ref.departure;
	var runType = departure.runType,
	    timeStart = departure.timeStart,
	    numPassengers = departure.numPassengers,
	    passenger1Wheelchair = departure.passenger1Wheelchair,
	    passenger2Wheelchair = departure.passenger2Wheelchair,
	    passenger1FirstName = departure.passenger1FirstName,
	    passenger1LastName = departure.passenger1LastName,
	    passenger2FirstName = departure.passenger2FirstName,
	    passenger2LastName = departure.passenger2LastName,
	    airline = departure.airline,
	    flightNumber = departure.flightNumber;


	return {
		runType: runType,
		timeStart: timeStart,
		numPassengers: numPassengers,
		passenger1Wheelchair: passenger1Wheelchair,
		passenger2Wheelchair: passenger2Wheelchair,
		passenger1FirstName: passenger1FirstName,
		passenger1LastName: passenger1LastName,
		passenger2FirstName: passenger2FirstName,
		passenger2LastName: passenger2LastName,
		airline: airline,
		flightNumber: flightNumber
	};
};

exports.default = (0, _reactRedux.connect)(mapStateToProps, {
	scanBoardingPass: _actions.scanBoardingPass, alternateBoardingPassInput: _actions.alternateBoardingPassInput
})(ScanBoardingPass);
}, 565, null, "Runner_SNA/src/components/ScanBoardingPass.js");
__d(/* react-native-camera/index.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.constants = undefined;

var _react = require(282    ); // 282 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(12            ); // 12 = react-native

var CameraManager = _reactNative.NativeModules.CameraManager || _reactNative.NativeModules.CameraModule;
var CAMERA_REF = 'camera';

function convertNativeProps(props) {
  var newProps = babelHelpers.extends({}, props);
  if (typeof props.aspect === 'string') {
    newProps.aspect = Camera.constants.Aspect[props.aspect];
  }

  if (typeof props.flashMode === 'string') {
    newProps.flashMode = Camera.constants.FlashMode[props.flashMode];
  }

  if (typeof props.orientation === 'string') {
    newProps.orientation = Camera.constants.Orientation[props.orientation];
  }

  if (typeof props.torchMode === 'string') {
    newProps.torchMode = Camera.constants.TorchMode[props.torchMode];
  }

  if (typeof props.type === 'string') {
    newProps.type = Camera.constants.Type[props.type];
  }

  if (typeof props.captureQuality === 'string') {
    newProps.captureQuality = Camera.constants.CaptureQuality[props.captureQuality];
  }

  if (typeof props.captureMode === 'string') {
    newProps.captureMode = Camera.constants.CaptureMode[props.captureMode];
  }

  if (typeof props.captureTarget === 'string') {
    newProps.captureTarget = Camera.constants.CaptureTarget[props.captureTarget];
  }

  if (typeof props.onBarCodeRead !== 'function') {
    newProps.barCodeTypes = [];
  }

  newProps.barcodeScannerEnabled = typeof props.onBarCodeRead === 'function';

  return newProps;
}

var Camera = function (_Component) {
  babelHelpers.inherits(Camera, _Component);
  babelHelpers.createClass(Camera, [{
    key: 'setNativeProps',
    value: function setNativeProps(props) {
      this.refs[CAMERA_REF].setNativeProps(props);
    }
  }]);

  function Camera() {
    babelHelpers.classCallCheck(this, Camera);

    var _this = babelHelpers.possibleConstructorReturn(this, (Camera.__proto__ || Object.getPrototypeOf(Camera)).call(this));

    _this._onBarCodeRead = function (data) {
      if (_this.props.onBarCodeRead) {
        _this.props.onBarCodeRead(data);
      }
    };

    _this.state = {
      isAuthorized: false,
      isRecording: false
    };
    return _this;
  }

  babelHelpers.createClass(Camera, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      var _convertNativeProps, captureMode, hasVideoAndAudio, check, isAuthorized;

      return regeneratorRuntime.async(function componentWillMount$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this._addOnBarCodeReadListener();

              _convertNativeProps = convertNativeProps({ captureMode: this.props.captureMode }), captureMode = _convertNativeProps.captureMode;
              hasVideoAndAudio = this.props.captureAudio && captureMode === Camera.constants.CaptureMode.video;
              check = hasVideoAndAudio ? Camera.checkDeviceAuthorizationStatus : Camera.checkVideoAuthorizationStatus;

              if (!check) {
                _context.next = 9;
                break;
              }

              _context.next = 7;
              return regeneratorRuntime.awrap(check());

            case 7:
              isAuthorized = _context.sent;

              this.setState({ isAuthorized: isAuthorized });

            case 9:
            case 'end':
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this._removeOnBarCodeReadListener();

      if (this.state.isRecording) {
        this.stopCapture();
      }
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(newProps) {
      var onBarCodeRead = this.props.onBarCodeRead;

      if (onBarCodeRead && !newProps.onBarCodeRead) {
        this._addOnBarCodeReadListener(newProps);
      }
    }
  }, {
    key: '_addOnBarCodeReadListener',
    value: function _addOnBarCodeReadListener(props) {
      var _ref = props || this.props,
          onBarCodeRead = _ref.onBarCodeRead;

      this._removeOnBarCodeReadListener();
      if (onBarCodeRead) {
        this.cameraBarCodeReadListener = _reactNative.Platform.select({
          ios: _reactNative.NativeAppEventEmitter.addListener('CameraBarCodeRead', this._onBarCodeRead),
          android: _reactNative.DeviceEventEmitter.addListener('CameraBarCodeReadAndroid', this._onBarCodeRead)
        });
      }
    }
  }, {
    key: '_removeOnBarCodeReadListener',
    value: function _removeOnBarCodeReadListener() {
      var listener = this.cameraBarCodeReadListener;
      if (listener) {
        listener.remove();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var style = [styles.base, this.props.style];
      var nativeProps = convertNativeProps(this.props);

      return _react2.default.createElement(RCTCamera, babelHelpers.extends({ ref: CAMERA_REF }, nativeProps));
    }
  }, {
    key: 'capture',
    value: function capture(options) {
      var props = convertNativeProps(this.props);
      options = babelHelpers.extends({
        audio: props.captureAudio,
        barCodeTypes: props.barCodeTypes,
        mode: props.captureMode,
        playSoundOnCapture: props.playSoundOnCapture,
        target: props.captureTarget,
        quality: props.captureQuality,
        type: props.type,
        title: '',
        description: '',
        mirrorImage: props.mirrorImage
      }, options);

      if (options.mode === Camera.constants.CaptureMode.video) {
        options.totalSeconds = options.totalSeconds > -1 ? options.totalSeconds : -1;
        options.preferredTimeScale = options.preferredTimeScale || 30;
        this.setState({ isRecording: true });
      }

      return CameraManager.capture(options);
    }
  }, {
    key: 'stopCapture',
    value: function stopCapture() {
      if (this.state.isRecording) {
        this.setState({ isRecording: false });
        return CameraManager.stopCapture();
      }
      return Promise.resolve("Not Recording.");
    }
  }, {
    key: 'getFOV',
    value: function getFOV() {
      return CameraManager.getFOV();
    }
  }, {
    key: 'hasFlash',
    value: function hasFlash() {
      if (_reactNative.Platform.OS === 'android') {
        var props = convertNativeProps(this.props);
        return CameraManager.hasFlash({
          type: props.type
        });
      }
      return CameraManager.hasFlash();
    }
  }]);
  return Camera;
}(_react.Component);

Camera.constants = {
  Aspect: CameraManager.Aspect,
  BarCodeType: CameraManager.BarCodeType,
  Type: CameraManager.Type,
  CaptureMode: CameraManager.CaptureMode,
  CaptureTarget: CameraManager.CaptureTarget,
  CaptureQuality: CameraManager.CaptureQuality,
  Orientation: CameraManager.Orientation,
  FlashMode: CameraManager.FlashMode,
  TorchMode: CameraManager.TorchMode
};
Camera.propTypes = babelHelpers.extends({}, _reactNative.View.propTypes, {
  aspect: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.number]),
  captureAudio: _react.PropTypes.bool,
  captureMode: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.number]),
  captureQuality: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.number]),
  captureTarget: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.number]),
  defaultOnFocusComponent: _react.PropTypes.bool,
  flashMode: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.number]),
  keepAwake: _react.PropTypes.bool,
  onBarCodeRead: _react.PropTypes.func,
  barcodeScannerEnabled: _react.PropTypes.bool,
  onFocusChanged: _react.PropTypes.func,
  onZoomChanged: _react.PropTypes.func,
  mirrorImage: _react.PropTypes.bool,
  barCodeTypes: _react.PropTypes.array,
  orientation: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.number]),
  playSoundOnCapture: _react.PropTypes.bool,
  torchMode: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.number]),
  type: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.number])
});
Camera.defaultProps = {
  aspect: CameraManager.Aspect.fill,
  type: CameraManager.Type.back,
  orientation: CameraManager.Orientation.auto,
  captureAudio: false,
  captureMode: CameraManager.CaptureMode.still,
  captureTarget: CameraManager.CaptureTarget.cameraRoll,
  captureQuality: CameraManager.CaptureQuality.high,
  defaultOnFocusComponent: true,
  flashMode: CameraManager.FlashMode.off,
  playSoundOnCapture: true,
  torchMode: CameraManager.TorchMode.off,
  mirrorImage: false,
  barCodeTypes: Object.values(CameraManager.BarCodeType)
};
Camera.checkDeviceAuthorizationStatus = CameraManager.checkDeviceAuthorizationStatus;
Camera.checkVideoAuthorizationStatus = CameraManager.checkVideoAuthorizationStatus;
Camera.checkAudioAuthorizationStatus = CameraManager.checkAudioAuthorizationStatus;
exports.default = Camera;
var constants = exports.constants = Camera.constants;

var RCTCamera = (0, _reactNative.requireNativeComponent)('RCTCamera', Camera);

var styles = _reactNative.StyleSheet.create({
  base: {}
});
}, 566, null, "react-native-camera/index.js");
__d(/* lodash/lodash.js */function(global, require, module, exports) {/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
;(function () {
  var undefined;

  var VERSION = '4.17.4';

  var LARGE_ARRAY_SIZE = 200;

  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
      FUNC_ERROR_TEXT = 'Expected a function';

  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  var MAX_MEMOIZE_SIZE = 500;

  var PLACEHOLDER = '__lodash_placeholder__';

  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  var WRAP_BIND_FLAG = 1,
      WRAP_BIND_KEY_FLAG = 2,
      WRAP_CURRY_BOUND_FLAG = 4,
      WRAP_CURRY_FLAG = 8,
      WRAP_CURRY_RIGHT_FLAG = 16,
      WRAP_PARTIAL_FLAG = 32,
      WRAP_PARTIAL_RIGHT_FLAG = 64,
      WRAP_ARY_FLAG = 128,
      WRAP_REARG_FLAG = 256,
      WRAP_FLIP_FLAG = 512;

  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  var wrapFlags = [['ary', WRAP_ARY_FLAG], ['bind', WRAP_BIND_FLAG], ['bindKey', WRAP_BIND_KEY_FLAG], ['curry', WRAP_CURRY_FLAG], ['curryRight', WRAP_CURRY_RIGHT_FLAG], ['flip', WRAP_FLIP_FLAG], ['partial', WRAP_PARTIAL_FLAG], ['partialRight', WRAP_PARTIAL_RIGHT_FLAG], ['rearg', WRAP_REARG_FLAG]];

  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      domExcTag = '[object DOMException]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
      reUnescapedHtml = /[&<>"']/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      reLeadingDot = /^\./,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  var reTrim = /^\s+|\s+$/g,
      reTrimStart = /^\s+/,
      reTrimEnd = /\s+$/;

  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;

  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  var reEscapeChar = /\\(\\)?/g;

  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  var reFlags = /\w*$/;

  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  var reIsBinary = /^0b[01]+$/i;

  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  var reIsOctal = /^0o[0-7]+$/i;

  var reIsUint = /^(?:0|[1-9]\d*)$/;

  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  var reNoMatch = /($^)/;

  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  var rsApos = '[\'\u2019]',
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsOrdLower = '\\d*(?:(?:1st|2nd|3rd|(?![123])\\dth)\\b)',
      rsOrdUpper = '\\d*(?:(?:1ST|2ND|3RD|(?![123])\\dTH)\\b)',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  var reApos = RegExp(rsApos, 'g');

  var reComboMark = RegExp(rsCombo, 'g');

  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  var reUnicodeWord = RegExp([rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')', rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')', rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower, rsUpper + '+' + rsOptContrUpper, rsOrdUpper, rsOrdLower, rsDigits, rsEmoji].join('|'), 'g');

  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + ']');

  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  var contextProps = ['Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array', 'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object', 'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array', 'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap', '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'];

  var templateCounter = -1;

  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;

  var deburredLetters = {
    '\xc0': 'A', '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a', '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C', '\xe7': 'c',
    '\xd0': 'D', '\xf0': 'd',
    '\xc8': 'E', '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e', '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcc': 'I', '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xec': 'i', '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N', '\xf1': 'n',
    '\xd2': 'O', '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o', '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U', '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u', '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y', '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss',

    '\u0100': 'A', '\u0102': 'A', '\u0104': 'A',
    '\u0101': 'a', '\u0103': 'a', '\u0105': 'a',
    '\u0106': 'C', '\u0108': 'C', '\u010A': 'C', '\u010C': 'C',
    '\u0107': 'c', '\u0109': 'c', '\u010B': 'c', '\u010D': 'c',
    '\u010E': 'D', '\u0110': 'D', '\u010F': 'd', '\u0111': 'd',
    '\u0112': 'E', '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011A': 'E',
    '\u0113': 'e', '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011B': 'e',
    '\u011C': 'G', '\u011E': 'G', '\u0120': 'G', '\u0122': 'G',
    '\u011D': 'g', '\u011F': 'g', '\u0121': 'g', '\u0123': 'g',
    '\u0124': 'H', '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    '\u0128': 'I', '\u012A': 'I', '\u012C': 'I', '\u012E': 'I', '\u0130': 'I',
    '\u0129': 'i', '\u012B': 'i', '\u012D': 'i', '\u012F': 'i', '\u0131': 'i',
    '\u0134': 'J', '\u0135': 'j',
    '\u0136': 'K', '\u0137': 'k', '\u0138': 'k',
    '\u0139': 'L', '\u013B': 'L', '\u013D': 'L', '\u013F': 'L', '\u0141': 'L',
    '\u013A': 'l', '\u013C': 'l', '\u013E': 'l', '\u0140': 'l', '\u0142': 'l',
    '\u0143': 'N', '\u0145': 'N', '\u0147': 'N', '\u014A': 'N',
    '\u0144': 'n', '\u0146': 'n', '\u0148': 'n', '\u014B': 'n',
    '\u014C': 'O', '\u014E': 'O', '\u0150': 'O',
    '\u014D': 'o', '\u014F': 'o', '\u0151': 'o',
    '\u0154': 'R', '\u0156': 'R', '\u0158': 'R',
    '\u0155': 'r', '\u0157': 'r', '\u0159': 'r',
    '\u015A': 'S', '\u015C': 'S', '\u015E': 'S', '\u0160': 'S',
    '\u015B': 's', '\u015D': 's', '\u015F': 's', '\u0161': 's',
    '\u0162': 'T', '\u0164': 'T', '\u0166': 'T',
    '\u0163': 't', '\u0165': 't', '\u0167': 't',
    '\u0168': 'U', '\u016A': 'U', '\u016C': 'U', '\u016E': 'U', '\u0170': 'U', '\u0172': 'U',
    '\u0169': 'u', '\u016B': 'u', '\u016D': 'u', '\u016F': 'u', '\u0171': 'u', '\u0173': 'u',
    '\u0174': 'W', '\u0175': 'w',
    '\u0176': 'Y', '\u0177': 'y', '\u0178': 'Y',
    '\u0179': 'Z', '\u017B': 'Z', '\u017D': 'Z',
    '\u017A': 'z', '\u017C': 'z', '\u017E': 'z',
    '\u0132': 'IJ', '\u0133': 'ij',
    '\u0152': 'Oe', '\u0153': 'oe',
    '\u0149': "'n", '\u017F': 's'
  };

  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
  };

  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  var root = freeGlobal || freeSelf || Function('return this')();

  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

  var moduleExports = freeModule && freeModule.exports === freeExports;

  var freeProcess = moduleExports && freeGlobal.process;

  var nodeUtil = function () {
    try {
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }();

  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
      nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  function addMapEntry(map, pair) {
    map.set(pair[0], pair[1]);
    return map;
  }

  function addSetEntry(set, value) {
    set.add(value);
    return set;
  }

  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0:
        return func.call(thisArg);
      case 1:
        return func.call(thisArg, args[0]);
      case 2:
        return func.call(thisArg, args[0], args[1]);
      case 3:
        return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  function arrayEachRight(array, iteratee) {
    var length = array == null ? 0 : array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  function arrayEvery(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  var asciiSize = baseProperty('length');

  function asciiToArray(string) {
    return string.split('');
  }

  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function (value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }

  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while (fromRight ? index-- : ++index < length) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  function baseIndexOf(array, value, fromIndex) {
    return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  function baseIsNaN(value) {
    return value !== value;
  }

  function baseMean(array, iteratee) {
    var length = array == null ? 0 : array.length;
    return length ? baseSum(array, iteratee) / length : NAN;
  }

  function baseProperty(key) {
    return function (object) {
      return object == null ? undefined : object[key];
    };
  }

  function basePropertyOf(object) {
    return function (key) {
      return object == null ? undefined : object[key];
    };
  }

  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function (value, index, collection) {
      accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : result + current;
      }
    }
    return result;
  }

  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  function baseToPairs(object, props) {
    return arrayMap(props, function (key) {
      return [key, object[key]];
    });
  }

  function baseUnary(func) {
    return function (value) {
      return func(value);
    };
  }

  function baseValues(object, props) {
    return arrayMap(props, function (key) {
      return object[key];
    });
  }

  function cacheHas(cache, key) {
    return cache.has(key);
  }

  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        ++result;
      }
    }
    return result;
  }

  var deburrLetter = basePropertyOf(deburredLetters);

  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function (value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  function overArg(func, transform) {
    return function (arg) {
      return func(transform(arg));
    };
  }

  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function (value) {
      result[++index] = value;
    });
    return result;
  }

  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function (value) {
      result[++index] = [value, value];
    });
    return result;
  }

  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  function strictLastIndexOf(array, value, fromIndex) {
    var index = fromIndex + 1;
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return index;
  }

  function stringSize(string) {
    return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
  }

  function stringToArray(string) {
    return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
  }

  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }

  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }

  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  var runInContext = function runInContext(context) {
    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    var coreJsData = context['__core-js_shared__'];

    var funcToString = funcProto.toString;

    var hasOwnProperty = objectProto.hasOwnProperty;

    var idCounter = 0;

    var maskSrcKey = function () {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? 'Symbol(src)_1.' + uid : '';
    }();

    var nativeObjectToString = objectProto.toString;

    var objectCtorString = funcToString.call(Object);

    var oldDash = root._;

    var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');

    var Buffer = moduleExports ? context.Buffer : undefined,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
        getPrototype = overArg(Object.getPrototypeOf, Object),
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        spreadableSymbol = Symbol ? typeof Symbol === 'function' ? Symbol.isConcatSpreadable : '@@isConcatSpreadable' : undefined,
        symIterator = Symbol ? typeof Symbol === 'function' ? Symbol.iterator : '@@iterator' : undefined,
        symToStringTag = Symbol ? typeof Symbol === 'function' ? Symbol.toStringTag : '@@toStringTag' : undefined;

    var defineProperty = function () {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }();

    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
        ctxNow = Date && Date.now !== root.Date.now && Date.now,
        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = overArg(Object.keys, Object),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = Date.now,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    var metaMap = WeakMap && new WeakMap();

    var realNames = {};

    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    var symbolProto = Symbol ? typeof Symbol === 'function' ? Symbol.prototype : '@@prototype' : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    var baseCreate = function () {
      function object() {}
      return function (proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object();
        object.prototype = undefined;
        return result;
      };
    }();

    function baseLodash() {}

    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    lodash.templateSettings = {
      'escape': reEscape,

      'evaluate': reEvaluate,

      'interpolate': reInterpolate,

      'variable': '',

      'imports': {
        '_': lodash
      }
    };

    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : start - 1,
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || !isRight && arrLength == length && takeCount == length) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer: while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }

    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
    }

    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
      return this;
    }

    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash(),
        'map': new (Map || ListCache)(),
        'string': new Hash()
      };
    }

    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache();
      while (++index < length) {
        this.add(values[index]);
      }
    }

    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    function stackClear() {
      this.__data__ = new ListCache();
      this.size = 0;
    }

    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    function stackGet(key) {
      return this.__data__.get(key);
    }

    function stackHas(key) {
      return this.__data__.has(key);
    }

    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == 'length' || isBuff && (key == 'offset' || key == 'parent') || isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }

    function arraySample(array) {
      var length = array.length;
      return length ? array[baseRandom(0, length - 1)] : undefined;
    }

    function arraySampleSize(array, n) {
      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    }

    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }

    function assignMergeValue(object, key, value) {
      if (value !== undefined && !eq(object[key], value) || value === undefined && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }

    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }

    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function (value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }

    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    function baseAt(object, paths) {
      var index = -1,
          length = paths.length,
          result = Array(length),
          skip = object == null;

      while (++index < length) {
        result[index] = skip ? undefined : get(object, paths[index]);
      }
      return result;
    }

    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG,
          isFlat = bitmask & CLONE_FLAT_FLAG,
          isFull = bitmask & CLONE_SYMBOLS_FLAG;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || isFunc && !object) {
          result = isFlat || isFunc ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, baseClone, isDeep);
        }
      }

      stack || (stack = new Stack());
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;

      var props = isArr ? undefined : keysFunc(value);
      arrayEach(props || value, function (subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }

        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    function baseConforms(source) {
      var props = keys(source);
      return function (object) {
        return baseConformsTo(object, source, props);
      };
    }

    function baseConformsTo(object, source, props) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (length--) {
        var key = props[length],
            predicate = source[key],
            value = object[key];

        if (value === undefined && !(key in object) || !predicate(value)) {
          return false;
        }
      }
      return true;
    }

    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function () {
        func.apply(undefined, args);
      }, wait);
    }

    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      } else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer: while (++index < length) {
        var value = array[index],
            computed = iteratee == null ? value : iteratee(value);

        value = comparator || value !== 0 ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        } else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    var baseEach = createBaseEach(baseForOwn);

    var baseEachRight = createBaseEach(baseForOwnRight, true);

    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function (value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined ? current === current && !isSymbol(current) : comparator(current, computed))) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : length + start;
      }
      end = end === undefined || end > length ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function (value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    var baseFor = createBaseFor();

    var baseForRight = createBaseFor(true);

    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    function baseFunctions(object, props) {
      return arrayFilter(props, function (key) {
        return isFunction(object[key]);
      });
    }

    function baseGet(object, path) {
      path = castPath(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return index && index == length ? object : undefined;
    }

    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }

    function baseGt(value, other) {
      return value > other;
    }

    function baseHas(object, key) {
      return object != null && hasOwnProperty.call(object, key);
    }

    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer: while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = comparator || value !== 0 ? value : 0;
        if (!(seen ? cacheHas(seen, computed) : includes(result, computed, comparator))) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache ? cacheHas(cache, computed) : includes(arrays[othIndex], computed, comparator))) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function (value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    function baseInvoke(object, path, args) {
      path = castPath(path, object);
      object = parent(object, path);
      var func = object == null ? object : object[toKey(last(path))];
      return func == null ? undefined : apply(func, object, args);
    }

    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }

    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    }

    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }

    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = objIsArr ? arrayTag : getTag(object),
          othTag = othIsArr ? arrayTag : getTag(other);

      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;

      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack());
        return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack());
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack());
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack();
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) {
            return false;
          }
        }
      }
      return true;
    }

    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    function baseIsRegExp(value) {
      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }

    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    function baseIsTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    function baseIteratee(value) {
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
      }
      return property(value);
    }

    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    function baseLt(value, other) {
      return value < other;
    }

    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function (value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function (object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function (object) {
        var objValue = get(object, path);
        return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function (srcValue, key) {
        if (isObject(srcValue)) {
          stack || (stack = new Stack());
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        } else {
          var newValue = customizer ? customizer(object[key], srcValue, key + '', object, source, stack) : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }

    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = object[key],
          srcValue = source[key],
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer ? customizer(objValue, srcValue, key + '', object, source, stack) : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          } else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          } else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          } else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          } else {
            newValue = [];
          }
        } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          } else if (!isObject(objValue) || srcIndex && isFunction(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        } else {
          isCommon = false;
        }
      }
      if (isCommon) {
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }

    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined;
    }

    function baseOrderBy(collection, iteratees, orders) {
      var index = -1;
      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));

      var result = baseMap(collection, function (value, key, collection) {
        var criteria = arrayMap(iteratees, function (iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function (object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    function basePick(object, paths) {
      return basePickBy(object, paths, function (value, path) {
        return hasIn(object, path);
      });
    }

    function basePickBy(object, paths, predicate) {
      var index = -1,
          length = paths.length,
          result = {};

      while (++index < length) {
        var path = paths[index],
            value = baseGet(object, path);

        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }
      return result;
    }

    function basePropertyDeep(path) {
      return function (object) {
        return baseGet(object, path);
      };
    }

    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else {
            baseUnset(array, index);
          }
        }
      }
      return array;
    }

    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }

      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + '');
    }

    function baseSample(collection) {
      return arraySample(values(collection));
    }

    function baseSampleSize(collection, n) {
      var array = values(collection);
      return shuffleSelf(array, baseClamp(n, 0, array.length));
    }

    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]),
            newValue = value;

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;
          if (newValue === undefined) {
            newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    var baseSetData = !metaMap ? identity : function (func, data) {
      metaMap.set(func, data);
      return func;
    };

    var baseSetToString = !defineProperty ? identity : function (func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }

    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : length + start;
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : end - start >>> 0;
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function (value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array == null ? low : array.length;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = low + high >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      value = iteratee(value);

      var low = 0,
          high = array == null ? 0 : array.length,
          valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? computed <= value : computed < value;
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }

    function baseToString(value) {
      if (typeof value == 'string') {
        return value;
      }
      if (isArray(value)) {
        return arrayMap(value, baseToString) + '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = value + '';
      return result == '0' && 1 / value == -INFINITY ? '-0' : result;
    }

    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      } else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache();
      } else {
        seen = iteratee ? [] : result;
      }
      outer: while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = comparator || value !== 0 ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        } else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }

    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {}

      return isDrop ? baseSlice(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array, fromRight ? index + 1 : 0, fromRight ? length : index);
    }

    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function (result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    function baseXor(arrays, iteratee, comparator) {
      var length = arrays.length;
      if (length < 2) {
        return length ? baseUniq(arrays[0]) : [];
      }
      var index = -1,
          result = Array(length);

      while (++index < length) {
        var array = arrays[index],
            othIndex = -1;

        while (++othIndex < length) {
          if (othIndex != index) {
            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
          }
        }
      }
      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    }

    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }

    var castRest = baseRest;

    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return !start && end >= length ? array : baseSlice(array, start, end);
    }

    var clearTimeout = ctxClearTimeout || function (id) {
      return root.clearTimeout(id);
    };

    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    function cloneMap(map, isDeep, cloneFunc) {
      var array = isDeep ? cloneFunc(mapToArray(map), CLONE_DEEP_FLAG) : mapToArray(map);
      return arrayReduce(array, addMapEntry, new map.constructor());
    }

    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    function cloneSet(set, isDeep, cloneFunc) {
      var array = isDeep ? cloneFunc(setToArray(set), CLONE_DEEP_FLAG) : setToArray(set);
      return arrayReduce(array, addSetEntry, new set.constructor());
    }

    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
          return 1;
        }
        if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }

      return object.index - other.index;
    }

    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }

    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }

    function createAggregator(setter, initializer) {
      return function (collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
      };
    }

    function createAssigner(assigner) {
      return baseRest(function (object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    function createBaseEach(eachFunc, fromRight) {
      return function (collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while (fromRight ? index-- : ++index < length) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    function createBaseFor(fromRight) {
      return function (object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    function createCaseFirst(methodName) {
      return function (string) {
        string = toString(string);

        var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined;

        var chr = strSymbols ? strSymbols[0] : string.charAt(0);

        var trailing = strSymbols ? castSlice(strSymbols, 1).join('') : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    function createCompounder(callback) {
      return function (string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    function createCtor(Ctor) {
      return function () {
        var args = arguments;
        switch (args.length) {
          case 0:
            return new Ctor();
          case 1:
            return new Ctor(args[0]);
          case 2:
            return new Ctor(args[0], args[1]);
          case 3:
            return new Ctor(args[0], args[1], args[2]);
          case 4:
            return new Ctor(args[0], args[1], args[2], args[3]);
          case 5:
            return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6:
            return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7:
            return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        return isObject(result) ? result : thisBinding;
      };
    }

    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, undefined, args, holders, undefined, undefined, arity - length);
        }
        var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    function createFind(findIndexFunc) {
      return function (collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = getIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function predicate(key) {
            return iteratee(iterable[key], key, iterable);
          };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }

    function createFlow(fromRight) {
      return flatRest(function (funcs) {
        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
          }
        }
        return function () {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value)) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & WRAP_ARY_FLAG,
          isBind = bitmask & WRAP_BIND_FLAG,
          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
          isFlip = bitmask & WRAP_FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, thisArg, args, newHolders, argPos, ary, arity - length);
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    function createInverter(setter, toIteratee) {
      return function (object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    function createMathOperation(operator, defaultValue) {
      return function (value, other) {
        var result;
        if (value === undefined && other === undefined) {
          return defaultValue;
        }
        if (value !== undefined) {
          result = value;
        }
        if (other !== undefined) {
          if (result === undefined) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    function createOver(arrayFunc) {
      return flatRest(function (iteratees) {
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        return baseRest(function (args) {
          var thisArg = this;
          return arrayFunc(iteratees, function (iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    function createPadding(length, chars) {
      chars = chars === undefined ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return hasUnicode(chars) ? castSlice(stringToArray(result), 0, length).join('') : result.slice(0, length);
    }

    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = this && this !== root && this instanceof wrapper ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    function createRange(fromRight) {
      return function (start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }

        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined ? start < end ? 1 : -1 : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    function createRelationalOperation(operator) {
      return function (value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & WRAP_CURRY_FLAG,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
      }
      var newData = [func, bitmask, thisArg, newPartials, newHolders, newPartialsRight, newHoldersRight, argPos, ary, arity];

      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }

    function createRound(methodName) {
      var func = Math[methodName];
      return function (number, precision) {
        number = toNumber(number);
        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
        if (precision) {
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    var createSet = !(Set && 1 / setToArray(new Set([, -0]))[1] == INFINITY) ? noop : function (values) {
      return new Set(values);
    };

    function createToPairs(keysFunc) {
      return function (object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);

      var newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] === undefined ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }

    function customDefaultsAssignIn(objValue, srcValue, key, object) {
      if (objValue === undefined || eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key)) {
        return srcValue;
      }
      return objValue;
    }

    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }

    function customOmitClone(value) {
      return isPlainObject(value) ? undefined : value;
    }

    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }

      var stacked = stack.get(array);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var index = -1,
          result = true,
          seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;

      stack.set(array, other);
      stack.set(other, array);

      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }

        if (seen) {
          if (!arraySome(other, function (othValue, othIndex) {
            if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
            result = false;
            break;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          return object == other + '';

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }

          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;

          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }

      var stacked = stack.get(object);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
        }

        if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    function flatRest(func) {
      return setToString(overRest(func, undefined, flatten), func + '');
    }

    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    var getData = !metaMap ? noop : function (func) {
      return metaMap.get(func);
    };

    function getFuncName(func) {
      var result = func.name + '',
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
    }

    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag];

      try {
        value[symToStringTag] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }

    var getSymbols = !nativeGetSymbols ? stubArray : function (object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function (symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };

    var getSymbolsIn = !nativeGetSymbols ? stubArray : function (object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    var getTag = baseGetTag;

    if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
      getTag = function getTag(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString:
              return dataViewTag;
            case mapCtorString:
              return mapTag;
            case promiseCtorString:
              return promiseTag;
            case setCtorString:
              return setTag;
            case weakMapCtorString:
              return weakMapTag;
          }
        }
        return result;
      };
    }

    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':
            start += size;break;
          case 'dropRight':
            end -= size;break;
          case 'take':
            end = nativeMin(end, start + size);break;
          case 'takeRight':
            start = nativeMax(start, end - size);break;
        }
      }
      return { 'start': start, 'end': end };
    }

    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }

    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
    }

    function initCloneArray(array) {
      var length = array.length,
          result = array.constructor(length);

      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    function initCloneObject(object) {
      return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
    }

    function initCloneByTag(object, tag, cloneFunc, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag:case float64Tag:
        case int8Tag:case int16Tag:case int32Tag:
        case uint8Tag:case uint8ClampedTag:case uint16Tag:case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return cloneMap(object, isDeep, cloneFunc);

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return cloneSet(object, isDeep, cloneFunc);

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    function insertWrapDetails(source, details) {
      var length = details.length;
      if (!length) {
        return source;
      }
      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }

    function isFlattenable(value) {
      return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    function isIndex(value, length) {
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (typeof value == 'number' || reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
    }

    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number' ? isArrayLike(object) && isIndex(index, object.length) : type == 'string' && index in object) {
        return eq(object[index], value);
      }
      return false;
    }

    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
    }

    function isKeyable(value) {
      var type = typeof value;
      return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
    }

    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }

    var isMaskable = coreJsData ? isFunction : stubFalse;

    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;

      return value === proto;
    }

    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    function matchesStrictComparable(key, srcValue) {
      return function (object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue && (srcValue !== undefined || key in Object(object));
      };
    }

    function memoizeCapped(func) {
      var result = memoize(func, function (key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

      var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;

      if (!(isCommon || isCombo)) {
        return data;
      }

      if (srcBitmask & WRAP_BIND_FLAG) {
        data[2] = source[2];

        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
      }

      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }

      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }

      value = source[7];
      if (value) {
        data[7] = value;
      }

      if (srcBitmask & WRAP_ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }

      if (data[9] == null) {
        data[9] = source[9];
      }

      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    function overRest(func, start, transform) {
      start = nativeMax(start === undefined ? func.length - 1 : start, 0);
      return function () {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    var setData = shortOut(baseSetData);

    var setTimeout = ctxSetTimeout || function (func, wait) {
      return root.setTimeout(func, wait);
    };

    var setToString = shortOut(baseSetToString);

    function setWrapToString(wrapper, reference, bitmask) {
      var source = reference + '';
      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }

    function shortOut(func) {
      var count = 0,
          lastCalled = 0;

      return function () {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }

    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;

      size = size === undefined ? length : size;
      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];

        array[rand] = array[index];
        array[index] = value;
      }
      array.length = size;
      return array;
    }

    var stringToPath = memoizeCapped(function (string) {
      var result = [];
      if (reLeadingDot.test(string)) {
        result.push('');
      }
      string.replace(rePropName, function (match, number, quote, string) {
        result.push(quote ? string.replace(reEscapeChar, '$1') : number || match);
      });
      return result;
    });

    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = value + '';
      return result == '0' && 1 / value == -INFINITY ? '-0' : result;
    }

    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return func + '';
        } catch (e) {}
      }
      return '';
    }

    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function (pair) {
        var value = '_.' + pair[0];
        if (bitmask & pair[1] && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }

    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__ = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    function chunk(array, size, guard) {
      if (guard ? isIterateeCall(array, size, guard) : size === undefined) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array == null ? 0 : array.length;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, index += size);
      }
      return result;
    }

    function compact(array) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    function concat() {
      var length = arguments.length;
      if (!length) {
        return [];
      }
      var args = Array(length - 1),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }

    var difference = baseRest(function (array, values) {
      return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true)) : [];
    });

    var differenceBy = baseRest(function (array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2)) : [];
    });

    var differenceWith = baseRest(function (array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator) : [];
    });

    function drop(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = guard || n === undefined ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    function dropRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = guard || n === undefined ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    function dropRightWhile(array, predicate) {
      return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
    }

    function dropWhile(array, predicate) {
      return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
    }

    function fill(array, value, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }

    function findLastIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }

    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    function flattenDeep(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    function flattenDepth(array, depth) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    function fromPairs(pairs) {
      var index = -1,
          length = pairs == null ? 0 : pairs.length,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    function head(array) {
      return array && array.length ? array[0] : undefined;
    }

    function indexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }

    function initial(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 0, -1) : [];
    }

    var intersection = baseRest(function (arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
    });

    var intersectionBy = baseRest(function (arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee, 2)) : [];
    });

    var intersectionWith = baseRest(function (arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      comparator = typeof comparator == 'function' ? comparator : undefined;
      if (comparator) {
        mapped.pop();
      }
      return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined, comparator) : [];
    });

    function join(array, separator) {
      return array == null ? '' : nativeJoin.call(array, separator);
    }

    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }

    function lastIndexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return value === value ? strictLastIndexOf(array, value, index) : baseFindIndex(array, baseIsNaN, index, true);
    }

    function nth(array, n) {
      return array && array.length ? baseNth(array, toInteger(n)) : undefined;
    }

    var pull = baseRest(pullAll);

    function pullAll(array, values) {
      return array && array.length && values && values.length ? basePullAll(array, values) : array;
    }

    function pullAllBy(array, values, iteratee) {
      return array && array.length && values && values.length ? basePullAll(array, values, getIteratee(iteratee, 2)) : array;
    }

    function pullAllWith(array, values, comparator) {
      return array && array.length && values && values.length ? basePullAll(array, values, undefined, comparator) : array;
    }

    var pullAt = flatRest(function (array, indexes) {
      var length = array == null ? 0 : array.length,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function (index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    function reverse(array) {
      return array == null ? array : nativeReverse.call(array);
    }

    function slice(array, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      } else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    }

    function sortedIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    }

    function sortedLastIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    function sortedUniq(array) {
      return array && array.length ? baseSortedUniq(array) : [];
    }

    function sortedUniqBy(array, iteratee) {
      return array && array.length ? baseSortedUniq(array, getIteratee(iteratee, 2)) : [];
    }

    function tail(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 1, length) : [];
    }

    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = guard || n === undefined ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    function takeRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = guard || n === undefined ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    function takeRightWhile(array, predicate) {
      return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
    }

    function takeWhile(array, predicate) {
      return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
    }

    var union = baseRest(function (arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    var unionBy = baseRest(function (arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    });

    var unionWith = baseRest(function (arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    });

    function uniq(array) {
      return array && array.length ? baseUniq(array) : [];
    }

    function uniqBy(array, iteratee) {
      return array && array.length ? baseUniq(array, getIteratee(iteratee, 2)) : [];
    }

    function uniqWith(array, comparator) {
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return array && array.length ? baseUniq(array, undefined, comparator) : [];
    }

    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function (group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function (index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function (group) {
        return apply(iteratee, undefined, group);
      });
    }

    var without = baseRest(function (array, values) {
      return isArrayLikeObject(array) ? baseDifference(array, values) : [];
    });

    var xor = baseRest(function (arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    var xorBy = baseRest(function (arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    });

    var xorWith = baseRest(function (arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    var zip = baseRest(unzip);

    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    var zipWith = baseRest(function (arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    function thru(value, interceptor) {
      return interceptor(value);
    }

    var wrapperAt = flatRest(function (paths) {
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function interceptor(object) {
        return baseAt(object, paths);
      };

      if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function (array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    function wrapperChain() {
      return chain(this);
    }

    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    function wrapperToIterator() {
      return this;
    }

    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    var countBy = createAggregator(function (result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        ++result[key];
      } else {
        baseAssignValue(result, key, 1);
      }
    });

    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    var find = createFind(findIndex);

    var findLast = createFind(findLastIndex);

    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }

    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }

    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }

    var groupBy = createAggregator(function (result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });

    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
    }

    var invokeMap = baseRest(function (collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function (value) {
        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    var keyBy = createAggregator(function (result, value, key) {
      baseAssignValue(result, key, value);
    });

    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    var partition = createAggregator(function (result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function () {
      return [[], []];
    });

    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(getIteratee(predicate, 3)));
    }

    function sample(collection) {
      var func = isArray(collection) ? arraySample : baseSample;
      return func(collection);
    }

    function sampleSize(collection, n, guard) {
      if (guard ? isIterateeCall(collection, n, guard) : n === undefined) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
      return func(collection, n);
    }

    function shuffle(collection) {
      var func = isArray(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }

    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }
      var tag = getTag(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return baseKeys(collection).length;
    }

    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    var sortBy = baseRest(function (collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    var now = ctxNow || function () {
      return root.Date.now();
    };

    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function () {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = func && n == null ? func.length : n;
      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function () {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    var bind = baseRest(function (func, thisArg, partials) {
      var bitmask = WRAP_BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(func, bitmask, thisArg, partials, holders);
    });

    var bindKey = baseRest(function (object, key, partials) {
      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(key, bitmask, object, partials, holders);
    });

    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        lastInvokeTime = time;

        timerId = setTimeout(timerExpired, wait);

        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            result = wait - timeSinceLastCall;

        return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }

        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    var defer = baseRest(function (func, args) {
      return baseDelay(func, 1, args);
    });

    var delay = baseRest(function (func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    function flip(func) {
      return createWrap(func, WRAP_FLIP_FLAG);
    }

    function memoize(func, resolver) {
      if (typeof func != 'function' || resolver != null && typeof resolver != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function memoized() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache)();
      return memoized;
    }

    memoize.Cache = MapCache;

    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function () {
        var args = arguments;
        switch (args.length) {
          case 0:
            return !predicate.call(this);
          case 1:
            return !predicate.call(this, args[0]);
          case 2:
            return !predicate.call(this, args[0], args[1]);
          case 3:
            return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }

    function once(func) {
      return before(2, func);
    }

    var overArgs = castRest(function (func, transforms) {
      transforms = transforms.length == 1 && isArray(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

      var funcsLength = transforms.length;
      return baseRest(function (args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    var partial = baseRest(function (func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
    });

    var partialRight = baseRest(function (func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    var rearg = flatRest(function (func, indexes) {
      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
    });

    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? start : toInteger(start);
      return baseRest(func, start);
    }

    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start == null ? 0 : nativeMax(toInteger(start), 0);
      return baseRest(function (args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    function unary(func) {
      return ary(func, 1);
    }

    function wrap(value, wrapper) {
      return partial(castFunction(wrapper), value);
    }

    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }

    function cloneWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
    }

    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }

    function cloneDeepWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
    }

    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }

    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }

    var gt = createRelationalOperation(baseGt);

    var gte = createRelationalOperation(function (value, other) {
      return value >= other;
    });

    var isArguments = baseIsArguments(function () {
      return arguments;
    }()) ? baseIsArguments : function (value) {
      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
    };

    var isArray = Array.isArray;

    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    function isBoolean(value) {
      return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
    }

    var isBuffer = nativeIsBuffer || stubFalse;

    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    function isElement(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }

    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) && (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
    }

    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == errorTag || tag == domExcTag || typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value);
    }

    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }

      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    function isLength(value) {
      return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    function isNaN(value) {
      return isNumber(value) && value != +value;
    }

    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error(CORE_ERROR_TEXT);
      }
      return baseIsNative(value);
    }

    function isNull(value) {
      return value === null;
    }

    function isNil(value) {
      return value == null;
    }

    function isNumber(value) {
      return typeof value == 'number' || isObjectLike(value) && baseGetTag(value) == numberTag;
    }

    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
    }

    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    function isString(value) {
      return typeof value == 'string' || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
    }

    function isSymbol(value) {
      return typeof value == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;
    }

    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    function isUndefined(value) {
      return value === undefined;
    }

    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    function isWeakSet(value) {
      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    }

    var lt = createRelationalOperation(baseLt);

    var lte = createRelationalOperation(function (value, other) {
      return value <= other;
    });

    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (symIterator && value[symIterator]) {
        return iteratorToArray(value[symIterator]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;

      return func(value);
    }

    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = value < 0 ? -1 : 1;
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? remainder ? result - remainder : result : 0;
    }

    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? other + '' : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, '');
      var isBinary = reIsBinary.test(value);
      return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
    }

    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    function toSafeInteger(value) {
      return value ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) : value === 0 ? value : 0;
    }

    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    var assign = createAssigner(function (object, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    var assignIn = createAssigner(function (object, source) {
      copyObject(source, keysIn(source), object);
    });

    var assignInWith = createAssigner(function (object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    var assignWith = createAssigner(function (object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    var at = flatRest(baseAt);

    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties == null ? result : baseAssign(result, properties);
    }

    var defaults = baseRest(function (args) {
      args.push(undefined, customDefaultsAssignIn);
      return apply(assignInWith, undefined, args);
    });

    var defaultsDeep = baseRest(function (args) {
      args.push(undefined, customDefaultsMerge);
      return apply(mergeWith, undefined, args);
    });

    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }

    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }

    function forIn(object, iteratee) {
      return object == null ? object : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }

    function forInRight(object, iteratee) {
      return object == null ? object : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }

    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }

    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }

    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    var invert = createInverter(function (result, value, key) {
      result[value] = key;
    }, constant(identity));

    var invertBy = createInverter(function (result, value, key) {
      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    var invoke = baseRest(baseInvoke);

    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function (value, key, object) {
        baseAssignValue(result, iteratee(value, key, object), value);
      });
      return result;
    }

    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function (value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }

    var merge = createAssigner(function (object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    var mergeWith = createAssigner(function (object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    var omit = flatRest(function (object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function (path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });

    function omitBy(object, predicate) {
      return pickBy(object, negate(getIteratee(predicate)));
    }

    var pick = flatRest(function (object, paths) {
      return object == null ? {} : basePick(object, paths);
    });

    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function (prop) {
        return [prop];
      });
      predicate = getIteratee(predicate);
      return basePickBy(object, props, function (value, path) {
        return predicate(value, path[0]);
      });
    }

    function result(object, path, defaultValue) {
      path = castPath(path, object);

      var index = -1,
          length = path.length;

      if (!length) {
        length = 1;
        object = undefined;
      }
      while (++index < length) {
        var value = object == null ? undefined : object[toKey(path[index])];
        if (value === undefined) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    var toPairs = createToPairs(keys);

    var toPairsIn = createToPairs(keysIn);

    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

      iteratee = getIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor() : [];
        } else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        } else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function (value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }

    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }

    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    function inRange(number, start, end) {
      start = toFinite(start);
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        } else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      } else {
        lower = toFinite(lower);
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1))), upper);
      }
      return baseRandom(lower, upper);
    }

    var camelCase = createCompounder(function (result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined ? length : baseClamp(toInteger(position), 0, length);

      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }

    function escape(string) {
      string = toString(string);
      return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
    }

    function escapeRegExp(string) {
      string = toString(string);
      return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, '\\$&') : string;
    }

    var kebabCase = createCompounder(function (result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    var lowerCase = createCompounder(function (result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    var lowerFirst = createCaseFirst('toLowerCase');

    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars);
    }

    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return length && strLength < length ? string + createPadding(length - strLength, chars) : string;
    }

    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
    }

    function parseInt(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
    }

    function repeat(string, n, guard) {
      if (guard ? isIterateeCall(string, n, guard) : n === undefined) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    var snakeCase = createCompounder(function (result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined;
      }
      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (typeof separator == 'string' || separator != null && !isRegExp(separator))) {
        separator = baseToString(separator);
        if (!separator && hasUnicode(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return string.split(separator, limit);
    }

    var startCase = createCompounder(function (result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    function startsWith(string, target, position) {
      string = toString(string);
      position = position == null ? 0 : baseClamp(toInteger(position), 0, string.length);

      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }

    function template(string, options, guard) {
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, customDefaultsAssignIn);

      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      var reDelimiters = RegExp((options.escape || reNoMatch).source + '|' + interpolate.source + '|' + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' + (options.evaluate || reNoMatch).source + '|$', 'g');

      var sourceURL = '//# sourceURL=' + ('sourceURL' in options ? options.sourceURL : 'lodash.templateSources[' + ++templateCounter + ']') + '\n';

      string.replace(reDelimiters, function (match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        return match;
      });

      source += "';\n";

      var variable = options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }

      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source).replace(reEmptyStringMiddle, '$1').replace(reEmptyStringTrailing, '$1;');

      source = 'function(' + (variable || 'obj') + ') {\n' + (variable ? '' : 'obj || (obj = {});\n') + "var __t, __p = ''" + (isEscaping ? ', __e = _.escape' : '') + (isEvaluating ? ', __j = Array.prototype.join;\n' + "function print() { __p += __j.call(arguments, '') }\n" : ';\n') + source + 'return __p\n}';

      var result = attempt(function () {
        return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
      });

      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    function toLower(value) {
      return toString(value).toLowerCase();
    }

    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrim, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimEnd, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (hasUnicode(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols ? castSlice(strSymbols, 0, end).join('') : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += result.length - end;
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while (match = separator.exec(substring)) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    function unescape(string) {
      string = toString(string);
      return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
    }

    var upperCase = createCompounder(function (result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    var upperFirst = createCaseFirst('toUpperCase');

    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }

    var attempt = baseRest(function (func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    var bindAll = flatRest(function (object, methodNames) {
      arrayEach(methodNames, function (key) {
        key = toKey(key);
        baseAssignValue(object, key, bind(object[key], object));
      });
      return object;
    });

    function cond(pairs) {
      var length = pairs == null ? 0 : pairs.length,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function (pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return baseRest(function (args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    function conforms(source) {
      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
    }

    function constant(value) {
      return function () {
        return value;
      };
    }

    function defaultTo(value, defaultValue) {
      return value == null || value !== value ? defaultValue : value;
    }

    var flow = createFlow();

    var flowRight = createFlow(true);

    function identity(value) {
      return value;
    }

    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
    }

    function matches(source) {
      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
    }

    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
    }

    var method = baseRest(function (path, args) {
      return function (object) {
        return baseInvoke(object, path, args);
      };
    });

    var methodOf = baseRest(function (object, args) {
      return function (path) {
        return baseInvoke(object, path, args);
      };
    });

    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null && !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function (methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function () {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    function noop() {}

    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function (args) {
        return baseNth(args, n);
      });
    }

    var over = createOver(arrayMap);

    var overEvery = createOver(arrayEvery);

    var overSome = createOver(arraySome);

    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    function propertyOf(object) {
      return function (path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    var range = createRange();

    var rangeRight = createRange(true);

    function stubArray() {
      return [];
    }

    function stubFalse() {
      return false;
    }

    function stubObject() {
      return {};
    }

    function stubString() {
      return '';
    }

    function stubTrue() {
      return true;
    }

    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    }

    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    var add = createMathOperation(function (augend, addend) {
      return augend + addend;
    }, 0);

    var ceil = createRound('ceil');

    var divide = createMathOperation(function (dividend, divisor) {
      return dividend / divisor;
    }, 1);

    var floor = createRound('floor');

    function max(array) {
      return array && array.length ? baseExtremum(array, identity, baseGt) : undefined;
    }

    function maxBy(array, iteratee) {
      return array && array.length ? baseExtremum(array, getIteratee(iteratee, 2), baseGt) : undefined;
    }

    function mean(array) {
      return baseMean(array, identity);
    }

    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee, 2));
    }

    function min(array) {
      return array && array.length ? baseExtremum(array, identity, baseLt) : undefined;
    }

    function minBy(array, iteratee) {
      return array && array.length ? baseExtremum(array, getIteratee(iteratee, 2), baseLt) : undefined;
    }

    var multiply = createMathOperation(function (multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);

    var round = createRound('round');

    var subtract = createMathOperation(function (minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);

    function sum(array) {
      return array && array.length ? baseSum(array, identity) : 0;
    }

    function sumBy(array, iteratee) {
      return array && array.length ? baseSum(array, getIteratee(iteratee, 2)) : 0;
    }

    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    mixin(lodash, lodash);

    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.conformsTo = conformsTo;
    lodash.deburr = deburr;
    lodash.defaultTo = defaultTo;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, function () {
      var source = {};
      baseForOwn(lodash, function (func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }(), { 'chain': false });

    lodash.VERSION = VERSION;

    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function (methodName) {
      lodash[methodName].placeholder = lodash;
    });

    arrayEach(['drop', 'take'], function (methodName, index) {
      LazyWrapper.prototype[methodName] = function (n) {
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone();

        if (result.__filtered__) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function (n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    arrayEach(['filter', 'map', 'takeWhile'], function (methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function (iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    arrayEach(['head', 'last'], function (methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function () {
        return this[takeName](1).value()[0];
      };
    });

    arrayEach(['initial', 'tail'], function (methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function () {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function () {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function (predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function (predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = baseRest(function (path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function (value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function (predicate) {
      return this.filter(negate(getIteratee(predicate)));
    };

    LazyWrapper.prototype.slice = function (start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function (predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function () {
      return this.take(MAX_ARRAY_LENGTH);
    };

    baseForOwn(LazyWrapper.prototype, function (func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? 'take' + (methodName == 'last' ? 'Right' : '') : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function () {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function interceptor(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return isTaker && chainAll ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? isTaker ? result.value()[0] : result.value() : result;
      };
    });

    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function (methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function () {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function (value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    baseForOwn(LazyWrapper.prototype, function (func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = lodashFunc.name + '',
            names = realNames[key] || (realNames[key] = []);

        names.push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];

    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    lodash.prototype.first = lodash.prototype.head;

    if (symIterator) {
      lodash.prototype[symIterator] = wrapperToIterator;
    }
    return lodash;
  };

  var _ = runInContext();

  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    root._ = _;

    define(function () {
      return _;
    });
  } else if (freeModule) {
      (freeModule.exports = _)._ = _;

      freeExports._ = _;
    } else {
      root._ = _;
    }
}).call(this);
}, 567, null, "lodash/lodash.js");
__d(/* Runner_SNA/src/components/AlternateBoardingPassInput.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require(282    ); // 282 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(12            ); // 12 = react-native

var _reactRedux = require(402          ); // 402 = react-redux

var _actions = require(451         ); // 451 = ../actions

var _firebaseService = require(559                       ); // 559 = ../utils/firebaseService

var _Footer = require(562       ); // 562 = ./Footer

var _Footer2 = babelHelpers.interopRequireDefault(_Footer);

var _common = require(501       ); // 501 = ./common

var _reactNativeRouterFlux = require(453                       ); // 453 = react-native-router-flux

var _Style = require(554      ); // 554 = ./Style

var _Style2 = babelHelpers.interopRequireDefault(_Style);

var AlternateBoardingPassInput = function (_Component) {
  babelHelpers.inherits(AlternateBoardingPassInput, _Component);

  function AlternateBoardingPassInput(props) {
    babelHelpers.classCallCheck(this, AlternateBoardingPassInput);
    return babelHelpers.possibleConstructorReturn(this, (AlternateBoardingPassInput.__proto__ || Object.getPrototypeOf(AlternateBoardingPassInput)).call(this, props));
  }

  babelHelpers.createClass(AlternateBoardingPassInput, [{
    key: 'p1FirstNameChanged',
    value: function p1FirstNameChanged(text) {
      this.props.passenger1FirstNameChanged(text);
    }
  }, {
    key: 'p1LastNameChanged',
    value: function p1LastNameChanged(text) {
      this.props.passenger1LastNameChanged(text);
    }
  }, {
    key: 'p2FirstNameChanged',
    value: function p2FirstNameChanged(text) {
      this.props.passenger2FirstNameChanged(text);
    }
  }, {
    key: 'p2LastNameChanged',
    value: function p2LastNameChanged(text) {
      this.props.passenger2LastNameChanged(text);
    }
  }, {
    key: 'onFlightNumberChange',
    value: function onFlightNumberChange(text) {
      this.props.flightNumberChanged(text);
    }
  }, {
    key: 'onAirlineChange',
    value: function onAirlineChange(text) {
      this.props.airlineChanged(text);
    }
  }, {
    key: 'navigateToNext',
    value: function navigateToNext() {
      var _props = this.props,
          runType = _props.runType,
          numPassengers = _props.numPassengers,
          passenger1FirstName = _props.passenger1FirstName,
          passenger1LastName = _props.passenger1LastName,
          passenger2FirstName = _props.passenger2FirstName,
          passenger2LastName = _props.passenger2LastName,
          passenger1Wheelchair = _props.passenger1Wheelchair,
          passenger2Wheelchair = _props.passenger2Wheelchair,
          airline = _props.airline,
          flightNumber = _props.flightNumber;


      if (numPassengers === 1) {
        console.log('ABPI #0');
        if (passenger1FirstName == '' || passenger1LastName == '' || airline == '' || flightNumber == '') {
          console.log('ABPI #1');
          alert('Please fill out all passenger info');
        } else if (runType === 'departure') {
          console.log('ABPI #2');
          _reactNativeRouterFlux.Actions.selectGate();
        } else if (runType === 'arrival') {
          console.log('ABPI #3');
          _reactNativeRouterFlux.Actions.selectStopsSterile({ al: this.props.airline, fn: this.props.flightNumber });
        }
      }
      if (numPassengers === 2) {
        console.log('ABPI #4');
        if (passenger2Wheelchair == '') {
          console.log('ABPI #5');
          if (passenger1FirstName == '' || passenger1LastName == '') {
            console.log('ABPI #6');
            alert('Please fill out passenger 1 info');
          } else {
            console.log('ABPI #7');
            _reactNativeRouterFlux.Actions.selectWheelchair({ type: 'reset', title: 'Select Wheelchair #2' });
          }
        } else if (passenger1FirstName == '' || passenger1LastName == '' || passenger2FirstName == '' || passenger2LastName == '' || airline == '' || flightNumber == '') {
          console.log('ABPI #8');
          alert('Please fill out all passenger info');
        } else {
          console.log('ABPI #9');
          if (runType === 'departure') {
            console.log('ABPI #10');
            _reactNativeRouterFlux.Actions.selectGate();
          }
          if (runType === 'arrival') ;{
            console.log('ABPI #11');
            _reactNativeRouterFlux.Actions.selectStopsSterile({ al: this.props.airline, fn: this.props.flightNumber });
          }
        }
      }
    }
  }, {
    key: 'renderSecondPassengerInput',
    value: function renderSecondPassengerInput() {
      if (this.props.numPassengers === 2) {
        return [_react2.default.createElement(
          _common.CardSection,
          { key: '1' },
          _react2.default.createElement(_common.Input, {
            label: 'First Name',
            placeholder: 'Passenger 2 First Name',
            onChangeText: this.p2FirstNameChanged.bind(this),
            value: this.props.passenger2FirstName
          })
        ), _react2.default.createElement(
          _common.CardSection,
          { key: '2' },
          _react2.default.createElement(_common.Input, {
            label: 'Last Name',
            placeholder: 'Passenger 2 Last Name',
            onChangeText: this.p2LastNameChanged.bind(this),
            value: this.props.passenger2LastName
          })
        )];
      } else {
        return _react2.default.createElement(_reactNative.View, null);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      return _react2.default.createElement(
        _reactNative.View,
        { style: _Style2.default.container },
        _react2.default.createElement(
          _reactNative.View,
          { style: _Style2.default.content },
          _react2.default.createElement(
            _common.CardSection,
            null,
            _react2.default.createElement(_common.Input, {
              label: 'First Name',
              placeholder: 'Passenger 1 First Name',
              onChangeText: this.p1FirstNameChanged.bind(this),
              value: this.props.passenger1FirstName
            })
          ),
          _react2.default.createElement(
            _common.CardSection,
            null,
            _react2.default.createElement(_common.Input, {
              label: 'Last Name',
              placeholder: 'Passenger 1 Last Name',
              onChangeText: this.p1LastNameChanged.bind(this),
              value: this.props.passenger1LastName
            })
          ),
          this.renderSecondPassengerInput(),
          _react2.default.createElement(
            _common.CardSection,
            null,
            _react2.default.createElement(_common.Input, {
              label: 'Flight Number',
              placeholder: 'Flight Number',
              onChangeText: this.onFlightNumberChange.bind(this),
              value: this.props.flightNumber
            })
          ),
          _react2.default.createElement(
            _reactNative.View,
            { style: { flexDirection: 'column', height: 70 } },
            _react2.default.createElement(
              _reactNative.Text,
              { style: { fontSize: 18, paddingLeft: 25 } },
              'Airline'
            ),
            _react2.default.createElement(
              _reactNative.Picker,
              {
                style: { flex: 1 },
                selectedValue: this.props.airline,
                onValueChange: this.onAirlineChange.bind(this)
              },
              _react2.default.createElement(_reactNative.Picker.Item, { label: 'Please select an airline', value: '' }),
              _react2.default.createElement(_reactNative.Picker.Item, { label: 'Alaska', value: 'Alaska' }),
              _react2.default.createElement(_reactNative.Picker.Item, { label: 'American', value: 'American' }),
              _react2.default.createElement(_reactNative.Picker.Item, { label: 'Delta', value: 'Delta' }),
              _react2.default.createElement(_reactNative.Picker.Item, { label: 'Frontier', value: 'Frontier' }),
              _react2.default.createElement(_reactNative.Picker.Item, { label: 'Southwest', value: 'Southwest' }),
              _react2.default.createElement(_reactNative.Picker.Item, { label: 'United', value: 'United' }),
              _react2.default.createElement(_reactNative.Picker.Item, { label: 'WestJet', value: 'WestJet' })
            )
          ),
          _react2.default.createElement(
            _common.CardSection,
            null,
            _react2.default.createElement(
              _common.Button,
              { onPress: function onPress() {
                  return _this2.navigateToNext();
                } },
              ' Next '
            )
          )
        ),
        _react2.default.createElement(_Footer2.default, null)
      );
    }
  }]);
  return AlternateBoardingPassInput;
}(_react.Component);

var mapStateToProps = function mapStateToProps(_ref) {
  var departure = _ref.departure,
      auth = _ref.auth;
  var runType = departure.runType,
      timeStart = departure.timeStart,
      numPassengers = departure.numPassengers,
      passenger1Wheelchair = departure.passenger1Wheelchair,
      passenger2Wheelchair = departure.passenger2Wheelchair,
      passenger1FirstName = departure.passenger1FirstName,
      passenger1LastName = departure.passenger1LastName,
      passenger2FirstName = departure.passenger2FirstName,
      passenger2LastName = departure.passenger2LastName,
      airline = departure.airline,
      flightNumber = departure.flightNumber,
      deviceID = departure.deviceID;
  var user = auth.user;

  return {
    runType: runType,
    timeStart: timeStart,
    numPassengers: numPassengers,
    passenger1Wheelchair: passenger1Wheelchair,
    passenger2Wheelchair: passenger2Wheelchair,
    passenger1FirstName: passenger1FirstName,
    passenger1LastName: passenger1LastName,
    passenger2FirstName: passenger2FirstName,
    passenger2LastName: passenger2LastName,
    airline: airline,
    flightNumber: flightNumber,
    deviceID: deviceID,
    user: user
  };
};

exports.default = (0, _reactRedux.connect)(mapStateToProps, {
  scanBoardingPass: _actions.scanBoardingPass, passenger1FirstNameChanged: _actions.passenger1FirstNameChanged, passenger1LastNameChanged: _actions.passenger1LastNameChanged, passenger2FirstNameChanged: _actions.passenger2FirstNameChanged, passenger2LastNameChanged: _actions.passenger2LastNameChanged, airlineChanged: _actions.airlineChanged, flightNumberChanged: _actions.flightNumberChanged, alternateBoardingPassInput: _actions.alternateBoardingPassInput
})(AlternateBoardingPassInput);
}, 568, null, "Runner_SNA/src/components/AlternateBoardingPassInput.js");
__d(/* Runner_SNA/src/components/SelectGate.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require(282    ); // 282 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(12            ); // 12 = react-native

var _reactRedux = require(402          ); // 402 = react-redux

var _actions = require(451         ); // 451 = ../actions

var _firebaseService = require(559                       ); // 559 = ../utils/firebaseService

var _NumberButton = require(564                    ); // 564 = ./common/NumberButton

var _NumberButton2 = babelHelpers.interopRequireDefault(_NumberButton);

var _Footer = require(562       ); // 562 = ./Footer

var _Footer2 = babelHelpers.interopRequireDefault(_Footer);

var _Style = require(554      ); // 554 = ./Style

var _Style2 = babelHelpers.interopRequireDefault(_Style);

var gates = [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]];

var SelectGate = function (_Component) {
  babelHelpers.inherits(SelectGate, _Component);

  function SelectGate(props) {
    babelHelpers.classCallCheck(this, SelectGate);

    var _this = babelHelpers.possibleConstructorReturn(this, (SelectGate.__proto__ || Object.getPrototypeOf(SelectGate)).call(this, props));

    _this.state = {
      final: _this.props.final
    };
    return _this;
  }

  babelHelpers.createClass(SelectGate, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      var _this2 = this;

      _reactNative.Keyboard.dismiss();
      if (this.props.runType === 'arrival') {
        var locationFirstContactGPS = navigator.geolocation.getCurrentPosition(function (position) {
          _this2.props.addStartingPointArrival(_this2.props.runType, position);
        });
      }
    }
  }, {
    key: 'onButtonPress',
    value: function onButtonPress(gateNumber) {
      if (this.state.final) {
        this.props.setFinalGateNumber(gateNumber);
      } else {
        if (this.props.runType === 'departure') {
          (0, _firebaseService.writePassengerData)(this.props, gateNumber);
        }
        if (this.props.runType === 'arrival') {
          this.props.addStartingLocationArrival(gateNumber);
        }
        this.props.selectGateNumber(this.props.runType, gateNumber);
      }
    }
  }, {
    key: 'renderButtons',
    value: function renderButtons() {
      var _this3 = this;

      var views = gates.map(function (row, index) {
        var inputRow = row.map(function (buttonValue, columnIndex) {
          return _react2.default.createElement(_NumberButton2.default, {
            value: buttonValue,
            onPress: _this3.onButtonPress.bind(_this3, buttonValue),
            key: 'button-' + columnIndex
          });
        });
        return _react2.default.createElement(
          _reactNative.View,
          { style: _Style2.default.row, key: 'row-' + index },
          inputRow
        );
      });
      return views;
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        _reactNative.View,
        { style: _Style2.default.container },
        _react2.default.createElement(
          _reactNative.View,
          { style: _Style2.default.content },
          this.renderButtons()
        ),
        _react2.default.createElement(
          _reactNative.View,
          { style: _Style2.default.footer },
          _react2.default.createElement(_Footer2.default, null)
        )
      );
    }
  }]);
  return SelectGate;
}(_react.Component);

;

var mapStateToProps = function mapStateToProps(_ref) {
  var departure = _ref.departure,
      auth = _ref.auth;
  var runType = departure.runType,
      timeStart = departure.timeStart,
      startLocation = departure.startLocation,
      startLocationGPS = departure.startLocationGPS,
      numPassengers = departure.numPassengers,
      passenger1Wheelchair = departure.passenger1Wheelchair,
      passenger2Wheelchair = departure.passenger2Wheelchair,
      passenger1FirstName = departure.passenger1FirstName,
      passenger1LastName = departure.passenger1LastName,
      passenger2FirstName = departure.passenger2FirstName,
      passenger2LastName = departure.passenger2LastName,
      airline = departure.airline,
      flightNumber = departure.flightNumber,
      destinationGate = departure.destinationGate,
      deviceID = departure.deviceID;
  var user = auth.user;


  return {
    runType: runType,
    timeStart: timeStart,
    startLocation: startLocation,
    startLocationGPS: startLocationGPS,
    numPassengers: numPassengers,
    passenger1Wheelchair: passenger1Wheelchair,
    passenger2Wheelchair: passenger2Wheelchair,
    passenger1FirstName: passenger1FirstName,
    passenger1LastName: passenger1LastName,
    passenger2FirstName: passenger2FirstName,
    passenger2LastName: passenger2LastName,
    airline: airline,
    flightNumber: flightNumber,
    destinationGate: destinationGate,
    deviceID: deviceID,
    user: user
  };
};

exports.default = (0, _reactRedux.connect)(mapStateToProps, {
  selectGateNumber: _actions.selectGateNumber, setFinalGateNumber: _actions.setFinalGateNumber, addStartingPointArrival: _actions.addStartingPointArrival, addStartingLocationArrival: _actions.addStartingLocationArrival
})(SelectGate);
}, 569, null, "Runner_SNA/src/components/SelectGate.js");
__d(/* Runner_SNA/src/components/SelectStartingPoint.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
	value: true
});

var _react = require(282    ); // 282 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(12            ); // 12 = react-native

var _reactRedux = require(402          ); // 402 = react-redux

var _common = require(501       ); // 501 = ./common

var _actions = require(451         ); // 451 = ../actions

var _Footer = require(562       ); // 562 = ./Footer

var _Footer2 = babelHelpers.interopRequireDefault(_Footer);

var _Style = require(554      ); // 554 = ./Style

var _Style2 = babelHelpers.interopRequireDefault(_Style);

var SelectStartingPoint = function (_Component) {
	babelHelpers.inherits(SelectStartingPoint, _Component);

	function SelectStartingPoint(props) {
		babelHelpers.classCallCheck(this, SelectStartingPoint);
		return babelHelpers.possibleConstructorReturn(this, (SelectStartingPoint.__proto__ || Object.getPrototypeOf(SelectStartingPoint)).call(this, props));
	}

	babelHelpers.createClass(SelectStartingPoint, [{
		key: 'onButtonPress',
		value: function onButtonPress(startLocation) {
			this.props.addStartingPoint(this.props, startLocation);
		}
	}, {
		key: 'render',
		value: function render() {
			return _react2.default.createElement(
				_reactNative.View,
				{ style: _Style2.default.container },
				_react2.default.createElement(
					_reactNative.View,
					{ style: _Style2.default.content },
					_react2.default.createElement(
						_reactNative.View,
						{ style: _Style2.default.row },
						_react2.default.createElement(
							_common.Button,
							{ onPress: this.onButtonPress.bind(this, 'A Curb') },
							'A Curb'
						),
						_react2.default.createElement(
							_common.Button,
							{ onPress: this.onButtonPress.bind(this, 'B Curb') },
							'B Curb'
						),
						_react2.default.createElement(
							_common.Button,
							{ onPress: this.onButtonPress.bind(this, 'C Curb') },
							'C Curb'
						)
					),
					_react2.default.createElement(
						_reactNative.View,
						{ style: _Style2.default.row },
						_react2.default.createElement(
							_common.Button,
							{ onPress: this.onButtonPress.bind(this, 'Alaska') },
							'Alaska'
						),
						_react2.default.createElement(
							_common.Button,
							{ onPress: this.onButtonPress.bind(this, 'American') },
							'American'
						),
						_react2.default.createElement(
							_common.Button,
							{ onPress: this.onButtonPress.bind(this, 'Delta') },
							'Delta'
						),
						_react2.default.createElement(
							_common.Button,
							{ onPress: this.onButtonPress.bind(this, 'Frontier') },
							'Frontier'
						)
					),
					_react2.default.createElement(
						_reactNative.View,
						{ style: _Style2.default.row },
						_react2.default.createElement(
							_common.Button,
							{ onPress: this.onButtonPress.bind(this, 'Southwest') },
							'Southwest'
						),
						_react2.default.createElement(
							_common.Button,
							{ onPress: this.onButtonPress.bind(this, 'United') },
							'United'
						),
						_react2.default.createElement(
							_common.Button,
							{ onPress: this.onButtonPress.bind(this, 'WestJet') },
							'WestJet'
						)
					)
				),
				_react2.default.createElement(
					_reactNative.View,
					{ style: _Style2.default.footer },
					_react2.default.createElement(_Footer2.default, null)
				)
			);
		}
	}]);
	return SelectStartingPoint;
}(_react.Component);

var mapStateToProps = function mapStateToProps(_ref) {
	var departure = _ref.departure;
	var wheelchairNumber = departure.wheelchairNumber,
	    runType = departure.runType,
	    currentGPS = departure.currentGPS;


	return { wheelchairNumber: wheelchairNumber, runType: runType, currentGPS: currentGPS };
};

exports.default = (0, _reactRedux.connect)(mapStateToProps, {
	addStartingPoint: _actions.addStartingPoint
})(SelectStartingPoint);
}, 570, null, "Runner_SNA/src/components/SelectStartingPoint.js");
__d(/* Runner_SNA/src/components/SelectStopsNonSterile.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
	value: true
});

var _react = require(282    ); // 282 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(12            ); // 12 = react-native

var _reactRedux = require(402          ); // 402 = react-redux

var _actions = require(451         ); // 451 = ../actions

var _firebaseService = require(559                       ); // 559 = ../utils/firebaseService

var _reactNativeRouterFlux = require(453                       ); // 453 = react-native-router-flux

var _common = require(501       ); // 501 = ./common

var _Footer = require(562       ); // 562 = ./Footer

var _Footer2 = babelHelpers.interopRequireDefault(_Footer);

var _Style = require(554      ); // 554 = ./Style

var _Style2 = babelHelpers.interopRequireDefault(_Style);

var _assets = require(510           ); // 510 = ../../assets

var _chunk = require(572           ); // 572 = lodash/chunk

var _chunk2 = babelHelpers.interopRequireDefault(_chunk);

var SelectStopsNonSterile = function (_Component) {
	babelHelpers.inherits(SelectStopsNonSterile, _Component);

	function SelectStopsNonSterile(props) {
		babelHelpers.classCallCheck(this, SelectStopsNonSterile);
		return babelHelpers.possibleConstructorReturn(this, (SelectStopsNonSterile.__proto__ || Object.getPrototypeOf(SelectStopsNonSterile)).call(this, props));
	}

	babelHelpers.createClass(SelectStopsNonSterile, [{
		key: 'onButtonPress',
		value: function onButtonPress(stopLocation) {
			(0, _firebaseService.addStop)(this.props.runType, this.props.timeStart, this.props.currentGPS, stopLocation);
		}
	}, {
		key: 'renderEndingButton',
		value: function renderEndingButton() {
			var _this2 = this;

			if (this.props.runType === 'departure') {
				return _react2.default.createElement(
					_common.Button,
					{ onPress: function onPress() {
							return _this2.props.startTSA();
						} },
					'TSA Start'
				);
			} else if (this.props.runType === 'arrival') {
				return _react2.default.createElement(
					_common.Button,
					{ onPress: function onPress() {
							return _reactNativeRouterFlux.Actions.baggageClaim();
						} },
					'Go to Baggage Claim'
				);
			}
		}
	}, {
		key: 'renderButtons',
		value: function renderButtons() {
			var _this3 = this;

			return (0, _chunk2.default)(_assets.nonSterile, 4).map(function (row) {
				return _react2.default.createElement(
					_reactNative.View,
					{ style: _Style2.default.row },
					row.map(function (item) {
						return _react2.default.createElement(_common.ImageButton, { source: item.image, onPress: _this3.onButtonPress.bind(_this3, item.name), key: item.name });
					})
				);
			});
		}
	}, {
		key: 'render',
		value: function render() {
			return _react2.default.createElement(
				_reactNative.View,
				{ style: _Style2.default.container },
				_react2.default.createElement(
					_reactNative.View,
					{ style: _Style2.default.content },
					this.renderButtons(),
					_react2.default.createElement(
						_common.CardSection,
						null,
						this.renderEndingButton()
					)
				),
				_react2.default.createElement(_Footer2.default, null)
			);
		}
	}]);
	return SelectStopsNonSterile;
}(_react.Component);

var mapStateToProps = function mapStateToProps(_ref) {
	var departure = _ref.departure;
	var runType = departure.runType,
	    timeStart = departure.timeStart,
	    currentGPS = departure.currentGPS;


	return { runType: runType, timeStart: timeStart, currentGPS: currentGPS };
};

exports.default = (0, _reactRedux.connect)(mapStateToProps, {
	startTSA: _actions.startTSA
})(SelectStopsNonSterile);
}, 571, null, "Runner_SNA/src/components/SelectStopsNonSterile.js");
__d(/* lodash/chunk.js */function(global, require, module, exports) {var baseSlice = require(573           ), // 573 = ./_baseSlice
    isIterateeCall = require(574                ), // 574 = ./_isIterateeCall
    toInteger = require(581          ); // 581 = ./toInteger

var nativeCeil = Math.ceil,
    nativeMax = Math.max;

function chunk(array, size, guard) {
  if (guard ? isIterateeCall(array, size, guard) : size === undefined) {
    size = 1;
  } else {
    size = nativeMax(toInteger(size), 0);
  }
  var length = array == null ? 0 : array.length;
  if (!length || size < 1) {
    return [];
  }
  var index = 0,
      resIndex = 0,
      result = Array(nativeCeil(length / size));

  while (index < length) {
    result[resIndex++] = baseSlice(array, index, index += size);
  }
  return result;
}

module.exports = chunk;
}, 572, null, "lodash/chunk.js");
__d(/* lodash/_baseSlice.js */function(global, require, module, exports) {
function baseSlice(array, start, end) {
  var index = -1,
      length = array.length;

  if (start < 0) {
    start = -start > length ? 0 : length + start;
  }
  end = end > length ? length : end;
  if (end < 0) {
    end += length;
  }
  length = start > end ? 0 : end - start >>> 0;
  start >>>= 0;

  var result = Array(length);
  while (++index < length) {
    result[index] = array[index + start];
  }
  return result;
}

module.exports = baseSlice;
}, 573, null, "lodash/_baseSlice.js");
__d(/* lodash/_isIterateeCall.js */function(global, require, module, exports) {var eq = require(575   ), // 575 = ./eq
    isArrayLike = require(576            ), // 576 = ./isArrayLike
    isIndex = require(580         ), // 580 = ./_isIndex
    isObject = require(578         ); // 578 = ./isObject

function isIterateeCall(value, index, object) {
  if (!isObject(object)) {
    return false;
  }
  var type = typeof index;
  if (type == 'number' ? isArrayLike(object) && isIndex(index, object.length) : type == 'string' && index in object) {
    return eq(object[index], value);
  }
  return false;
}

module.exports = isIterateeCall;
}, 574, null, "lodash/_isIterateeCall.js");
__d(/* lodash/eq.js */function(global, require, module, exports) {
function eq(value, other) {
  return value === other || value !== value && other !== other;
}

module.exports = eq;
}, 575, null, "lodash/eq.js");
__d(/* lodash/isArrayLike.js */function(global, require, module, exports) {var isFunction = require(577           ), // 577 = ./isFunction
    isLength = require(579         ); // 579 = ./isLength

function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

module.exports = isArrayLike;
}, 576, null, "lodash/isArrayLike.js");
__d(/* lodash/isFunction.js */function(global, require, module, exports) {var baseGetTag = require(416            ), // 416 = ./_baseGetTag
    isObject = require(578         ); // 578 = ./isObject

var asyncTag = '[object AsyncFunction]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

function isFunction(value) {
    if (!isObject(value)) {
        return false;
    }

    var tag = baseGetTag(value);
    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

module.exports = isFunction;
}, 577, null, "lodash/isFunction.js");
__d(/* lodash/isObject.js */function(global, require, module, exports) {
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

module.exports = isObject;
}, 578, null, "lodash/isObject.js");
__d(/* lodash/isLength.js */function(global, require, module, exports) {
var MAX_SAFE_INTEGER = 9007199254740991;

function isLength(value) {
  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

module.exports = isLength;
}, 579, null, "lodash/isLength.js");
__d(/* lodash/_isIndex.js */function(global, require, module, exports) {
var MAX_SAFE_INTEGER = 9007199254740991;

var reIsUint = /^(?:0|[1-9]\d*)$/;

function isIndex(value, length) {
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length && (typeof value == 'number' || reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
}

module.exports = isIndex;
}, 580, null, "lodash/_isIndex.js");
__d(/* lodash/toInteger.js */function(global, require, module, exports) {var toFinite = require(582         ); // 582 = ./toFinite

function toInteger(value) {
  var result = toFinite(value),
      remainder = result % 1;

  return result === result ? remainder ? result - remainder : result : 0;
}

module.exports = toInteger;
}, 581, null, "lodash/toInteger.js");
__d(/* lodash/toFinite.js */function(global, require, module, exports) {var toNumber = require(583         ); // 583 = ./toNumber

var INFINITY = 1 / 0,
    MAX_INTEGER = 1.7976931348623157e+308;

function toFinite(value) {
  if (!value) {
    return value === 0 ? value : 0;
  }
  value = toNumber(value);
  if (value === INFINITY || value === -INFINITY) {
    var sign = value < 0 ? -1 : 1;
    return sign * MAX_INTEGER;
  }
  return value === value ? value : 0;
}

module.exports = toFinite;
}, 582, null, "lodash/toFinite.js");
__d(/* lodash/toNumber.js */function(global, require, module, exports) {var isObject = require(578         ), // 578 = ./isObject
    isSymbol = require(584         ); // 584 = ./isSymbol

var NAN = 0 / 0;

var reTrim = /^\s+|\s+$/g;

var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

var reIsBinary = /^0b[01]+$/i;

var reIsOctal = /^0o[0-7]+$/i;

var freeParseInt = parseInt;

function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (isSymbol(value)) {
    return NAN;
  }
  if (isObject(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject(other) ? other + '' : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = value.replace(reTrim, '');
  var isBinary = reIsBinary.test(value);
  return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
}

module.exports = toNumber;
}, 583, null, "lodash/toNumber.js");
__d(/* lodash/isSymbol.js */function(global, require, module, exports) {var baseGetTag = require(416            ), // 416 = ./_baseGetTag
    isObjectLike = require(424             ); // 424 = ./isObjectLike

var symbolTag = '[object Symbol]';

function isSymbol(value) {
    return typeof value == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;
}

module.exports = isSymbol;
}, 584, null, "lodash/isSymbol.js");
__d(/* Runner_SNA/src/components/TSA.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
	value: true
});

var _react = require(282    ); // 282 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(12            ); // 12 = react-native

var _reactRedux = require(402          ); // 402 = react-redux

var _actions = require(451         ); // 451 = ../actions

var _common = require(501       ); // 501 = ./common

var _Footer = require(562       ); // 562 = ./Footer

var _Footer2 = babelHelpers.interopRequireDefault(_Footer);

var _Style = require(554      ); // 554 = ./Style

var _Style2 = babelHelpers.interopRequireDefault(_Style);

var _reactNativeRouterFlux = require(453                       ); // 453 = react-native-router-flux

var TSA = function (_Component) {
	babelHelpers.inherits(TSA, _Component);

	function TSA(props) {
		babelHelpers.classCallCheck(this, TSA);

		var _this = babelHelpers.possibleConstructorReturn(this, (TSA.__proto__ || Object.getPrototypeOf(TSA)).call(this, props));

		var timeTSAStart = Date.now();
		_this.state = {
			text: '',
			timeTSAStart: timeTSAStart
		};
		return _this;
	}

	babelHelpers.createClass(TSA, [{
		key: 'onButtonPress',
		value: function onButtonPress() {
			this.props.addCommentsTSA(this.state.text, this.state.timeTSAStart);
		}
	}, {
		key: 'render',
		value: function render() {
			var _this2 = this;

			return _react2.default.createElement(
				_reactNative.View,
				{ style: _Style2.default.container },
				_react2.default.createElement(
					_reactNative.View,
					{ style: _Style2.default.content },
					_react2.default.createElement(_reactNative.TextInput, babelHelpers.extends({}, this.props, {
						editable: true,
						multiline: true,
						numberOfLines: 10,
						value: this.state.text,
						onChangeText: function onChangeText(text) {
							return _this2.setState({ text: text });
						},
						placeholder: 'Add comment...'
					})),
					_react2.default.createElement(
						_common.CardSection,
						null,
						_react2.default.createElement(
							_common.Button,
							{ onPress: this.onButtonPress.bind(this) },
							'TSA End'
						)
					)
				),
				_react2.default.createElement(_Footer2.default, null)
			);
		}
	}]);
	return TSA;
}(_react.Component);

var mapStateToProps = function mapStateToProps(_ref) {
	var departure = _ref.departure;
	var commentsTSA = departure.commentsTSA;


	return { commentsTSA: commentsTSA };
};

exports.default = (0, _reactRedux.connect)(mapStateToProps, {
	addCommentsTSA: _actions.addCommentsTSA
})(TSA);
}, 585, null, "Runner_SNA/src/components/TSA.js");
__d(/* Runner_SNA/src/components/SelectStopsSterile.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
	value: true
});

var _react = require(282    ); // 282 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(12            ); // 12 = react-native

var _reactRedux = require(402          ); // 402 = react-redux

var _reactNativeSimpleModal = require(587                        ); // 587 = react-native-simple-modal

var _reactNativeSimpleModal2 = babelHelpers.interopRequireDefault(_reactNativeSimpleModal);

var _actions = require(451         ); // 451 = ../actions

var _firebaseService = require(559                       ); // 559 = ../utils/firebaseService

var _common = require(501       ); // 501 = ./common

var _Footer = require(562       ); // 562 = ./Footer

var _Footer2 = babelHelpers.interopRequireDefault(_Footer);

var _Style = require(554      ); // 554 = ./Style

var _Style2 = babelHelpers.interopRequireDefault(_Style);

var _assets = require(510           ); // 510 = ../../assets

var _reactNativeRouterFlux = require(453                       ); // 453 = react-native-router-flux

var _chunk = require(572           ); // 572 = lodash/chunk

var _chunk2 = babelHelpers.interopRequireDefault(_chunk);

var SelectStopsSterile = function (_Component) {
	babelHelpers.inherits(SelectStopsSterile, _Component);

	function SelectStopsSterile(props) {
		babelHelpers.classCallCheck(this, SelectStopsSterile);

		var _this = babelHelpers.possibleConstructorReturn(this, (SelectStopsSterile.__proto__ || Object.getPrototypeOf(SelectStopsSterile)).call(this, props));

		_this.state = {
			terminal: _assets.terminalA,
			open: false
		};
		return _this;
	}

	babelHelpers.createClass(SelectStopsSterile, [{
		key: 'componentWillMount',
		value: function componentWillMount() {
			_reactNative.Keyboard.dismiss();
			console.log('SELECT STOPS STERILE', this.props);
			if (this.props.runType === 'arrival') {
				(0, _firebaseService.writeArrivalData)(this.props);
			}
			if (this.props.runType === 'departure') {
				(0, _firebaseService.writeDepartureData)(this.props);
			}
		}
	}, {
		key: 'onButtonPress',
		value: function onButtonPress(stopLocation) {
			console.log('stopLocation in SelectStopsSterile:', stopLocation);
			(0, _firebaseService.addStop)(this.props.runType, this.props.timeStart, this.props.currentGPS, stopLocation);
		}
	}, {
		key: 'onGateArrival',
		value: function onGateArrival() {
			this.setState({ open: true });
			this.props.setTimeEnd();
		}
	}, {
		key: 'onGateSuccess',
		value: function onGateSuccess() {
			this.setState({ open: false });
			_reactNativeRouterFlux.Actions.closing({ reset: true });
		}
	}, {
		key: 'onGateFail',
		value: function onGateFail() {
			this.setState({ open: false });
			_reactNativeRouterFlux.Actions.selectGate({ final: true });
		}
	}, {
		key: 'renderButtons',
		value: function renderButtons() {
			var _this2 = this;

			return (0, _chunk2.default)(this.state.terminal, 4).map(function (row) {
				return _react2.default.createElement(
					_reactNative.View,
					{ style: _Style2.default.row },
					row.map(function (item) {
						return _react2.default.createElement(_common.ImageButton, { source: item.image, onPress: _this2.onButtonPress.bind(_this2, item.name), key: item.name });
					})
				);
			});
		}
	}, {
		key: 'renderEndingButton',
		value: function renderEndingButton() {
			if (this.props.runType === 'departure') {
				return _react2.default.createElement(
					_common.Button,
					{ onPress: this.onGateArrival.bind(this) },
					'Gate Arrival'
				);
			} else if (this.props.runType === 'arrival') {
				return _react2.default.createElement(
					_common.Button,
					{ onPress: function onPress() {
							return _reactNativeRouterFlux.Actions.selectStopsNonSterile();
						} },
					'Go Downstairs'
				);
			}
		}
	}, {
		key: 'render',
		value: function render() {
			var _this3 = this;

			return _react2.default.createElement(
				_reactNative.View,
				{ style: _Style2.default.container },
				_react2.default.createElement(
					_common.CardSection,
					null,
					_react2.default.createElement(
						_reactNative.View,
						{ style: _Style2.default.row },
						_react2.default.createElement(
							_common.Button,
							{ onPress: function onPress() {
									return _this3.setState({ terminal: _assets.terminalA });
								} },
							'Terminal A'
						),
						_react2.default.createElement(
							_common.Button,
							{ onPress: function onPress() {
									return _this3.setState({ terminal: _assets.terminalB });
								} },
							'Terminal B'
						),
						_react2.default.createElement(
							_common.Button,
							{ onPress: function onPress() {
									return _this3.setState({ terminal: _assets.terminalC });
								} },
							'Terminal C'
						)
					)
				),
				_react2.default.createElement(
					_reactNative.View,
					{ style: _Style2.default.content },
					this.renderButtons()
				),
				_react2.default.createElement(
					_common.CardSection,
					null,
					this.renderEndingButton()
				),
				_react2.default.createElement(_Footer2.default, null),
				_react2.default.createElement(
					_reactNativeSimpleModal2.default,
					{
						open: this.state.open,
						modalDidOpen: function modalDidOpen() {
							return console.log('modal did open');
						},
						modalDidClose: function modalDidClose() {
							return _this3.setState({ open: false });
						},
						style: { alignItems: 'center' } },
					_react2.default.createElement(
						_reactNative.View,
						null,
						_react2.default.createElement(
							_reactNative.Text,
							{ style: { fontSize: 20, marginBottom: 10 } },
							'Are you at Gate #',
							this.props.destinationGate,
							'?'
						),
						_react2.default.createElement(
							_common.CardSection,
							null,
							_react2.default.createElement(
								_reactNative.View,
								{ style: _Style2.default.row },
								_react2.default.createElement(
									_common.Button,
									{ onPress: this.onGateSuccess.bind(this) },
									'Yes'
								),
								_react2.default.createElement(
									_common.Button,
									{ onPress: this.onGateFail.bind(this) },
									'No'
								)
							)
						)
					)
				)
			);
		}
	}]);
	return SelectStopsSterile;
}(_react.Component);

var mapStateToProps = function mapStateToProps(_ref) {
	var departure = _ref.departure,
	    auth = _ref.auth;
	var runType = departure.runType,
	    timeStart = departure.timeStart,
	    startLocation = departure.startLocation,
	    startLocationGPS = departure.startLocationGPS,
	    numPassengers = departure.numPassengers,
	    passenger1Wheelchair = departure.passenger1Wheelchair,
	    passenger2Wheelchair = departure.passenger2Wheelchair,
	    passenger1FirstName = departure.passenger1FirstName,
	    passenger1LastName = departure.passenger1LastName,
	    passenger2FirstName = departure.passenger2FirstName,
	    passenger2LastName = departure.passenger2LastName,
	    airline = departure.airline,
	    flightNumber = departure.flightNumber,
	    destinationGate = departure.destinationGate,
	    currentGPS = departure.currentGPS,
	    timeTSAStart = departure.timeTSAStart,
	    timeTSAEnd = departure.timeTSAEnd,
	    commentsTSA = departure.commentsTSA,
	    deviceID = departure.deviceID;
	var user = auth.user;


	return {
		runType: runType,
		timeStart: timeStart,
		startLocation: startLocation,
		startLocationGPS: startLocationGPS,
		numPassengers: numPassengers,
		passenger1Wheelchair: passenger1Wheelchair,
		passenger2Wheelchair: passenger2Wheelchair,
		passenger1FirstName: passenger1FirstName,
		passenger1LastName: passenger1LastName,
		passenger2FirstName: passenger2FirstName,
		passenger2LastName: passenger2LastName,
		airline: airline,
		flightNumber: flightNumber,
		destinationGate: destinationGate,
		currentGPS: currentGPS,
		timeTSAStart: timeTSAStart,
		timeTSAEnd: timeTSAEnd,
		commentsTSA: commentsTSA,
		deviceID: deviceID,
		user: user
	};
};

exports.default = (0, _reactRedux.connect)(mapStateToProps, { setTimeEnd: _actions.setTimeEnd })(SelectStopsSterile);
}, 586, null, "Runner_SNA/src/components/SelectStopsSterile.js");
__d(/* react-native-simple-modal/index.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
   value: true
});

var _react = require(282    ); // 282 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(12            ); // 12 = react-native

var Modal = function (_Component) {
   babelHelpers.inherits(Modal, _Component);

   function Modal() {
      babelHelpers.classCallCheck(this, Modal);

      var _this = babelHelpers.possibleConstructorReturn(this, (Modal.__proto__ || Object.getPrototypeOf(Modal)).call(this));

      _this.state = {
         opacity: new _reactNative.Animated.Value(0),
         scale: new _reactNative.Animated.Value(0.8),
         offset: new _reactNative.Animated.Value(0)
      };

      _this.hardwareBackPress = _this.hardwareBackPress.bind(_this);
      return _this;
   }

   babelHelpers.createClass(Modal, [{
      key: 'componentWillMount',
      value: function componentWillMount() {
         if (this.props.open) {
            this.open();
         }
      }
   }, {
      key: 'componentWillReceiveProps',
      value: function componentWillReceiveProps(props) {
         if (props.open && props.children !== this.state.children) {
            this.setState({ children: props.children });
         }
         if (props.animationDuration === 0) {
            this.state.scale.setValue(1);
         } else {
            this.state.scale.setValue(this.props.open ? 1 : 0.8);
         }
         if (props.open !== this.props.open) {
            if (props.open) this.open();else this.close();
         }

         if (props.offset !== this.props.offset) {
            this.animateOffset(props.offset);
         }
      }
   }, {
      key: 'hardwareBackPress',
      value: function hardwareBackPress() {
         if (this.state.open) {
            this.close();
            return true;
         }
         return false;
      }
   }, {
      key: 'componentDidMount',
      value: function componentDidMount() {
         if (_reactNative.Platform.OS === 'android') {
            _reactNative.BackAndroid.addEventListener('hardwareBackPress', this.hardwareBackPress);
         }
      }
   }, {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
         if (_reactNative.Platform.OS === 'android') {
            _reactNative.BackAndroid.removeEventListener('hardwareBackPress', this.hardwareBackPress);
         }
      }
   }, {
      key: 'setPhase',
      value: function setPhase(toValue) {
         var _this2 = this;

         if (this.state.open != toValue) {
            var _props = this.props,
                animationDuration = _props.animationDuration,
                animationTension = _props.animationTension;

            if (animationDuration === 0) {
               this.state.opacity.setValue(toValue);
            } else {
               _reactNative.Animated.timing(this.state.opacity, {
                  toValue: toValue,
                  duration: animationDuration
               }).start();

               _reactNative.Animated.spring(this.state.scale, {
                  toValue: toValue ? 1 : 0.8,
                  tension: animationTension
               }).start();
            }

            setTimeout(function () {
               if (toValue) _this2.props.modalDidOpen();else {
                  _this2.setState({ open: false, children: undefined });
                  _this2.props.modalDidClose();
               }
            }, animationDuration);
         }
      }
   }, {
      key: 'render',
      value: function render() {
         var _state = this.state,
             opacity = _state.opacity,
             open = _state.open,
             scale = _state.scale,
             offset = _state.offset,
             children = _state.children;

         var containerStyles = [styles.absolute, styles.container, this.props.containerStyle];

         if (!this.state.open) {
            containerStyles.push(styles.hidden);
         }

         return _react2.default.createElement(
            _reactNative.View,
            {
               pointerEvents: open ? 'auto' : 'none',
               style: containerStyles },
            _react2.default.createElement(
               _reactNative.TouchableOpacity,
               {
                  style: styles.absolute,
                  disabled: !this.props.closeOnTouchOutside,
                  onPress: this.close.bind(this),
                  activeOpacity: 0.75 },
               _react2.default.createElement(_reactNative.Animated.View, { style: { flex: 1, opacity: opacity, backgroundColor: this.props.overlayBackground } })
            ),
            _react2.default.createElement(
               _reactNative.Animated.View,
               {
                  style: [styles.defaultModalStyle, this.props.modalStyle, { opacity: opacity, transform: [{ scale: scale }, { translateY: offset }] }] },
               children
            )
         );
      }
   }, {
      key: 'open',
      value: function open() {
         this.setState({ open: true });
         this.setPhase(1);
      }
   }, {
      key: 'close',
      value: function close() {
         this.setPhase(0);
      }
   }, {
      key: 'animateOffset',
      value: function animateOffset(offset) {
         _reactNative.Animated.spring(this.state.offset, { toValue: offset }).start();
      }
   }]);
   return Modal;
}(_react.Component);

Modal.propTypes = {
   open: _react.PropTypes.bool,
   offset: _react.PropTypes.number,
   overlayBackground: _react.PropTypes.string,
   animationDuration: _react.PropTypes.number,
   animationTension: _react.PropTypes.number,
   modalDidOpen: _react.PropTypes.func,
   modalDidClose: _react.PropTypes.func,
   closeOnTouchOutside: _react.PropTypes.bool
};

Modal.defaultProps = {
   open: false,
   offset: 0,
   overlayBackground: 'rgba(0, 0, 0, 0.75)',
   animationDuration: 200,
   animationTension: 40,
   modalDidOpen: function modalDidOpen() {
      return undefined;
   },
   modalDidClose: function modalDidClose() {
      return undefined;
   },
   closeOnTouchOutside: true
};

var styles = _reactNative.StyleSheet.create({
   absolute: {
      position: 'absolute',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0,
      backgroundColor: 'rgba(0, 0, 0, 0)'
   },
   container: {
      justifyContent: 'center'
   },
   defaultModalStyle: {
      borderRadius: 2,
      margin: 20,
      padding: 10,
      backgroundColor: '#F5F5F5'
   },
   hidden: {
      top: -10000,
      left: 0,
      height: 0,
      width: 0
   }
});

exports.default = Modal;
}, 587, null, "react-native-simple-modal/index.js");
__d(/* Runner_SNA/src/components/GateArrival.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
	value: true
});

var _react = require(282    ); // 282 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(12            ); // 12 = react-native

var _reactRedux = require(402          ); // 402 = react-redux

var _actions = require(451         ); // 451 = ../actions

var _common = require(501       ); // 501 = ./common

var _Footer = require(562       ); // 562 = ./Footer

var _Footer2 = babelHelpers.interopRequireDefault(_Footer);

var _Style = require(554      ); // 554 = ./Style

var _Style2 = babelHelpers.interopRequireDefault(_Style);

var _reactNativeRouterFlux = require(453                       ); // 453 = react-native-router-flux

var GateArrival = function (_Component) {
	babelHelpers.inherits(GateArrival, _Component);

	function GateArrival(props) {
		babelHelpers.classCallCheck(this, GateArrival);

		var _this = babelHelpers.possibleConstructorReturn(this, (GateArrival.__proto__ || Object.getPrototypeOf(GateArrival)).call(this, props));

		_this.state = {
			gateChanged: '',
			showButtons: ''
		};
		return _this;
	}

	babelHelpers.createClass(GateArrival, [{
		key: 'render',
		value: function render() {
			var _this2 = this;

			return _react2.default.createElement(
				_reactNative.View,
				{ style: _Style2.default.container },
				_react2.default.createElement(
					_reactNative.View,
					{ style: _Style2.default.content },
					_react2.default.createElement(
						_common.CardSection,
						null,
						_react2.default.createElement(
							_reactNative.Text,
							null,
							' Are you at gate ',
							this.props.destinationGate,
							' ? '
						)
					),
					_react2.default.createElement(
						_common.CardSection,
						null,
						_react2.default.createElement(
							_reactNative.View,
							{ style: _Style2.default.row },
							_react2.default.createElement(
								_common.Button,
								{ onPress: function onPress() {
										return _reactNativeRouterFlux.Actions.closing({ timeGateArrival: Date.now() });
									} },
								'Yes'
							),
							_react2.default.createElement(
								_common.Button,
								{ onPress: function onPress() {
										return _this2.setState({ gateChanged: 'yes' });
									} },
								'No'
							)
						)
					)
				),
				_react2.default.createElement(_Footer2.default, null)
			);
		}
	}]);
	return GateArrival;
}(_react.Component);

var mapStateToProps = function mapStateToProps(_ref) {
	var departure = _ref.departure;
	var destinationGate = departure.destinationGate,
	    finalGate = departure.finalGate;


	return { destinationGate: destinationGate, finalGate: finalGate };
};

exports.default = (0, _reactRedux.connect)(mapStateToProps, {
	setFinalGateNumber: _actions.setFinalGateNumber
})(GateArrival);
}, 588, null, "Runner_SNA/src/components/GateArrival.js");
__d(/* Runner_SNA/src/components/BaggageClaim.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
	value: true
});

var _react = require(282    ); // 282 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(12            ); // 12 = react-native

var _reactRedux = require(402          ); // 402 = react-redux

var _common = require(501       ); // 501 = ./common

var _NumberButton = require(564                    ); // 564 = ./common/NumberButton

var _NumberButton2 = babelHelpers.interopRequireDefault(_NumberButton);

var _actions = require(451         ); // 451 = ../actions

var _Footer = require(562       ); // 562 = ./Footer

var _Footer2 = babelHelpers.interopRequireDefault(_Footer);

var _Style = require(554      ); // 554 = ./Style

var _Style2 = babelHelpers.interopRequireDefault(_Style);

var BaggageClaim = function (_Component) {
	babelHelpers.inherits(BaggageClaim, _Component);

	function BaggageClaim(props) {
		babelHelpers.classCallCheck(this, BaggageClaim);
		return babelHelpers.possibleConstructorReturn(this, (BaggageClaim.__proto__ || Object.getPrototypeOf(BaggageClaim)).call(this, props));
	}

	babelHelpers.createClass(BaggageClaim, [{
		key: 'onButtonPress',
		value: function onButtonPress(destination) {
			this.props.addDestination(destination);
		}
	}, {
		key: 'render',
		value: function render() {
			return _react2.default.createElement(
				_reactNative.View,
				{ style: _Style2.default.container },
				_react2.default.createElement(
					_reactNative.View,
					{ style: _Style2.default.content },
					_react2.default.createElement(
						_reactNative.View,
						{ style: _Style2.default.row },
						_react2.default.createElement(
							_common.Button,
							{ onPress: this.onButtonPress.bind(this, 'Baggage Claim 1') },
							'1'
						),
						_react2.default.createElement(
							_common.Button,
							{ onPress: this.onButtonPress.bind(this, 'Baggage Claim 2') },
							'2'
						),
						_react2.default.createElement(
							_common.Button,
							{ onPress: this.onButtonPress.bind(this, 'Baggage Claim 3') },
							'3'
						),
						_react2.default.createElement(
							_common.Button,
							{ onPress: this.onButtonPress.bind(this, 'Baggage Claim 4') },
							'4'
						),
						_react2.default.createElement(
							_common.Button,
							{ onPress: this.onButtonPress.bind(this, 'Baggage Claim 5') },
							'5'
						),
						_react2.default.createElement(
							_common.Button,
							{ onPress: this.onButtonPress.bind(this, 'Baggage Claim 6') },
							'6'
						),
						_react2.default.createElement(
							_common.Button,
							{ onPress: this.onButtonPress.bind(this, 'Baggage Claim 7') },
							'7'
						)
					),
					_react2.default.createElement(
						_reactNative.View,
						{ style: _Style2.default.row },
						_react2.default.createElement(
							_common.Button,
							{ onPress: this.onButtonPress.bind(this, 'Curb') },
							'Curb'
						),
						_react2.default.createElement(
							_common.Button,
							{ onPress: this.onButtonPress.bind(this, 'Taxi') },
							'Taxi'
						),
						_react2.default.createElement(
							_common.Button,
							{ onPress: this.onButtonPress.bind(this, 'Rental Cars') },
							'Rental Cars'
						),
						_react2.default.createElement(
							_common.Button,
							{ onPress: this.onButtonPress.bind(this, 'Ground Transportation') },
							'Ground Transportation'
						)
					)
				),
				_react2.default.createElement(
					_reactNative.View,
					{ style: _Style2.default.footer },
					_react2.default.createElement(_Footer2.default, null)
				)
			);
		}
	}]);
	return BaggageClaim;
}(_react.Component);

var mapStateToProps = function mapStateToProps(_ref) {
	var departure = _ref.departure;
	var wheelchairNumber = departure.wheelchairNumber,
	    runType = departure.runType;


	return { wheelchairNumber: wheelchairNumber, runType: runType };
};

exports.default = (0, _reactRedux.connect)(mapStateToProps, {
	addDestination: _actions.addDestination
})(BaggageClaim);
}, 589, null, "Runner_SNA/src/components/BaggageClaim.js");
__d(/* Runner_SNA/src/components/Closing.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
	value: true
});

var _react = require(282    ); // 282 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(12            ); // 12 = react-native

var _reactRedux = require(402          ); // 402 = react-redux

var _actions = require(451         ); // 451 = ../actions

var _firebaseService = require(559                       ); // 559 = ../utils/firebaseService

var _common = require(501       ); // 501 = ./common

var _Footer = require(562       ); // 562 = ./Footer

var _Footer2 = babelHelpers.interopRequireDefault(_Footer);

var _Style = require(554      ); // 554 = ./Style

var _Style2 = babelHelpers.interopRequireDefault(_Style);

var _reactNativeRouterFlux = require(453                       ); // 453 = react-native-router-flux

var Closing = function (_Component) {
	babelHelpers.inherits(Closing, _Component);

	function Closing(props) {
		babelHelpers.classCallCheck(this, Closing);

		var _this = babelHelpers.possibleConstructorReturn(this, (Closing.__proto__ || Object.getPrototypeOf(Closing)).call(this, props));

		_this.state = {
			text: '',
			arrivalTime: Date.now()
		};
		console.log('CLOSING', props);
		return _this;
	}

	babelHelpers.createClass(Closing, [{
		key: 'onButtonPress',
		value: function onButtonPress() {
			if (this.props.runType === 'departure') {
				(0, _firebaseService.writeDepartureEnd)(this.props, this.state.text, this.state.arrivalTime);
			}
			if (this.props.runType === 'arrival') {
				(0, _firebaseService.writeArrivalEnd)(this.props, this.state.text, this.state.arrivalTime);
			}
			this.props.returnToStart();
		}
	}, {
		key: 'render',
		value: function render() {
			var _this2 = this;

			return _react2.default.createElement(
				_reactNative.View,
				{ style: _Style2.default.container },
				_react2.default.createElement(
					_reactNative.View,
					{ style: _Style2.default.content },
					_react2.default.createElement(_reactNative.TextInput, babelHelpers.extends({}, this.props, {
						editable: true,
						multiline: true,
						numberOfLines: 10,
						value: this.state.text,
						onChangeText: function onChangeText(text) {
							return _this2.setState({ text: text });
						},
						placeholder: 'Add comment...'
					})),
					_react2.default.createElement(
						_common.CardSection,
						null,
						_react2.default.createElement(
							_common.Button,
							{ onPress: this.onButtonPress.bind(this) },
							'Submit Comment and Begin New Task'
						)
					)
				)
			);
		}
	}]);
	return Closing;
}(_react.Component);

var mapStateToProps = function mapStateToProps(_ref) {
	var departure = _ref.departure;
	var runType = departure.runType,
	    timeStart = departure.timeStart,
	    destinationGate = departure.destinationGate,
	    destination = departure.destination,
	    finalGate = departure.finalGate,
	    timeGateArrival = departure.timeGateArrival;


	return { runType: runType, timeStart: timeStart, destinationGate: destinationGate, destination: destination, finalGate: finalGate, timeGateArrival: timeGateArrival };
};

exports.default = (0, _reactRedux.connect)(mapStateToProps, {
	closeDeparture: _actions.closeDeparture, returnToStart: _actions.returnToStart
})(Closing);
}, 590, null, "Runner_SNA/src/components/Closing.js");
;require(193);
;require(0);
//# sourceMappingURL=/index.android.map?platform=android